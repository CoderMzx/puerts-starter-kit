
    declare namespace CS {
    //keep type incompatibility / 此属性保持类型不兼容
    const __keep_incompatibility: unique symbol;
    interface $Ref<T> {
        value: T
    }
    namespace System {
        interface Array$1<T> extends System.Array {
            get_Item(index: number):T;
            set_Item(index: number, value: T):void;
        }
    }
    type $Task<T> = System.Threading.Tasks.Task$1<T>
    namespace System {
        class Object
        {
            protected [__keep_incompatibility]: never;
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public GetHashCode () : number
            public GetType () : System.Type
            public ToString () : string
            public static ReferenceEquals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        class String extends System.Object implements System.ICloneable, System.Collections.IEnumerable, System.IComparable, System.IComparable$1<string>, System.IConvertible, System.IEquatable$1<string>, System.Collections.Generic.IEnumerable$1<number>
        {
            protected [__keep_incompatibility]: never;
            public static Empty : string
            public get Chars(): number;
            public get Length(): number;
            public static Join ($separator: string, ...value: string[]) : string
            public static Join ($separator: string, ...values: any[]) : string
            public static Join ($separator: string, $values: System.Collections.Generic.IEnumerable$1<string>) : string
            public static Join ($separator: string, $value: System.Array$1<string>, $startIndex: number, $count: number) : string
            public Equals ($obj: any) : boolean
            public Equals ($value: string) : boolean
            public Equals ($value: string, $comparisonType: System.StringComparison) : boolean
            public static Equals ($a: string, $b: string) : boolean
            public static Equals ($a: string, $b: string, $comparisonType: System.StringComparison) : boolean
            public static op_Equality ($a: string, $b: string) : boolean
            public static op_Inequality ($a: string, $b: string) : boolean
            public get_Chars ($index: number) : number
            public CopyTo ($sourceIndex: number, $destination: System.Array$1<number>, $destinationIndex: number, $count: number) : void
            public ToCharArray () : System.Array$1<number>
            public ToCharArray ($startIndex: number, $length: number) : System.Array$1<number>
            public static IsNullOrEmpty ($value: string) : boolean
            public static IsNullOrWhiteSpace ($value: string) : boolean
            public Split (...separator: number[]) : System.Array$1<string>
            public Split ($separator: System.Array$1<number>, $count: number) : System.Array$1<string>
            public Split ($separator: System.Array$1<number>, $options: System.StringSplitOptions) : System.Array$1<string>
            public Split ($separator: System.Array$1<number>, $count: number, $options: System.StringSplitOptions) : System.Array$1<string>
            public Split ($separator: System.Array$1<string>, $options: System.StringSplitOptions) : System.Array$1<string>
            public Split ($separator: System.Array$1<string>, $count: number, $options: System.StringSplitOptions) : System.Array$1<string>
            public Substring ($startIndex: number) : string
            public Substring ($startIndex: number, $length: number) : string
            public Trim (...trimChars: number[]) : string
            public TrimStart (...trimChars: number[]) : string
            public TrimEnd (...trimChars: number[]) : string
            public IsNormalized () : boolean
            public IsNormalized ($normalizationForm: System.Text.NormalizationForm) : boolean
            public Normalize () : string
            public Normalize ($normalizationForm: System.Text.NormalizationForm) : string
            public static Compare ($strA: string, $strB: string) : number
            public static Compare ($strA: string, $strB: string, $ignoreCase: boolean) : number
            public static Compare ($strA: string, $strB: string, $comparisonType: System.StringComparison) : number
            public static Compare ($strA: string, $strB: string, $culture: System.Globalization.CultureInfo, $options: System.Globalization.CompareOptions) : number
            public static Compare ($strA: string, $strB: string, $ignoreCase: boolean, $culture: System.Globalization.CultureInfo) : number
            public static Compare ($strA: string, $indexA: number, $strB: string, $indexB: number, $length: number) : number
            public static Compare ($strA: string, $indexA: number, $strB: string, $indexB: number, $length: number, $ignoreCase: boolean) : number
            public static Compare ($strA: string, $indexA: number, $strB: string, $indexB: number, $length: number, $ignoreCase: boolean, $culture: System.Globalization.CultureInfo) : number
            public static Compare ($strA: string, $indexA: number, $strB: string, $indexB: number, $length: number, $culture: System.Globalization.CultureInfo, $options: System.Globalization.CompareOptions) : number
            public static Compare ($strA: string, $indexA: number, $strB: string, $indexB: number, $length: number, $comparisonType: System.StringComparison) : number
            public CompareTo ($value: any) : number
            public CompareTo ($strB: string) : number
            public static CompareOrdinal ($strA: string, $strB: string) : number
            public static CompareOrdinal ($strA: string, $indexA: number, $strB: string, $indexB: number, $length: number) : number
            public Contains ($value: string) : boolean
            public EndsWith ($value: string) : boolean
            public EndsWith ($value: string, $comparisonType: System.StringComparison) : boolean
            public EndsWith ($value: string, $ignoreCase: boolean, $culture: System.Globalization.CultureInfo) : boolean
            public IndexOf ($value: number) : number
            public IndexOf ($value: number, $startIndex: number) : number
            public IndexOfAny ($anyOf: System.Array$1<number>) : number
            public IndexOfAny ($anyOf: System.Array$1<number>, $startIndex: number) : number
            public IndexOf ($value: string) : number
            public IndexOf ($value: string, $startIndex: number) : number
            public IndexOf ($value: string, $startIndex: number, $count: number) : number
            public IndexOf ($value: string, $comparisonType: System.StringComparison) : number
            public IndexOf ($value: string, $startIndex: number, $comparisonType: System.StringComparison) : number
            public IndexOf ($value: string, $startIndex: number, $count: number, $comparisonType: System.StringComparison) : number
            public LastIndexOf ($value: number) : number
            public LastIndexOf ($value: number, $startIndex: number) : number
            public LastIndexOfAny ($anyOf: System.Array$1<number>) : number
            public LastIndexOfAny ($anyOf: System.Array$1<number>, $startIndex: number) : number
            public LastIndexOf ($value: string) : number
            public LastIndexOf ($value: string, $startIndex: number) : number
            public LastIndexOf ($value: string, $startIndex: number, $count: number) : number
            public LastIndexOf ($value: string, $comparisonType: System.StringComparison) : number
            public LastIndexOf ($value: string, $startIndex: number, $comparisonType: System.StringComparison) : number
            public LastIndexOf ($value: string, $startIndex: number, $count: number, $comparisonType: System.StringComparison) : number
            public PadLeft ($totalWidth: number) : string
            public PadLeft ($totalWidth: number, $paddingChar: number) : string
            public PadRight ($totalWidth: number) : string
            public PadRight ($totalWidth: number, $paddingChar: number) : string
            public StartsWith ($value: string) : boolean
            public StartsWith ($value: string, $comparisonType: System.StringComparison) : boolean
            public StartsWith ($value: string, $ignoreCase: boolean, $culture: System.Globalization.CultureInfo) : boolean
            public ToLower () : string
            public ToLower ($culture: System.Globalization.CultureInfo) : string
            public ToLowerInvariant () : string
            public ToUpper () : string
            public ToUpper ($culture: System.Globalization.CultureInfo) : string
            public ToUpperInvariant () : string
            public ToString () : string
            public ToString ($provider: System.IFormatProvider) : string
            public Clone () : any
            public Trim () : string
            public Insert ($startIndex: number, $value: string) : string
            public Replace ($oldChar: number, $newChar: number) : string
            public Replace ($oldValue: string, $newValue: string) : string
            public Remove ($startIndex: number, $count: number) : string
            public Remove ($startIndex: number) : string
            public static Format ($format: string, $arg0: any) : string
            public static Format ($format: string, $arg0: any, $arg1: any) : string
            public static Format ($format: string, $arg0: any, $arg1: any, $arg2: any) : string
            public static Format ($format: string, ...args: any[]) : string
            public static Format ($provider: System.IFormatProvider, $format: string, $arg0: any) : string
            public static Format ($provider: System.IFormatProvider, $format: string, $arg0: any, $arg1: any) : string
            public static Format ($provider: System.IFormatProvider, $format: string, $arg0: any, $arg1: any, $arg2: any) : string
            public static Format ($provider: System.IFormatProvider, $format: string, ...args: any[]) : string
            public static Copy ($str: string) : string
            public static Concat ($arg0: any) : string
            public static Concat ($arg0: any, $arg1: any) : string
            public static Concat ($arg0: any, $arg1: any, $arg2: any) : string
            public static Concat ($arg0: any, $arg1: any, $arg2: any, $arg3: any) : string
            public static Concat (...args: any[]) : string
            public static Concat ($values: System.Collections.Generic.IEnumerable$1<string>) : string
            public static Concat ($str0: string, $str1: string) : string
            public static Concat ($str0: string, $str1: string, $str2: string) : string
            public static Concat ($str0: string, $str1: string, $str2: string, $str3: string) : string
            public static Concat (...values: string[]) : string
            public static Intern ($str: string) : string
            public static IsInterned ($str: string) : string
            public GetTypeCode () : System.TypeCode
            public GetEnumerator () : System.CharEnumerator
            public IndexOf ($value: number, $startIndex: number, $count: number) : number
            public IndexOfAny ($anyOf: System.Array$1<number>, $startIndex: number, $count: number) : number
            public LastIndexOf ($value: number, $startIndex: number, $count: number) : number
            public LastIndexOfAny ($anyOf: System.Array$1<number>, $startIndex: number, $count: number) : number
            public constructor ($value: System.Array$1<number>, $startIndex: number, $length: number)
            public constructor ($value: System.Array$1<number>)
            public constructor ($c: number, $count: number)
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        interface String {
            AsReadOnlySpan () : System.ReadOnlySpan$1<number>;
            IsNormalized () : boolean;
            IsNormalized ($normalizationForm: System.Text.NormalizationForm) : boolean;
            Normalize () : string;
            Normalize ($normalizationForm: System.Text.NormalizationForm) : string;
        }
        interface ICloneable
        {
            Clone () : any
        }
        interface IComparable
        {
            CompareTo ($obj: any) : number
        }
        interface IComparable$1<T>
        {
        }
        interface IConvertible
        {
            GetTypeCode () : System.TypeCode
            ToBoolean ($provider: System.IFormatProvider) : boolean
            ToChar ($provider: System.IFormatProvider) : number
            ToSByte ($provider: System.IFormatProvider) : number
            ToByte ($provider: System.IFormatProvider) : number
            ToInt16 ($provider: System.IFormatProvider) : number
            ToUInt16 ($provider: System.IFormatProvider) : number
            ToInt32 ($provider: System.IFormatProvider) : number
            ToUInt32 ($provider: System.IFormatProvider) : number
            ToInt64 ($provider: System.IFormatProvider) : bigint
            ToUInt64 ($provider: System.IFormatProvider) : bigint
            ToSingle ($provider: System.IFormatProvider) : number
            ToDouble ($provider: System.IFormatProvider) : number
            ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            ToDateTime ($provider: System.IFormatProvider) : Date
            ToString ($provider: System.IFormatProvider) : string
            ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
        }
        interface IEquatable$1<T>
        {
        }
        class ValueType extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class Char extends System.ValueType implements System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>
        {
            protected [__keep_incompatibility]: never;
            public static MaxValue : number
            public static MinValue : number
            public Equals ($obj: any) : boolean
            public Equals ($obj: number) : boolean
            public CompareTo ($value: any) : number
            public CompareTo ($value: number) : number
            public ToString () : string
            public ToString ($provider: System.IFormatProvider) : string
            public static ToString ($c: number) : string
            public static Parse ($s: string) : number
            public static TryParse ($s: string, $result: $Ref<number>) : boolean
            public static IsDigit ($c: number) : boolean
            public static IsLetter ($c: number) : boolean
            public static IsWhiteSpace ($c: number) : boolean
            public static IsUpper ($c: number) : boolean
            public static IsLower ($c: number) : boolean
            public static IsPunctuation ($c: number) : boolean
            public static IsLetterOrDigit ($c: number) : boolean
            public static ToUpper ($c: number, $culture: System.Globalization.CultureInfo) : number
            public static ToUpper ($c: number) : number
            public static ToUpperInvariant ($c: number) : number
            public static ToLower ($c: number, $culture: System.Globalization.CultureInfo) : number
            public static ToLower ($c: number) : number
            public static ToLowerInvariant ($c: number) : number
            public GetTypeCode () : System.TypeCode
            public static IsControl ($c: number) : boolean
            public static IsControl ($s: string, $index: number) : boolean
            public static IsDigit ($s: string, $index: number) : boolean
            public static IsLetter ($s: string, $index: number) : boolean
            public static IsLetterOrDigit ($s: string, $index: number) : boolean
            public static IsLower ($s: string, $index: number) : boolean
            public static IsNumber ($c: number) : boolean
            public static IsNumber ($s: string, $index: number) : boolean
            public static IsPunctuation ($s: string, $index: number) : boolean
            public static IsSeparator ($c: number) : boolean
            public static IsSeparator ($s: string, $index: number) : boolean
            public static IsSurrogate ($c: number) : boolean
            public static IsSurrogate ($s: string, $index: number) : boolean
            public static IsSymbol ($c: number) : boolean
            public static IsSymbol ($s: string, $index: number) : boolean
            public static IsUpper ($s: string, $index: number) : boolean
            public static IsWhiteSpace ($s: string, $index: number) : boolean
            public static GetUnicodeCategory ($c: number) : System.Globalization.UnicodeCategory
            public static GetUnicodeCategory ($s: string, $index: number) : System.Globalization.UnicodeCategory
            public static GetNumericValue ($c: number) : number
            public static GetNumericValue ($s: string, $index: number) : number
            public static IsHighSurrogate ($c: number) : boolean
            public static IsHighSurrogate ($s: string, $index: number) : boolean
            public static IsLowSurrogate ($c: number) : boolean
            public static IsLowSurrogate ($s: string, $index: number) : boolean
            public static IsSurrogatePair ($s: string, $index: number) : boolean
            public static IsSurrogatePair ($highSurrogate: number, $lowSurrogate: number) : boolean
            public static ConvertFromUtf32 ($utf32: number) : string
            public static ConvertToUtf32 ($highSurrogate: number, $lowSurrogate: number) : number
            public static ConvertToUtf32 ($s: string, $index: number) : number
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public static Equals ($objA: any, $objB: any) : boolean
        }
        interface IDisposable
        {
            Dispose () : void
        }
        class Int32 extends System.ValueType implements System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static MaxValue : number
            public static MinValue : number
            public CompareTo ($value: any) : number
            public CompareTo ($value: number) : number
            public Equals ($obj: any) : boolean
            public Equals ($obj: number) : boolean
            public ToString () : string
            public ToString ($format: string) : string
            public ToString ($provider: System.IFormatProvider) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public static Parse ($s: string) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles) : number
            public static Parse ($s: string, $provider: System.IFormatProvider) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider) : number
            public static TryParse ($s: string, $result: $Ref<number>) : boolean
            public static TryParse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider, $result: $Ref<number>) : boolean
            public GetTypeCode () : System.TypeCode
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static Equals ($objA: any, $objB: any) : boolean
        }
        interface IFormattable
        {
            ToString ($format: string, $formatProvider: System.IFormatProvider) : string
        }
        class Void extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class Boolean extends System.ValueType implements System.IComparable, System.IComparable$1<boolean>, System.IConvertible, System.IEquatable$1<boolean>
        {
            protected [__keep_incompatibility]: never;
            public static TrueString : string
            public static FalseString : string
            public ToString () : string
            public ToString ($provider: System.IFormatProvider) : string
            public Equals ($obj: any) : boolean
            public Equals ($obj: boolean) : boolean
            public CompareTo ($obj: any) : number
            public CompareTo ($value: boolean) : number
            public static Parse ($value: string) : boolean
            public static TryParse ($value: string, $result: $Ref<boolean>) : boolean
            public GetTypeCode () : System.TypeCode
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class SpanExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static AsReadOnlySpan ($text: string) : System.ReadOnlySpan$1<number>
            public static IndexOf ($span: System.Span$1<number>, $value: number) : number
            public static IndexOf ($span: System.Span$1<number>, $value: System.ReadOnlySpan$1<number>) : number
            public static SequenceEqual ($first: System.Span$1<number>, $second: System.ReadOnlySpan$1<number>) : boolean
            public static IndexOf ($span: System.ReadOnlySpan$1<number>, $value: number) : number
            public static IndexOf ($span: System.ReadOnlySpan$1<number>, $value: System.ReadOnlySpan$1<number>) : number
            public static IndexOfAny ($span: System.Span$1<number>, $value0: number, $value1: number) : number
            public static IndexOfAny ($span: System.Span$1<number>, $value0: number, $value1: number, $value2: number) : number
            public static IndexOfAny ($span: System.Span$1<number>, $values: System.ReadOnlySpan$1<number>) : number
            public static IndexOfAny ($span: System.ReadOnlySpan$1<number>, $value0: number, $value1: number) : number
            public static IndexOfAny ($span: System.ReadOnlySpan$1<number>, $value0: number, $value1: number, $value2: number) : number
            public static IndexOfAny ($span: System.ReadOnlySpan$1<number>, $values: System.ReadOnlySpan$1<number>) : number
            public static SequenceEqual ($first: System.ReadOnlySpan$1<number>, $second: System.ReadOnlySpan$1<number>) : boolean
            public static StartsWith ($span: System.Span$1<number>, $value: System.ReadOnlySpan$1<number>) : boolean
            public static StartsWith ($span: System.ReadOnlySpan$1<number>, $value: System.ReadOnlySpan$1<number>) : boolean
        }
        class Byte extends System.ValueType implements System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static MaxValue : number
            public static MinValue : number
            public CompareTo ($value: any) : number
            public CompareTo ($value: number) : number
            public Equals ($obj: any) : boolean
            public Equals ($obj: number) : boolean
            public static Parse ($s: string) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles) : number
            public static Parse ($s: string, $provider: System.IFormatProvider) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider) : number
            public static TryParse ($s: string, $result: $Ref<number>) : boolean
            public static TryParse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider, $result: $Ref<number>) : boolean
            public ToString () : string
            public ToString ($format: string) : string
            public ToString ($provider: System.IFormatProvider) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public GetTypeCode () : System.TypeCode
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class Span$1<T> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class ReadOnlySpan$1<T> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class Array extends System.Object implements System.ICloneable, System.Collections.IEnumerable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
            public get LongLength(): bigint;
            public get IsFixedSize(): boolean;
            public get IsReadOnly(): boolean;
            public get IsSynchronized(): boolean;
            public get SyncRoot(): any;
            public get Length(): number;
            public get Rank(): number;
            public static CreateInstance ($elementType: System.Type, ...lengths: bigint[]) : System.Array
            public CopyTo ($array: System.Array, $index: number) : void
            public Clone () : any
            public static BinarySearch ($array: System.Array, $value: any) : number
            public static Copy ($sourceArray: System.Array, $destinationArray: System.Array, $length: bigint) : void
            public static Copy ($sourceArray: System.Array, $sourceIndex: bigint, $destinationArray: System.Array, $destinationIndex: bigint, $length: bigint) : void
            public CopyTo ($array: System.Array, $index: bigint) : void
            public GetLongLength ($dimension: number) : bigint
            public GetValue ($index: bigint) : any
            public GetValue ($index1: bigint, $index2: bigint) : any
            public GetValue ($index1: bigint, $index2: bigint, $index3: bigint) : any
            public GetValue (...indices: bigint[]) : any
            public static BinarySearch ($array: System.Array, $index: number, $length: number, $value: any) : number
            public static BinarySearch ($array: System.Array, $value: any, $comparer: System.Collections.IComparer) : number
            public static BinarySearch ($array: System.Array, $index: number, $length: number, $value: any, $comparer: System.Collections.IComparer) : number
            public static IndexOf ($array: System.Array, $value: any) : number
            public static IndexOf ($array: System.Array, $value: any, $startIndex: number) : number
            public static IndexOf ($array: System.Array, $value: any, $startIndex: number, $count: number) : number
            public static LastIndexOf ($array: System.Array, $value: any) : number
            public static LastIndexOf ($array: System.Array, $value: any, $startIndex: number) : number
            public static LastIndexOf ($array: System.Array, $value: any, $startIndex: number, $count: number) : number
            public static Reverse ($array: System.Array) : void
            public static Reverse ($array: System.Array, $index: number, $length: number) : void
            public SetValue ($value: any, $index: bigint) : void
            public SetValue ($value: any, $index1: bigint, $index2: bigint) : void
            public SetValue ($value: any, $index1: bigint, $index2: bigint, $index3: bigint) : void
            public SetValue ($value: any, ...indices: bigint[]) : void
            public static Sort ($array: System.Array) : void
            public static Sort ($array: System.Array, $index: number, $length: number) : void
            public static Sort ($array: System.Array, $comparer: System.Collections.IComparer) : void
            public static Sort ($array: System.Array, $index: number, $length: number, $comparer: System.Collections.IComparer) : void
            public static Sort ($keys: System.Array, $items: System.Array) : void
            public static Sort ($keys: System.Array, $items: System.Array, $comparer: System.Collections.IComparer) : void
            public static Sort ($keys: System.Array, $items: System.Array, $index: number, $length: number) : void
            public static Sort ($keys: System.Array, $items: System.Array, $index: number, $length: number, $comparer: System.Collections.IComparer) : void
            public GetEnumerator () : System.Collections.IEnumerator
            public GetLength ($dimension: number) : number
            public GetLowerBound ($dimension: number) : number
            public GetValue (...indices: number[]) : any
            public SetValue ($value: any, ...indices: number[]) : void
            public GetUpperBound ($dimension: number) : number
            public GetValue ($index: number) : any
            public GetValue ($index1: number, $index2: number) : any
            public GetValue ($index1: number, $index2: number, $index3: number) : any
            public SetValue ($value: any, $index: number) : void
            public SetValue ($value: any, $index1: number, $index2: number) : void
            public SetValue ($value: any, $index1: number, $index2: number, $index3: number) : void
            public static CreateInstance ($elementType: System.Type, $length: number) : System.Array
            public static CreateInstance ($elementType: System.Type, $length1: number, $length2: number) : System.Array
            public static CreateInstance ($elementType: System.Type, $length1: number, $length2: number, $length3: number) : System.Array
            public static CreateInstance ($elementType: System.Type, ...lengths: number[]) : System.Array
            public static CreateInstance ($elementType: System.Type, $lengths: System.Array$1<number>, $lowerBounds: System.Array$1<number>) : System.Array
            public static Clear ($array: System.Array, $index: number, $length: number) : void
            public static Copy ($sourceArray: System.Array, $destinationArray: System.Array, $length: number) : void
            public static Copy ($sourceArray: System.Array, $sourceIndex: number, $destinationArray: System.Array, $destinationIndex: number, $length: number) : void
            public static ConstrainedCopy ($sourceArray: System.Array, $sourceIndex: number, $destinationArray: System.Array, $destinationIndex: number, $length: number) : void
            public Initialize () : void
        }
        class ArraySegment$1<T> extends System.ValueType implements System.Collections.IEnumerable, System.Collections.Generic.IList$1<T>, System.Collections.Generic.IReadOnlyCollection$1<T>, System.Collections.Generic.IReadOnlyList$1<T>, System.Collections.Generic.ICollection$1<T>, System.Collections.Generic.IEnumerable$1<T>
        {
            protected [__keep_incompatibility]: never;
            public GetEnumerator () : System.Collections.Generic.IEnumerator$1<T>
        }
        class TupleExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class Tuple$1<T1> extends System.Object implements System.Runtime.CompilerServices.ITuple, System.ITupleInternal, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        interface ITupleInternal extends System.Runtime.CompilerServices.ITuple
        {
        }
        class Tuple$2<T1, T2> extends System.Object implements System.Runtime.CompilerServices.ITuple, System.ITupleInternal, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class Tuple$3<T1, T2, T3> extends System.Object implements System.Runtime.CompilerServices.ITuple, System.ITupleInternal, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class Tuple$4<T1, T2, T3, T4> extends System.Object implements System.Runtime.CompilerServices.ITuple, System.ITupleInternal, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class Tuple$5<T1, T2, T3, T4, T5> extends System.Object implements System.Runtime.CompilerServices.ITuple, System.ITupleInternal, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class Tuple$6<T1, T2, T3, T4, T5, T6> extends System.Object implements System.Runtime.CompilerServices.ITuple, System.ITupleInternal, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class Tuple$7<T1, T2, T3, T4, T5, T6, T7> extends System.Object implements System.Runtime.CompilerServices.ITuple, System.ITupleInternal, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class Tuple$8<T1, T2, T3, T4, T5, T6, T7, TRest> extends System.Object implements System.Runtime.CompilerServices.ITuple, System.ITupleInternal, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class ValueTuple$1<T1> extends System.ValueType implements System.Runtime.CompilerServices.ITuple, System.IComparable, System.IComparable$1<System.ValueTuple$1<T1>>, System.IValueTupleInternal, System.Collections.IStructuralComparable, System.IEquatable$1<System.ValueTuple$1<T1>>, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        interface IValueTupleInternal extends System.Runtime.CompilerServices.ITuple
        {
        }
        class ValueTuple$2<T1, T2> extends System.ValueType implements System.Runtime.CompilerServices.ITuple, System.IComparable, System.IComparable$1<System.ValueTuple$2<T1, T2>>, System.IValueTupleInternal, System.Collections.IStructuralComparable, System.IEquatable$1<System.ValueTuple$2<T1, T2>>, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class ValueTuple$3<T1, T2, T3> extends System.ValueType implements System.Runtime.CompilerServices.ITuple, System.IComparable, System.IComparable$1<System.ValueTuple$3<T1, T2, T3>>, System.IValueTupleInternal, System.Collections.IStructuralComparable, System.IEquatable$1<System.ValueTuple$3<T1, T2, T3>>, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class ValueTuple$4<T1, T2, T3, T4> extends System.ValueType implements System.Runtime.CompilerServices.ITuple, System.IComparable, System.IComparable$1<System.ValueTuple$4<T1, T2, T3, T4>>, System.IValueTupleInternal, System.Collections.IStructuralComparable, System.IEquatable$1<System.ValueTuple$4<T1, T2, T3, T4>>, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class ValueTuple$5<T1, T2, T3, T4, T5> extends System.ValueType implements System.Runtime.CompilerServices.ITuple, System.IComparable, System.IComparable$1<System.ValueTuple$5<T1, T2, T3, T4, T5>>, System.IValueTupleInternal, System.Collections.IStructuralComparable, System.IEquatable$1<System.ValueTuple$5<T1, T2, T3, T4, T5>>, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class ValueTuple$6<T1, T2, T3, T4, T5, T6> extends System.ValueType implements System.Runtime.CompilerServices.ITuple, System.IComparable, System.IComparable$1<System.ValueTuple$6<T1, T2, T3, T4, T5, T6>>, System.IValueTupleInternal, System.Collections.IStructuralComparable, System.IEquatable$1<System.ValueTuple$6<T1, T2, T3, T4, T5, T6>>, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class ValueTuple$7<T1, T2, T3, T4, T5, T6, T7> extends System.ValueType implements System.Runtime.CompilerServices.ITuple, System.IComparable, System.IComparable$1<System.ValueTuple$7<T1, T2, T3, T4, T5, T6, T7>>, System.IValueTupleInternal, System.Collections.IStructuralComparable, System.IEquatable$1<System.ValueTuple$7<T1, T2, T3, T4, T5, T6, T7>>, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class ValueTuple$8<T1, T2, T3, T4, T5, T6, T7, TRest> extends System.ValueType implements System.Runtime.CompilerServices.ITuple, System.IComparable, System.IComparable$1<System.ValueTuple$8<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.IValueTupleInternal, System.Collections.IStructuralComparable, System.IEquatable$1<System.ValueTuple$8<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public CompareTo ($obj: any) : number
        }
        class ValueTuple extends System.ValueType implements System.Runtime.CompilerServices.ITuple, System.IComparable, System.IComparable$1<System.ValueTuple>, System.IValueTupleInternal, System.Collections.IStructuralComparable, System.IEquatable$1<System.ValueTuple>, System.Collections.IStructuralEquatable
        {
            protected [__keep_incompatibility]: never;
            public Equals ($obj: any) : boolean
            public Equals ($other: System.ValueTuple) : boolean
            public CompareTo ($other: System.ValueTuple) : number
            public static Create () : System.ValueTuple
            public CompareTo ($obj: any) : number
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class Type extends System.Reflection.MemberInfo implements System.Reflection.IReflect, System.Runtime.InteropServices._Type, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
        {
            protected [__keep_incompatibility]: never;
            public static FilterAttribute : System.Reflection.MemberFilter
            public static FilterName : System.Reflection.MemberFilter
            public static FilterNameIgnoreCase : System.Reflection.MemberFilter
            public static Missing : any
            public static Delimiter : number
            public static EmptyTypes : System.Array$1<System.Type>
            public get MemberType(): System.Reflection.MemberTypes;
            public get DeclaringType(): System.Type;
            public get DeclaringMethod(): System.Reflection.MethodBase;
            public get ReflectedType(): System.Type;
            public get StructLayoutAttribute(): System.Runtime.InteropServices.StructLayoutAttribute;
            public get GUID(): System.Guid;
            public static get DefaultBinder(): System.Reflection.Binder;
            public get Module(): System.Reflection.Module;
            public get Assembly(): System.Reflection.Assembly;
            public get TypeHandle(): System.RuntimeTypeHandle;
            public get FullName(): string;
            public get Namespace(): string;
            public get AssemblyQualifiedName(): string;
            public get BaseType(): System.Type;
            public get TypeInitializer(): System.Reflection.ConstructorInfo;
            public get IsNested(): boolean;
            public get Attributes(): System.Reflection.TypeAttributes;
            public get GenericParameterAttributes(): System.Reflection.GenericParameterAttributes;
            public get IsVisible(): boolean;
            public get IsNotPublic(): boolean;
            public get IsPublic(): boolean;
            public get IsNestedPublic(): boolean;
            public get IsNestedPrivate(): boolean;
            public get IsNestedFamily(): boolean;
            public get IsNestedAssembly(): boolean;
            public get IsNestedFamANDAssem(): boolean;
            public get IsNestedFamORAssem(): boolean;
            public get IsAutoLayout(): boolean;
            public get IsLayoutSequential(): boolean;
            public get IsExplicitLayout(): boolean;
            public get IsClass(): boolean;
            public get IsInterface(): boolean;
            public get IsValueType(): boolean;
            public get IsAbstract(): boolean;
            public get IsSealed(): boolean;
            public get IsEnum(): boolean;
            public get IsSpecialName(): boolean;
            public get IsImport(): boolean;
            public get IsSerializable(): boolean;
            public get IsAnsiClass(): boolean;
            public get IsUnicodeClass(): boolean;
            public get IsAutoClass(): boolean;
            public get IsArray(): boolean;
            public get IsGenericType(): boolean;
            public get IsGenericTypeDefinition(): boolean;
            public get IsConstructedGenericType(): boolean;
            public get IsGenericParameter(): boolean;
            public get GenericParameterPosition(): number;
            public get ContainsGenericParameters(): boolean;
            public get IsByRef(): boolean;
            public get IsPointer(): boolean;
            public get IsPrimitive(): boolean;
            public get IsCOMObject(): boolean;
            public get HasElementType(): boolean;
            public get IsContextful(): boolean;
            public get IsMarshalByRef(): boolean;
            public get GenericTypeArguments(): System.Array$1<System.Type>;
            public get IsSecurityCritical(): boolean;
            public get IsSecuritySafeCritical(): boolean;
            public get IsSecurityTransparent(): boolean;
            public get UnderlyingSystemType(): System.Type;
            public static GetType ($typeName: string, $assemblyResolver: System.Func$2<System.Reflection.AssemblyName, System.Reflection.Assembly>, $typeResolver: System.Func$4<System.Reflection.Assembly, string, boolean, System.Type>) : System.Type
            public static GetType ($typeName: string, $assemblyResolver: System.Func$2<System.Reflection.AssemblyName, System.Reflection.Assembly>, $typeResolver: System.Func$4<System.Reflection.Assembly, string, boolean, System.Type>, $throwOnError: boolean) : System.Type
            public static GetType ($typeName: string, $assemblyResolver: System.Func$2<System.Reflection.AssemblyName, System.Reflection.Assembly>, $typeResolver: System.Func$4<System.Reflection.Assembly, string, boolean, System.Type>, $throwOnError: boolean, $ignoreCase: boolean) : System.Type
            public MakePointerType () : System.Type
            public MakeByRefType () : System.Type
            public MakeArrayType () : System.Type
            public MakeArrayType ($rank: number) : System.Type
            public static GetTypeFromProgID ($progID: string) : System.Type
            public static GetTypeFromProgID ($progID: string, $throwOnError: boolean) : System.Type
            public static GetTypeFromProgID ($progID: string, $server: string) : System.Type
            public static GetTypeFromProgID ($progID: string, $server: string, $throwOnError: boolean) : System.Type
            public static GetTypeFromCLSID ($clsid: System.Guid) : System.Type
            public static GetTypeFromCLSID ($clsid: System.Guid, $throwOnError: boolean) : System.Type
            public static GetTypeFromCLSID ($clsid: System.Guid, $server: string) : System.Type
            public static GetTypeFromCLSID ($clsid: System.Guid, $server: string, $throwOnError: boolean) : System.Type
            public static GetTypeCode ($type: System.Type) : System.TypeCode
            public InvokeMember ($name: string, $invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $target: any, $args: System.Array$1<any>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>, $culture: System.Globalization.CultureInfo, $namedParameters: System.Array$1<string>) : any
            public InvokeMember ($name: string, $invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $target: any, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo) : any
            public InvokeMember ($name: string, $invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $target: any, $args: System.Array$1<any>) : any
            public static GetTypeHandle ($o: any) : System.RuntimeTypeHandle
            public GetArrayRank () : number
            public GetConstructor ($bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $callConvention: System.Reflection.CallingConventions, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>) : System.Reflection.ConstructorInfo
            public GetConstructor ($bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>) : System.Reflection.ConstructorInfo
            public GetConstructor ($types: System.Array$1<System.Type>) : System.Reflection.ConstructorInfo
            public GetConstructors () : System.Array$1<System.Reflection.ConstructorInfo>
            public GetConstructors ($bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.ConstructorInfo>
            public GetMethod ($name: string, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $callConvention: System.Reflection.CallingConventions, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>) : System.Reflection.MethodInfo
            public GetMethod ($name: string, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>) : System.Reflection.MethodInfo
            public GetMethod ($name: string, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>) : System.Reflection.MethodInfo
            public GetMethod ($name: string, $types: System.Array$1<System.Type>) : System.Reflection.MethodInfo
            public GetMethod ($name: string, $bindingAttr: System.Reflection.BindingFlags) : System.Reflection.MethodInfo
            public GetMethod ($name: string) : System.Reflection.MethodInfo
            public GetMethods () : System.Array$1<System.Reflection.MethodInfo>
            public GetMethods ($bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.MethodInfo>
            public GetField ($name: string, $bindingAttr: System.Reflection.BindingFlags) : System.Reflection.FieldInfo
            public GetField ($name: string) : System.Reflection.FieldInfo
            public GetFields () : System.Array$1<System.Reflection.FieldInfo>
            public GetFields ($bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.FieldInfo>
            public GetInterface ($name: string) : System.Type
            public GetInterface ($name: string, $ignoreCase: boolean) : System.Type
            public GetInterfaces () : System.Array$1<System.Type>
            public FindInterfaces ($filter: System.Reflection.TypeFilter, $filterCriteria: any) : System.Array$1<System.Type>
            public GetEvent ($name: string) : System.Reflection.EventInfo
            public GetEvent ($name: string, $bindingAttr: System.Reflection.BindingFlags) : System.Reflection.EventInfo
            public GetEvents () : System.Array$1<System.Reflection.EventInfo>
            public GetEvents ($bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.EventInfo>
            public GetProperty ($name: string, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $returnType: System.Type, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>) : System.Reflection.PropertyInfo
            public GetProperty ($name: string, $returnType: System.Type, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>) : System.Reflection.PropertyInfo
            public GetProperty ($name: string, $bindingAttr: System.Reflection.BindingFlags) : System.Reflection.PropertyInfo
            public GetProperty ($name: string, $returnType: System.Type, $types: System.Array$1<System.Type>) : System.Reflection.PropertyInfo
            public GetProperty ($name: string, $types: System.Array$1<System.Type>) : System.Reflection.PropertyInfo
            public GetProperty ($name: string, $returnType: System.Type) : System.Reflection.PropertyInfo
            public GetProperty ($name: string) : System.Reflection.PropertyInfo
            public GetProperties ($bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.PropertyInfo>
            public GetProperties () : System.Array$1<System.Reflection.PropertyInfo>
            public GetNestedTypes () : System.Array$1<System.Type>
            public GetNestedTypes ($bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Type>
            public GetNestedType ($name: string) : System.Type
            public GetNestedType ($name: string, $bindingAttr: System.Reflection.BindingFlags) : System.Type
            public GetMember ($name: string) : System.Array$1<System.Reflection.MemberInfo>
            public GetMember ($name: string, $bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.MemberInfo>
            public GetMember ($name: string, $type: System.Reflection.MemberTypes, $bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.MemberInfo>
            public GetMembers () : System.Array$1<System.Reflection.MemberInfo>
            public GetMembers ($bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.MemberInfo>
            public GetDefaultMembers () : System.Array$1<System.Reflection.MemberInfo>
            public FindMembers ($memberType: System.Reflection.MemberTypes, $bindingAttr: System.Reflection.BindingFlags, $filter: System.Reflection.MemberFilter, $filterCriteria: any) : System.Array$1<System.Reflection.MemberInfo>
            public GetGenericParameterConstraints () : System.Array$1<System.Type>
            public MakeGenericType (...typeArguments: System.Type[]) : System.Type
            public GetElementType () : System.Type
            public GetGenericArguments () : System.Array$1<System.Type>
            public GetGenericTypeDefinition () : System.Type
            public GetEnumNames () : System.Array$1<string>
            public GetEnumValues () : System.Array
            public GetEnumUnderlyingType () : System.Type
            public IsEnumDefined ($value: any) : boolean
            public GetEnumName ($value: any) : string
            public IsSubclassOf ($c: System.Type) : boolean
            public IsInstanceOfType ($o: any) : boolean
            public IsAssignableFrom ($c: System.Type) : boolean
            public IsEquivalentTo ($other: System.Type) : boolean
            public static GetTypeArray ($args: System.Array$1<any>) : System.Array$1<System.Type>
            public Equals ($o: any) : boolean
            public Equals ($o: System.Type) : boolean
            public static op_Equality ($left: System.Type, $right: System.Type) : boolean
            public static op_Inequality ($left: System.Type, $right: System.Type) : boolean
            public GetInterfaceMap ($interfaceType: System.Type) : System.Reflection.InterfaceMapping
            public GetType () : System.Type
            public static GetType ($typeName: string) : System.Type
            public static GetType ($typeName: string, $throwOnError: boolean) : System.Type
            public static GetType ($typeName: string, $throwOnError: boolean, $ignoreCase: boolean) : System.Type
            public static ReflectionOnlyGetType ($typeName: string, $throwIfNotFound: boolean, $ignoreCase: boolean) : System.Type
            public static GetTypeFromHandle ($handle: System.RuntimeTypeHandle) : System.Type
            public static op_Equality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
            public static op_Inequality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        interface Type {
            GetRuntimeProperties () : System.Collections.Generic.IEnumerable$1<System.Reflection.PropertyInfo>;
            GetRuntimeEvents () : System.Collections.Generic.IEnumerable$1<System.Reflection.EventInfo>;
            GetRuntimeMethods () : System.Collections.Generic.IEnumerable$1<System.Reflection.MethodInfo>;
            GetRuntimeFields () : System.Collections.Generic.IEnumerable$1<System.Reflection.FieldInfo>;
            GetRuntimeProperty ($name: string) : System.Reflection.PropertyInfo;
            GetRuntimeEvent ($name: string) : System.Reflection.EventInfo;
            GetRuntimeMethod ($name: string, $parameters: System.Array$1<System.Type>) : System.Reflection.MethodInfo;
            GetRuntimeField ($name: string) : System.Reflection.FieldInfo;
            GetTypeInfo () : System.Reflection.TypeInfo;
        }
        class Int64 extends System.ValueType implements System.IComparable, System.IComparable$1<bigint>, System.IConvertible, System.IEquatable$1<bigint>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static MaxValue : bigint
            public static MinValue : bigint
            public CompareTo ($value: any) : number
            public CompareTo ($value: bigint) : number
            public Equals ($obj: any) : boolean
            public Equals ($obj: bigint) : boolean
            public ToString () : string
            public ToString ($provider: System.IFormatProvider) : string
            public ToString ($format: string) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public static Parse ($s: string) : bigint
            public static Parse ($s: string, $style: System.Globalization.NumberStyles) : bigint
            public static Parse ($s: string, $provider: System.IFormatProvider) : bigint
            public static Parse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider) : bigint
            public static TryParse ($s: string, $result: $Ref<bigint>) : boolean
            public static TryParse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider, $result: $Ref<bigint>) : boolean
            public GetTypeCode () : System.TypeCode
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class Delegate extends System.Object implements System.ICloneable, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Method(): System.Reflection.MethodInfo;
            public get Target(): any;
            public static CreateDelegate ($type: System.Type, $firstArgument: any, $method: System.Reflection.MethodInfo, $throwOnBindFailure: boolean) : Function
            public static CreateDelegate ($type: System.Type, $firstArgument: any, $method: System.Reflection.MethodInfo) : Function
            public static CreateDelegate ($type: System.Type, $method: System.Reflection.MethodInfo, $throwOnBindFailure: boolean) : Function
            public static CreateDelegate ($type: System.Type, $method: System.Reflection.MethodInfo) : Function
            public static CreateDelegate ($type: System.Type, $target: any, $method: string) : Function
            public static CreateDelegate ($type: System.Type, $target: System.Type, $method: string, $ignoreCase: boolean, $throwOnBindFailure: boolean) : Function
            public static CreateDelegate ($type: System.Type, $target: System.Type, $method: string) : Function
            public static CreateDelegate ($type: System.Type, $target: System.Type, $method: string, $ignoreCase: boolean) : Function
            public static CreateDelegate ($type: System.Type, $target: any, $method: string, $ignoreCase: boolean, $throwOnBindFailure: boolean) : Function
            public static CreateDelegate ($type: System.Type, $target: any, $method: string, $ignoreCase: boolean) : Function
            public DynamicInvoke (...args: any[]) : any
            public Clone () : any
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public GetInvocationList () : System.Array$1<Function>
            public static Combine ($a: Function, $b: Function) : Function
            public static Combine (...delegates: Function[]) : Function
            public static Remove ($source: Function, $value: Function) : Function
            public static RemoveAll ($source: Function, $value: Function) : Function
            public static op_Equality ($d1: Function, $d2: Function) : boolean
            public static op_Inequality ($d1: Function, $d2: Function) : boolean
        }
        interface Delegate {
            GetMethodInfo () : System.Reflection.MethodInfo;
        }
        interface MulticastDelegate
        { 
        (...args:any[]) : any; 
        Invoke?: (...args:any[]) => any;
        }
        var MulticastDelegate: { new (func: (...args:any[]) => any): MulticastDelegate; }
        interface Converter$2<TInput, TOutput>
        { 
        (input: TInput) : TOutput; 
        Invoke?: (input: TInput) => TOutput;
        }
        interface Action$1<T>
        { 
        (obj: T) : void; 
        Invoke?: (obj: T) => void;
        }
        interface Comparison$1<T>
        { 
        (x: T, y: T) : number; 
        Invoke?: (x: T, y: T) => number;
        }
        interface Predicate$1<T>
        { 
        (obj: T) : boolean; 
        Invoke?: (obj: T) => boolean;
        }
        class Tuple extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class Exception extends System.Object implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public get Data(): System.Collections.IDictionary;
            public get InnerException(): System.Exception;
            public get TargetSite(): System.Reflection.MethodBase;
            public get StackTrace(): string;
            public get HelpLink(): string;
            public set HelpLink(value: string);
            public get Source(): string;
            public set Source(value: string);
            public get HResult(): number;
            public GetBaseException () : System.Exception
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public GetType () : System.Type
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class AggregateException extends System.Exception implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get InnerExceptions(): System.Collections.ObjectModel.ReadOnlyCollection$1<System.Exception>;
            public Handle ($predicate: System.Func$2<System.Exception, boolean>) : void
            public Flatten () : System.AggregateException
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ($innerExceptions: System.Collections.Generic.IEnumerable$1<System.Exception>)
            public constructor (...innerExceptions: System.Exception[])
            public constructor ($message: string, $innerExceptions: System.Collections.Generic.IEnumerable$1<System.Exception>)
            public constructor ($message: string, ...innerExceptions: System.Exception[])
        }
        interface Func$2<T, TResult>
        { 
        (arg: T) : TResult; 
        Invoke?: (arg: T) => TResult;
        }
        class AppContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get BaseDirectory(): string;
            public static get TargetFrameworkName(): string;
            public static GetData ($name: string) : any
            public static TryGetSwitch ($switchName: string, $isEnabled: $Ref<boolean>) : boolean
            public static SetSwitch ($switchName: string, $isEnabled: boolean) : void
        }
        class FormattableString extends System.Object implements System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public get Format(): string;
            public get ArgumentCount(): number;
            public GetArguments () : System.Array$1<any>
            public GetArgument ($index: number) : any
            public ToString ($formatProvider: System.IFormatProvider) : string
            public static Invariant ($formattable: System.FormattableString) : string
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
        }
        interface IFormatProvider
        {
            GetFormat ($formatType: System.Type) : any
        }
        class LocalDataStoreSlot extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class SystemException extends System.Exception implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class AccessViolationException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        interface Action
        { 
        () : void; 
        Invoke?: () => void;
        }
        var Action: { new (func: () => void): Action; }
        interface IAsyncResult
        {
            IsCompleted : boolean
            AsyncWaitHandle : System.Threading.WaitHandle
            AsyncState : any
            CompletedSynchronously : boolean
        }
        interface AsyncCallback
        { 
        (ar: System.IAsyncResult) : void; 
        Invoke?: (ar: System.IAsyncResult) => void;
        }
        var AsyncCallback: { new (func: (ar: System.IAsyncResult) => void): AsyncCallback; }
        class IntPtr extends System.ValueType implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public static Zero : System.IntPtr
            public static get Size(): number;
            public ToInt32 () : number
            public ToInt64 () : bigint
            public ToString () : string
            public ToString ($format: string) : string
            public static op_Equality ($value1: System.IntPtr, $value2: System.IntPtr) : boolean
            public static op_Inequality ($value1: System.IntPtr, $value2: System.IntPtr) : boolean
            public static op_Explicit ($value: number) : System.IntPtr
            public static op_Explicit ($value: bigint) : System.IntPtr
            public static op_Explicit ($value: System.IntPtr) : number
            public static op_Explicit ($value: System.IntPtr) : bigint
            public static Add ($pointer: System.IntPtr, $offset: number) : System.IntPtr
            public static Subtract ($pointer: System.IntPtr, $offset: number) : System.IntPtr
            public static op_Addition ($pointer: System.IntPtr, $offset: number) : System.IntPtr
            public static op_Subtraction ($pointer: System.IntPtr, $offset: number) : System.IntPtr
            public constructor ($value: number)
            public constructor ($value: bigint)
            public constructor ()
        }
        class Activator extends System.Object implements System.Runtime.InteropServices._Activator
        {
            protected [__keep_incompatibility]: never;
            public static CreateInstance ($type: System.Type, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo) : any
            public static CreateInstance ($type: System.Type, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>) : any
            public static CreateInstance ($type: System.Type, ...args: any[]) : any
            public static CreateInstance ($type: System.Type, $args: System.Array$1<any>, $activationAttributes: System.Array$1<any>) : any
            public static CreateInstance ($type: System.Type) : any
            public static CreateInstance ($assemblyName: string, $typeName: string) : System.Runtime.Remoting.ObjectHandle
            public static CreateInstance ($assemblyName: string, $typeName: string, $activationAttributes: System.Array$1<any>) : System.Runtime.Remoting.ObjectHandle
            public static CreateInstance ($type: System.Type, $nonPublic: boolean) : any
            public static CreateInstanceFrom ($assemblyFile: string, $typeName: string) : System.Runtime.Remoting.ObjectHandle
            public static CreateInstanceFrom ($assemblyFile: string, $typeName: string, $activationAttributes: System.Array$1<any>) : System.Runtime.Remoting.ObjectHandle
            public static CreateInstance ($assemblyName: string, $typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>) : System.Runtime.Remoting.ObjectHandle
            public static CreateInstanceFrom ($assemblyFile: string, $typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>) : System.Runtime.Remoting.ObjectHandle
            public static CreateInstance ($domain: System.AppDomain, $assemblyName: string, $typeName: string) : System.Runtime.Remoting.ObjectHandle
            public static CreateInstance ($domain: System.AppDomain, $assemblyName: string, $typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>) : System.Runtime.Remoting.ObjectHandle
            public static CreateInstanceFrom ($domain: System.AppDomain, $assemblyFile: string, $typeName: string) : System.Runtime.Remoting.ObjectHandle
            public static CreateInstanceFrom ($domain: System.AppDomain, $assemblyFile: string, $typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>) : System.Runtime.Remoting.ObjectHandle
            public static CreateComInstanceFrom ($assemblyName: string, $typeName: string) : System.Runtime.Remoting.ObjectHandle
            public static CreateComInstanceFrom ($assemblyName: string, $typeName: string, $hashValue: System.Array$1<number>, $hashAlgorithm: System.Configuration.Assemblies.AssemblyHashAlgorithm) : System.Runtime.Remoting.ObjectHandle
            public static GetObject ($type: System.Type, $url: string) : any
            public static GetObject ($type: System.Type, $url: string, $state: any) : any
            public static CreateInstance ($activationContext: System.ActivationContext) : System.Runtime.Remoting.ObjectHandle
            public static CreateInstance ($activationContext: System.ActivationContext, $activationCustomData: System.Array$1<string>) : System.Runtime.Remoting.ObjectHandle
        }
        class Enum extends System.ValueType implements System.IComparable, System.IConvertible, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static Parse ($enumType: System.Type, $value: string) : any
            public static Parse ($enumType: System.Type, $value: string, $ignoreCase: boolean) : any
            public static GetUnderlyingType ($enumType: System.Type) : System.Type
            public static GetValues ($enumType: System.Type) : System.Array
            public static GetName ($enumType: System.Type, $value: any) : string
            public static GetNames ($enumType: System.Type) : System.Array$1<string>
            public static ToObject ($enumType: System.Type, $value: any) : any
            public static IsDefined ($enumType: System.Type, $value: any) : boolean
            public static Format ($enumType: System.Type, $value: any, $format: string) : string
            public ToString () : string
            public CompareTo ($target: any) : number
            public ToString ($format: string) : string
            public HasFlag ($flag: System.Enum) : boolean
            public GetTypeCode () : System.TypeCode
            public static ToObject ($enumType: System.Type, $value: number) : any
            public static ToObject ($enumType: System.Type, $value: bigint) : any
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToString ($provider: System.IFormatProvider) : string
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
        }
        class MarshalByRefObject extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public CreateObjRef ($requestedType: System.Type) : System.Runtime.Remoting.ObjRef
            public GetLifetimeService () : any
            public InitializeLifetimeService () : any
        }
        class AppDomain extends System.MarshalByRefObject implements System.Security.IEvidenceFactory, System._AppDomain
        {
            protected [__keep_incompatibility]: never;
            public get SetupInformation(): System.AppDomainSetup;
            public get ApplicationTrust(): System.Security.Policy.ApplicationTrust;
            public get BaseDirectory(): string;
            public get RelativeSearchPath(): string;
            public get DynamicDirectory(): string;
            public get ShadowCopyFiles(): boolean;
            public get FriendlyName(): string;
            public get Evidence(): System.Security.Policy.Evidence;
            public get PermissionSet(): System.Security.PermissionSet;
            public static get CurrentDomain(): System.AppDomain;
            public get IsHomogenous(): boolean;
            public get IsFullyTrusted(): boolean;
            public get DomainManager(): System.AppDomainManager;
            public get ActivationContext(): System.ActivationContext;
            public get ApplicationIdentity(): System.ApplicationIdentity;
            public get Id(): number;
            public static get MonitoringIsEnabled(): boolean;
            public static set MonitoringIsEnabled(value: boolean);
            public get MonitoringSurvivedMemorySize(): bigint;
            public static get MonitoringSurvivedProcessMemorySize(): bigint;
            public get MonitoringTotalAllocatedMemorySize(): bigint;
            public get MonitoringTotalProcessorTime(): System.TimeSpan;
            public CreateComInstanceFrom ($assemblyName: string, $typeName: string) : System.Runtime.Remoting.ObjectHandle
            public CreateComInstanceFrom ($assemblyFile: string, $typeName: string, $hashValue: System.Array$1<number>, $hashAlgorithm: System.Configuration.Assemblies.AssemblyHashAlgorithm) : System.Runtime.Remoting.ObjectHandle
            public CreateInstance ($assemblyName: string, $typeName: string) : System.Runtime.Remoting.ObjectHandle
            public CreateInstance ($assemblyName: string, $typeName: string, $activationAttributes: System.Array$1<any>) : System.Runtime.Remoting.ObjectHandle
            public CreateInstanceAndUnwrap ($assemblyName: string, $typeName: string) : any
            public CreateInstanceAndUnwrap ($assemblyName: string, $typeName: string, $activationAttributes: System.Array$1<any>) : any
            public CreateInstance ($assemblyName: string, $typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>) : System.Runtime.Remoting.ObjectHandle
            public CreateInstanceAndUnwrap ($assemblyName: string, $typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>) : any
            public CreateInstanceFrom ($assemblyFile: string, $typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>) : System.Runtime.Remoting.ObjectHandle
            public CreateInstanceFromAndUnwrap ($assemblyFile: string, $typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>) : any
            public CreateInstanceFrom ($assemblyFile: string, $typeName: string) : System.Runtime.Remoting.ObjectHandle
            public CreateInstanceFrom ($assemblyFile: string, $typeName: string, $activationAttributes: System.Array$1<any>) : System.Runtime.Remoting.ObjectHandle
            public CreateInstanceFromAndUnwrap ($assemblyName: string, $typeName: string) : any
            public CreateInstanceFromAndUnwrap ($assemblyName: string, $typeName: string, $activationAttributes: System.Array$1<any>) : any
            public DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess) : System.Reflection.Emit.AssemblyBuilder
            public DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $dir: string) : System.Reflection.Emit.AssemblyBuilder
            public DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $assemblyAttributes: System.Collections.Generic.IEnumerable$1<System.Reflection.Emit.CustomAttributeBuilder>) : System.Reflection.Emit.AssemblyBuilder
            public DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $dir: string, $isSynchronized: boolean, $assemblyAttributes: System.Collections.Generic.IEnumerable$1<System.Reflection.Emit.CustomAttributeBuilder>) : System.Reflection.Emit.AssemblyBuilder
            public DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $assemblyAttributes: System.Collections.Generic.IEnumerable$1<System.Reflection.Emit.CustomAttributeBuilder>, $securityContextSource: System.Security.SecurityContextSource) : System.Reflection.Emit.AssemblyBuilder
            public DoCallBack ($callBackDelegate: System.CrossAppDomainDelegate) : void
            public ExecuteAssembly ($assemblyFile: string) : number
            public ExecuteAssembly ($assemblyFile: string, $args: System.Array$1<string>) : number
            public ExecuteAssembly ($assemblyFile: string, $args: System.Array$1<string>, $hashValue: System.Array$1<number>, $hashAlgorithm: System.Configuration.Assemblies.AssemblyHashAlgorithm) : number
            public GetAssemblies () : System.Array$1<System.Reflection.Assembly>
            public GetData ($name: string) : any
            public GetType () : System.Type
            public Load ($assemblyRef: System.Reflection.AssemblyName) : System.Reflection.Assembly
            public Load ($assemblyString: string) : System.Reflection.Assembly
            public Load ($rawAssembly: System.Array$1<number>) : System.Reflection.Assembly
            public Load ($rawAssembly: System.Array$1<number>, $rawSymbolStore: System.Array$1<number>) : System.Reflection.Assembly
            public SetPrincipalPolicy ($policy: System.Security.Principal.PrincipalPolicy) : void
            public SetThreadPrincipal ($principal: System.Security.Principal.IPrincipal) : void
            public static CreateDomain ($friendlyName: string) : System.AppDomain
            public static CreateDomain ($friendlyName: string, $securityInfo: System.Security.Policy.Evidence) : System.AppDomain
            public static CreateDomain ($friendlyName: string, $securityInfo: System.Security.Policy.Evidence, $info: System.AppDomainSetup) : System.AppDomain
            public static CreateDomain ($friendlyName: string, $securityInfo: System.Security.Policy.Evidence, $appBasePath: string, $appRelativeSearchPath: string, $shadowCopyFiles: boolean) : System.AppDomain
            public static CreateDomain ($friendlyName: string, $securityInfo: System.Security.Policy.Evidence, $info: System.AppDomainSetup, $grantSet: System.Security.PermissionSet, ...fullTrustAssemblies: System.Security.Policy.StrongName[]) : System.AppDomain
            public IsFinalizingForUnload () : boolean
            public static Unload ($domain: System.AppDomain) : void
            public SetData ($name: string, $data: any) : void
            public SetData ($name: string, $data: any, $permission: System.Security.IPermission) : void
            public add_AssemblyLoad ($value: System.AssemblyLoadEventHandler) : void
            public remove_AssemblyLoad ($value: System.AssemblyLoadEventHandler) : void
            public add_AssemblyResolve ($value: System.ResolveEventHandler) : void
            public remove_AssemblyResolve ($value: System.ResolveEventHandler) : void
            public add_DomainUnload ($value: System.EventHandler) : void
            public remove_DomainUnload ($value: System.EventHandler) : void
            public add_ProcessExit ($value: System.EventHandler) : void
            public remove_ProcessExit ($value: System.EventHandler) : void
            public add_ResourceResolve ($value: System.ResolveEventHandler) : void
            public remove_ResourceResolve ($value: System.ResolveEventHandler) : void
            public add_TypeResolve ($value: System.ResolveEventHandler) : void
            public remove_TypeResolve ($value: System.ResolveEventHandler) : void
            public add_UnhandledException ($value: System.UnhandledExceptionEventHandler) : void
            public remove_UnhandledException ($value: System.UnhandledExceptionEventHandler) : void
            public add_FirstChanceException ($value: System.EventHandler$1<System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs>) : void
            public remove_FirstChanceException ($value: System.EventHandler$1<System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs>) : void
            public add_ReflectionOnlyAssemblyResolve ($value: System.ResolveEventHandler) : void
            public remove_ReflectionOnlyAssemblyResolve ($value: System.ResolveEventHandler) : void
            public ApplyPolicy ($assemblyName: string) : string
            public static CreateDomain ($friendlyName: string, $securityInfo: System.Security.Policy.Evidence, $appBasePath: string, $appRelativeSearchPath: string, $shadowCopyFiles: boolean, $adInit: System.AppDomainInitializer, $adInitArgs: System.Array$1<string>) : System.AppDomain
            public ExecuteAssemblyByName ($assemblyName: string) : number
            public ExecuteAssemblyByName ($assemblyName: string, ...args: string[]) : number
            public ExecuteAssemblyByName ($assemblyName: System.Reflection.AssemblyName, ...args: string[]) : number
            public IsDefaultAppDomain () : boolean
            public ReflectionOnlyGetAssemblies () : System.Array$1<System.Reflection.Assembly>
            public IsCompatibilitySwitchSet ($value: string) : boolean | null
            public GetTypeInfoCount ($pcTInfo: $Ref<number>) : void
            public GetTypeInfo ($iTInfo: number, $lcid: number, $ppTInfo: System.IntPtr) : void
            public GetIDsOfNames ($riid: $Ref<System.Guid>, $rgszNames: System.IntPtr, $cNames: number, $lcid: number, $rgDispId: System.IntPtr) : void
            public Invoke ($dispIdMember: number, $riid: $Ref<System.Guid>, $lcid: number, $wFlags: number, $pDispParams: System.IntPtr, $pVarResult: System.IntPtr, $pExcepInfo: System.IntPtr, $puArgErr: System.IntPtr) : void
            public Equals ($other: any) : boolean
            public DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $evidence: System.Security.Policy.Evidence) : System.Reflection.Emit.AssemblyBuilder
            public DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $requiredPermissions: System.Security.PermissionSet, $optionalPermissions: System.Security.PermissionSet, $refusedPermissions: System.Security.PermissionSet) : System.Reflection.Emit.AssemblyBuilder
            public DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $dir: string, $evidence: System.Security.Policy.Evidence) : System.Reflection.Emit.AssemblyBuilder
            public DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $dir: string, $requiredPermissions: System.Security.PermissionSet, $optionalPermissions: System.Security.PermissionSet, $refusedPermissions: System.Security.PermissionSet) : System.Reflection.Emit.AssemblyBuilder
            public DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $evidence: System.Security.Policy.Evidence, $requiredPermissions: System.Security.PermissionSet, $optionalPermissions: System.Security.PermissionSet, $refusedPermissions: System.Security.PermissionSet) : System.Reflection.Emit.AssemblyBuilder
            public DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $dir: string, $evidence: System.Security.Policy.Evidence, $requiredPermissions: System.Security.PermissionSet, $optionalPermissions: System.Security.PermissionSet, $refusedPermissions: System.Security.PermissionSet) : System.Reflection.Emit.AssemblyBuilder
            public DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $dir: string, $evidence: System.Security.Policy.Evidence, $requiredPermissions: System.Security.PermissionSet, $optionalPermissions: System.Security.PermissionSet, $refusedPermissions: System.Security.PermissionSet, $isSynchronized: boolean) : System.Reflection.Emit.AssemblyBuilder
            public CreateInstance ($assemblyName: string, $typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>, $securityAttributes: System.Security.Policy.Evidence) : System.Runtime.Remoting.ObjectHandle
            public CreateInstanceFrom ($assemblyFile: string, $typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>, $securityAttributes: System.Security.Policy.Evidence) : System.Runtime.Remoting.ObjectHandle
            public Load ($rawAssembly: System.Array$1<number>, $rawSymbolStore: System.Array$1<number>, $securityEvidence: System.Security.Policy.Evidence) : System.Reflection.Assembly
            public Load ($assemblyRef: System.Reflection.AssemblyName, $assemblySecurity: System.Security.Policy.Evidence) : System.Reflection.Assembly
            public Load ($assemblyString: string, $assemblySecurity: System.Security.Policy.Evidence) : System.Reflection.Assembly
            public ExecuteAssembly ($assemblyFile: string, $assemblySecurity: System.Security.Policy.Evidence) : number
            public ExecuteAssembly ($assemblyFile: string, $assemblySecurity: System.Security.Policy.Evidence, $args: System.Array$1<string>) : number
            public AppendPrivatePath ($path: string) : void
            public ClearPrivatePath () : void
            public SetShadowCopyPath ($s: string) : void
            public ClearShadowCopyPath () : void
            public SetCachePath ($s: string) : void
            public DoCallBack ($theDelegate: System.CrossAppDomainDelegate) : void
            public SetAppDomainPolicy ($domainPolicy: System.Security.Policy.PolicyLevel) : void
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        interface _AppDomain
        {
            FriendlyName : string
            BaseDirectory : string
            RelativeSearchPath : string
            ShadowCopyFiles : boolean
            DynamicDirectory : string
            Evidence : System.Security.Policy.Evidence
            GetTypeInfoCount ($pcTInfo: $Ref<number>) : void
            GetTypeInfo ($iTInfo: number, $lcid: number, $ppTInfo: System.IntPtr) : void
            GetIDsOfNames ($riid: $Ref<System.Guid>, $rgszNames: System.IntPtr, $cNames: number, $lcid: number, $rgDispId: System.IntPtr) : void
            Invoke ($dispIdMember: number, $riid: $Ref<System.Guid>, $lcid: number, $wFlags: number, $pDispParams: System.IntPtr, $pVarResult: System.IntPtr, $pExcepInfo: System.IntPtr, $puArgErr: System.IntPtr) : void
            ToString () : string
            Equals ($other: any) : boolean
            GetHashCode () : number
            GetType () : System.Type
            InitializeLifetimeService () : any
            GetLifetimeService () : any
            add_DomainUnload ($value: System.EventHandler) : void
            remove_DomainUnload ($value: System.EventHandler) : void
            add_AssemblyLoad ($value: System.AssemblyLoadEventHandler) : void
            remove_AssemblyLoad ($value: System.AssemblyLoadEventHandler) : void
            add_ProcessExit ($value: System.EventHandler) : void
            remove_ProcessExit ($value: System.EventHandler) : void
            add_TypeResolve ($value: System.ResolveEventHandler) : void
            remove_TypeResolve ($value: System.ResolveEventHandler) : void
            add_ResourceResolve ($value: System.ResolveEventHandler) : void
            remove_ResourceResolve ($value: System.ResolveEventHandler) : void
            add_AssemblyResolve ($value: System.ResolveEventHandler) : void
            remove_AssemblyResolve ($value: System.ResolveEventHandler) : void
            add_UnhandledException ($value: System.UnhandledExceptionEventHandler) : void
            remove_UnhandledException ($value: System.UnhandledExceptionEventHandler) : void
            DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess) : System.Reflection.Emit.AssemblyBuilder
            DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $dir: string) : System.Reflection.Emit.AssemblyBuilder
            DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $evidence: System.Security.Policy.Evidence) : System.Reflection.Emit.AssemblyBuilder
            DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $requiredPermissions: System.Security.PermissionSet, $optionalPermissions: System.Security.PermissionSet, $refusedPermissions: System.Security.PermissionSet) : System.Reflection.Emit.AssemblyBuilder
            DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $dir: string, $evidence: System.Security.Policy.Evidence) : System.Reflection.Emit.AssemblyBuilder
            DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $dir: string, $requiredPermissions: System.Security.PermissionSet, $optionalPermissions: System.Security.PermissionSet, $refusedPermissions: System.Security.PermissionSet) : System.Reflection.Emit.AssemblyBuilder
            DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $evidence: System.Security.Policy.Evidence, $requiredPermissions: System.Security.PermissionSet, $optionalPermissions: System.Security.PermissionSet, $refusedPermissions: System.Security.PermissionSet) : System.Reflection.Emit.AssemblyBuilder
            DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $dir: string, $evidence: System.Security.Policy.Evidence, $requiredPermissions: System.Security.PermissionSet, $optionalPermissions: System.Security.PermissionSet, $refusedPermissions: System.Security.PermissionSet) : System.Reflection.Emit.AssemblyBuilder
            DefineDynamicAssembly ($name: System.Reflection.AssemblyName, $access: System.Reflection.Emit.AssemblyBuilderAccess, $dir: string, $evidence: System.Security.Policy.Evidence, $requiredPermissions: System.Security.PermissionSet, $optionalPermissions: System.Security.PermissionSet, $refusedPermissions: System.Security.PermissionSet, $isSynchronized: boolean) : System.Reflection.Emit.AssemblyBuilder
            CreateInstance ($assemblyName: string, $typeName: string) : System.Runtime.Remoting.ObjectHandle
            CreateInstanceFrom ($assemblyFile: string, $typeName: string) : System.Runtime.Remoting.ObjectHandle
            CreateInstance ($assemblyName: string, $typeName: string, $activationAttributes: System.Array$1<any>) : System.Runtime.Remoting.ObjectHandle
            CreateInstanceFrom ($assemblyFile: string, $typeName: string, $activationAttributes: System.Array$1<any>) : System.Runtime.Remoting.ObjectHandle
            CreateInstance ($assemblyName: string, $typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>, $securityAttributes: System.Security.Policy.Evidence) : System.Runtime.Remoting.ObjectHandle
            CreateInstanceFrom ($assemblyFile: string, $typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>, $securityAttributes: System.Security.Policy.Evidence) : System.Runtime.Remoting.ObjectHandle
            Load ($assemblyRef: System.Reflection.AssemblyName) : System.Reflection.Assembly
            Load ($assemblyString: string) : System.Reflection.Assembly
            Load ($rawAssembly: System.Array$1<number>) : System.Reflection.Assembly
            Load ($rawAssembly: System.Array$1<number>, $rawSymbolStore: System.Array$1<number>) : System.Reflection.Assembly
            Load ($rawAssembly: System.Array$1<number>, $rawSymbolStore: System.Array$1<number>, $securityEvidence: System.Security.Policy.Evidence) : System.Reflection.Assembly
            Load ($assemblyRef: System.Reflection.AssemblyName, $assemblySecurity: System.Security.Policy.Evidence) : System.Reflection.Assembly
            Load ($assemblyString: string, $assemblySecurity: System.Security.Policy.Evidence) : System.Reflection.Assembly
            ExecuteAssembly ($assemblyFile: string, $assemblySecurity: System.Security.Policy.Evidence) : number
            ExecuteAssembly ($assemblyFile: string) : number
            ExecuteAssembly ($assemblyFile: string, $assemblySecurity: System.Security.Policy.Evidence, $args: System.Array$1<string>) : number
            GetAssemblies () : System.Array$1<System.Reflection.Assembly>
            AppendPrivatePath ($path: string) : void
            ClearPrivatePath () : void
            SetShadowCopyPath ($s: string) : void
            ClearShadowCopyPath () : void
            SetCachePath ($s: string) : void
            SetData ($name: string, $data: any) : void
            GetData ($name: string) : any
            DoCallBack ($theDelegate: System.CrossAppDomainDelegate) : void
            SetAppDomainPolicy ($domainPolicy: System.Security.Policy.PolicyLevel) : void
            SetPrincipalPolicy ($policy: System.Security.Principal.PrincipalPolicy) : void
            SetThreadPrincipal ($principal: System.Security.Principal.IPrincipal) : void
        }
        class ActivationContext extends System.Object implements System.IDisposable, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Form(): System.ActivationContext.ContextForm;
            public get Identity(): System.ApplicationIdentity;
            public get ApplicationManifestBytes(): System.Array$1<number>;
            public get DeploymentManifestBytes(): System.Array$1<number>;
            public static CreatePartialActivationContext ($identity: System.ApplicationIdentity) : System.ActivationContext
            public static CreatePartialActivationContext ($identity: System.ApplicationIdentity, $manifestPaths: System.Array$1<string>) : System.ActivationContext
            public Dispose () : void
        }
        enum LoaderOptimization
        { NotSpecified = 0, SingleDomain = 1, MultiDomain = 2, MultiDomainHost = 3, DomainMask = 3, DisallowBindings = 4 }
        class Attribute extends System.Object implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get TypeId(): any;
            public static GetCustomAttributes ($element: System.Reflection.MemberInfo, $type: System.Type) : System.Array$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.MemberInfo, $type: System.Type, $inherit: boolean) : System.Array$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.MemberInfo) : System.Array$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.MemberInfo, $inherit: boolean) : System.Array$1<System.Attribute>
            public static IsDefined ($element: System.Reflection.MemberInfo, $attributeType: System.Type) : boolean
            public static IsDefined ($element: System.Reflection.MemberInfo, $attributeType: System.Type, $inherit: boolean) : boolean
            public static GetCustomAttribute ($element: System.Reflection.MemberInfo, $attributeType: System.Type) : System.Attribute
            public static GetCustomAttribute ($element: System.Reflection.MemberInfo, $attributeType: System.Type, $inherit: boolean) : System.Attribute
            public static GetCustomAttributes ($element: System.Reflection.ParameterInfo) : System.Array$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.ParameterInfo, $attributeType: System.Type) : System.Array$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.ParameterInfo, $attributeType: System.Type, $inherit: boolean) : System.Array$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.ParameterInfo, $inherit: boolean) : System.Array$1<System.Attribute>
            public static IsDefined ($element: System.Reflection.ParameterInfo, $attributeType: System.Type) : boolean
            public static IsDefined ($element: System.Reflection.ParameterInfo, $attributeType: System.Type, $inherit: boolean) : boolean
            public static GetCustomAttribute ($element: System.Reflection.ParameterInfo, $attributeType: System.Type) : System.Attribute
            public static GetCustomAttribute ($element: System.Reflection.ParameterInfo, $attributeType: System.Type, $inherit: boolean) : System.Attribute
            public static GetCustomAttributes ($element: System.Reflection.Module, $attributeType: System.Type) : System.Array$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.Module) : System.Array$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.Module, $inherit: boolean) : System.Array$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.Module, $attributeType: System.Type, $inherit: boolean) : System.Array$1<System.Attribute>
            public static IsDefined ($element: System.Reflection.Module, $attributeType: System.Type) : boolean
            public static IsDefined ($element: System.Reflection.Module, $attributeType: System.Type, $inherit: boolean) : boolean
            public static GetCustomAttribute ($element: System.Reflection.Module, $attributeType: System.Type) : System.Attribute
            public static GetCustomAttribute ($element: System.Reflection.Module, $attributeType: System.Type, $inherit: boolean) : System.Attribute
            public static GetCustomAttributes ($element: System.Reflection.Assembly, $attributeType: System.Type) : System.Array$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.Assembly, $attributeType: System.Type, $inherit: boolean) : System.Array$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.Assembly) : System.Array$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.Assembly, $inherit: boolean) : System.Array$1<System.Attribute>
            public static IsDefined ($element: System.Reflection.Assembly, $attributeType: System.Type) : boolean
            public static IsDefined ($element: System.Reflection.Assembly, $attributeType: System.Type, $inherit: boolean) : boolean
            public static GetCustomAttribute ($element: System.Reflection.Assembly, $attributeType: System.Type) : System.Attribute
            public static GetCustomAttribute ($element: System.Reflection.Assembly, $attributeType: System.Type, $inherit: boolean) : System.Attribute
            public Match ($obj: any) : boolean
            public IsDefaultAttribute () : boolean
        }
        class LoaderOptimizationAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Value(): System.LoaderOptimization;
            public constructor ($value: number)
            public constructor ($value: System.LoaderOptimization)
            public constructor ()
        }
        class AppDomainUnloadedException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class ApplicationException extends System.Exception implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class ApplicationId extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get PublicKeyToken(): System.Array$1<number>;
            public get Name(): string;
            public get Version(): System.Version;
            public get ProcessorArchitecture(): string;
            public get Culture(): string;
            public Copy () : System.ApplicationId
            public constructor ($publicKeyToken: System.Array$1<number>, $name: string, $version: System.Version, $processorArchitecture: string, $culture: string)
            public constructor ()
        }
        class Version extends System.Object implements System.ICloneable, System.IComparable, System.IComparable$1<System.Version>, System.IEquatable$1<System.Version>
        {
            protected [__keep_incompatibility]: never;
            public get Major(): number;
            public get Minor(): number;
            public get Build(): number;
            public get Revision(): number;
            public get MajorRevision(): number;
            public get MinorRevision(): number;
            public Clone () : any
            public CompareTo ($version: any) : number
            public CompareTo ($value: System.Version) : number
            public Equals ($obj: any) : boolean
            public Equals ($obj: System.Version) : boolean
            public ToString () : string
            public ToString ($fieldCount: number) : string
            public static Parse ($input: string) : System.Version
            public static TryParse ($input: string, $result: $Ref<System.Version>) : boolean
            public static op_Equality ($v1: System.Version, $v2: System.Version) : boolean
            public static op_Inequality ($v1: System.Version, $v2: System.Version) : boolean
            public static op_LessThan ($v1: System.Version, $v2: System.Version) : boolean
            public static op_LessThanOrEqual ($v1: System.Version, $v2: System.Version) : boolean
            public static op_GreaterThan ($v1: System.Version, $v2: System.Version) : boolean
            public static op_GreaterThanOrEqual ($v1: System.Version, $v2: System.Version) : boolean
            public constructor ($major: number, $minor: number, $build: number, $revision: number)
            public constructor ($major: number, $minor: number, $build: number)
            public constructor ($major: number, $minor: number)
            public constructor ($version: string)
            public constructor ()
            public CompareTo ($obj: any) : number
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class ArgumentException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public get ParamName(): string;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ($message: string, $paramName: string, $innerException: System.Exception)
            public constructor ($message: string, $paramName: string)
        }
        class ArgumentNullException extends System.ArgumentException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($paramName: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ($paramName: string, $message: string)
            public constructor ($message: string)
            public constructor ($message: string, $paramName: string, $innerException: System.Exception)
            public constructor ($message: string, $paramName: string)
        }
        class ArgumentOutOfRangeException extends System.ArgumentException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public get ActualValue(): any;
            public constructor ()
            public constructor ($paramName: string)
            public constructor ($paramName: string, $message: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ($paramName: string, $actualValue: any, $message: string)
            public constructor ($message: string)
            public constructor ($message: string, $paramName: string, $innerException: System.Exception)
            public constructor ($message: string, $paramName: string)
        }
        class ArithmeticException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class ArrayTypeMismatchException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        enum AttributeTargets
        { Assembly = 1, Module = 2, Class = 4, Struct = 8, Enum = 16, Constructor = 32, Method = 64, Property = 128, Field = 256, Event = 512, Interface = 1024, Parameter = 2048, Delegate = 4096, ReturnValue = 8192, GenericParameter = 16384, All = 32767 }
        class AttributeUsageAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get ValidOn(): System.AttributeTargets;
            public get AllowMultiple(): boolean;
            public set AllowMultiple(value: boolean);
            public get Inherited(): boolean;
            public set Inherited(value: boolean);
            public constructor ($validOn: System.AttributeTargets)
            public constructor ()
        }
        class BadImageFormatException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public get FileName(): string;
            public get FusionLog(): string;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $fileName: string)
            public constructor ($message: string, $fileName: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class BitConverter extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static IsLittleEndian : boolean
            public static GetBytes ($value: boolean) : System.Array$1<number>
            public static GetBytes ($value: number) : System.Array$1<number>
            public static GetBytes ($value: bigint) : System.Array$1<number>
            public static ToChar ($value: System.Array$1<number>, $startIndex: number) : number
            public static ToInt16 ($value: System.Array$1<number>, $startIndex: number) : number
            public static ToInt32 ($value: System.Array$1<number>, $startIndex: number) : number
            public static ToInt64 ($value: System.Array$1<number>, $startIndex: number) : bigint
            public static ToUInt16 ($value: System.Array$1<number>, $startIndex: number) : number
            public static ToUInt32 ($value: System.Array$1<number>, $startIndex: number) : number
            public static ToUInt64 ($value: System.Array$1<number>, $startIndex: number) : bigint
            public static ToSingle ($value: System.Array$1<number>, $startIndex: number) : number
            public static ToDouble ($value: System.Array$1<number>, $startIndex: number) : number
            public static ToString ($value: System.Array$1<number>, $startIndex: number, $length: number) : string
            public static ToString ($value: System.Array$1<number>) : string
            public static ToString ($value: System.Array$1<number>, $startIndex: number) : string
            public static ToBoolean ($value: System.Array$1<number>, $startIndex: number) : boolean
            public static DoubleToInt64Bits ($value: number) : bigint
            public static Int64BitsToDouble ($value: bigint) : number
            public ToString () : string
        }
        class Int16 extends System.ValueType implements System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static MaxValue : number
            public static MinValue : number
            public CompareTo ($value: any) : number
            public CompareTo ($value: number) : number
            public Equals ($obj: any) : boolean
            public Equals ($obj: number) : boolean
            public ToString () : string
            public ToString ($provider: System.IFormatProvider) : string
            public ToString ($format: string) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public static Parse ($s: string) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles) : number
            public static Parse ($s: string, $provider: System.IFormatProvider) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider) : number
            public static TryParse ($s: string, $result: $Ref<number>) : boolean
            public static TryParse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider, $result: $Ref<number>) : boolean
            public GetTypeCode () : System.TypeCode
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class UInt16 extends System.ValueType implements System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static MaxValue : number
            public static MinValue : number
            public CompareTo ($value: any) : number
            public CompareTo ($value: number) : number
            public Equals ($obj: any) : boolean
            public Equals ($obj: number) : boolean
            public ToString () : string
            public ToString ($provider: System.IFormatProvider) : string
            public ToString ($format: string) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public static Parse ($s: string) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles) : number
            public static Parse ($s: string, $provider: System.IFormatProvider) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider) : number
            public static TryParse ($s: string, $result: $Ref<number>) : boolean
            public static TryParse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider, $result: $Ref<number>) : boolean
            public GetTypeCode () : System.TypeCode
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class UInt32 extends System.ValueType implements System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static MaxValue : number
            public static MinValue : number
            public CompareTo ($value: any) : number
            public CompareTo ($value: number) : number
            public Equals ($obj: any) : boolean
            public Equals ($obj: number) : boolean
            public ToString () : string
            public ToString ($provider: System.IFormatProvider) : string
            public ToString ($format: string) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public static Parse ($s: string) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles) : number
            public static Parse ($s: string, $provider: System.IFormatProvider) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider) : number
            public static TryParse ($s: string, $result: $Ref<number>) : boolean
            public static TryParse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider, $result: $Ref<number>) : boolean
            public GetTypeCode () : System.TypeCode
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class UInt64 extends System.ValueType implements System.IComparable, System.IComparable$1<bigint>, System.IConvertible, System.IEquatable$1<bigint>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static MaxValue : bigint
            public static MinValue : bigint
            public CompareTo ($value: any) : number
            public CompareTo ($value: bigint) : number
            public Equals ($obj: any) : boolean
            public Equals ($obj: bigint) : boolean
            public ToString () : string
            public ToString ($provider: System.IFormatProvider) : string
            public ToString ($format: string) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public static Parse ($s: string) : bigint
            public static Parse ($s: string, $style: System.Globalization.NumberStyles) : bigint
            public static Parse ($s: string, $provider: System.IFormatProvider) : bigint
            public static Parse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider) : bigint
            public static TryParse ($s: string, $result: $Ref<bigint>) : boolean
            public static TryParse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider, $result: $Ref<bigint>) : boolean
            public GetTypeCode () : System.TypeCode
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class Single extends System.ValueType implements System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static MinValue : number
            public static Epsilon : number
            public static MaxValue : number
            public static PositiveInfinity : number
            public static NegativeInfinity : number
            public static NaN : number
            public static IsInfinity ($f: number) : boolean
            public static IsPositiveInfinity ($f: number) : boolean
            public static IsNegativeInfinity ($f: number) : boolean
            public static IsNaN ($f: number) : boolean
            public static IsFinite ($f: number) : boolean
            public CompareTo ($value: any) : number
            public CompareTo ($value: number) : number
            public static op_Equality ($left: number, $right: number) : boolean
            public static op_Inequality ($left: number, $right: number) : boolean
            public static op_LessThan ($left: number, $right: number) : boolean
            public static op_GreaterThan ($left: number, $right: number) : boolean
            public static op_LessThanOrEqual ($left: number, $right: number) : boolean
            public static op_GreaterThanOrEqual ($left: number, $right: number) : boolean
            public Equals ($obj: any) : boolean
            public Equals ($obj: number) : boolean
            public ToString () : string
            public ToString ($provider: System.IFormatProvider) : string
            public ToString ($format: string) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public static Parse ($s: string) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles) : number
            public static Parse ($s: string, $provider: System.IFormatProvider) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider) : number
            public static TryParse ($s: string, $result: $Ref<number>) : boolean
            public static TryParse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider, $result: $Ref<number>) : boolean
            public GetTypeCode () : System.TypeCode
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class Double extends System.ValueType implements System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static MinValue : number
            public static MaxValue : number
            public static Epsilon : number
            public static NegativeInfinity : number
            public static PositiveInfinity : number
            public static NaN : number
            public static IsInfinity ($d: number) : boolean
            public static IsPositiveInfinity ($d: number) : boolean
            public static IsNegativeInfinity ($d: number) : boolean
            public static IsNaN ($d: number) : boolean
            public static IsFinite ($d: number) : boolean
            public CompareTo ($value: any) : number
            public CompareTo ($value: number) : number
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: number, $right: number) : boolean
            public static op_Inequality ($left: number, $right: number) : boolean
            public static op_LessThan ($left: number, $right: number) : boolean
            public static op_GreaterThan ($left: number, $right: number) : boolean
            public static op_LessThanOrEqual ($left: number, $right: number) : boolean
            public static op_GreaterThanOrEqual ($left: number, $right: number) : boolean
            public Equals ($obj: number) : boolean
            public ToString () : string
            public ToString ($format: string) : string
            public ToString ($provider: System.IFormatProvider) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public static Parse ($s: string) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles) : number
            public static Parse ($s: string, $provider: System.IFormatProvider) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider) : number
            public static TryParse ($s: string, $result: $Ref<number>) : boolean
            public static TryParse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider, $result: $Ref<number>) : boolean
            public GetTypeCode () : System.TypeCode
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static Equals ($objA: any, $objB: any) : boolean
        }
        enum TypeCode
        { Empty = 0, Object = 1, DBNull = 2, Boolean = 3, Char = 4, SByte = 5, Byte = 6, Int16 = 7, UInt16 = 8, Int32 = 9, UInt32 = 10, Int64 = 11, UInt64 = 12, Single = 13, Double = 14, Decimal = 15, DateTime = 16, String = 18 }
        class Buffer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static ByteLength ($array: System.Array) : number
            public static GetByte ($array: System.Array, $index: number) : number
            public static SetByte ($array: System.Array, $index: number, $value: number) : void
            public static BlockCopy ($src: System.Array, $srcOffset: number, $dst: System.Array, $dstOffset: number, $count: number) : void
        }
        class CannotUnloadAppDomainException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class CharEnumerator extends System.Object implements System.Collections.Generic.IEnumerator$1<number>, System.ICloneable, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get Current(): number;
            public Clone () : any
            public MoveNext () : boolean
            public Dispose () : void
            public Reset () : void
        }
        class CLSCompliantAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get IsCompliant(): boolean;
            public constructor ($isCompliant: boolean)
            public constructor ()
        }
        interface ConsoleCancelEventHandler
        { 
        (sender: any, e: System.ConsoleCancelEventArgs) : void; 
        Invoke?: (sender: any, e: System.ConsoleCancelEventArgs) => void;
        }
        var ConsoleCancelEventHandler: { new (func: (sender: any, e: System.ConsoleCancelEventArgs) => void): ConsoleCancelEventHandler; }
        class EventArgs extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Empty : System.EventArgs
            public constructor ()
        }
        class ConsoleCancelEventArgs extends System.EventArgs
        {
            protected [__keep_incompatibility]: never;
            public get Cancel(): boolean;
            public set Cancel(value: boolean);
            public get SpecialKey(): System.ConsoleSpecialKey;
        }
        enum ConsoleSpecialKey
        { ControlC = 0, ControlBreak = 1 }
        enum ConsoleColor
        { Black = 0, DarkBlue = 1, DarkGreen = 2, DarkCyan = 3, DarkRed = 4, DarkMagenta = 5, DarkYellow = 6, Gray = 7, DarkGray = 8, Blue = 9, Green = 10, Cyan = 11, Red = 12, Magenta = 13, Yellow = 14, White = 15 }
        enum ConsoleKey
        { Backspace = 8, Tab = 9, Clear = 12, Enter = 13, Pause = 19, Escape = 27, Spacebar = 32, PageUp = 33, PageDown = 34, End = 35, Home = 36, LeftArrow = 37, UpArrow = 38, RightArrow = 39, DownArrow = 40, Select = 41, Print = 42, Execute = 43, PrintScreen = 44, Insert = 45, Delete = 46, Help = 47, D0 = 48, D1 = 49, D2 = 50, D3 = 51, D4 = 52, D5 = 53, D6 = 54, D7 = 55, D8 = 56, D9 = 57, A = 65, B = 66, C = 67, D = 68, E = 69, F = 70, G = 71, H = 72, I = 73, J = 74, K = 75, L = 76, M = 77, N = 78, O = 79, P = 80, Q = 81, R = 82, S = 83, T = 84, U = 85, V = 86, W = 87, X = 88, Y = 89, Z = 90, LeftWindows = 91, RightWindows = 92, Applications = 93, Sleep = 95, NumPad0 = 96, NumPad1 = 97, NumPad2 = 98, NumPad3 = 99, NumPad4 = 100, NumPad5 = 101, NumPad6 = 102, NumPad7 = 103, NumPad8 = 104, NumPad9 = 105, Multiply = 106, Add = 107, Separator = 108, Subtract = 109, Decimal = 110, Divide = 111, F1 = 112, F2 = 113, F3 = 114, F4 = 115, F5 = 116, F6 = 117, F7 = 118, F8 = 119, F9 = 120, F10 = 121, F11 = 122, F12 = 123, F13 = 124, F14 = 125, F15 = 126, F16 = 127, F17 = 128, F18 = 129, F19 = 130, F20 = 131, F21 = 132, F22 = 133, F23 = 134, F24 = 135, BrowserBack = 166, BrowserForward = 167, BrowserRefresh = 168, BrowserStop = 169, BrowserSearch = 170, BrowserFavorites = 171, BrowserHome = 172, VolumeMute = 173, VolumeDown = 174, VolumeUp = 175, MediaNext = 176, MediaPrevious = 177, MediaStop = 178, MediaPlay = 179, LaunchMail = 180, LaunchMediaSelect = 181, LaunchApp1 = 182, LaunchApp2 = 183, Oem1 = 186, OemPlus = 187, OemComma = 188, OemMinus = 189, OemPeriod = 190, Oem2 = 191, Oem3 = 192, Oem4 = 219, Oem5 = 220, Oem6 = 221, Oem7 = 222, Oem8 = 223, Oem102 = 226, Process = 229, Packet = 231, Attention = 246, CrSel = 247, ExSel = 248, EraseEndOfFile = 249, Play = 250, Zoom = 251, NoName = 252, Pa1 = 253, OemClear = 254 }
        class ConsoleKeyInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get KeyChar(): number;
            public get Key(): System.ConsoleKey;
            public get Modifiers(): System.ConsoleModifiers;
            public Equals ($value: any) : boolean
            public Equals ($obj: System.ConsoleKeyInfo) : boolean
            public static op_Equality ($a: System.ConsoleKeyInfo, $b: System.ConsoleKeyInfo) : boolean
            public static op_Inequality ($a: System.ConsoleKeyInfo, $b: System.ConsoleKeyInfo) : boolean
            public constructor ($keyChar: number, $key: System.ConsoleKey, $shift: boolean, $alt: boolean, $control: boolean)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        enum ConsoleModifiers
        { Alt = 1, Shift = 2, Control = 4 }
        class ContextBoundObject extends System.MarshalByRefObject
        {
            protected [__keep_incompatibility]: never;
        }
        class ContextMarshalException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class ContextStaticAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        enum Base64FormattingOptions
        { None = 0, InsertLineBreaks = 1 }
        class Convert extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static DBNull : any
            public static GetTypeCode ($value: any) : System.TypeCode
            public static IsDBNull ($value: any) : boolean
            public static ChangeType ($value: any, $typeCode: System.TypeCode) : any
            public static ChangeType ($value: any, $typeCode: System.TypeCode, $provider: System.IFormatProvider) : any
            public static ChangeType ($value: any, $conversionType: System.Type) : any
            public static ChangeType ($value: any, $conversionType: System.Type, $provider: System.IFormatProvider) : any
            public static ToBoolean ($value: any) : boolean
            public static ToBoolean ($value: any, $provider: System.IFormatProvider) : boolean
            public static ToBoolean ($value: boolean) : boolean
            public static ToBoolean ($value: number) : boolean
            public static ToBoolean ($value: bigint) : boolean
            public static ToBoolean ($value: string) : boolean
            public static ToBoolean ($value: string, $provider: System.IFormatProvider) : boolean
            public static ToBoolean ($value: System.Decimal) : boolean
            public static ToBoolean ($value: Date) : boolean
            public static ToChar ($value: any) : number
            public static ToChar ($value: any, $provider: System.IFormatProvider) : number
            public static ToChar ($value: boolean) : number
            public static ToChar ($value: number) : number
            public static ToChar ($value: bigint) : number
            public static ToChar ($value: string) : number
            public static ToChar ($value: string, $provider: System.IFormatProvider) : number
            public static ToChar ($value: System.Decimal) : number
            public static ToChar ($value: Date) : number
            public static ToSByte ($value: any) : number
            public static ToSByte ($value: any, $provider: System.IFormatProvider) : number
            public static ToSByte ($value: boolean) : number
            public static ToSByte ($value: number) : number
            public static ToSByte ($value: bigint) : number
            public static ToSByte ($value: System.Decimal) : number
            public static ToSByte ($value: string) : number
            public static ToSByte ($value: string, $provider: System.IFormatProvider) : number
            public static ToSByte ($value: Date) : number
            public static ToByte ($value: any) : number
            public static ToByte ($value: any, $provider: System.IFormatProvider) : number
            public static ToByte ($value: boolean) : number
            public static ToByte ($value: number) : number
            public static ToByte ($value: bigint) : number
            public static ToByte ($value: System.Decimal) : number
            public static ToByte ($value: string) : number
            public static ToByte ($value: string, $provider: System.IFormatProvider) : number
            public static ToByte ($value: Date) : number
            public static ToInt16 ($value: any) : number
            public static ToInt16 ($value: any, $provider: System.IFormatProvider) : number
            public static ToInt16 ($value: boolean) : number
            public static ToInt16 ($value: number) : number
            public static ToInt16 ($value: bigint) : number
            public static ToInt16 ($value: System.Decimal) : number
            public static ToInt16 ($value: string) : number
            public static ToInt16 ($value: string, $provider: System.IFormatProvider) : number
            public static ToInt16 ($value: Date) : number
            public static ToUInt16 ($value: any) : number
            public static ToUInt16 ($value: any, $provider: System.IFormatProvider) : number
            public static ToUInt16 ($value: boolean) : number
            public static ToUInt16 ($value: number) : number
            public static ToUInt16 ($value: bigint) : number
            public static ToUInt16 ($value: System.Decimal) : number
            public static ToUInt16 ($value: string) : number
            public static ToUInt16 ($value: string, $provider: System.IFormatProvider) : number
            public static ToUInt16 ($value: Date) : number
            public static ToInt32 ($value: any) : number
            public static ToInt32 ($value: any, $provider: System.IFormatProvider) : number
            public static ToInt32 ($value: boolean) : number
            public static ToInt32 ($value: number) : number
            public static ToInt32 ($value: bigint) : number
            public static ToInt32 ($value: System.Decimal) : number
            public static ToInt32 ($value: string) : number
            public static ToInt32 ($value: string, $provider: System.IFormatProvider) : number
            public static ToInt32 ($value: Date) : number
            public static ToUInt32 ($value: any) : number
            public static ToUInt32 ($value: any, $provider: System.IFormatProvider) : number
            public static ToUInt32 ($value: boolean) : number
            public static ToUInt32 ($value: number) : number
            public static ToUInt32 ($value: bigint) : number
            public static ToUInt32 ($value: System.Decimal) : number
            public static ToUInt32 ($value: string) : number
            public static ToUInt32 ($value: string, $provider: System.IFormatProvider) : number
            public static ToUInt32 ($value: Date) : number
            public static ToInt64 ($value: any) : bigint
            public static ToInt64 ($value: any, $provider: System.IFormatProvider) : bigint
            public static ToInt64 ($value: boolean) : bigint
            public static ToInt64 ($value: number) : bigint
            public static ToInt64 ($value: bigint) : bigint
            public static ToInt64 ($value: System.Decimal) : bigint
            public static ToInt64 ($value: string) : bigint
            public static ToInt64 ($value: string, $provider: System.IFormatProvider) : bigint
            public static ToInt64 ($value: Date) : bigint
            public static ToUInt64 ($value: any) : bigint
            public static ToUInt64 ($value: any, $provider: System.IFormatProvider) : bigint
            public static ToUInt64 ($value: boolean) : bigint
            public static ToUInt64 ($value: number) : bigint
            public static ToUInt64 ($value: bigint) : bigint
            public static ToUInt64 ($value: System.Decimal) : bigint
            public static ToUInt64 ($value: string) : bigint
            public static ToUInt64 ($value: string, $provider: System.IFormatProvider) : bigint
            public static ToUInt64 ($value: Date) : bigint
            public static ToSingle ($value: any) : number
            public static ToSingle ($value: any, $provider: System.IFormatProvider) : number
            public static ToSingle ($value: number) : number
            public static ToSingle ($value: bigint) : number
            public static ToSingle ($value: System.Decimal) : number
            public static ToSingle ($value: string) : number
            public static ToSingle ($value: string, $provider: System.IFormatProvider) : number
            public static ToSingle ($value: boolean) : number
            public static ToSingle ($value: Date) : number
            public static ToDouble ($value: any) : number
            public static ToDouble ($value: any, $provider: System.IFormatProvider) : number
            public static ToDouble ($value: number) : number
            public static ToDouble ($value: bigint) : number
            public static ToDouble ($value: System.Decimal) : number
            public static ToDouble ($value: string) : number
            public static ToDouble ($value: string, $provider: System.IFormatProvider) : number
            public static ToDouble ($value: boolean) : number
            public static ToDouble ($value: Date) : number
            public static ToDecimal ($value: any) : System.Decimal
            public static ToDecimal ($value: any, $provider: System.IFormatProvider) : System.Decimal
            public static ToDecimal ($value: number) : System.Decimal
            public static ToDecimal ($value: bigint) : System.Decimal
            public static ToDecimal ($value: string) : System.Decimal
            public static ToDecimal ($value: string, $provider: System.IFormatProvider) : System.Decimal
            public static ToDecimal ($value: System.Decimal) : System.Decimal
            public static ToDecimal ($value: boolean) : System.Decimal
            public static ToDecimal ($value: Date) : System.Decimal
            public static ToDateTime ($value: Date) : Date
            public static ToDateTime ($value: any) : Date
            public static ToDateTime ($value: any, $provider: System.IFormatProvider) : Date
            public static ToDateTime ($value: string) : Date
            public static ToDateTime ($value: string, $provider: System.IFormatProvider) : Date
            public static ToDateTime ($value: number) : Date
            public static ToDateTime ($value: bigint) : Date
            public static ToDateTime ($value: boolean) : Date
            public static ToDateTime ($value: System.Decimal) : Date
            public static ToString ($value: any) : string
            public static ToString ($value: any, $provider: System.IFormatProvider) : string
            public static ToString ($value: boolean) : string
            public static ToString ($value: boolean, $provider: System.IFormatProvider) : string
            public static ToString ($value: number) : string
            public static ToString ($value: number, $provider: System.IFormatProvider) : string
            public static ToString ($value: bigint) : string
            public static ToString ($value: bigint, $provider: System.IFormatProvider) : string
            public static ToString ($value: System.Decimal) : string
            public static ToString ($value: System.Decimal, $provider: System.IFormatProvider) : string
            public static ToString ($value: Date) : string
            public static ToString ($value: Date, $provider: System.IFormatProvider) : string
            public static ToString ($value: string) : string
            public static ToString ($value: string, $provider: System.IFormatProvider) : string
            public static ToByte ($value: string, $fromBase: number) : number
            public static ToSByte ($value: string, $fromBase: number) : number
            public static ToInt16 ($value: string, $fromBase: number) : number
            public static ToUInt16 ($value: string, $fromBase: number) : number
            public static ToInt32 ($value: string, $fromBase: number) : number
            public static ToUInt32 ($value: string, $fromBase: number) : number
            public static ToInt64 ($value: string, $fromBase: number) : bigint
            public static ToUInt64 ($value: string, $fromBase: number) : bigint
            public static ToString ($value: number, $toBase: number) : string
            public static ToString ($value: bigint, $toBase: number) : string
            public static ToBase64String ($inArray: System.Array$1<number>) : string
            public static ToBase64String ($inArray: System.Array$1<number>, $options: System.Base64FormattingOptions) : string
            public static ToBase64String ($inArray: System.Array$1<number>, $offset: number, $length: number) : string
            public static ToBase64String ($inArray: System.Array$1<number>, $offset: number, $length: number, $options: System.Base64FormattingOptions) : string
            public static ToBase64CharArray ($inArray: System.Array$1<number>, $offsetIn: number, $length: number, $outArray: System.Array$1<number>, $offsetOut: number) : number
            public static ToBase64CharArray ($inArray: System.Array$1<number>, $offsetIn: number, $length: number, $outArray: System.Array$1<number>, $offsetOut: number, $options: System.Base64FormattingOptions) : number
            public static FromBase64String ($s: string) : System.Array$1<number>
            public static FromBase64CharArray ($inArray: System.Array$1<number>, $offset: number, $length: number) : System.Array$1<number>
            public ToString () : string
        }
        class SByte extends System.ValueType implements System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static MaxValue : number
            public static MinValue : number
            public CompareTo ($obj: any) : number
            public CompareTo ($value: number) : number
            public Equals ($obj: any) : boolean
            public Equals ($obj: number) : boolean
            public ToString () : string
            public ToString ($provider: System.IFormatProvider) : string
            public ToString ($format: string) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public static Parse ($s: string) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles) : number
            public static Parse ($s: string, $provider: System.IFormatProvider) : number
            public static Parse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider) : number
            public static TryParse ($s: string, $result: $Ref<number>) : boolean
            public static TryParse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider, $result: $Ref<number>) : boolean
            public GetTypeCode () : System.TypeCode
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class Decimal extends System.ValueType implements System.IComparable, System.IComparable$1<System.Decimal>, System.IConvertible, System.Runtime.Serialization.IDeserializationCallback, System.IEquatable$1<System.Decimal>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static Zero : System.Decimal
            public static One : System.Decimal
            public static MinusOne : System.Decimal
            public static MaxValue : System.Decimal
            public static MinValue : System.Decimal
            public static ToOACurrency ($value: System.Decimal) : bigint
            public static FromOACurrency ($cy: bigint) : System.Decimal
            public static Add ($d1: System.Decimal, $d2: System.Decimal) : System.Decimal
            public static Ceiling ($d: System.Decimal) : System.Decimal
            public static Compare ($d1: System.Decimal, $d2: System.Decimal) : number
            public CompareTo ($value: any) : number
            public CompareTo ($value: System.Decimal) : number
            public static Divide ($d1: System.Decimal, $d2: System.Decimal) : System.Decimal
            public Equals ($value: any) : boolean
            public Equals ($value: System.Decimal) : boolean
            public static Equals ($d1: System.Decimal, $d2: System.Decimal) : boolean
            public static Floor ($d: System.Decimal) : System.Decimal
            public ToString () : string
            public ToString ($format: string) : string
            public ToString ($provider: System.IFormatProvider) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public static Parse ($s: string) : System.Decimal
            public static Parse ($s: string, $style: System.Globalization.NumberStyles) : System.Decimal
            public static Parse ($s: string, $provider: System.IFormatProvider) : System.Decimal
            public static Parse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider) : System.Decimal
            public static TryParse ($s: string, $result: $Ref<System.Decimal>) : boolean
            public static TryParse ($s: string, $style: System.Globalization.NumberStyles, $provider: System.IFormatProvider, $result: $Ref<System.Decimal>) : boolean
            public static GetBits ($d: System.Decimal) : System.Array$1<number>
            public static Remainder ($d1: System.Decimal, $d2: System.Decimal) : System.Decimal
            public static Multiply ($d1: System.Decimal, $d2: System.Decimal) : System.Decimal
            public static Negate ($d: System.Decimal) : System.Decimal
            public static Round ($d: System.Decimal) : System.Decimal
            public static Round ($d: System.Decimal, $decimals: number) : System.Decimal
            public static Round ($d: System.Decimal, $mode: System.MidpointRounding) : System.Decimal
            public static Round ($d: System.Decimal, $decimals: number, $mode: System.MidpointRounding) : System.Decimal
            public static Subtract ($d1: System.Decimal, $d2: System.Decimal) : System.Decimal
            public static ToByte ($value: System.Decimal) : number
            public static ToSByte ($value: System.Decimal) : number
            public static ToInt16 ($value: System.Decimal) : number
            public static ToDouble ($d: System.Decimal) : number
            public static ToInt32 ($d: System.Decimal) : number
            public static ToInt64 ($d: System.Decimal) : bigint
            public static ToUInt16 ($value: System.Decimal) : number
            public static ToUInt32 ($d: System.Decimal) : number
            public static ToUInt64 ($d: System.Decimal) : bigint
            public static ToSingle ($d: System.Decimal) : number
            public static Truncate ($d: System.Decimal) : System.Decimal
            public static op_Implicit ($value: number) : System.Decimal
            public static op_Implicit ($value: bigint) : System.Decimal
            public static op_Explicit ($value: number) : System.Decimal
            public static op_Explicit ($value: System.Decimal) : number
            public static op_Explicit ($value: System.Decimal) : bigint
            public static op_UnaryPlus ($d: System.Decimal) : System.Decimal
            public static op_UnaryNegation ($d: System.Decimal) : System.Decimal
            public static op_Increment ($d: System.Decimal) : System.Decimal
            public static op_Decrement ($d: System.Decimal) : System.Decimal
            public static op_Addition ($d1: System.Decimal, $d2: System.Decimal) : System.Decimal
            public static op_Subtraction ($d1: System.Decimal, $d2: System.Decimal) : System.Decimal
            public static op_Multiply ($d1: System.Decimal, $d2: System.Decimal) : System.Decimal
            public static op_Division ($d1: System.Decimal, $d2: System.Decimal) : System.Decimal
            public static op_Modulus ($d1: System.Decimal, $d2: System.Decimal) : System.Decimal
            public static op_Equality ($d1: System.Decimal, $d2: System.Decimal) : boolean
            public static op_Inequality ($d1: System.Decimal, $d2: System.Decimal) : boolean
            public static op_LessThan ($d1: System.Decimal, $d2: System.Decimal) : boolean
            public static op_LessThanOrEqual ($d1: System.Decimal, $d2: System.Decimal) : boolean
            public static op_GreaterThan ($d1: System.Decimal, $d2: System.Decimal) : boolean
            public static op_GreaterThanOrEqual ($d1: System.Decimal, $d2: System.Decimal) : boolean
            public GetTypeCode () : System.TypeCode
            public constructor ($value: number)
            public constructor ($value: bigint)
            public constructor ($bits: System.Array$1<number>)
            public constructor ($lo: number, $mid: number, $hi: number, $isNegative: boolean, $scale: number)
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        class DateTime extends System.ValueType implements System.IComparable, System.IComparable$1<Date>, System.IConvertible, System.IEquatable$1<Date>, System.Runtime.Serialization.ISerializable, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static MinValue : Date
            public static MaxValue : Date
            public get Date(): Date;
            public get Day(): number;
            public get DayOfWeek(): System.DayOfWeek;
            public get DayOfYear(): number;
            public get Hour(): number;
            public get Kind(): System.DateTimeKind;
            public get Millisecond(): number;
            public get Minute(): number;
            public get Month(): number;
            public static get Now(): Date;
            public static get UtcNow(): Date;
            public get Second(): number;
            public get Ticks(): bigint;
            public get TimeOfDay(): System.TimeSpan;
            public static get Today(): Date;
            public get Year(): number;
            public Add ($value: System.TimeSpan) : Date
            public AddDays ($value: number) : Date
            public AddHours ($value: number) : Date
            public AddMilliseconds ($value: number) : Date
            public AddMinutes ($value: number) : Date
            public AddMonths ($months: number) : Date
            public AddSeconds ($value: number) : Date
            public AddTicks ($value: bigint) : Date
            public AddYears ($value: number) : Date
            public static Compare ($t1: Date, $t2: Date) : number
            public CompareTo ($value: any) : number
            public CompareTo ($value: Date) : number
            public static DaysInMonth ($year: number, $month: number) : number
            public Equals ($value: any) : boolean
            public Equals ($value: Date) : boolean
            public static Equals ($t1: Date, $t2: Date) : boolean
            public static FromBinary ($dateData: bigint) : Date
            public static FromFileTime ($fileTime: bigint) : Date
            public static FromFileTimeUtc ($fileTime: bigint) : Date
            public static FromOADate ($d: number) : Date
            public IsDaylightSavingTime () : boolean
            public static SpecifyKind ($value: Date, $kind: System.DateTimeKind) : Date
            public ToBinary () : bigint
            public static IsLeapYear ($year: number) : boolean
            public static Parse ($s: string) : Date
            public static Parse ($s: string, $provider: System.IFormatProvider) : Date
            public static Parse ($s: string, $provider: System.IFormatProvider, $styles: System.Globalization.DateTimeStyles) : Date
            public static ParseExact ($s: string, $format: string, $provider: System.IFormatProvider) : Date
            public static ParseExact ($s: string, $format: string, $provider: System.IFormatProvider, $style: System.Globalization.DateTimeStyles) : Date
            public static ParseExact ($s: string, $formats: System.Array$1<string>, $provider: System.IFormatProvider, $style: System.Globalization.DateTimeStyles) : Date
            public Subtract ($value: Date) : System.TimeSpan
            public Subtract ($value: System.TimeSpan) : Date
            public ToOADate () : number
            public ToFileTime () : bigint
            public ToFileTimeUtc () : bigint
            public ToLocalTime () : Date
            public ToLongDateString () : string
            public ToLongTimeString () : string
            public ToShortDateString () : string
            public ToShortTimeString () : string
            public ToString () : string
            public ToString ($format: string) : string
            public ToString ($provider: System.IFormatProvider) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public ToUniversalTime () : Date
            public static TryParse ($s: string, $result: $Ref<Date>) : boolean
            public static TryParse ($s: string, $provider: System.IFormatProvider, $styles: System.Globalization.DateTimeStyles, $result: $Ref<Date>) : boolean
            public static TryParseExact ($s: string, $format: string, $provider: System.IFormatProvider, $style: System.Globalization.DateTimeStyles, $result: $Ref<Date>) : boolean
            public static TryParseExact ($s: string, $formats: System.Array$1<string>, $provider: System.IFormatProvider, $style: System.Globalization.DateTimeStyles, $result: $Ref<Date>) : boolean
            public static op_Addition ($d: Date, $t: System.TimeSpan) : Date
            public static op_Subtraction ($d: Date, $t: System.TimeSpan) : Date
            public static op_Subtraction ($d1: Date, $d2: Date) : System.TimeSpan
            public static op_Equality ($d1: Date, $d2: Date) : boolean
            public static op_Inequality ($d1: Date, $d2: Date) : boolean
            public static op_LessThan ($t1: Date, $t2: Date) : boolean
            public static op_LessThanOrEqual ($t1: Date, $t2: Date) : boolean
            public static op_GreaterThan ($t1: Date, $t2: Date) : boolean
            public static op_GreaterThanOrEqual ($t1: Date, $t2: Date) : boolean
            public GetDateTimeFormats () : System.Array$1<string>
            public GetDateTimeFormats ($provider: System.IFormatProvider) : System.Array$1<string>
            public GetDateTimeFormats ($format: number) : System.Array$1<string>
            public GetDateTimeFormats ($format: number, $provider: System.IFormatProvider) : System.Array$1<string>
            public GetTypeCode () : System.TypeCode
            public constructor ($ticks: bigint)
            public constructor ($ticks: bigint, $kind: System.DateTimeKind)
            public constructor ($year: number, $month: number, $day: number)
            public constructor ($year: number, $month: number, $day: number, $calendar: System.Globalization.Calendar)
            public constructor ($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number)
            public constructor ($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $kind: System.DateTimeKind)
            public constructor ($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $calendar: System.Globalization.Calendar)
            public constructor ($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $millisecond: number)
            public constructor ($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $millisecond: number, $kind: System.DateTimeKind)
            public constructor ($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $millisecond: number, $calendar: System.Globalization.Calendar)
            public constructor ($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $millisecond: number, $calendar: System.Globalization.Calendar, $kind: System.DateTimeKind)
            public CompareTo ($obj: any) : number
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        class DataMisalignedException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class TimeSpan extends System.ValueType implements System.IComparable, System.IComparable$1<System.TimeSpan>, System.IEquatable$1<System.TimeSpan>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static TicksPerMillisecond : bigint
            public static TicksPerSecond : bigint
            public static TicksPerMinute : bigint
            public static TicksPerHour : bigint
            public static TicksPerDay : bigint
            public static Zero : System.TimeSpan
            public static MaxValue : System.TimeSpan
            public static MinValue : System.TimeSpan
            public get Ticks(): bigint;
            public get Days(): number;
            public get Hours(): number;
            public get Milliseconds(): number;
            public get Minutes(): number;
            public get Seconds(): number;
            public get TotalDays(): number;
            public get TotalHours(): number;
            public get TotalMilliseconds(): number;
            public get TotalMinutes(): number;
            public get TotalSeconds(): number;
            public Add ($ts: System.TimeSpan) : System.TimeSpan
            public static Compare ($t1: System.TimeSpan, $t2: System.TimeSpan) : number
            public CompareTo ($value: any) : number
            public CompareTo ($value: System.TimeSpan) : number
            public static FromDays ($value: number) : System.TimeSpan
            public Duration () : System.TimeSpan
            public Equals ($value: any) : boolean
            public Equals ($obj: System.TimeSpan) : boolean
            public static Equals ($t1: System.TimeSpan, $t2: System.TimeSpan) : boolean
            public static FromHours ($value: number) : System.TimeSpan
            public static FromMilliseconds ($value: number) : System.TimeSpan
            public static FromMinutes ($value: number) : System.TimeSpan
            public Negate () : System.TimeSpan
            public static FromSeconds ($value: number) : System.TimeSpan
            public Subtract ($ts: System.TimeSpan) : System.TimeSpan
            public static FromTicks ($value: bigint) : System.TimeSpan
            public static Parse ($s: string) : System.TimeSpan
            public static Parse ($input: string, $formatProvider: System.IFormatProvider) : System.TimeSpan
            public static ParseExact ($input: string, $format: string, $formatProvider: System.IFormatProvider) : System.TimeSpan
            public static ParseExact ($input: string, $formats: System.Array$1<string>, $formatProvider: System.IFormatProvider) : System.TimeSpan
            public static ParseExact ($input: string, $format: string, $formatProvider: System.IFormatProvider, $styles: System.Globalization.TimeSpanStyles) : System.TimeSpan
            public static ParseExact ($input: string, $formats: System.Array$1<string>, $formatProvider: System.IFormatProvider, $styles: System.Globalization.TimeSpanStyles) : System.TimeSpan
            public static TryParse ($s: string, $result: $Ref<System.TimeSpan>) : boolean
            public static TryParse ($input: string, $formatProvider: System.IFormatProvider, $result: $Ref<System.TimeSpan>) : boolean
            public static TryParseExact ($input: string, $format: string, $formatProvider: System.IFormatProvider, $result: $Ref<System.TimeSpan>) : boolean
            public static TryParseExact ($input: string, $formats: System.Array$1<string>, $formatProvider: System.IFormatProvider, $result: $Ref<System.TimeSpan>) : boolean
            public static TryParseExact ($input: string, $format: string, $formatProvider: System.IFormatProvider, $styles: System.Globalization.TimeSpanStyles, $result: $Ref<System.TimeSpan>) : boolean
            public static TryParseExact ($input: string, $formats: System.Array$1<string>, $formatProvider: System.IFormatProvider, $styles: System.Globalization.TimeSpanStyles, $result: $Ref<System.TimeSpan>) : boolean
            public ToString () : string
            public ToString ($format: string) : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static op_UnaryNegation ($t: System.TimeSpan) : System.TimeSpan
            public static op_Subtraction ($t1: System.TimeSpan, $t2: System.TimeSpan) : System.TimeSpan
            public static op_UnaryPlus ($t: System.TimeSpan) : System.TimeSpan
            public static op_Addition ($t1: System.TimeSpan, $t2: System.TimeSpan) : System.TimeSpan
            public static op_Equality ($t1: System.TimeSpan, $t2: System.TimeSpan) : boolean
            public static op_Inequality ($t1: System.TimeSpan, $t2: System.TimeSpan) : boolean
            public static op_LessThan ($t1: System.TimeSpan, $t2: System.TimeSpan) : boolean
            public static op_LessThanOrEqual ($t1: System.TimeSpan, $t2: System.TimeSpan) : boolean
            public static op_GreaterThan ($t1: System.TimeSpan, $t2: System.TimeSpan) : boolean
            public static op_GreaterThanOrEqual ($t1: System.TimeSpan, $t2: System.TimeSpan) : boolean
            public constructor ($ticks: bigint)
            public constructor ($hours: number, $minutes: number, $seconds: number)
            public constructor ($days: number, $hours: number, $minutes: number, $seconds: number)
            public constructor ($days: number, $hours: number, $minutes: number, $seconds: number, $milliseconds: number)
            public CompareTo ($obj: any) : number
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        enum DateTimeKind
        { Unspecified = 0, Utc = 1, Local = 2 }
        enum DayOfWeek
        { Sunday = 0, Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6 }
        class DateTimeOffset extends System.ValueType implements System.IComparable, System.IComparable$1<System.DateTimeOffset>, System.Runtime.Serialization.IDeserializationCallback, System.IEquatable$1<System.DateTimeOffset>, System.Runtime.Serialization.ISerializable, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static MinValue : System.DateTimeOffset
            public static MaxValue : System.DateTimeOffset
            public static get Now(): System.DateTimeOffset;
            public static get UtcNow(): System.DateTimeOffset;
            public get DateTime(): Date;
            public get UtcDateTime(): Date;
            public get LocalDateTime(): Date;
            public get Date(): Date;
            public get Day(): number;
            public get DayOfWeek(): System.DayOfWeek;
            public get DayOfYear(): number;
            public get Hour(): number;
            public get Millisecond(): number;
            public get Minute(): number;
            public get Month(): number;
            public get Offset(): System.TimeSpan;
            public get Second(): number;
            public get Ticks(): bigint;
            public get UtcTicks(): bigint;
            public get TimeOfDay(): System.TimeSpan;
            public get Year(): number;
            public ToOffset ($offset: System.TimeSpan) : System.DateTimeOffset
            public Add ($timeSpan: System.TimeSpan) : System.DateTimeOffset
            public AddDays ($days: number) : System.DateTimeOffset
            public AddHours ($hours: number) : System.DateTimeOffset
            public AddMilliseconds ($milliseconds: number) : System.DateTimeOffset
            public AddMinutes ($minutes: number) : System.DateTimeOffset
            public AddMonths ($months: number) : System.DateTimeOffset
            public AddSeconds ($seconds: number) : System.DateTimeOffset
            public AddTicks ($ticks: bigint) : System.DateTimeOffset
            public AddYears ($years: number) : System.DateTimeOffset
            public static Compare ($first: System.DateTimeOffset, $second: System.DateTimeOffset) : number
            public CompareTo ($other: System.DateTimeOffset) : number
            public Equals ($obj: any) : boolean
            public Equals ($other: System.DateTimeOffset) : boolean
            public EqualsExact ($other: System.DateTimeOffset) : boolean
            public static Equals ($first: System.DateTimeOffset, $second: System.DateTimeOffset) : boolean
            public static FromFileTime ($fileTime: bigint) : System.DateTimeOffset
            public static FromUnixTimeSeconds ($seconds: bigint) : System.DateTimeOffset
            public static FromUnixTimeMilliseconds ($milliseconds: bigint) : System.DateTimeOffset
            public static Parse ($input: string) : System.DateTimeOffset
            public static Parse ($input: string, $formatProvider: System.IFormatProvider) : System.DateTimeOffset
            public static Parse ($input: string, $formatProvider: System.IFormatProvider, $styles: System.Globalization.DateTimeStyles) : System.DateTimeOffset
            public static ParseExact ($input: string, $format: string, $formatProvider: System.IFormatProvider) : System.DateTimeOffset
            public static ParseExact ($input: string, $format: string, $formatProvider: System.IFormatProvider, $styles: System.Globalization.DateTimeStyles) : System.DateTimeOffset
            public static ParseExact ($input: string, $formats: System.Array$1<string>, $formatProvider: System.IFormatProvider, $styles: System.Globalization.DateTimeStyles) : System.DateTimeOffset
            public Subtract ($value: System.DateTimeOffset) : System.TimeSpan
            public Subtract ($value: System.TimeSpan) : System.DateTimeOffset
            public ToFileTime () : bigint
            public ToUnixTimeSeconds () : bigint
            public ToUnixTimeMilliseconds () : bigint
            public ToLocalTime () : System.DateTimeOffset
            public ToString () : string
            public ToString ($format: string) : string
            public ToString ($formatProvider: System.IFormatProvider) : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public ToUniversalTime () : System.DateTimeOffset
            public static TryParse ($input: string, $result: $Ref<System.DateTimeOffset>) : boolean
            public static TryParse ($input: string, $formatProvider: System.IFormatProvider, $styles: System.Globalization.DateTimeStyles, $result: $Ref<System.DateTimeOffset>) : boolean
            public static TryParseExact ($input: string, $format: string, $formatProvider: System.IFormatProvider, $styles: System.Globalization.DateTimeStyles, $result: $Ref<System.DateTimeOffset>) : boolean
            public static TryParseExact ($input: string, $formats: System.Array$1<string>, $formatProvider: System.IFormatProvider, $styles: System.Globalization.DateTimeStyles, $result: $Ref<System.DateTimeOffset>) : boolean
            public static op_Implicit ($dateTime: Date) : System.DateTimeOffset
            public static op_Addition ($dateTimeOffset: System.DateTimeOffset, $timeSpan: System.TimeSpan) : System.DateTimeOffset
            public static op_Subtraction ($dateTimeOffset: System.DateTimeOffset, $timeSpan: System.TimeSpan) : System.DateTimeOffset
            public static op_Subtraction ($left: System.DateTimeOffset, $right: System.DateTimeOffset) : System.TimeSpan
            public static op_Equality ($left: System.DateTimeOffset, $right: System.DateTimeOffset) : boolean
            public static op_Inequality ($left: System.DateTimeOffset, $right: System.DateTimeOffset) : boolean
            public static op_LessThan ($left: System.DateTimeOffset, $right: System.DateTimeOffset) : boolean
            public static op_LessThanOrEqual ($left: System.DateTimeOffset, $right: System.DateTimeOffset) : boolean
            public static op_GreaterThan ($left: System.DateTimeOffset, $right: System.DateTimeOffset) : boolean
            public static op_GreaterThanOrEqual ($left: System.DateTimeOffset, $right: System.DateTimeOffset) : boolean
            public constructor ($ticks: bigint, $offset: System.TimeSpan)
            public constructor ($dateTime: Date)
            public constructor ($dateTime: Date, $offset: System.TimeSpan)
            public constructor ($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $offset: System.TimeSpan)
            public constructor ($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $millisecond: number, $offset: System.TimeSpan)
            public constructor ($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $millisecond: number, $calendar: System.Globalization.Calendar, $offset: System.TimeSpan)
            public CompareTo ($obj: any) : number
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        class DBNull extends System.Object implements System.IConvertible, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public static Value : System.DBNull
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public ToString () : string
            public ToString ($provider: System.IFormatProvider) : string
            public GetTypeCode () : System.TypeCode
            public ToBoolean ($provider: System.IFormatProvider) : boolean
            public ToChar ($provider: System.IFormatProvider) : number
            public ToSByte ($provider: System.IFormatProvider) : number
            public ToByte ($provider: System.IFormatProvider) : number
            public ToInt16 ($provider: System.IFormatProvider) : number
            public ToUInt16 ($provider: System.IFormatProvider) : number
            public ToInt32 ($provider: System.IFormatProvider) : number
            public ToUInt32 ($provider: System.IFormatProvider) : number
            public ToInt64 ($provider: System.IFormatProvider) : bigint
            public ToUInt64 ($provider: System.IFormatProvider) : bigint
            public ToSingle ($provider: System.IFormatProvider) : number
            public ToDouble ($provider: System.IFormatProvider) : number
            public ToDecimal ($provider: System.IFormatProvider) : System.Decimal
            public ToDateTime ($provider: System.IFormatProvider) : Date
            public ToType ($conversionType: System.Type, $provider: System.IFormatProvider) : any
        }
        enum MidpointRounding
        { ToEven = 0, AwayFromZero = 1 }
        class DivideByZeroException extends System.ArithmeticException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class TypeLoadException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public get TypeName(): string;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class DllNotFoundException extends System.TypeLoadException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
        }
        class DuplicateWaitObjectException extends System.ArgumentException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($parameterName: string)
            public constructor ($parameterName: string, $message: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ($message: string)
            public constructor ($message: string, $paramName: string, $innerException: System.Exception)
            public constructor ($message: string, $paramName: string)
        }
        class EntryPointNotFoundException extends System.TypeLoadException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
        }
        interface EventHandler
        { 
        (sender: any, e: System.EventArgs) : void; 
        Invoke?: (sender: any, e: System.EventArgs) => void;
        }
        var EventHandler: { new (func: (sender: any, e: System.EventArgs) => void): EventHandler; }
        class ExecutionEngineException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class MemberAccessException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class FieldAccessException extends System.MemberAccessException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
        }
        class FlagsAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class FormatException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        enum GCCollectionMode
        { Default = 0, Forced = 1, Optimized = 2 }
        enum GCNotificationStatus
        { Succeeded = 0, Failed = 1, Canceled = 2, Timeout = 3, NotApplicable = 4 }
        class GC extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get MaxGeneration(): number;
            public static AddMemoryPressure ($bytesAllocated: bigint) : void
            public static RemoveMemoryPressure ($bytesAllocated: bigint) : void
            public static GetGeneration ($obj: any) : number
            public static Collect ($generation: number) : void
            public static Collect () : void
            public static Collect ($generation: number, $mode: System.GCCollectionMode) : void
            public static Collect ($generation: number, $mode: System.GCCollectionMode, $blocking: boolean) : void
            public static Collect ($generation: number, $mode: System.GCCollectionMode, $blocking: boolean, $compacting: boolean) : void
            public static CollectionCount ($generation: number) : number
            public static KeepAlive ($obj: any) : void
            public static GetGeneration ($wo: System.WeakReference) : number
            public static WaitForPendingFinalizers () : void
            public static SuppressFinalize ($obj: any) : void
            public static ReRegisterForFinalize ($obj: any) : void
            public static GetTotalMemory ($forceFullCollection: boolean) : bigint
            public static RegisterForFullGCNotification ($maxGenerationThreshold: number, $largeObjectHeapThreshold: number) : void
            public static CancelFullGCNotification () : void
            public static WaitForFullGCApproach () : System.GCNotificationStatus
            public static WaitForFullGCApproach ($millisecondsTimeout: number) : System.GCNotificationStatus
            public static WaitForFullGCComplete () : System.GCNotificationStatus
            public static WaitForFullGCComplete ($millisecondsTimeout: number) : System.GCNotificationStatus
            public static TryStartNoGCRegion ($totalSize: bigint) : boolean
            public static TryStartNoGCRegion ($totalSize: bigint, $lohSize: bigint) : boolean
            public static TryStartNoGCRegion ($totalSize: bigint, $disallowFullBlockingGC: boolean) : boolean
            public static TryStartNoGCRegion ($totalSize: bigint, $lohSize: bigint, $disallowFullBlockingGC: boolean) : boolean
            public static EndNoGCRegion () : void
        }
        class WeakReference extends System.Object implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get IsAlive(): boolean;
            public get Target(): any;
            public set Target(value: any);
            public get TrackResurrection(): boolean;
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public constructor ($target: any)
            public constructor ($target: any, $trackResurrection: boolean)
            public constructor ()
        }
        class Guid extends System.ValueType implements System.IComparable, System.IComparable$1<System.Guid>, System.IEquatable$1<System.Guid>, System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            public static Empty : System.Guid
            public static Parse ($input: string) : System.Guid
            public static TryParse ($input: string, $result: $Ref<System.Guid>) : boolean
            public static ParseExact ($input: string, $format: string) : System.Guid
            public static TryParseExact ($input: string, $format: string, $result: $Ref<System.Guid>) : boolean
            public ToByteArray () : System.Array$1<number>
            public ToString () : string
            public Equals ($o: any) : boolean
            public Equals ($g: System.Guid) : boolean
            public CompareTo ($value: any) : number
            public CompareTo ($value: System.Guid) : number
            public static op_Equality ($a: System.Guid, $b: System.Guid) : boolean
            public static op_Inequality ($a: System.Guid, $b: System.Guid) : boolean
            public ToString ($format: string) : string
            public ToString ($format: string, $provider: System.IFormatProvider) : string
            public static NewGuid () : System.Guid
            public constructor ($b: System.Array$1<number>)
            public constructor ($a: number, $b: number, $c: number, $d: number, $e: number, $f: number, $g: number, $h: number, $i: number, $j: number, $k: number)
            public constructor ($a: number, $b: number, $c: number, $d: System.Array$1<number>)
            public constructor ($g: string)
            public CompareTo ($obj: any) : number
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        interface AssemblyLoadEventHandler
        { 
        (sender: any, args: System.AssemblyLoadEventArgs) : void; 
        Invoke?: (sender: any, args: System.AssemblyLoadEventArgs) => void;
        }
        var AssemblyLoadEventHandler: { new (func: (sender: any, args: System.AssemblyLoadEventArgs) => void): AssemblyLoadEventHandler; }
        class AssemblyLoadEventArgs extends System.EventArgs
        {
            protected [__keep_incompatibility]: never;
            public get LoadedAssembly(): System.Reflection.Assembly;
            public constructor ($loadedAssembly: System.Reflection.Assembly)
            public constructor ()
        }
        interface ResolveEventHandler
        { 
        (sender: any, args: System.ResolveEventArgs) : System.Reflection.Assembly; 
        Invoke?: (sender: any, args: System.ResolveEventArgs) => System.Reflection.Assembly;
        }
        var ResolveEventHandler: { new (func: (sender: any, args: System.ResolveEventArgs) => System.Reflection.Assembly): ResolveEventHandler; }
        class ResolveEventArgs extends System.EventArgs
        {
            protected [__keep_incompatibility]: never;
            public get Name(): string;
            public get RequestingAssembly(): System.Reflection.Assembly;
            public constructor ($name: string)
            public constructor ($name: string, $requestingAssembly: System.Reflection.Assembly)
            public constructor ()
        }
        interface UnhandledExceptionEventHandler
        { 
        (sender: any, e: System.UnhandledExceptionEventArgs) : void; 
        Invoke?: (sender: any, e: System.UnhandledExceptionEventArgs) => void;
        }
        var UnhandledExceptionEventHandler: { new (func: (sender: any, e: System.UnhandledExceptionEventArgs) => void): UnhandledExceptionEventHandler; }
        class UnhandledExceptionEventArgs extends System.EventArgs
        {
            protected [__keep_incompatibility]: never;
            public get ExceptionObject(): any;
            public get IsTerminating(): boolean;
            public constructor ($exception: any, $isTerminating: boolean)
            public constructor ()
        }
        interface CrossAppDomainDelegate
        { 
        () : void; 
        Invoke?: () => void;
        }
        var CrossAppDomainDelegate: { new (func: () => void): CrossAppDomainDelegate; }
        interface IAppDomainSetup
        {
            ApplicationBase : string
            ApplicationName : string
            CachePath : string
            ConfigurationFile : string
            DynamicBase : string
            LicenseFile : string
            PrivateBinPath : string
            PrivateBinPathProbe : string
            ShadowCopyDirectories : string
            ShadowCopyFiles : string
        }
        interface ICustomFormatter
        {
            Format ($format: string, $arg: any, $formatProvider: System.IFormatProvider) : string
        }
        class IndexOutOfRangeException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class InsufficientExecutionStackException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class OutOfMemoryException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class InsufficientMemoryException extends System.OutOfMemoryException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class InvalidCastException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ($message: string, $errorCode: number)
        }
        class InvalidOperationException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class InvalidProgramException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class InvalidTimeZoneException extends System.Exception implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ()
        }
        interface IServiceProvider
        {
            GetService ($serviceType: System.Type) : any
        }
        class Math extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static PI : number
            public static E : number
            public static Acos ($d: number) : number
            public static Asin ($d: number) : number
            public static Atan ($d: number) : number
            public static Atan2 ($y: number, $x: number) : number
            public static Ceiling ($d: System.Decimal) : System.Decimal
            public static Ceiling ($a: number) : number
            public static Cos ($d: number) : number
            public static Cosh ($value: number) : number
            public static Floor ($d: System.Decimal) : System.Decimal
            public static Floor ($d: number) : number
            public static Sin ($a: number) : number
            public static Tan ($a: number) : number
            public static Sinh ($value: number) : number
            public static Tanh ($value: number) : number
            public static Round ($a: number) : number
            public static Round ($value: number, $digits: number) : number
            public static Round ($value: number, $mode: System.MidpointRounding) : number
            public static Round ($value: number, $digits: number, $mode: System.MidpointRounding) : number
            public static Round ($d: System.Decimal) : System.Decimal
            public static Round ($d: System.Decimal, $decimals: number) : System.Decimal
            public static Round ($d: System.Decimal, $mode: System.MidpointRounding) : System.Decimal
            public static Round ($d: System.Decimal, $decimals: number, $mode: System.MidpointRounding) : System.Decimal
            public static Truncate ($d: System.Decimal) : System.Decimal
            public static Truncate ($d: number) : number
            public static Sqrt ($d: number) : number
            public static Log ($d: number) : number
            public static Log10 ($d: number) : number
            public static Exp ($d: number) : number
            public static Pow ($x: number, $y: number) : number
            public static IEEERemainder ($x: number, $y: number) : number
            public static Abs ($value: number) : number
            public static Abs ($value: bigint) : bigint
            public static Abs ($value: System.Decimal) : System.Decimal
            public static Max ($val1: number, $val2: number) : number
            public static Max ($val1: bigint, $val2: bigint) : bigint
            public static Max ($val1: System.Decimal, $val2: System.Decimal) : System.Decimal
            public static Min ($val1: number, $val2: number) : number
            public static Min ($val1: bigint, $val2: bigint) : bigint
            public static Min ($val1: System.Decimal, $val2: System.Decimal) : System.Decimal
            public static Log ($a: number, $newBase: number) : number
            public static Sign ($value: number) : number
            public static Sign ($value: bigint) : number
            public static Sign ($value: System.Decimal) : number
            public static BigMul ($a: number, $b: number) : bigint
            public static DivRem ($a: number, $b: number, $result: $Ref<number>) : number
            public static DivRem ($a: bigint, $b: bigint, $result: $Ref<bigint>) : bigint
        }
        class MethodAccessException extends System.MemberAccessException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
        }
        class MissingMemberException extends System.MemberAccessException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($className: string, $memberName: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class MissingFieldException extends System.MissingMemberException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($className: string, $fieldName: string)
            public constructor ($className: string, $memberName: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class MissingMethodException extends System.MissingMemberException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($className: string, $methodName: string)
            public constructor ($className: string, $memberName: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class MulticastNotSupportedException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class NonSerializedAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class NotFiniteNumberException extends System.ArithmeticException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get OffendingNumber(): number;
            public constructor ()
            public constructor ($offendingNumber: number)
            public constructor ($message: string)
            public constructor ($message: string, $offendingNumber: number)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ($message: string, $offendingNumber: number, $innerException: System.Exception)
        }
        class NotImplementedException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class NotSupportedException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class NullReferenceException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class ObjectDisposedException extends System.InvalidOperationException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public get ObjectName(): string;
            public constructor ($objectName: string)
            public constructor ($objectName: string, $message: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ()
            public constructor ($message: string)
        }
        class ObsoleteAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public get IsError(): boolean;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $error: boolean)
        }
        class OperationCanceledException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get CancellationToken(): System.Threading.CancellationToken;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ($token: System.Threading.CancellationToken)
            public constructor ($message: string, $token: System.Threading.CancellationToken)
            public constructor ($message: string, $innerException: System.Exception, $token: System.Threading.CancellationToken)
        }
        class OverflowException extends System.ArithmeticException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class ParamArrayAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class PlatformNotSupportedException extends System.NotSupportedException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class Random extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public Next () : number
            public Next ($minValue: number, $maxValue: number) : number
            public Next ($maxValue: number) : number
            public NextDouble () : number
            public NextBytes ($buffer: System.Array$1<number>) : void
            public constructor ()
            public constructor ($Seed: number)
        }
        class RankException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class SerializableAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class StackOverflowException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        enum StringComparison
        { CurrentCulture = 0, CurrentCultureIgnoreCase = 1, InvariantCulture = 2, InvariantCultureIgnoreCase = 3, Ordinal = 4, OrdinalIgnoreCase = 5 }
        enum StringSplitOptions
        { None = 0, RemoveEmptyEntries = 1 }
        class StringComparer extends System.Object implements System.Collections.Generic.IEqualityComparer$1<string>, System.Collections.IEqualityComparer, System.Collections.Generic.IComparer$1<string>, System.Collections.IComparer
        {
            protected [__keep_incompatibility]: never;
            public static get InvariantCulture(): System.StringComparer;
            public static get InvariantCultureIgnoreCase(): System.StringComparer;
            public static get CurrentCulture(): System.StringComparer;
            public static get CurrentCultureIgnoreCase(): System.StringComparer;
            public static get Ordinal(): System.StringComparer;
            public static get OrdinalIgnoreCase(): System.StringComparer;
            public static Create ($culture: System.Globalization.CultureInfo, $ignoreCase: boolean) : System.StringComparer
            public Compare ($x: any, $y: any) : number
            public Equals ($x: any, $y: any) : boolean
            public GetHashCode ($obj: any) : number
            public Compare ($x: string, $y: string) : number
            public Equals ($x: string, $y: string) : boolean
            public GetHashCode ($obj: string) : number
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public GetHashCode () : number
        }
        class STAThreadAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class MTAThreadAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class ThreadStaticAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class TimeoutException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class TimeZoneInfo extends System.Object implements System.Runtime.Serialization.IDeserializationCallback, System.IEquatable$1<System.TimeZoneInfo>, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get BaseUtcOffset(): System.TimeSpan;
            public get DaylightName(): string;
            public get DisplayName(): string;
            public get Id(): string;
            public static get Local(): System.TimeZoneInfo;
            public get StandardName(): string;
            public get SupportsDaylightSavingTime(): boolean;
            public static get Utc(): System.TimeZoneInfo;
            public static FromSerializedString ($source: string) : System.TimeZoneInfo
            public ToSerializedString () : string
            public static ClearCachedData () : void
            public static ConvertTime ($dateTime: Date, $destinationTimeZone: System.TimeZoneInfo) : Date
            public static ConvertTime ($dateTime: Date, $sourceTimeZone: System.TimeZoneInfo, $destinationTimeZone: System.TimeZoneInfo) : Date
            public static ConvertTime ($dateTimeOffset: System.DateTimeOffset, $destinationTimeZone: System.TimeZoneInfo) : System.DateTimeOffset
            public static ConvertTimeBySystemTimeZoneId ($dateTime: Date, $destinationTimeZoneId: string) : Date
            public static ConvertTimeBySystemTimeZoneId ($dateTime: Date, $sourceTimeZoneId: string, $destinationTimeZoneId: string) : Date
            public static ConvertTimeBySystemTimeZoneId ($dateTimeOffset: System.DateTimeOffset, $destinationTimeZoneId: string) : System.DateTimeOffset
            public static ConvertTimeFromUtc ($dateTime: Date, $destinationTimeZone: System.TimeZoneInfo) : Date
            public static ConvertTimeToUtc ($dateTime: Date) : Date
            public static ConvertTimeToUtc ($dateTime: Date, $sourceTimeZone: System.TimeZoneInfo) : Date
            public static CreateCustomTimeZone ($id: string, $baseUtcOffset: System.TimeSpan, $displayName: string, $standardDisplayName: string) : System.TimeZoneInfo
            public static CreateCustomTimeZone ($id: string, $baseUtcOffset: System.TimeSpan, $displayName: string, $standardDisplayName: string, $daylightDisplayName: string, $adjustmentRules: System.Array$1<System.TimeZoneInfo.AdjustmentRule>) : System.TimeZoneInfo
            public static CreateCustomTimeZone ($id: string, $baseUtcOffset: System.TimeSpan, $displayName: string, $standardDisplayName: string, $daylightDisplayName: string, $adjustmentRules: System.Array$1<System.TimeZoneInfo.AdjustmentRule>, $disableDaylightSavingTime: boolean) : System.TimeZoneInfo
            public Equals ($obj: any) : boolean
            public Equals ($other: System.TimeZoneInfo) : boolean
            public static FindSystemTimeZoneById ($id: string) : System.TimeZoneInfo
            public GetAdjustmentRules () : System.Array$1<System.TimeZoneInfo.AdjustmentRule>
            public GetAmbiguousTimeOffsets ($dateTime: Date) : System.Array$1<System.TimeSpan>
            public GetAmbiguousTimeOffsets ($dateTimeOffset: System.DateTimeOffset) : System.Array$1<System.TimeSpan>
            public static GetSystemTimeZones () : System.Collections.ObjectModel.ReadOnlyCollection$1<System.TimeZoneInfo>
            public GetUtcOffset ($dateTime: Date) : System.TimeSpan
            public GetUtcOffset ($dateTimeOffset: System.DateTimeOffset) : System.TimeSpan
            public HasSameRules ($other: System.TimeZoneInfo) : boolean
            public IsAmbiguousTime ($dateTime: Date) : boolean
            public IsAmbiguousTime ($dateTimeOffset: System.DateTimeOffset) : boolean
            public IsDaylightSavingTime ($dateTime: Date) : boolean
            public IsDaylightSavingTime ($dateTimeOffset: System.DateTimeOffset) : boolean
            public IsInvalidTime ($dateTime: Date) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class TimeZoneNotFoundException extends System.Exception implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ()
        }
        interface Func$4<T1, T2, T3, TResult>
        { 
        (arg1: T1, arg2: T2, arg3: T3) : TResult; 
        Invoke?: (arg1: T1, arg2: T2, arg3: T3) => TResult;
        }
        class RuntimeTypeHandle extends System.ValueType implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Value(): System.IntPtr;
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public Equals ($obj: any) : boolean
            public Equals ($handle: System.RuntimeTypeHandle) : boolean
            public static op_Equality ($left: System.RuntimeTypeHandle, $right: any) : boolean
            public static op_Inequality ($left: System.RuntimeTypeHandle, $right: any) : boolean
            public static op_Equality ($left: any, $right: System.RuntimeTypeHandle) : boolean
            public static op_Inequality ($left: any, $right: System.RuntimeTypeHandle) : boolean
            public GetModuleHandle () : System.ModuleHandle
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class TypeAccessException extends System.TypeLoadException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
        }
        class TypedReference extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public static MakeTypedReference ($target: any, $flds: System.Array$1<System.Reflection.FieldInfo>) : System.TypedReference
            public static ToObject ($value: System.TypedReference) : any
            public static GetTargetType ($value: System.TypedReference) : System.Type
            public static TargetTypeToken ($value: System.TypedReference) : System.RuntimeTypeHandle
            public static SetTypedReference ($target: System.TypedReference, $value: any) : void
        }
        class TypeInitializationException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get TypeName(): string;
            public constructor ($fullTypeName: string, $innerException: System.Exception)
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class TypeUnloadedException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class UnauthorizedAccessException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class AppDomainSetup extends System.Object implements System.IAppDomainSetup
        {
            protected [__keep_incompatibility]: never;
            public get ApplicationBase(): string;
            public set ApplicationBase(value: string);
            public get ApplicationName(): string;
            public set ApplicationName(value: string);
            public get CachePath(): string;
            public set CachePath(value: string);
            public get ConfigurationFile(): string;
            public set ConfigurationFile(value: string);
            public get DisallowPublisherPolicy(): boolean;
            public set DisallowPublisherPolicy(value: boolean);
            public get DynamicBase(): string;
            public set DynamicBase(value: string);
            public get LicenseFile(): string;
            public set LicenseFile(value: string);
            public get LoaderOptimization(): System.LoaderOptimization;
            public set LoaderOptimization(value: System.LoaderOptimization);
            public get PrivateBinPath(): string;
            public set PrivateBinPath(value: string);
            public get PrivateBinPathProbe(): string;
            public set PrivateBinPathProbe(value: string);
            public get ShadowCopyDirectories(): string;
            public set ShadowCopyDirectories(value: string);
            public get ShadowCopyFiles(): string;
            public set ShadowCopyFiles(value: string);
            public get DisallowBindingRedirects(): boolean;
            public set DisallowBindingRedirects(value: boolean);
            public get DisallowCodeDownload(): boolean;
            public set DisallowCodeDownload(value: boolean);
            public get TargetFrameworkName(): string;
            public set TargetFrameworkName(value: string);
            public get ActivationArguments(): System.Runtime.Hosting.ActivationArguments;
            public set ActivationArguments(value: System.Runtime.Hosting.ActivationArguments);
            public get AppDomainInitializer(): System.AppDomainInitializer;
            public set AppDomainInitializer(value: System.AppDomainInitializer);
            public get AppDomainInitializerArguments(): System.Array$1<string>;
            public set AppDomainInitializerArguments(value: System.Array$1<string>);
            public get ApplicationTrust(): System.Security.Policy.ApplicationTrust;
            public set ApplicationTrust(value: System.Security.Policy.ApplicationTrust);
            public get DisallowApplicationBaseProbing(): boolean;
            public set DisallowApplicationBaseProbing(value: boolean);
            public get AppDomainManagerAssembly(): string;
            public set AppDomainManagerAssembly(value: string);
            public get AppDomainManagerType(): string;
            public set AppDomainManagerType(value: string);
            public get PartialTrustVisibleAssemblies(): System.Array$1<string>;
            public set PartialTrustVisibleAssemblies(value: System.Array$1<string>);
            public get SandboxInterop(): boolean;
            public set SandboxInterop(value: boolean);
            public GetConfigurationBytes () : System.Array$1<number>
            public SetConfigurationBytes ($value: System.Array$1<number>) : void
            public SetCompatibilitySwitches ($switches: System.Collections.Generic.IEnumerable$1<string>) : void
            public SetNativeFunction ($functionName: string, $functionVersion: number, $functionPointer: System.IntPtr) : void
            public constructor ()
            public constructor ($activationArguments: System.Runtime.Hosting.ActivationArguments)
            public constructor ($activationContext: System.ActivationContext)
        }
        interface EventHandler$1<TEventArgs>
        { 
        (sender: any, e: TEventArgs) : void; 
        Invoke?: (sender: any, e: TEventArgs) => void;
        }
        class AppDomainManager extends System.MarshalByRefObject
        {
            protected [__keep_incompatibility]: never;
            public get ApplicationActivator(): System.Runtime.Hosting.ApplicationActivator;
            public get EntryAssembly(): System.Reflection.Assembly;
            public get HostExecutionContextManager(): System.Threading.HostExecutionContextManager;
            public get HostSecurityManager(): System.Security.HostSecurityManager;
            public get InitializationFlags(): System.AppDomainManagerInitializationOptions;
            public set InitializationFlags(value: System.AppDomainManagerInitializationOptions);
            public CreateDomain ($friendlyName: string, $securityInfo: System.Security.Policy.Evidence, $appDomainInfo: System.AppDomainSetup) : System.AppDomain
            public InitializeNewDomain ($appDomainInfo: System.AppDomainSetup) : void
            public CheckSecuritySettings ($state: System.Security.SecurityState) : boolean
            public constructor ()
        }
        class ApplicationIdentity extends System.Object implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get CodeBase(): string;
            public get FullName(): string;
            public constructor ($applicationIdentityFullName: string)
            public constructor ()
        }
        interface AppDomainInitializer
        { 
        (args: System.Array$1<string>) : void; 
        Invoke?: (args: System.Array$1<string>) => void;
        }
        var AppDomainInitializer: { new (func: (args: System.Array$1<string>) => void): AppDomainInitializer; }
        class Nullable$1<T> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class Environment extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get CommandLine(): string;
            public static get CurrentDirectory(): string;
            public static set CurrentDirectory(value: string);
            public static get CurrentManagedThreadId(): number;
            public static get ExitCode(): number;
            public static set ExitCode(value: number);
            public static get HasShutdownStarted(): boolean;
            public static get MachineName(): string;
            public static get NewLine(): string;
            public static get OSVersion(): System.OperatingSystem;
            public static get StackTrace(): string;
            public static get SystemDirectory(): string;
            public static get TickCount(): number;
            public static get UserDomainName(): string;
            public static get UserInteractive(): boolean;
            public static get UserName(): string;
            public static get Version(): System.Version;
            public static get WorkingSet(): bigint;
            public static get Is64BitOperatingSystem(): boolean;
            public static get SystemPageSize(): number;
            public static get Is64BitProcess(): boolean;
            public static get ProcessorCount(): number;
            public static Exit ($exitCode: number) : void
            public static ExpandEnvironmentVariables ($name: string) : string
            public static GetCommandLineArgs () : System.Array$1<string>
            public static GetEnvironmentVariable ($variable: string) : string
            public static GetEnvironmentVariables () : System.Collections.IDictionary
            public static GetFolderPath ($folder: System.Environment.SpecialFolder) : string
            public static GetFolderPath ($folder: System.Environment.SpecialFolder, $option: System.Environment.SpecialFolderOption) : string
            public static GetLogicalDrives () : System.Array$1<string>
            public static GetEnvironmentVariable ($variable: string, $target: System.EnvironmentVariableTarget) : string
            public static GetEnvironmentVariables ($target: System.EnvironmentVariableTarget) : System.Collections.IDictionary
            public static SetEnvironmentVariable ($variable: string, $value: string) : void
            public static SetEnvironmentVariable ($variable: string, $value: string, $target: System.EnvironmentVariableTarget) : void
            public static FailFast ($message: string) : void
            public static FailFast ($message: string, $exception: System.Exception) : void
        }
        class OperatingSystem extends System.Object implements System.ICloneable, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Platform(): System.PlatformID;
            public get Version(): System.Version;
            public get ServicePack(): string;
            public get VersionString(): string;
            public Clone () : any
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public constructor ($platform: System.PlatformID, $version: System.Version)
            public constructor ()
        }
        enum EnvironmentVariableTarget
        { Process = 0, User = 1, Machine = 2 }
        enum AppDomainManagerInitializationOptions
        { None = 0, RegisterWithHost = 1 }
        class ArgIterator extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public End () : void
            public GetNextArg () : System.TypedReference
            public GetNextArg ($rth: System.RuntimeTypeHandle) : System.TypedReference
            public GetNextArgType () : System.RuntimeTypeHandle
            public GetRemainingCount () : number
            public constructor ($arglist: System.RuntimeArgumentHandle)
            public constructor ()
        }
        class RuntimeArgumentHandle extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class Console extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get Error(): System.IO.TextWriter;
            public static get Out(): System.IO.TextWriter;
            public static get In(): System.IO.TextReader;
            public static get InputEncoding(): System.Text.Encoding;
            public static set InputEncoding(value: System.Text.Encoding);
            public static get OutputEncoding(): System.Text.Encoding;
            public static set OutputEncoding(value: System.Text.Encoding);
            public static get BackgroundColor(): System.ConsoleColor;
            public static set BackgroundColor(value: System.ConsoleColor);
            public static get BufferHeight(): number;
            public static set BufferHeight(value: number);
            public static get BufferWidth(): number;
            public static set BufferWidth(value: number);
            public static get CapsLock(): boolean;
            public static get CursorLeft(): number;
            public static set CursorLeft(value: number);
            public static get CursorTop(): number;
            public static set CursorTop(value: number);
            public static get CursorSize(): number;
            public static set CursorSize(value: number);
            public static get CursorVisible(): boolean;
            public static set CursorVisible(value: boolean);
            public static get ForegroundColor(): System.ConsoleColor;
            public static set ForegroundColor(value: System.ConsoleColor);
            public static get KeyAvailable(): boolean;
            public static get LargestWindowHeight(): number;
            public static get LargestWindowWidth(): number;
            public static get NumberLock(): boolean;
            public static get Title(): string;
            public static set Title(value: string);
            public static get TreatControlCAsInput(): boolean;
            public static set TreatControlCAsInput(value: boolean);
            public static get WindowHeight(): number;
            public static set WindowHeight(value: number);
            public static get WindowLeft(): number;
            public static set WindowLeft(value: number);
            public static get WindowTop(): number;
            public static set WindowTop(value: number);
            public static get WindowWidth(): number;
            public static set WindowWidth(value: number);
            public static get IsErrorRedirected(): boolean;
            public static get IsOutputRedirected(): boolean;
            public static get IsInputRedirected(): boolean;
            public static OpenStandardError () : System.IO.Stream
            public static OpenStandardError ($bufferSize: number) : System.IO.Stream
            public static OpenStandardInput () : System.IO.Stream
            public static OpenStandardInput ($bufferSize: number) : System.IO.Stream
            public static OpenStandardOutput () : System.IO.Stream
            public static OpenStandardOutput ($bufferSize: number) : System.IO.Stream
            public static SetError ($newError: System.IO.TextWriter) : void
            public static SetIn ($newIn: System.IO.TextReader) : void
            public static SetOut ($newOut: System.IO.TextWriter) : void
            public static Write ($value: boolean) : void
            public static Write ($value: number) : void
            public static Write ($buffer: System.Array$1<number>) : void
            public static Write ($value: System.Decimal) : void
            public static Write ($value: bigint) : void
            public static Write ($value: any) : void
            public static Write ($value: string) : void
            public static Write ($format: string, $arg0: any) : void
            public static Write ($format: string, ...arg: any[]) : void
            public static Write ($buffer: System.Array$1<number>, $index: number, $count: number) : void
            public static Write ($format: string, $arg0: any, $arg1: any) : void
            public static Write ($format: string, $arg0: any, $arg1: any, $arg2: any) : void
            public static Write ($format: string, $arg0: any, $arg1: any, $arg2: any, $arg3: any) : void
            public static WriteLine () : void
            public static WriteLine ($value: boolean) : void
            public static WriteLine ($value: number) : void
            public static WriteLine ($buffer: System.Array$1<number>) : void
            public static WriteLine ($value: System.Decimal) : void
            public static WriteLine ($value: bigint) : void
            public static WriteLine ($value: any) : void
            public static WriteLine ($value: string) : void
            public static WriteLine ($format: string, $arg0: any) : void
            public static WriteLine ($format: string, ...arg: any[]) : void
            public static WriteLine ($buffer: System.Array$1<number>, $index: number, $count: number) : void
            public static WriteLine ($format: string, $arg0: any, $arg1: any) : void
            public static WriteLine ($format: string, $arg0: any, $arg1: any, $arg2: any) : void
            public static WriteLine ($format: string, $arg0: any, $arg1: any, $arg2: any, $arg3: any) : void
            public static Read () : number
            public static ReadLine () : string
            public static Beep () : void
            public static Beep ($frequency: number, $duration: number) : void
            public static Clear () : void
            public static MoveBufferArea ($sourceLeft: number, $sourceTop: number, $sourceWidth: number, $sourceHeight: number, $targetLeft: number, $targetTop: number) : void
            public static MoveBufferArea ($sourceLeft: number, $sourceTop: number, $sourceWidth: number, $sourceHeight: number, $targetLeft: number, $targetTop: number, $sourceChar: number, $sourceForeColor: System.ConsoleColor, $sourceBackColor: System.ConsoleColor) : void
            public static ReadKey () : System.ConsoleKeyInfo
            public static ReadKey ($intercept: boolean) : System.ConsoleKeyInfo
            public static ResetColor () : void
            public static SetBufferSize ($width: number, $height: number) : void
            public static SetCursorPosition ($left: number, $top: number) : void
            public static SetWindowPosition ($left: number, $top: number) : void
            public static SetWindowSize ($width: number, $height: number) : void
            public static add_CancelKeyPress ($value: System.ConsoleCancelEventHandler) : void
            public static remove_CancelKeyPress ($value: System.ConsoleCancelEventHandler) : void
        }
        class ModuleHandle extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public static EmptyHandle : System.ModuleHandle
            public get MDStreamVersion(): number;
            public ResolveFieldHandle ($fieldToken: number) : System.RuntimeFieldHandle
            public ResolveMethodHandle ($methodToken: number) : System.RuntimeMethodHandle
            public ResolveTypeHandle ($typeToken: number) : System.RuntimeTypeHandle
            public ResolveTypeHandle ($typeToken: number, $typeInstantiationContext: System.Array$1<System.RuntimeTypeHandle>, $methodInstantiationContext: System.Array$1<System.RuntimeTypeHandle>) : System.RuntimeTypeHandle
            public ResolveMethodHandle ($methodToken: number, $typeInstantiationContext: System.Array$1<System.RuntimeTypeHandle>, $methodInstantiationContext: System.Array$1<System.RuntimeTypeHandle>) : System.RuntimeMethodHandle
            public ResolveFieldHandle ($fieldToken: number, $typeInstantiationContext: System.Array$1<System.RuntimeTypeHandle>, $methodInstantiationContext: System.Array$1<System.RuntimeTypeHandle>) : System.RuntimeFieldHandle
            public GetRuntimeFieldHandleFromMetadataToken ($fieldToken: number) : System.RuntimeFieldHandle
            public GetRuntimeMethodHandleFromMetadataToken ($methodToken: number) : System.RuntimeMethodHandle
            public GetRuntimeTypeHandleFromMetadataToken ($typeToken: number) : System.RuntimeTypeHandle
            public Equals ($obj: any) : boolean
            public Equals ($handle: System.ModuleHandle) : boolean
            public static op_Equality ($left: System.ModuleHandle, $right: System.ModuleHandle) : boolean
            public static op_Inequality ($left: System.ModuleHandle, $right: System.ModuleHandle) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class RuntimeFieldHandle extends System.ValueType implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Value(): System.IntPtr;
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public Equals ($obj: any) : boolean
            public Equals ($handle: System.RuntimeFieldHandle) : boolean
            public static op_Equality ($left: System.RuntimeFieldHandle, $right: System.RuntimeFieldHandle) : boolean
            public static op_Inequality ($left: System.RuntimeFieldHandle, $right: System.RuntimeFieldHandle) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class RuntimeMethodHandle extends System.ValueType implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Value(): System.IntPtr;
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public GetFunctionPointer () : System.IntPtr
            public Equals ($obj: any) : boolean
            public Equals ($handle: System.RuntimeMethodHandle) : boolean
            public static op_Equality ($left: System.RuntimeMethodHandle, $right: System.RuntimeMethodHandle) : boolean
            public static op_Inequality ($left: System.RuntimeMethodHandle, $right: System.RuntimeMethodHandle) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class Nullable extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetUnderlyingType ($nullableType: System.Type) : System.Type
        }
        enum PlatformID
        { Win32S = 0, Win32Windows = 1, Win32NT = 2, WinCE = 3, Unix = 4, Xbox = 5, MacOSX = 6 }
        class TimeZone extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get CurrentTimeZone(): System.TimeZone;
            public get DaylightName(): string;
            public get StandardName(): string;
            public GetDaylightChanges ($year: number) : System.Globalization.DaylightTime
            public GetUtcOffset ($time: Date) : System.TimeSpan
            public IsDaylightSavingTime ($time: Date) : boolean
            public static IsDaylightSavingTime ($time: Date, $daylightTimes: System.Globalization.DaylightTime) : boolean
            public ToLocalTime ($time: Date) : Date
            public ToUniversalTime ($time: Date) : Date
        }
        class UIntPtr extends System.ValueType implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public static Zero : System.UIntPtr
            public static get Size(): number;
            public ToUInt32 () : number
            public ToUInt64 () : bigint
            public static op_Equality ($value1: System.UIntPtr, $value2: System.UIntPtr) : boolean
            public static op_Inequality ($value1: System.UIntPtr, $value2: System.UIntPtr) : boolean
            public static op_Explicit ($value: System.UIntPtr) : bigint
            public static op_Explicit ($value: System.UIntPtr) : number
            public static op_Explicit ($value: bigint) : System.UIntPtr
            public static op_Explicit ($value: number) : System.UIntPtr
            public static Add ($pointer: System.UIntPtr, $offset: number) : System.UIntPtr
            public static Subtract ($pointer: System.UIntPtr, $offset: number) : System.UIntPtr
            public static op_Addition ($pointer: System.UIntPtr, $offset: number) : System.UIntPtr
            public static op_Subtraction ($pointer: System.UIntPtr, $offset: number) : System.UIntPtr
            public constructor ($value: bigint)
            public constructor ($value: number)
            public constructor ()
        }
        class Memory$1<T> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class ReadOnlyMemory$1<T> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        interface Func$1<TResult>
        { 
        () : TResult; 
        Invoke?: () => TResult;
        }
        interface Action$2<T1, T2>
        { 
        (arg1: T1, arg2: T2) : void; 
        Invoke?: (arg1: T1, arg2: T2) => void;
        }
        interface Action$3<T1, T2, T3>
        { 
        (arg1: T1, arg2: T2, arg3: T3) : void; 
        Invoke?: (arg1: T1, arg2: T2, arg3: T3) => void;
        }
        class Uri extends System.Object implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public static UriSchemeFile : string
            public static UriSchemeFtp : string
            public static UriSchemeGopher : string
            public static UriSchemeHttp : string
            public static UriSchemeHttps : string
            public static UriSchemeMailto : string
            public static UriSchemeNews : string
            public static UriSchemeNntp : string
            public static UriSchemeNetTcp : string
            public static UriSchemeNetPipe : string
            public static SchemeDelimiter : string
            public get AbsolutePath(): string;
            public get AbsoluteUri(): string;
            public get LocalPath(): string;
            public get Authority(): string;
            public get HostNameType(): System.UriHostNameType;
            public get IsDefaultPort(): boolean;
            public get IsFile(): boolean;
            public get IsLoopback(): boolean;
            public get PathAndQuery(): string;
            public get Segments(): System.Array$1<string>;
            public get IsUnc(): boolean;
            public get Host(): string;
            public get Port(): number;
            public get Query(): string;
            public get Fragment(): string;
            public get Scheme(): string;
            public get OriginalString(): string;
            public get DnsSafeHost(): string;
            public get IdnHost(): string;
            public get IsAbsoluteUri(): boolean;
            public get UserEscaped(): boolean;
            public get UserInfo(): string;
            public static CheckHostName ($name: string) : System.UriHostNameType
            public GetLeftPart ($part: System.UriPartial) : string
            public static HexEscape ($character: number) : string
            public static HexUnescape ($pattern: string, $index: $Ref<number>) : number
            public static IsHexEncoding ($pattern: string, $index: number) : boolean
            public static CheckSchemeName ($schemeName: string) : boolean
            public static IsHexDigit ($character: number) : boolean
            public static FromHex ($digit: number) : number
            public static op_Equality ($uri1: System.Uri, $uri2: System.Uri) : boolean
            public static op_Inequality ($uri1: System.Uri, $uri2: System.Uri) : boolean
            public MakeRelativeUri ($uri: System.Uri) : System.Uri
            public static TryCreate ($uriString: string, $uriKind: System.UriKind, $result: $Ref<System.Uri>) : boolean
            public static TryCreate ($baseUri: System.Uri, $relativeUri: string, $result: $Ref<System.Uri>) : boolean
            public static TryCreate ($baseUri: System.Uri, $relativeUri: System.Uri, $result: $Ref<System.Uri>) : boolean
            public GetComponents ($components: System.UriComponents, $format: System.UriFormat) : string
            public static Compare ($uri1: System.Uri, $uri2: System.Uri, $partsToCompare: System.UriComponents, $compareFormat: System.UriFormat, $comparisonType: System.StringComparison) : number
            public IsWellFormedOriginalString () : boolean
            public static IsWellFormedUriString ($uriString: string, $uriKind: System.UriKind) : boolean
            public static UnescapeDataString ($stringToUnescape: string) : string
            public static EscapeUriString ($stringToEscape: string) : string
            public static EscapeDataString ($stringToEscape: string) : string
            public IsBaseOf ($uri: System.Uri) : boolean
            public constructor ($uriString: string)
            public constructor ($uriString: string, $uriKind: System.UriKind)
            public constructor ($baseUri: System.Uri, $relativeUri: string)
            public constructor ($baseUri: System.Uri, $relativeUri: System.Uri)
            public constructor ()
        }
        class UriBuilder extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Fragment(): string;
            public set Fragment(value: string);
            public get Host(): string;
            public set Host(value: string);
            public get Password(): string;
            public set Password(value: string);
            public get Path(): string;
            public set Path(value: string);
            public get Port(): number;
            public set Port(value: number);
            public get Query(): string;
            public set Query(value: string);
            public get Scheme(): string;
            public set Scheme(value: string);
            public get Uri(): System.Uri;
            public get UserName(): string;
            public set UserName(value: string);
            public constructor ()
            public constructor ($uri: string)
            public constructor ($uri: System.Uri)
            public constructor ($schemeName: string, $hostName: string)
            public constructor ($scheme: string, $host: string, $portNumber: number)
            public constructor ($scheme: string, $host: string, $port: number, $pathValue: string)
            public constructor ($scheme: string, $host: string, $port: number, $path: string, $extraValue: string)
        }
        enum GenericUriParserOptions
        { Default = 0, GenericAuthority = 1, AllowEmptyAuthority = 2, NoUserInfo = 4, NoPort = 8, NoQuery = 16, NoFragment = 32, DontConvertPathBackslashes = 64, DontCompressPath = 128, DontUnescapePathDotsAndSlashes = 256, Idn = 512, IriParsing = 1024 }
        class UriParser extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Register ($uriParser: System.UriParser, $schemeName: string, $defaultPort: number) : void
            public static IsKnownScheme ($schemeName: string) : boolean
        }
        class GenericUriParser extends System.UriParser
        {
            protected [__keep_incompatibility]: never;
            public constructor ($options: System.GenericUriParserOptions)
            public constructor ()
        }
        enum UriHostNameType
        { Unknown = 0, Basic = 1, Dns = 2, IPv4 = 3, IPv6 = 4 }
        enum UriPartial
        { Scheme = 0, Authority = 1, Path = 2, Query = 3 }
        enum UriKind
        { RelativeOrAbsolute = 0, Absolute = 1, Relative = 2 }
        enum UriComponents
        { Scheme = 1, UserInfo = 2, Host = 4, Port = 8, Path = 16, Query = 32, Fragment = 64, StrongPort = 128, NormalizedHost = 256, KeepDelimiter = 1073741824, SerializationInfoString = -2147483648, AbsoluteUri = 127, HostAndPort = 132, StrongAuthority = 134, SchemeAndServer = 13, HttpRequestUrl = 61, PathAndQuery = 48 }
        enum UriFormat
        { UriEscaped = 1, Unescaped = 2, SafeUnescaped = 3 }
        class UriFormatException extends System.FormatException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($textString: string)
            public constructor ($textString: string, $e: System.Exception)
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        enum UriIdnScope
        { None = 0, AllExceptIntranet = 1, All = 2 }
        class HttpStyleUriParser extends System.UriParser
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class FtpStyleUriParser extends System.UriParser
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class FileStyleUriParser extends System.UriParser
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class NewsStyleUriParser extends System.UriParser
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class GopherStyleUriParser extends System.UriParser
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class LdapStyleUriParser extends System.UriParser
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class NetPipeStyleUriParser extends System.UriParser
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class NetTcpStyleUriParser extends System.UriParser
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UriTypeConverter extends System.ComponentModel.TypeConverter
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class StringNormalizationExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static IsNormalized ($value: string) : boolean
            public static IsNormalized ($value: string, $normalizationForm: System.Text.NormalizationForm) : boolean
            public static Normalize ($value: string) : string
            public static Normalize ($value: string, $normalizationForm: System.Text.NormalizationForm) : string
        }
        class StringBuilderExt extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Clear ($builder: System.Text.StringBuilder) : void
        }
    }
    namespace System.Collections {
        interface IEnumerable
        {
        }
        interface IEnumerator
        {
            Current : any
            MoveNext () : boolean
            Reset () : void
        }
        interface IDictionary extends System.Collections.IEnumerable, System.Collections.ICollection
        {
        }
        interface ICollection extends System.Collections.IEnumerable
        {
        }
        interface IDictionaryEnumerator extends System.Collections.IEnumerator
        {
            Current : any
            MoveNext () : boolean
            Reset () : void
        }
        interface IList extends System.Collections.IEnumerable, System.Collections.ICollection
        {
        }
        interface IStructuralComparable
        {
        }
        interface IStructuralEquatable
        {
        }
        interface IComparer
        {
        }
        interface IEqualityComparer
        {
        }
        class Hashtable extends System.Object implements System.Collections.IDictionary, System.ICloneable, System.Collections.IEnumerable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
            public Clone () : any
        }
        class ArrayList extends System.Object implements System.ICloneable, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
            public Clone () : any
        }
        class CollectionBase extends System.Object implements System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
        }
        class ReadOnlyCollectionBase extends System.Object implements System.Collections.IEnumerable, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Collections.Generic {
        interface IEnumerable$1<T> extends System.Collections.IEnumerable
        {
            GetEnumerator () : System.Collections.Generic.IEnumerator$1<T>
        }
        interface IEnumerator$1<T> extends System.Collections.IEnumerator, System.IDisposable
        {
            Current : any
            MoveNext () : boolean
            Reset () : void
            Dispose () : void
        }
        class Dictionary$2<TKey, TValue> extends System.Object implements System.Collections.IDictionary, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Collections.Generic.IReadOnlyDictionary$2<TKey, TValue>, System.Runtime.Serialization.IDeserializationCallback, System.Collections.Generic.ICollection$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Runtime.Serialization.ISerializable, System.Collections.ICollection, System.Collections.Generic.IDictionary$2<TKey, TValue>, System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>
        {
            protected [__keep_incompatibility]: never;
            public get Comparer(): System.Collections.Generic.IEqualityComparer$1<TKey>;
            public get Count(): number;
            public get Keys(): System.Collections.Generic.Dictionary$2.KeyCollection<TKey, TValue>;
            public get Values(): System.Collections.Generic.Dictionary$2.ValueCollection<TKey, TValue>;
            public get_Item ($key: TKey) : TValue
            public set_Item ($key: TKey, $value: TValue) : void
            public Add ($key: TKey, $value: TValue) : void
            public Clear () : void
            public ContainsKey ($key: TKey) : boolean
            public ContainsValue ($value: TValue) : boolean
            public GetEnumerator () : System.Collections.Generic.Dictionary$2.Enumerator<TKey, TValue>
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public OnDeserialization ($sender: any) : void
            public Remove ($key: TKey) : boolean
            public TryGetValue ($key: TKey, $value: $Ref<TValue>) : boolean
            public constructor ()
            public constructor ($capacity: number)
            public constructor ($comparer: System.Collections.Generic.IEqualityComparer$1<TKey>)
            public constructor ($capacity: number, $comparer: System.Collections.Generic.IEqualityComparer$1<TKey>)
            public constructor ($dictionary: System.Collections.Generic.IDictionary$2<TKey, TValue>)
            public constructor ($dictionary: System.Collections.Generic.IDictionary$2<TKey, TValue>, $comparer: System.Collections.Generic.IEqualityComparer$1<TKey>)
            public constructor ($collection: System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>)
            public constructor ($collection: System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, $comparer: System.Collections.Generic.IEqualityComparer$1<TKey>)
        }
        class KeyValuePair$2<TKey, TValue> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Key(): TKey;
            public get Value(): TValue;
            public Deconstruct ($key: $Ref<TKey>, $value: $Ref<TValue>) : void
            public constructor ($key: TKey, $value: TValue)
            public constructor ()
        }
        interface IReadOnlyCollection$1<T> extends System.Collections.IEnumerable, System.Collections.Generic.IEnumerable$1<T>
        {
            GetEnumerator () : System.Collections.Generic.IEnumerator$1<T>
        }
        interface IReadOnlyDictionary$2<TKey, TValue> extends System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>
        {
            Keys : System.Collections.Generic.IEnumerable$1<TKey>
            Values : System.Collections.Generic.IEnumerable$1<TValue>
            ContainsKey ($key: TKey) : boolean
            TryGetValue ($key: TKey, $value: $Ref<TValue>) : boolean
            get_Item ($key: TKey) : TValue
        }
        interface ICollection$1<T> extends System.Collections.IEnumerable, System.Collections.Generic.IEnumerable$1<T>
        {
            GetEnumerator () : System.Collections.Generic.IEnumerator$1<T>
        }
        interface IDictionary$2<TKey, TValue> extends System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>
        {
        }
        interface IEqualityComparer$1<T>
        {
        }
        interface IList$1<T> extends System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<T>, System.Collections.Generic.IEnumerable$1<T>
        {
            GetEnumerator () : System.Collections.Generic.IEnumerator$1<T>
        }
        interface IReadOnlyList$1<T> extends System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<T>, System.Collections.Generic.IEnumerable$1<T>
        {
            GetEnumerator () : System.Collections.Generic.IEnumerator$1<T>
        }
        interface IComparer$1<T>
        {
        }
        class List$1<T> extends System.Object implements System.Collections.IEnumerable, System.Collections.Generic.IList$1<T>, System.Collections.Generic.IReadOnlyCollection$1<T>, System.Collections.Generic.IReadOnlyList$1<T>, System.Collections.IList, System.Collections.Generic.ICollection$1<T>, System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<T>
        {
            protected [__keep_incompatibility]: never;
            public get Capacity(): number;
            public set Capacity(value: number);
            public get Count(): number;
            public get_Item ($index: number) : T
            public set_Item ($index: number, $value: T) : void
            public Add ($item: T) : void
            public AddRange ($collection: System.Collections.Generic.IEnumerable$1<T>) : void
            public AsReadOnly () : System.Collections.ObjectModel.ReadOnlyCollection$1<T>
            public BinarySearch ($index: number, $count: number, $item: T, $comparer: System.Collections.Generic.IComparer$1<T>) : number
            public BinarySearch ($item: T) : number
            public BinarySearch ($item: T, $comparer: System.Collections.Generic.IComparer$1<T>) : number
            public Clear () : void
            public Contains ($item: T) : boolean
            public CopyTo ($array: System.Array$1<T>) : void
            public CopyTo ($index: number, $array: System.Array$1<T>, $arrayIndex: number, $count: number) : void
            public CopyTo ($array: System.Array$1<T>, $arrayIndex: number) : void
            public Exists ($match: System.Predicate$1<T>) : boolean
            public Find ($match: System.Predicate$1<T>) : T
            public FindAll ($match: System.Predicate$1<T>) : System.Collections.Generic.List$1<T>
            public FindIndex ($match: System.Predicate$1<T>) : number
            public FindIndex ($startIndex: number, $match: System.Predicate$1<T>) : number
            public FindIndex ($startIndex: number, $count: number, $match: System.Predicate$1<T>) : number
            public FindLast ($match: System.Predicate$1<T>) : T
            public FindLastIndex ($match: System.Predicate$1<T>) : number
            public FindLastIndex ($startIndex: number, $match: System.Predicate$1<T>) : number
            public FindLastIndex ($startIndex: number, $count: number, $match: System.Predicate$1<T>) : number
            public ForEach ($action: System.Action$1<T>) : void
            public GetEnumerator () : System.Collections.Generic.List$1.Enumerator<T>
            public GetRange ($index: number, $count: number) : System.Collections.Generic.List$1<T>
            public IndexOf ($item: T) : number
            public IndexOf ($item: T, $index: number) : number
            public IndexOf ($item: T, $index: number, $count: number) : number
            public Insert ($index: number, $item: T) : void
            public InsertRange ($index: number, $collection: System.Collections.Generic.IEnumerable$1<T>) : void
            public LastIndexOf ($item: T) : number
            public LastIndexOf ($item: T, $index: number) : number
            public LastIndexOf ($item: T, $index: number, $count: number) : number
            public Remove ($item: T) : boolean
            public RemoveAll ($match: System.Predicate$1<T>) : number
            public RemoveAt ($index: number) : void
            public RemoveRange ($index: number, $count: number) : void
            public Reverse () : void
            public Reverse ($index: number, $count: number) : void
            public Sort () : void
            public Sort ($comparer: System.Collections.Generic.IComparer$1<T>) : void
            public Sort ($index: number, $count: number, $comparer: System.Collections.Generic.IComparer$1<T>) : void
            public Sort ($comparison: System.Comparison$1<T>) : void
            public ToArray () : System.Array$1<T>
            public TrimExcess () : void
            public TrueForAll ($match: System.Predicate$1<T>) : boolean
            public constructor ()
            public constructor ($capacity: number)
            public constructor ($collection: System.Collections.Generic.IEnumerable$1<T>)
            public GetEnumerator () : System.Collections.Generic.IEnumerator$1<T>
        }
    }
    namespace System.Runtime.Serialization {
        interface IDeserializationCallback
        {
        }
        interface ISerializable
        {
        }
        class SerializationInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class StreamingContext extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        interface IObjectReference
        {
        }
    }
    namespace System.Collections.Generic.Dictionary$2 {
        class KeyCollection<TKey, TValue> extends System.Object implements System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<TKey>, System.Collections.Generic.ICollection$1<TKey>, System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<TKey>
        {
            protected [__keep_incompatibility]: never;
        }
        class ValueCollection<TKey, TValue> extends System.Object implements System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<TValue>, System.Collections.Generic.ICollection$1<TValue>, System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<TValue>
        {
            protected [__keep_incompatibility]: never;
        }
        class Enumerator<TKey, TValue> extends System.ValueType implements System.Collections.Generic.IEnumerator$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get Current(): System.Collections.Generic.KeyValuePair$2<TKey, TValue>;
            public MoveNext () : boolean
            public Dispose () : void
            public Reset () : void
        }
    }
    namespace System.Runtime.CompilerServices {
        interface ITuple
        {
        }
    }
    namespace System.Reflection {
        class MemberInfo extends System.Object implements System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
        {
            protected [__keep_incompatibility]: never;
            public get MemberType(): System.Reflection.MemberTypes;
            public get Name(): string;
            public get DeclaringType(): System.Type;
            public get ReflectedType(): System.Type;
            public get CustomAttributes(): System.Collections.Generic.IEnumerable$1<System.Reflection.CustomAttributeData>;
            public get MetadataToken(): number;
            public get Module(): System.Reflection.Module;
            public GetCustomAttributes ($inherit: boolean) : System.Array$1<any>
            public GetCustomAttributes ($attributeType: System.Type, $inherit: boolean) : System.Array$1<any>
            public IsDefined ($attributeType: System.Type, $inherit: boolean) : boolean
            public GetCustomAttributesData () : System.Collections.Generic.IList$1<System.Reflection.CustomAttributeData>
            public static op_Equality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
            public static op_Inequality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
        }
        interface MemberInfo {
            GetCustomAttribute ($attributeType: System.Type) : System.Attribute;
            GetCustomAttribute ($attributeType: System.Type, $inherit: boolean) : System.Attribute;
            GetCustomAttributes () : System.Collections.Generic.IEnumerable$1<System.Attribute>;
            GetCustomAttributes ($inherit: boolean) : System.Collections.Generic.IEnumerable$1<System.Attribute>;
            GetCustomAttributes ($attributeType: System.Type) : System.Collections.Generic.IEnumerable$1<System.Attribute>;
            GetCustomAttributes ($attributeType: System.Type, $inherit: boolean) : System.Collections.Generic.IEnumerable$1<System.Attribute>;
            IsDefined ($attributeType: System.Type) : boolean;
            IsDefined ($attributeType: System.Type, $inherit: boolean) : boolean;
        }
        interface ICustomAttributeProvider
        {
            GetCustomAttributes ($attributeType: System.Type, $inherit: boolean) : System.Array$1<any>
            GetCustomAttributes ($inherit: boolean) : System.Array$1<any>
            IsDefined ($attributeType: System.Type, $inherit: boolean) : boolean
        }
        interface IReflect
        {
            UnderlyingSystemType : System.Type
            GetMethod ($name: string, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>) : System.Reflection.MethodInfo
            GetMethod ($name: string, $bindingAttr: System.Reflection.BindingFlags) : System.Reflection.MethodInfo
            GetMethods ($bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.MethodInfo>
            GetField ($name: string, $bindingAttr: System.Reflection.BindingFlags) : System.Reflection.FieldInfo
            GetFields ($bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.FieldInfo>
            GetProperty ($name: string, $bindingAttr: System.Reflection.BindingFlags) : System.Reflection.PropertyInfo
            GetProperty ($name: string, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $returnType: System.Type, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>) : System.Reflection.PropertyInfo
            GetProperties ($bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.PropertyInfo>
            GetMember ($name: string, $bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.MemberInfo>
            GetMembers ($bindingAttr: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.MemberInfo>
            InvokeMember ($name: string, $invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $target: any, $args: System.Array$1<any>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>, $culture: System.Globalization.CultureInfo, $namedParameters: System.Array$1<string>) : any
        }
        enum BindingFlags
        { Default = 0, IgnoreCase = 1, DeclaredOnly = 2, Instance = 4, Static = 8, Public = 16, NonPublic = 32, FlattenHierarchy = 64, InvokeMethod = 256, CreateInstance = 512, GetField = 1024, SetField = 2048, GetProperty = 4096, SetProperty = 8192, PutDispProperty = 16384, PutRefDispProperty = 32768, ExactBinding = 65536, SuppressChangeType = 131072, OptionalParamBinding = 262144, IgnoreReturn = 16777216 }
        class Binder extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public BindToMethod ($bindingAttr: System.Reflection.BindingFlags, $match: System.Array$1<System.Reflection.MethodBase>, $args: $Ref<System.Array$1<any>>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>, $culture: System.Globalization.CultureInfo, $names: System.Array$1<string>, $state: $Ref<any>) : System.Reflection.MethodBase
            public BindToField ($bindingAttr: System.Reflection.BindingFlags, $match: System.Array$1<System.Reflection.FieldInfo>, $value: any, $culture: System.Globalization.CultureInfo) : System.Reflection.FieldInfo
            public SelectMethod ($bindingAttr: System.Reflection.BindingFlags, $match: System.Array$1<System.Reflection.MethodBase>, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>) : System.Reflection.MethodBase
            public SelectProperty ($bindingAttr: System.Reflection.BindingFlags, $match: System.Array$1<System.Reflection.PropertyInfo>, $returnType: System.Type, $indexes: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>) : System.Reflection.PropertyInfo
            public ChangeType ($value: any, $type: System.Type, $culture: System.Globalization.CultureInfo) : any
            public ReorderArgumentArray ($args: $Ref<System.Array$1<any>>, $state: any) : void
        }
        class ParameterInfo extends System.Object implements System.Runtime.InteropServices._ParameterInfo, System.Runtime.Serialization.IObjectReference, System.Reflection.ICustomAttributeProvider
        {
            protected [__keep_incompatibility]: never;
            public get ParameterType(): System.Type;
            public get Attributes(): System.Reflection.ParameterAttributes;
            public get IsIn(): boolean;
            public get IsLcid(): boolean;
            public get IsOptional(): boolean;
            public get IsOut(): boolean;
            public get IsRetval(): boolean;
            public get Member(): System.Reflection.MemberInfo;
            public get Name(): string;
            public get Position(): number;
            public get CustomAttributes(): System.Collections.Generic.IEnumerable$1<System.Reflection.CustomAttributeData>;
            public get HasDefaultValue(): boolean;
            public get DefaultValue(): any;
            public get RawDefaultValue(): any;
            public get MetadataToken(): number;
            public GetCustomAttributes ($inherit: boolean) : System.Array$1<any>
            public GetCustomAttributes ($attributeType: System.Type, $inherit: boolean) : System.Array$1<any>
            public GetRealObject ($context: System.Runtime.Serialization.StreamingContext) : any
            public IsDefined ($attributeType: System.Type, $inherit: boolean) : boolean
            public GetRequiredCustomModifiers () : System.Array$1<System.Type>
            public GetOptionalCustomModifiers () : System.Array$1<System.Type>
            public GetCustomAttributesData () : System.Collections.Generic.IList$1<System.Reflection.CustomAttributeData>
        }
        interface ParameterInfo {
            GetCustomAttribute ($attributeType: System.Type) : System.Attribute;
            GetCustomAttribute ($attributeType: System.Type, $inherit: boolean) : System.Attribute;
            GetCustomAttributes () : System.Collections.Generic.IEnumerable$1<System.Attribute>;
            GetCustomAttributes ($inherit: boolean) : System.Collections.Generic.IEnumerable$1<System.Attribute>;
            GetCustomAttributes ($attributeType: System.Type) : System.Collections.Generic.IEnumerable$1<System.Attribute>;
            GetCustomAttributes ($attributeType: System.Type, $inherit: boolean) : System.Collections.Generic.IEnumerable$1<System.Attribute>;
            IsDefined ($attributeType: System.Type) : boolean;
            IsDefined ($attributeType: System.Type, $inherit: boolean) : boolean;
        }
        class Module extends System.Object implements System.Runtime.InteropServices._Module, System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public static FilterTypeName : System.Reflection.TypeFilter
            public static FilterTypeNameIgnoreCase : System.Reflection.TypeFilter
            public get ModuleHandle(): System.ModuleHandle;
            public get Assembly(): System.Reflection.Assembly;
            public get Name(): string;
            public get ScopeName(): string;
            public get MDStreamVersion(): number;
            public get ModuleVersionId(): System.Guid;
            public get FullyQualifiedName(): string;
            public get MetadataToken(): number;
            public get CustomAttributes(): System.Collections.Generic.IEnumerable$1<System.Reflection.CustomAttributeData>;
            public GetField ($name: string) : System.Reflection.FieldInfo
            public GetFields () : System.Array$1<System.Reflection.FieldInfo>
            public GetMethod ($name: string) : System.Reflection.MethodInfo
            public GetMethod ($name: string, $types: System.Array$1<System.Type>) : System.Reflection.MethodInfo
            public GetMethod ($name: string, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $callConvention: System.Reflection.CallingConventions, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>) : System.Reflection.MethodInfo
            public GetMethods () : System.Array$1<System.Reflection.MethodInfo>
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public GetType ($className: string) : System.Type
            public GetType ($className: string, $ignoreCase: boolean) : System.Type
            public ResolveField ($metadataToken: number) : System.Reflection.FieldInfo
            public ResolveMember ($metadataToken: number) : System.Reflection.MemberInfo
            public ResolveMethod ($metadataToken: number) : System.Reflection.MethodBase
            public ResolveType ($metadataToken: number) : System.Type
            public static op_Equality ($left: System.Reflection.Module, $right: System.Reflection.Module) : boolean
            public static op_Inequality ($left: System.Reflection.Module, $right: System.Reflection.Module) : boolean
            public IsResource () : boolean
            public FindTypes ($filter: System.Reflection.TypeFilter, $filterCriteria: any) : System.Array$1<System.Type>
            public GetCustomAttributes ($inherit: boolean) : System.Array$1<any>
            public GetCustomAttributes ($attributeType: System.Type, $inherit: boolean) : System.Array$1<any>
            public GetCustomAttributesData () : System.Collections.Generic.IList$1<System.Reflection.CustomAttributeData>
            public GetField ($name: string, $bindingAttr: System.Reflection.BindingFlags) : System.Reflection.FieldInfo
            public GetFields ($bindingFlags: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.FieldInfo>
            public GetMethods ($bindingFlags: System.Reflection.BindingFlags) : System.Array$1<System.Reflection.MethodInfo>
            public GetPEKind ($peKind: $Ref<System.Reflection.PortableExecutableKinds>, $machine: $Ref<System.Reflection.ImageFileMachine>) : void
            public GetType ($className: string, $throwOnError: boolean, $ignoreCase: boolean) : System.Type
            public IsDefined ($attributeType: System.Type, $inherit: boolean) : boolean
            public ResolveField ($metadataToken: number, $genericTypeArguments: System.Array$1<System.Type>, $genericMethodArguments: System.Array$1<System.Type>) : System.Reflection.FieldInfo
            public ResolveMember ($metadataToken: number, $genericTypeArguments: System.Array$1<System.Type>, $genericMethodArguments: System.Array$1<System.Type>) : System.Reflection.MemberInfo
            public ResolveMethod ($metadataToken: number, $genericTypeArguments: System.Array$1<System.Type>, $genericMethodArguments: System.Array$1<System.Type>) : System.Reflection.MethodBase
            public ResolveSignature ($metadataToken: number) : System.Array$1<number>
            public ResolveString ($metadataToken: number) : string
            public ResolveType ($metadataToken: number, $genericTypeArguments: System.Array$1<System.Type>, $genericMethodArguments: System.Array$1<System.Type>) : System.Type
            public GetSignerCertificate () : System.Security.Cryptography.X509Certificates.X509Certificate
            public GetTypes () : System.Array$1<System.Type>
            public GetType () : System.Type
        }
        interface Module {
            GetCustomAttribute ($attributeType: System.Type) : System.Attribute;
            GetCustomAttributes () : System.Collections.Generic.IEnumerable$1<System.Attribute>;
            GetCustomAttributes ($attributeType: System.Type) : System.Collections.Generic.IEnumerable$1<System.Attribute>;
            IsDefined ($attributeType: System.Type) : boolean;
        }
        class Assembly extends System.Object implements System.Security.IEvidenceFactory, System.Runtime.InteropServices._Assembly, System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get CodeBase(): string;
            public get EscapedCodeBase(): string;
            public get FullName(): string;
            public get EntryPoint(): System.Reflection.MethodInfo;
            public get Evidence(): System.Security.Policy.Evidence;
            public get Location(): string;
            public get ImageRuntimeVersion(): string;
            public get HostContext(): bigint;
            public get ReflectionOnly(): boolean;
            public get PermissionSet(): System.Security.PermissionSet;
            public get SecurityRuleSet(): System.Security.SecurityRuleSet;
            public get IsFullyTrusted(): boolean;
            public get ManifestModule(): System.Reflection.Module;
            public get GlobalAssemblyCache(): boolean;
            public get IsDynamic(): boolean;
            public get DefinedTypes(): System.Collections.Generic.IEnumerable$1<System.Reflection.TypeInfo>;
            public get ExportedTypes(): System.Collections.Generic.IEnumerable$1<System.Type>;
            public get Modules(): System.Collections.Generic.IEnumerable$1<System.Reflection.Module>;
            public get CustomAttributes(): System.Collections.Generic.IEnumerable$1<System.Reflection.CustomAttributeData>;
            public add_ModuleResolve ($value: System.Reflection.ModuleResolveEventHandler) : void
            public remove_ModuleResolve ($value: System.Reflection.ModuleResolveEventHandler) : void
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public IsDefined ($attributeType: System.Type, $inherit: boolean) : boolean
            public GetCustomAttributes ($inherit: boolean) : System.Array$1<any>
            public GetCustomAttributes ($attributeType: System.Type, $inherit: boolean) : System.Array$1<any>
            public GetFiles () : System.Array$1<System.IO.FileStream>
            public GetFiles ($getResourceModules: boolean) : System.Array$1<System.IO.FileStream>
            public GetFile ($name: string) : System.IO.FileStream
            public GetManifestResourceStream ($name: string) : System.IO.Stream
            public GetManifestResourceStream ($type: System.Type, $name: string) : System.IO.Stream
            public GetTypes () : System.Array$1<System.Type>
            public GetExportedTypes () : System.Array$1<System.Type>
            public GetType ($name: string, $throwOnError: boolean) : System.Type
            public GetType ($name: string) : System.Type
            public GetName ($copiedName: boolean) : System.Reflection.AssemblyName
            public GetName () : System.Reflection.AssemblyName
            public static CreateQualifiedName ($assemblyName: string, $typeName: string) : string
            public static GetAssembly ($type: System.Type) : System.Reflection.Assembly
            public static GetEntryAssembly () : System.Reflection.Assembly
            public static LoadFrom ($assemblyFile: string) : System.Reflection.Assembly
            public static LoadFrom ($assemblyFile: string, $hashValue: System.Array$1<number>, $hashAlgorithm: System.Configuration.Assemblies.AssemblyHashAlgorithm) : System.Reflection.Assembly
            public static UnsafeLoadFrom ($assemblyFile: string) : System.Reflection.Assembly
            public static LoadFile ($path: string) : System.Reflection.Assembly
            public static Load ($assemblyString: string) : System.Reflection.Assembly
            public static Load ($assemblyRef: System.Reflection.AssemblyName) : System.Reflection.Assembly
            public static Load ($rawAssembly: System.Array$1<number>) : System.Reflection.Assembly
            public static Load ($rawAssembly: System.Array$1<number>, $rawSymbolStore: System.Array$1<number>) : System.Reflection.Assembly
            public static Load ($rawAssembly: System.Array$1<number>, $rawSymbolStore: System.Array$1<number>, $securityContextSource: System.Security.SecurityContextSource) : System.Reflection.Assembly
            public static ReflectionOnlyLoad ($rawAssembly: System.Array$1<number>) : System.Reflection.Assembly
            public static ReflectionOnlyLoad ($assemblyString: string) : System.Reflection.Assembly
            public static ReflectionOnlyLoadFrom ($assemblyFile: string) : System.Reflection.Assembly
            public LoadModule ($moduleName: string, $rawModule: System.Array$1<number>) : System.Reflection.Module
            public LoadModule ($moduleName: string, $rawModule: System.Array$1<number>, $rawSymbolStore: System.Array$1<number>) : System.Reflection.Module
            public CreateInstance ($typeName: string) : any
            public CreateInstance ($typeName: string, $ignoreCase: boolean) : any
            public CreateInstance ($typeName: string, $ignoreCase: boolean, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo, $activationAttributes: System.Array$1<any>) : any
            public GetLoadedModules () : System.Array$1<System.Reflection.Module>
            public GetModules () : System.Array$1<System.Reflection.Module>
            public GetManifestResourceNames () : System.Array$1<string>
            public static GetExecutingAssembly () : System.Reflection.Assembly
            public static GetCallingAssembly () : System.Reflection.Assembly
            public GetManifestResourceInfo ($resourceName: string) : System.Reflection.ManifestResourceInfo
            public GetCustomAttributesData () : System.Collections.Generic.IList$1<System.Reflection.CustomAttributeData>
            public GetType ($name: string, $throwOnError: boolean, $ignoreCase: boolean) : System.Type
            public GetModule ($name: string) : System.Reflection.Module
            public GetReferencedAssemblies () : System.Array$1<System.Reflection.AssemblyName>
            public GetModules ($getResourceModules: boolean) : System.Array$1<System.Reflection.Module>
            public GetLoadedModules ($getResourceModules: boolean) : System.Array$1<System.Reflection.Module>
            public GetSatelliteAssembly ($culture: System.Globalization.CultureInfo) : System.Reflection.Assembly
            public GetSatelliteAssembly ($culture: System.Globalization.CultureInfo, $version: System.Version) : System.Reflection.Assembly
            public static op_Equality ($left: System.Reflection.Assembly, $right: System.Reflection.Assembly) : boolean
            public static op_Inequality ($left: System.Reflection.Assembly, $right: System.Reflection.Assembly) : boolean
            public GetType () : System.Type
        }
        interface Assembly {
            GetCustomAttribute ($attributeType: System.Type) : System.Attribute;
            GetCustomAttributes () : System.Collections.Generic.IEnumerable$1<System.Attribute>;
            GetCustomAttributes ($attributeType: System.Type) : System.Collections.Generic.IEnumerable$1<System.Attribute>;
            IsDefined ($attributeType: System.Type) : boolean;
        }
        class MethodBase extends System.Reflection.MemberInfo implements System.Runtime.InteropServices._MethodBase, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
        {
            protected [__keep_incompatibility]: never;
            public get MethodImplementationFlags(): System.Reflection.MethodImplAttributes;
            public get MethodHandle(): System.RuntimeMethodHandle;
            public get Attributes(): System.Reflection.MethodAttributes;
            public get CallingConvention(): System.Reflection.CallingConventions;
            public get IsGenericMethodDefinition(): boolean;
            public get ContainsGenericParameters(): boolean;
            public get IsGenericMethod(): boolean;
            public get IsSecurityCritical(): boolean;
            public get IsSecuritySafeCritical(): boolean;
            public get IsSecurityTransparent(): boolean;
            public get IsPublic(): boolean;
            public get IsPrivate(): boolean;
            public get IsFamily(): boolean;
            public get IsAssembly(): boolean;
            public get IsFamilyAndAssembly(): boolean;
            public get IsFamilyOrAssembly(): boolean;
            public get IsStatic(): boolean;
            public get IsFinal(): boolean;
            public get IsVirtual(): boolean;
            public get IsHideBySig(): boolean;
            public get IsAbstract(): boolean;
            public get IsSpecialName(): boolean;
            public get IsConstructor(): boolean;
            public static GetMethodFromHandle ($handle: System.RuntimeMethodHandle) : System.Reflection.MethodBase
            public static GetMethodFromHandle ($handle: System.RuntimeMethodHandle, $declaringType: System.RuntimeTypeHandle) : System.Reflection.MethodBase
            public static GetCurrentMethod () : System.Reflection.MethodBase
            public static op_Equality ($left: System.Reflection.MethodBase, $right: System.Reflection.MethodBase) : boolean
            public static op_Inequality ($left: System.Reflection.MethodBase, $right: System.Reflection.MethodBase) : boolean
            public GetParameters () : System.Array$1<System.Reflection.ParameterInfo>
            public GetMethodImplementationFlags () : System.Reflection.MethodImplAttributes
            public Invoke ($obj: any, $invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $parameters: System.Array$1<any>, $culture: System.Globalization.CultureInfo) : any
            public GetGenericArguments () : System.Array$1<System.Type>
            public Invoke ($obj: any, $parameters: System.Array$1<any>) : any
            public GetMethodBody () : System.Reflection.MethodBody
            public static op_Equality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
            public static op_Inequality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
        }
        class AssemblyName extends System.Object implements System.ICloneable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.InteropServices._AssemblyName, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get ProcessorArchitecture(): System.Reflection.ProcessorArchitecture;
            public set ProcessorArchitecture(value: System.Reflection.ProcessorArchitecture);
            public get Name(): string;
            public set Name(value: string);
            public get CodeBase(): string;
            public set CodeBase(value: string);
            public get EscapedCodeBase(): string;
            public get CultureInfo(): System.Globalization.CultureInfo;
            public set CultureInfo(value: System.Globalization.CultureInfo);
            public get Flags(): System.Reflection.AssemblyNameFlags;
            public set Flags(value: System.Reflection.AssemblyNameFlags);
            public get FullName(): string;
            public get HashAlgorithm(): System.Configuration.Assemblies.AssemblyHashAlgorithm;
            public set HashAlgorithm(value: System.Configuration.Assemblies.AssemblyHashAlgorithm);
            public get KeyPair(): System.Reflection.StrongNameKeyPair;
            public set KeyPair(value: System.Reflection.StrongNameKeyPair);
            public get Version(): System.Version;
            public set Version(value: System.Version);
            public get VersionCompatibility(): System.Configuration.Assemblies.AssemblyVersionCompatibility;
            public set VersionCompatibility(value: System.Configuration.Assemblies.AssemblyVersionCompatibility);
            public get CultureName(): string;
            public set CultureName(value: string);
            public get ContentType(): System.Reflection.AssemblyContentType;
            public set ContentType(value: System.Reflection.AssemblyContentType);
            public GetPublicKey () : System.Array$1<number>
            public GetPublicKeyToken () : System.Array$1<number>
            public static ReferenceMatchesDefinition ($reference: System.Reflection.AssemblyName, $definition: System.Reflection.AssemblyName) : boolean
            public SetPublicKey ($publicKey: System.Array$1<number>) : void
            public SetPublicKeyToken ($publicKeyToken: System.Array$1<number>) : void
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public Clone () : any
            public OnDeserialization ($sender: any) : void
            public static GetAssemblyName ($assemblyFile: string) : System.Reflection.AssemblyName
            public constructor ()
            public constructor ($assemblyName: string)
        }
        interface MemberFilter
        { 
        (m: System.Reflection.MemberInfo, filterCriteria: any) : boolean; 
        Invoke?: (m: System.Reflection.MemberInfo, filterCriteria: any) => boolean;
        }
        var MemberFilter: { new (func: (m: System.Reflection.MemberInfo, filterCriteria: any) => boolean): MemberFilter; }
        enum MemberTypes
        { Constructor = 1, Event = 2, Field = 4, Method = 8, Property = 16, TypeInfo = 32, Custom = 64, NestedType = 128, All = 191 }
        class ParameterModifier extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get_Item ($index: number) : boolean
            public set_Item ($index: number, $value: boolean) : void
            public constructor ($parameterCount: number)
            public constructor ()
        }
        class ConstructorInfo extends System.Reflection.MethodBase implements System.Runtime.InteropServices._MethodBase, System.Runtime.InteropServices._ConstructorInfo, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
        {
            protected [__keep_incompatibility]: never;
            public static ConstructorName : string
            public static TypeConstructorName : string
            public get MemberType(): System.Reflection.MemberTypes;
            public Invoke ($parameters: System.Array$1<any>) : any
            public Invoke ($invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $parameters: System.Array$1<any>, $culture: System.Globalization.CultureInfo) : any
            public static op_Equality ($left: System.Reflection.ConstructorInfo, $right: System.Reflection.ConstructorInfo) : boolean
            public static op_Inequality ($left: System.Reflection.ConstructorInfo, $right: System.Reflection.ConstructorInfo) : boolean
            public static op_Equality ($left: System.Reflection.MethodBase, $right: System.Reflection.MethodBase) : boolean
            public static op_Equality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
            public static op_Inequality ($left: System.Reflection.MethodBase, $right: System.Reflection.MethodBase) : boolean
            public static op_Inequality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
            public Invoke ($obj: any, $invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $parameters: System.Array$1<any>, $culture: System.Globalization.CultureInfo) : any
            public Invoke ($obj: any, $parameters: System.Array$1<any>) : any
        }
        enum CallingConventions
        { Standard = 1, VarArgs = 2, Any = 3, HasThis = 32, ExplicitThis = 64 }
        class MethodInfo extends System.Reflection.MethodBase implements System.Runtime.InteropServices._MethodBase, System.Runtime.InteropServices._MethodInfo, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
        {
            protected [__keep_incompatibility]: never;
            public get MemberType(): System.Reflection.MemberTypes;
            public get ReturnType(): System.Type;
            public get ReturnParameter(): System.Reflection.ParameterInfo;
            public get ReturnTypeCustomAttributes(): System.Reflection.ICustomAttributeProvider;
            public static op_Equality ($left: System.Reflection.MethodInfo, $right: System.Reflection.MethodInfo) : boolean
            public static op_Inequality ($left: System.Reflection.MethodInfo, $right: System.Reflection.MethodInfo) : boolean
            public GetBaseDefinition () : System.Reflection.MethodInfo
            public GetGenericMethodDefinition () : System.Reflection.MethodInfo
            public MakeGenericMethod (...typeArguments: System.Type[]) : System.Reflection.MethodInfo
            public CreateDelegate ($delegateType: System.Type) : Function
            public CreateDelegate ($delegateType: System.Type, $target: any) : Function
            public static op_Equality ($left: System.Reflection.MethodBase, $right: System.Reflection.MethodBase) : boolean
            public static op_Equality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
            public static op_Inequality ($left: System.Reflection.MethodBase, $right: System.Reflection.MethodBase) : boolean
            public static op_Inequality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
        }
        interface MethodInfo {
            GetRuntimeBaseDefinition () : System.Reflection.MethodInfo;
        }
        class FieldInfo extends System.Reflection.MemberInfo implements System.Runtime.InteropServices._FieldInfo, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
        {
            protected [__keep_incompatibility]: never;
            public get Attributes(): System.Reflection.FieldAttributes;
            public get FieldHandle(): System.RuntimeFieldHandle;
            public get FieldType(): System.Type;
            public get MemberType(): System.Reflection.MemberTypes;
            public get IsLiteral(): boolean;
            public get IsStatic(): boolean;
            public get IsInitOnly(): boolean;
            public get IsPublic(): boolean;
            public get IsPrivate(): boolean;
            public get IsFamily(): boolean;
            public get IsAssembly(): boolean;
            public get IsFamilyAndAssembly(): boolean;
            public get IsFamilyOrAssembly(): boolean;
            public get IsPinvokeImpl(): boolean;
            public get IsSpecialName(): boolean;
            public get IsNotSerialized(): boolean;
            public get IsSecurityCritical(): boolean;
            public get IsSecuritySafeCritical(): boolean;
            public get IsSecurityTransparent(): boolean;
            public GetValue ($obj: any) : any
            public SetValue ($obj: any, $value: any, $invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $culture: System.Globalization.CultureInfo) : void
            public SetValue ($obj: any, $value: any) : void
            public static GetFieldFromHandle ($handle: System.RuntimeFieldHandle) : System.Reflection.FieldInfo
            public static GetFieldFromHandle ($handle: System.RuntimeFieldHandle, $declaringType: System.RuntimeTypeHandle) : System.Reflection.FieldInfo
            public GetValueDirect ($obj: System.TypedReference) : any
            public SetValueDirect ($obj: System.TypedReference, $value: any) : void
            public GetOptionalCustomModifiers () : System.Array$1<System.Type>
            public GetRequiredCustomModifiers () : System.Array$1<System.Type>
            public GetRawConstantValue () : any
            public static op_Equality ($left: System.Reflection.FieldInfo, $right: System.Reflection.FieldInfo) : boolean
            public static op_Inequality ($left: System.Reflection.FieldInfo, $right: System.Reflection.FieldInfo) : boolean
            public static op_Equality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
            public static op_Inequality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
        }
        interface TypeFilter
        { 
        (m: System.Type, filterCriteria: any) : boolean; 
        Invoke?: (m: System.Type, filterCriteria: any) => boolean;
        }
        var TypeFilter: { new (func: (m: System.Type, filterCriteria: any) => boolean): TypeFilter; }
        class EventInfo extends System.Reflection.MemberInfo implements System.Runtime.InteropServices._EventInfo, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
        {
            protected [__keep_incompatibility]: never;
            public get Attributes(): System.Reflection.EventAttributes;
            public get EventHandlerType(): System.Type;
            public get IsMulticast(): boolean;
            public get IsSpecialName(): boolean;
            public get MemberType(): System.Reflection.MemberTypes;
            public get AddMethod(): System.Reflection.MethodInfo;
            public get RaiseMethod(): System.Reflection.MethodInfo;
            public get RemoveMethod(): System.Reflection.MethodInfo;
            public AddEventHandler ($target: any, $handler: Function) : void
            public GetAddMethod () : System.Reflection.MethodInfo
            public GetAddMethod ($nonPublic: boolean) : System.Reflection.MethodInfo
            public GetRaiseMethod () : System.Reflection.MethodInfo
            public GetRaiseMethod ($nonPublic: boolean) : System.Reflection.MethodInfo
            public GetRemoveMethod () : System.Reflection.MethodInfo
            public GetRemoveMethod ($nonPublic: boolean) : System.Reflection.MethodInfo
            public GetOtherMethods ($nonPublic: boolean) : System.Array$1<System.Reflection.MethodInfo>
            public GetOtherMethods () : System.Array$1<System.Reflection.MethodInfo>
            public RemoveEventHandler ($target: any, $handler: Function) : void
            public static op_Equality ($left: System.Reflection.EventInfo, $right: System.Reflection.EventInfo) : boolean
            public static op_Inequality ($left: System.Reflection.EventInfo, $right: System.Reflection.EventInfo) : boolean
            public static op_Equality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
            public static op_Inequality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
        }
        class PropertyInfo extends System.Reflection.MemberInfo implements System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._PropertyInfo, System.Runtime.InteropServices._MemberInfo
        {
            protected [__keep_incompatibility]: never;
            public get Attributes(): System.Reflection.PropertyAttributes;
            public get CanRead(): boolean;
            public get CanWrite(): boolean;
            public get GetMethod(): System.Reflection.MethodInfo;
            public get SetMethod(): System.Reflection.MethodInfo;
            public get IsSpecialName(): boolean;
            public get MemberType(): System.Reflection.MemberTypes;
            public get PropertyType(): System.Type;
            public GetAccessors () : System.Array$1<System.Reflection.MethodInfo>
            public GetAccessors ($nonPublic: boolean) : System.Array$1<System.Reflection.MethodInfo>
            public GetGetMethod () : System.Reflection.MethodInfo
            public GetGetMethod ($nonPublic: boolean) : System.Reflection.MethodInfo
            public GetIndexParameters () : System.Array$1<System.Reflection.ParameterInfo>
            public GetSetMethod () : System.Reflection.MethodInfo
            public GetSetMethod ($nonPublic: boolean) : System.Reflection.MethodInfo
            public GetValue ($obj: any, $index: System.Array$1<any>) : any
            public GetValue ($obj: any) : any
            public GetValue ($obj: any, $invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $index: System.Array$1<any>, $culture: System.Globalization.CultureInfo) : any
            public SetValue ($obj: any, $value: any, $index: System.Array$1<any>) : void
            public SetValue ($obj: any, $value: any) : void
            public SetValue ($obj: any, $value: any, $invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $index: System.Array$1<any>, $culture: System.Globalization.CultureInfo) : void
            public GetOptionalCustomModifiers () : System.Array$1<System.Type>
            public GetRequiredCustomModifiers () : System.Array$1<System.Type>
            public GetConstantValue () : any
            public GetRawConstantValue () : any
            public static op_Equality ($left: System.Reflection.PropertyInfo, $right: System.Reflection.PropertyInfo) : boolean
            public static op_Inequality ($left: System.Reflection.PropertyInfo, $right: System.Reflection.PropertyInfo) : boolean
            public static op_Equality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
            public static op_Inequality ($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo) : boolean
        }
        enum TypeAttributes
        { VisibilityMask = 7, NotPublic = 0, Public = 1, NestedPublic = 2, NestedPrivate = 3, NestedFamily = 4, NestedAssembly = 5, NestedFamANDAssem = 6, NestedFamORAssem = 7, LayoutMask = 24, AutoLayout = 0, SequentialLayout = 8, ExplicitLayout = 16, ClassSemanticsMask = 32, Class = 0, Interface = 32, Abstract = 128, Sealed = 256, SpecialName = 1024, Import = 4096, Serializable = 8192, WindowsRuntime = 16384, StringFormatMask = 196608, AnsiClass = 0, UnicodeClass = 65536, AutoClass = 131072, CustomFormatClass = 196608, CustomFormatMask = 12582912, BeforeFieldInit = 1048576, ReservedMask = 264192, RTSpecialName = 2048, HasSecurity = 262144 }
        enum GenericParameterAttributes
        { None = 0, VarianceMask = 3, Covariant = 1, Contravariant = 2, SpecialConstraintMask = 28, ReferenceTypeConstraint = 4, NotNullableValueTypeConstraint = 8, DefaultConstructorConstraint = 16 }
        class InterfaceMapping extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public TargetType : System.Type
            public InterfaceType : System.Type
            public TargetMethods : System.Array$1<System.Reflection.MethodInfo>
            public InterfaceMethods : System.Array$1<System.Reflection.MethodInfo>
        }
        class CustomAttributeExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetCustomAttribute ($element: System.Reflection.Assembly, $attributeType: System.Type) : System.Attribute
            public static GetCustomAttribute ($element: System.Reflection.Module, $attributeType: System.Type) : System.Attribute
            public static GetCustomAttribute ($element: System.Reflection.MemberInfo, $attributeType: System.Type) : System.Attribute
            public static GetCustomAttribute ($element: System.Reflection.ParameterInfo, $attributeType: System.Type) : System.Attribute
            public static GetCustomAttribute ($element: System.Reflection.MemberInfo, $attributeType: System.Type, $inherit: boolean) : System.Attribute
            public static GetCustomAttribute ($element: System.Reflection.ParameterInfo, $attributeType: System.Type, $inherit: boolean) : System.Attribute
            public static GetCustomAttributes ($element: System.Reflection.Assembly) : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.Module) : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.MemberInfo) : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.ParameterInfo) : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.MemberInfo, $inherit: boolean) : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.ParameterInfo, $inherit: boolean) : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.Assembly, $attributeType: System.Type) : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.Module, $attributeType: System.Type) : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.MemberInfo, $attributeType: System.Type) : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.ParameterInfo, $attributeType: System.Type) : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.MemberInfo, $attributeType: System.Type, $inherit: boolean) : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public static GetCustomAttributes ($element: System.Reflection.ParameterInfo, $attributeType: System.Type, $inherit: boolean) : System.Collections.Generic.IEnumerable$1<System.Attribute>
            public static IsDefined ($element: System.Reflection.Assembly, $attributeType: System.Type) : boolean
            public static IsDefined ($element: System.Reflection.Module, $attributeType: System.Type) : boolean
            public static IsDefined ($element: System.Reflection.MemberInfo, $attributeType: System.Type) : boolean
            public static IsDefined ($element: System.Reflection.ParameterInfo, $attributeType: System.Type) : boolean
            public static IsDefined ($element: System.Reflection.MemberInfo, $attributeType: System.Type, $inherit: boolean) : boolean
            public static IsDefined ($element: System.Reflection.ParameterInfo, $attributeType: System.Type, $inherit: boolean) : boolean
        }
        class RuntimeReflectionExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetRuntimeProperties ($type: System.Type) : System.Collections.Generic.IEnumerable$1<System.Reflection.PropertyInfo>
            public static GetRuntimeEvents ($type: System.Type) : System.Collections.Generic.IEnumerable$1<System.Reflection.EventInfo>
            public static GetRuntimeMethods ($type: System.Type) : System.Collections.Generic.IEnumerable$1<System.Reflection.MethodInfo>
            public static GetRuntimeFields ($type: System.Type) : System.Collections.Generic.IEnumerable$1<System.Reflection.FieldInfo>
            public static GetRuntimeProperty ($type: System.Type, $name: string) : System.Reflection.PropertyInfo
            public static GetRuntimeEvent ($type: System.Type, $name: string) : System.Reflection.EventInfo
            public static GetRuntimeMethod ($type: System.Type, $name: string, $parameters: System.Array$1<System.Type>) : System.Reflection.MethodInfo
            public static GetRuntimeField ($type: System.Type, $name: string) : System.Reflection.FieldInfo
            public static GetRuntimeBaseDefinition ($method: System.Reflection.MethodInfo) : System.Reflection.MethodInfo
            public static GetRuntimeInterfaceMap ($typeInfo: System.Reflection.TypeInfo, $interfaceType: System.Type) : System.Reflection.InterfaceMapping
            public static GetMethodInfo ($del: Function) : System.Reflection.MethodInfo
        }
        class TypeInfo extends System.Type implements System.Reflection.IReflect, System.Runtime.InteropServices._Type, System.Reflection.IReflectableType, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
        {
            protected [__keep_incompatibility]: never;
            public get GenericTypeParameters(): System.Array$1<System.Type>;
            public get DeclaredConstructors(): System.Collections.Generic.IEnumerable$1<System.Reflection.ConstructorInfo>;
            public get DeclaredEvents(): System.Collections.Generic.IEnumerable$1<System.Reflection.EventInfo>;
            public get DeclaredFields(): System.Collections.Generic.IEnumerable$1<System.Reflection.FieldInfo>;
            public get DeclaredMembers(): System.Collections.Generic.IEnumerable$1<System.Reflection.MemberInfo>;
            public get DeclaredMethods(): System.Collections.Generic.IEnumerable$1<System.Reflection.MethodInfo>;
            public get DeclaredNestedTypes(): System.Collections.Generic.IEnumerable$1<System.Reflection.TypeInfo>;
            public get DeclaredProperties(): System.Collections.Generic.IEnumerable$1<System.Reflection.PropertyInfo>;
            public get ImplementedInterfaces(): System.Collections.Generic.IEnumerable$1<System.Type>;
            public AsType () : System.Type
            public IsAssignableFrom ($typeInfo: System.Reflection.TypeInfo) : boolean
            public GetDeclaredEvent ($name: string) : System.Reflection.EventInfo
            public GetDeclaredField ($name: string) : System.Reflection.FieldInfo
            public GetDeclaredMethod ($name: string) : System.Reflection.MethodInfo
            public GetDeclaredMethods ($name: string) : System.Collections.Generic.IEnumerable$1<System.Reflection.MethodInfo>
            public GetDeclaredNestedType ($name: string) : System.Reflection.TypeInfo
            public GetDeclaredProperty ($name: string) : System.Reflection.PropertyInfo
            public IsAssignableFrom ($c: System.Type) : boolean
        }
        interface TypeInfo {
            GetRuntimeInterfaceMap ($interfaceType: System.Type) : System.Reflection.InterfaceMapping;
        }
        interface IReflectableType
        {
            GetTypeInfo () : System.Reflection.TypeInfo
        }
        class AmbiguousMatchException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class AssemblyCopyrightAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Copyright(): string;
            public constructor ($copyright: string)
            public constructor ()
        }
        class AssemblyTrademarkAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Trademark(): string;
            public constructor ($trademark: string)
            public constructor ()
        }
        class AssemblyProductAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Product(): string;
            public constructor ($product: string)
            public constructor ()
        }
        class AssemblyCompanyAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Company(): string;
            public constructor ($company: string)
            public constructor ()
        }
        class AssemblyDescriptionAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Description(): string;
            public constructor ($description: string)
            public constructor ()
        }
        class AssemblyTitleAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Title(): string;
            public constructor ($title: string)
            public constructor ()
        }
        class AssemblyConfigurationAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Configuration(): string;
            public constructor ($configuration: string)
            public constructor ()
        }
        class AssemblyDefaultAliasAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get DefaultAlias(): string;
            public constructor ($defaultAlias: string)
            public constructor ()
        }
        class AssemblyInformationalVersionAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get InformationalVersion(): string;
            public constructor ($informationalVersion: string)
            public constructor ()
        }
        class AssemblyFileVersionAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Version(): string;
            public constructor ($version: string)
            public constructor ()
        }
        class AssemblyCultureAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Culture(): string;
            public constructor ($culture: string)
            public constructor ()
        }
        class AssemblyVersionAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Version(): string;
            public constructor ($version: string)
            public constructor ()
        }
        class AssemblyKeyFileAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get KeyFile(): string;
            public constructor ($keyFile: string)
            public constructor ()
        }
        class AssemblyDelaySignAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get DelaySign(): boolean;
            public constructor ($delaySign: boolean)
            public constructor ()
        }
        class AssemblyAlgorithmIdAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get AlgorithmId(): number;
            public constructor ($algorithmId: System.Configuration.Assemblies.AssemblyHashAlgorithm)
            public constructor ($algorithmId: number)
            public constructor ()
        }
        class AssemblyFlagsAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get AssemblyFlags(): number;
            public constructor ($assemblyFlags: System.Reflection.AssemblyNameFlags)
            public constructor ()
        }
        enum AssemblyNameFlags
        { None = 0, PublicKey = 1, EnableJITcompileOptimizer = 16384, EnableJITcompileTracking = 32768, Retargetable = 256 }
        class AssemblyMetadataAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Key(): string;
            public get Value(): string;
            public constructor ($key: string, $value: string)
            public constructor ()
        }
        class AssemblySignatureKeyAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get PublicKey(): string;
            public get Countersignature(): string;
            public constructor ($publicKey: string, $countersignature: string)
            public constructor ()
        }
        class AssemblyKeyNameAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get KeyName(): string;
            public constructor ($keyName: string)
            public constructor ()
        }
        enum AssemblyContentType
        { Default = 0, WindowsRuntime = 1 }
        enum ProcessorArchitecture
        { None = 0, MSIL = 1, X86 = 2, IA64 = 3, Amd64 = 4, Arm = 5 }
        class AssemblyNameProxy extends System.MarshalByRefObject
        {
            protected [__keep_incompatibility]: never;
            public GetAssemblyName ($assemblyFile: string) : System.Reflection.AssemblyName
            public constructor ()
        }
        class DefaultMemberAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get MemberName(): string;
            public constructor ($memberName: string)
            public constructor ()
        }
        enum EventAttributes
        { None = 0, SpecialName = 512, ReservedMask = 1024, RTSpecialName = 1024 }
        enum FieldAttributes
        { FieldAccessMask = 7, PrivateScope = 0, Private = 1, FamANDAssem = 2, Assembly = 3, Family = 4, FamORAssem = 5, Public = 6, Static = 16, InitOnly = 32, Literal = 64, NotSerialized = 128, SpecialName = 512, PinvokeImpl = 8192, ReservedMask = 38144, RTSpecialName = 1024, HasFieldMarshal = 4096, HasDefault = 32768, HasFieldRVA = 256 }
        class IntrospectionExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetTypeInfo ($type: System.Type) : System.Reflection.TypeInfo
        }
        class InvalidFilterCriteriaException extends System.ApplicationException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class ManifestResourceInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get ReferencedAssembly(): System.Reflection.Assembly;
            public get FileName(): string;
            public get ResourceLocation(): System.Reflection.ResourceLocation;
            public constructor ($containingAssembly: System.Reflection.Assembly, $containingFileName: string, $resourceLocation: System.Reflection.ResourceLocation)
            public constructor ()
        }
        enum ResourceLocation
        { Embedded = 1, ContainedInAnotherAssembly = 2, ContainedInManifestFile = 4 }
        class CustomAttributeData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Constructor(): System.Reflection.ConstructorInfo;
            public get ConstructorArguments(): System.Collections.Generic.IList$1<System.Reflection.CustomAttributeTypedArgument>;
            public get NamedArguments(): System.Collections.Generic.IList$1<System.Reflection.CustomAttributeNamedArgument>;
            public get AttributeType(): System.Type;
            public static GetCustomAttributes ($target: System.Reflection.Assembly) : System.Collections.Generic.IList$1<System.Reflection.CustomAttributeData>
            public static GetCustomAttributes ($target: System.Reflection.MemberInfo) : System.Collections.Generic.IList$1<System.Reflection.CustomAttributeData>
            public static GetCustomAttributes ($target: System.Reflection.Module) : System.Collections.Generic.IList$1<System.Reflection.CustomAttributeData>
            public static GetCustomAttributes ($target: System.Reflection.ParameterInfo) : System.Collections.Generic.IList$1<System.Reflection.CustomAttributeData>
        }
        enum MethodAttributes
        { MemberAccessMask = 7, PrivateScope = 0, Private = 1, FamANDAssem = 2, Assembly = 3, Family = 4, FamORAssem = 5, Public = 6, Static = 16, Final = 32, Virtual = 64, HideBySig = 128, CheckAccessOnOverride = 512, VtableLayoutMask = 256, ReuseSlot = 0, NewSlot = 256, Abstract = 1024, SpecialName = 2048, PinvokeImpl = 8192, UnmanagedExport = 8, RTSpecialName = 4096, ReservedMask = 53248, HasSecurity = 16384, RequireSecObject = 32768 }
        enum MethodImplAttributes
        { CodeTypeMask = 3, IL = 0, Native = 1, OPTIL = 2, Runtime = 3, ManagedMask = 4, Unmanaged = 4, Managed = 0, ForwardRef = 16, PreserveSig = 128, InternalCall = 4096, Synchronized = 32, NoInlining = 8, AggressiveInlining = 256, NoOptimization = 64, MaxMethodImplVal = 65535 }
        class MethodBody extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get ExceptionHandlingClauses(): System.Collections.Generic.IList$1<System.Reflection.ExceptionHandlingClause>;
            public get LocalVariables(): System.Collections.Generic.IList$1<System.Reflection.LocalVariableInfo>;
            public get InitLocals(): boolean;
            public get LocalSignatureMetadataToken(): number;
            public get MaxStackSize(): number;
            public GetILAsByteArray () : System.Array$1<number>
        }
        enum ExceptionHandlingClauseOptions
        { Clause = 0, Filter = 1, Finally = 2, Fault = 4 }
        class Missing extends System.Object implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public static Value : System.Reflection.Missing
        }
        class ObfuscateAssemblyAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get AssemblyIsPrivate(): boolean;
            public get StripAfterObfuscation(): boolean;
            public set StripAfterObfuscation(value: boolean);
            public constructor ($assemblyIsPrivate: boolean)
            public constructor ()
        }
        class ObfuscationAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get StripAfterObfuscation(): boolean;
            public set StripAfterObfuscation(value: boolean);
            public get Exclude(): boolean;
            public set Exclude(value: boolean);
            public get ApplyToMembers(): boolean;
            public set ApplyToMembers(value: boolean);
            public get Feature(): string;
            public set Feature(value: string);
            public constructor ()
        }
        enum ParameterAttributes
        { None = 0, In = 1, Out = 2, Lcid = 4, Retval = 8, Optional = 16, ReservedMask = 61440, HasDefault = 4096, HasFieldMarshal = 8192, Reserved3 = 16384, Reserved4 = 32768 }
        class Pointer extends System.Object implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
        }
        enum PropertyAttributes
        { None = 0, SpecialName = 512, ReservedMask = 62464, RTSpecialName = 1024, HasDefault = 4096, Reserved2 = 8192, Reserved3 = 16384, Reserved4 = 32768 }
        class ReflectionContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public MapAssembly ($assembly: System.Reflection.Assembly) : System.Reflection.Assembly
            public MapType ($type: System.Reflection.TypeInfo) : System.Reflection.TypeInfo
            public GetTypeForObject ($value: any) : System.Reflection.TypeInfo
        }
        class ReflectionTypeLoadException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Types(): System.Array$1<System.Type>;
            public get LoaderExceptions(): System.Array$1<System.Exception>;
            public constructor ($classes: System.Array$1<System.Type>, $exceptions: System.Array$1<System.Exception>)
            public constructor ($classes: System.Array$1<System.Type>, $exceptions: System.Array$1<System.Exception>, $message: string)
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        enum ResourceAttributes
        { Public = 1, Private = 2 }
        class TargetException extends System.ApplicationException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class TargetInvocationException extends System.ApplicationException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($inner: System.Exception)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class TargetParameterCountException extends System.ApplicationException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class TypeDelegator extends System.Reflection.TypeInfo implements System.Reflection.IReflect, System.Runtime.InteropServices._Type, System.Reflection.IReflectableType, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
        {
            protected [__keep_incompatibility]: never;
            public get GUID(): System.Guid;
            public get MetadataToken(): number;
            public get Module(): System.Reflection.Module;
            public get Assembly(): System.Reflection.Assembly;
            public get TypeHandle(): System.RuntimeTypeHandle;
            public get Name(): string;
            public get FullName(): string;
            public get Namespace(): string;
            public get AssemblyQualifiedName(): string;
            public get BaseType(): System.Type;
            public get IsConstructedGenericType(): boolean;
            public get UnderlyingSystemType(): System.Type;
            public get IsSZArray(): boolean;
            public constructor ($delegatingType: System.Type)
            public constructor ()
        }
        interface ModuleResolveEventHandler
        { 
        (sender: any, e: System.ResolveEventArgs) : System.Reflection.Module; 
        Invoke?: (sender: any, e: System.ResolveEventArgs) => System.Reflection.Module;
        }
        var ModuleResolveEventHandler: { new (func: (sender: any, e: System.ResolveEventArgs) => System.Reflection.Module): ModuleResolveEventHandler; }
        class StrongNameKeyPair extends System.Object implements System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get PublicKey(): System.Array$1<number>;
            public constructor ($keyPairArray: System.Array$1<number>)
            public constructor ($keyPairFile: System.IO.FileStream)
            public constructor ($keyPairContainer: string)
            public constructor ()
        }
        class CustomAttributeTypedArgument extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get ArgumentType(): System.Type;
            public get Value(): any;
            public static op_Equality ($left: System.Reflection.CustomAttributeTypedArgument, $right: System.Reflection.CustomAttributeTypedArgument) : boolean
            public static op_Inequality ($left: System.Reflection.CustomAttributeTypedArgument, $right: System.Reflection.CustomAttributeTypedArgument) : boolean
            public constructor ($argumentType: System.Type, $value: any)
            public constructor ($value: any)
            public constructor ()
        }
        class CustomAttributeNamedArgument extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get MemberInfo(): System.Reflection.MemberInfo;
            public get TypedValue(): System.Reflection.CustomAttributeTypedArgument;
            public get IsField(): boolean;
            public get MemberName(): string;
            public static op_Equality ($left: System.Reflection.CustomAttributeNamedArgument, $right: System.Reflection.CustomAttributeNamedArgument) : boolean
            public static op_Inequality ($left: System.Reflection.CustomAttributeNamedArgument, $right: System.Reflection.CustomAttributeNamedArgument) : boolean
            public constructor ($memberInfo: System.Reflection.MemberInfo, $value: any)
            public constructor ($memberInfo: System.Reflection.MemberInfo, $typedArgument: System.Reflection.CustomAttributeTypedArgument)
            public constructor ()
        }
        class CustomAttributeFormatException extends System.FormatException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class ExceptionHandlingClause extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get CatchType(): System.Type;
            public get FilterOffset(): number;
            public get Flags(): System.Reflection.ExceptionHandlingClauseOptions;
            public get HandlerLength(): number;
            public get HandlerOffset(): number;
            public get TryLength(): number;
            public get TryOffset(): number;
        }
        enum ImageFileMachine
        { I386 = 332, IA64 = 512, AMD64 = 34404, ARM = 452 }
        class LocalVariableInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get IsPinned(): boolean;
            public get LocalIndex(): number;
            public get LocalType(): System.Type;
        }
        enum PortableExecutableKinds
        { NotAPortableExecutableImage = 0, ILOnly = 1, Required32Bit = 2, PE32Plus = 4, Unmanaged32Bit = 8, Preferred32Bit = 16 }
        interface ICustomTypeProvider
        {
            GetCustomType () : System.Type
        }
    }
    namespace System.Runtime.InteropServices {
        interface _MemberInfo
        {
        }
        interface _Type
        {
        }
        interface _Exception
        {
        }
        interface _Activator
        {
        }
        interface _Attribute
        {
        }
        interface _ParameterInfo
        {
        }
        interface _Module
        {
        }
        interface _Assembly
        {
        }
        interface _MethodBase
        {
        }
        interface _AssemblyBuilder
        {
        }
        interface _AssemblyName
        {
        }
        class StructLayoutAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
        interface _ConstructorInfo
        {
        }
        interface _MethodInfo
        {
        }
        interface _FieldInfo
        {
        }
        interface _EventInfo
        {
        }
        interface _PropertyInfo
        {
        }
        interface _CustomAttributeBuilder
        {
        }
        class SafeHandle extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
        }
        class SafeBuffer extends Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        class ExternalException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Collections.ObjectModel {
        class ReadOnlyCollection$1<T> extends System.Object implements System.Collections.IEnumerable, System.Collections.Generic.IList$1<T>, System.Collections.Generic.IReadOnlyCollection$1<T>, System.Collections.Generic.IReadOnlyList$1<T>, System.Collections.IList, System.Collections.Generic.ICollection$1<T>, System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<T>
        {
            protected [__keep_incompatibility]: never;
            public GetEnumerator () : System.Collections.Generic.IEnumerator$1<T>
        }
    }
    namespace System.Globalization {
        class CultureInfo extends System.Object implements System.ICloneable, System.IFormatProvider
        {
            protected [__keep_incompatibility]: never;
            public Clone () : any
            public GetFormat ($formatType: System.Type) : any
        }
        enum NumberStyles
        { None = 0, AllowLeadingWhite = 1, AllowTrailingWhite = 2, AllowLeadingSign = 4, AllowTrailingSign = 8, AllowParentheses = 16, AllowDecimalPoint = 32, AllowThousands = 64, AllowExponent = 128, AllowCurrencySymbol = 256, AllowHexSpecifier = 512, Integer = 7, HexNumber = 515, Number = 111, Float = 167, Currency = 383, Any = 511 }
        enum UnicodeCategory
        { UppercaseLetter = 0, LowercaseLetter = 1, TitlecaseLetter = 2, ModifierLetter = 3, OtherLetter = 4, NonSpacingMark = 5, SpacingCombiningMark = 6, EnclosingMark = 7, DecimalDigitNumber = 8, LetterNumber = 9, OtherNumber = 10, SpaceSeparator = 11, LineSeparator = 12, ParagraphSeparator = 13, Control = 14, Format = 15, Surrogate = 16, PrivateUse = 17, ConnectorPunctuation = 18, DashPunctuation = 19, OpenPunctuation = 20, ClosePunctuation = 21, InitialQuotePunctuation = 22, FinalQuotePunctuation = 23, OtherPunctuation = 24, MathSymbol = 25, CurrencySymbol = 26, ModifierSymbol = 27, OtherSymbol = 28, OtherNotAssigned = 29 }
        enum DateTimeStyles
        { None = 0, AllowLeadingWhite = 1, AllowTrailingWhite = 2, AllowInnerWhite = 4, AllowWhiteSpaces = 7, NoCurrentDateDefault = 8, AdjustToUniversal = 16, AssumeLocal = 32, AssumeUniversal = 64, RoundtripKind = 128 }
        class Calendar extends System.Object implements System.ICloneable
        {
            protected [__keep_incompatibility]: never;
            public Clone () : any
        }
        enum CompareOptions
        { None = 0, IgnoreCase = 1, IgnoreNonSpace = 2, IgnoreSymbols = 4, IgnoreKanaType = 8, IgnoreWidth = 16, OrdinalIgnoreCase = 268435456, StringSort = 536870912, Ordinal = 1073741824 }
        enum TimeSpanStyles
        { None = 0, AssumeNegative = 1 }
        class DaylightTime extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Runtime.Remoting {
        class ObjectHandle extends System.MarshalByRefObject implements System.Runtime.Remoting.IObjectHandle
        {
            protected [__keep_incompatibility]: never;
        }
        interface IObjectHandle
        {
        }
        class ObjRef extends System.Object implements System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Security.Policy {
        class Evidence extends System.Object implements System.Collections.IEnumerable, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
        }
        class PolicyLevel extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class EvidenceBase extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class ApplicationTrust extends System.Security.Policy.EvidenceBase implements System.Security.ISecurityEncodable
        {
            protected [__keep_incompatibility]: never;
        }
        class StrongName extends System.Security.Policy.EvidenceBase implements System.Security.Policy.IBuiltInEvidence, System.Security.Policy.IIdentityPermissionFactory
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Security {
        interface IEvidenceFactory
        {
        }
        class PermissionSet extends System.Object implements System.Collections.IEnumerable, System.Security.ISecurityEncodable, System.Security.IStackWalk, System.Runtime.Serialization.IDeserializationCallback, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
        }
        interface ISecurityEncodable
        {
        }
        interface IStackWalk
        {
        }
        enum SecurityContextSource
        { CurrentAppDomain = 0, CurrentAssembly = 1 }
        interface IPermission extends System.Security.ISecurityEncodable
        {
        }
        class HostSecurityManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class SecurityState extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        enum SecurityRuleSet
        { None = 0, Level1 = 1, Level2 = 2 }
        class SecureString extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
        }
        class CodeAccessPermission extends System.Object implements System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.IStackWalk
        {
            protected [__keep_incompatibility]: never;
        }
        class SecurityElement extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Configuration.Assemblies {
        enum AssemblyHashAlgorithm
        { None = 0, MD5 = 32771, SHA1 = 32772, SHA256 = 32780, SHA384 = 32781, SHA512 = 32782 }
        enum AssemblyVersionCompatibility
        { SameMachine = 1, SameProcess = 2, SameDomain = 3 }
    }
    namespace System.Reflection.Emit {
        class AssemblyBuilder extends System.Reflection.Assembly implements System.Security.IEvidenceFactory, System.Runtime.InteropServices._Assembly, System.Runtime.InteropServices._AssemblyBuilder, System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
        }
        enum AssemblyBuilderAccess
        { Run = 1, Save = 2, RunAndSave = 3, ReflectionOnly = 6, RunAndCollect = 9 }
        class CustomAttributeBuilder extends System.Object implements System.Runtime.InteropServices._CustomAttributeBuilder
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Security.Principal {
        enum PrincipalPolicy
        { UnauthenticatedPrincipal = 0, NoPrincipal = 1, WindowsPrincipal = 2 }
        interface IPrincipal
        {
        }
        enum TokenImpersonationLevel
        { Anonymous = 1, Delegation = 4, Identification = 2, Impersonation = 3, None = 0 }
        interface IIdentity
        {
        }
        class GenericIdentity extends System.Security.Claims.ClaimsIdentity implements System.Security.Principal.IIdentity
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Threading {
        class WaitHandle extends System.MarshalByRefObject implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
        }
        class CancellationToken extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class HostExecutionContextManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        interface IThreadPoolWorkItem
        {
        }
    }
    namespace System.Text {
        enum NormalizationForm
        { FormC = 1, FormD = 2, FormKC = 5, FormKD = 6 }
        class Encoding extends System.Object implements System.ICloneable
        {
            protected [__keep_incompatibility]: never;
            public get BodyName(): string;
            public get EncodingName(): string;
            public get HeaderName(): string;
            public get WebName(): string;
            public get WindowsCodePage(): number;
            public get IsBrowserDisplay(): boolean;
            public get IsBrowserSave(): boolean;
            public get IsMailNewsDisplay(): boolean;
            public get IsMailNewsSave(): boolean;
            public get IsSingleByte(): boolean;
            public get EncoderFallback(): System.Text.EncoderFallback;
            public set EncoderFallback(value: System.Text.EncoderFallback);
            public get DecoderFallback(): System.Text.DecoderFallback;
            public set DecoderFallback(value: System.Text.DecoderFallback);
            public get IsReadOnly(): boolean;
            public static get ASCII(): System.Text.Encoding;
            public get CodePage(): number;
            public static get Default(): System.Text.Encoding;
            public static get Unicode(): System.Text.Encoding;
            public static get BigEndianUnicode(): System.Text.Encoding;
            public static get UTF7(): System.Text.Encoding;
            public static get UTF8(): System.Text.Encoding;
            public static get UTF32(): System.Text.Encoding;
            public static Convert ($srcEncoding: System.Text.Encoding, $dstEncoding: System.Text.Encoding, $bytes: System.Array$1<number>) : System.Array$1<number>
            public static Convert ($srcEncoding: System.Text.Encoding, $dstEncoding: System.Text.Encoding, $bytes: System.Array$1<number>, $index: number, $count: number) : System.Array$1<number>
            public static RegisterProvider ($provider: System.Text.EncodingProvider) : void
            public static GetEncoding ($codepage: number) : System.Text.Encoding
            public static GetEncoding ($codepage: number, $encoderFallback: System.Text.EncoderFallback, $decoderFallback: System.Text.DecoderFallback) : System.Text.Encoding
            public static GetEncoding ($name: string) : System.Text.Encoding
            public static GetEncoding ($name: string, $encoderFallback: System.Text.EncoderFallback, $decoderFallback: System.Text.DecoderFallback) : System.Text.Encoding
            public static GetEncodings () : System.Array$1<System.Text.EncodingInfo>
            public GetPreamble () : System.Array$1<number>
            public Clone () : any
            public GetByteCount ($chars: System.Array$1<number>) : number
            public GetByteCount ($s: string) : number
            public GetByteCount ($chars: System.Array$1<number>, $index: number, $count: number) : number
            public GetBytes ($chars: System.Array$1<number>) : System.Array$1<number>
            public GetBytes ($chars: System.Array$1<number>, $index: number, $count: number) : System.Array$1<number>
            public GetBytes ($chars: System.Array$1<number>, $charIndex: number, $charCount: number, $bytes: System.Array$1<number>, $byteIndex: number) : number
            public GetBytes ($s: string) : System.Array$1<number>
            public GetBytes ($s: string, $charIndex: number, $charCount: number, $bytes: System.Array$1<number>, $byteIndex: number) : number
            public GetCharCount ($bytes: System.Array$1<number>) : number
            public GetCharCount ($bytes: System.Array$1<number>, $index: number, $count: number) : number
            public GetChars ($bytes: System.Array$1<number>) : System.Array$1<number>
            public GetChars ($bytes: System.Array$1<number>, $index: number, $count: number) : System.Array$1<number>
            public GetChars ($bytes: System.Array$1<number>, $byteIndex: number, $byteCount: number, $chars: System.Array$1<number>, $charIndex: number) : number
            public IsAlwaysNormalized () : boolean
            public IsAlwaysNormalized ($form: System.Text.NormalizationForm) : boolean
            public GetDecoder () : System.Text.Decoder
            public GetEncoder () : System.Text.Encoder
            public GetMaxByteCount ($charCount: number) : number
            public GetMaxCharCount ($byteCount: number) : number
            public GetString ($bytes: System.Array$1<number>) : string
            public GetString ($bytes: System.Array$1<number>, $index: number, $count: number) : string
        }
        class ASCIIEncoding extends System.Text.Encoding implements System.ICloneable
        {
            protected [__keep_incompatibility]: never;
            public get IsSingleByte(): boolean;
            public constructor ()
        }
        class Decoder extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Fallback(): System.Text.DecoderFallback;
            public set Fallback(value: System.Text.DecoderFallback);
            public get FallbackBuffer(): System.Text.DecoderFallbackBuffer;
            public Reset () : void
            public GetCharCount ($bytes: System.Array$1<number>, $index: number, $count: number) : number
            public GetCharCount ($bytes: System.Array$1<number>, $index: number, $count: number, $flush: boolean) : number
            public GetChars ($bytes: System.Array$1<number>, $byteIndex: number, $byteCount: number, $chars: System.Array$1<number>, $charIndex: number) : number
            public GetChars ($bytes: System.Array$1<number>, $byteIndex: number, $byteCount: number, $chars: System.Array$1<number>, $charIndex: number, $flush: boolean) : number
            public Convert ($bytes: System.Array$1<number>, $byteIndex: number, $byteCount: number, $chars: System.Array$1<number>, $charIndex: number, $charCount: number, $flush: boolean, $bytesUsed: $Ref<number>, $charsUsed: $Ref<number>, $completed: $Ref<boolean>) : void
        }
        class Encoder extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Fallback(): System.Text.EncoderFallback;
            public set Fallback(value: System.Text.EncoderFallback);
            public get FallbackBuffer(): System.Text.EncoderFallbackBuffer;
            public Reset () : void
            public GetByteCount ($chars: System.Array$1<number>, $index: number, $count: number, $flush: boolean) : number
            public GetBytes ($chars: System.Array$1<number>, $charIndex: number, $charCount: number, $bytes: System.Array$1<number>, $byteIndex: number, $flush: boolean) : number
            public Convert ($chars: System.Array$1<number>, $charIndex: number, $charCount: number, $bytes: System.Array$1<number>, $byteIndex: number, $byteCount: number, $flush: boolean, $charsUsed: $Ref<number>, $bytesUsed: $Ref<number>, $completed: $Ref<boolean>) : void
        }
        class DecoderFallback extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get ReplacementFallback(): System.Text.DecoderFallback;
            public static get ExceptionFallback(): System.Text.DecoderFallback;
            public get MaxCharCount(): number;
            public CreateFallbackBuffer () : System.Text.DecoderFallbackBuffer
        }
        class DecoderFallbackBuffer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Remaining(): number;
            public Fallback ($bytesUnknown: System.Array$1<number>, $index: number) : boolean
            public GetNextChar () : number
            public MovePrevious () : boolean
            public Reset () : void
        }
        class DecoderExceptionFallback extends System.Text.DecoderFallback
        {
            protected [__keep_incompatibility]: never;
            public get MaxCharCount(): number;
            public constructor ()
        }
        class DecoderExceptionFallbackBuffer extends System.Text.DecoderFallbackBuffer
        {
            protected [__keep_incompatibility]: never;
            public get Remaining(): number;
            public constructor ()
        }
        class DecoderFallbackException extends System.ArgumentException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get BytesUnknown(): System.Array$1<number>;
            public get Index(): number;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ($message: string, $bytesUnknown: System.Array$1<number>, $index: number)
            public constructor ($message: string, $paramName: string, $innerException: System.Exception)
            public constructor ($message: string, $paramName: string)
        }
        class DecoderReplacementFallback extends System.Text.DecoderFallback
        {
            protected [__keep_incompatibility]: never;
            public get DefaultString(): string;
            public get MaxCharCount(): number;
            public constructor ()
            public constructor ($replacement: string)
        }
        class DecoderReplacementFallbackBuffer extends System.Text.DecoderFallbackBuffer
        {
            protected [__keep_incompatibility]: never;
            public get Remaining(): number;
            public constructor ($fallback: System.Text.DecoderReplacementFallback)
            public constructor ()
        }
        class EncoderFallback extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get ReplacementFallback(): System.Text.EncoderFallback;
            public static get ExceptionFallback(): System.Text.EncoderFallback;
            public get MaxCharCount(): number;
            public CreateFallbackBuffer () : System.Text.EncoderFallbackBuffer
        }
        class EncoderFallbackBuffer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Remaining(): number;
            public Fallback ($charUnknown: number, $index: number) : boolean
            public Fallback ($charUnknownHigh: number, $charUnknownLow: number, $index: number) : boolean
            public GetNextChar () : number
            public MovePrevious () : boolean
            public Reset () : void
        }
        class EncoderExceptionFallback extends System.Text.EncoderFallback
        {
            protected [__keep_incompatibility]: never;
            public get MaxCharCount(): number;
            public constructor ()
        }
        class EncoderExceptionFallbackBuffer extends System.Text.EncoderFallbackBuffer
        {
            protected [__keep_incompatibility]: never;
            public get Remaining(): number;
            public constructor ()
        }
        class EncoderFallbackException extends System.ArgumentException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get CharUnknown(): number;
            public get CharUnknownHigh(): number;
            public get CharUnknownLow(): number;
            public get Index(): number;
            public IsUnknownSurrogate () : boolean
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class EncoderReplacementFallback extends System.Text.EncoderFallback
        {
            protected [__keep_incompatibility]: never;
            public get DefaultString(): string;
            public get MaxCharCount(): number;
            public constructor ()
            public constructor ($replacement: string)
        }
        class EncoderReplacementFallbackBuffer extends System.Text.EncoderFallbackBuffer
        {
            protected [__keep_incompatibility]: never;
            public get Remaining(): number;
            public constructor ($fallback: System.Text.EncoderReplacementFallback)
            public constructor ()
        }
        class EncodingProvider extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public GetEncoding ($name: string) : System.Text.Encoding
            public GetEncoding ($codepage: number) : System.Text.Encoding
            public GetEncoding ($name: string, $encoderFallback: System.Text.EncoderFallback, $decoderFallback: System.Text.DecoderFallback) : System.Text.Encoding
            public GetEncoding ($codepage: number, $encoderFallback: System.Text.EncoderFallback, $decoderFallback: System.Text.DecoderFallback) : System.Text.Encoding
        }
        class EncodingInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get CodePage(): number;
            public get Name(): string;
            public get DisplayName(): string;
            public GetEncoding () : System.Text.Encoding
        }
        class StringBuilder extends System.Object implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Capacity(): number;
            public set Capacity(value: number);
            public get MaxCapacity(): number;
            public get Length(): number;
            public set Length(value: number);
            public get Chars(): number;
            public set Chars(value: number);
            public EnsureCapacity ($capacity: number) : number
            public ToString () : string
            public ToString ($startIndex: number, $length: number) : string
            public Clear () : System.Text.StringBuilder
            public get_Chars ($index: number) : number
            public set_Chars ($index: number, $value: number) : void
            public Append ($value: number, $repeatCount: number) : System.Text.StringBuilder
            public Append ($value: System.Array$1<number>, $startIndex: number, $charCount: number) : System.Text.StringBuilder
            public Append ($value: string) : System.Text.StringBuilder
            public Append ($value: string, $startIndex: number, $count: number) : System.Text.StringBuilder
            public AppendLine () : System.Text.StringBuilder
            public AppendLine ($value: string) : System.Text.StringBuilder
            public CopyTo ($sourceIndex: number, $destination: System.Array$1<number>, $destinationIndex: number, $count: number) : void
            public Insert ($index: number, $value: string, $count: number) : System.Text.StringBuilder
            public Remove ($startIndex: number, $length: number) : System.Text.StringBuilder
            public Append ($value: boolean) : System.Text.StringBuilder
            public Append ($value: number) : System.Text.StringBuilder
            public Append ($value: bigint) : System.Text.StringBuilder
            public Append ($value: System.Decimal) : System.Text.StringBuilder
            public Append ($value: any) : System.Text.StringBuilder
            public Append ($value: System.Array$1<number>) : System.Text.StringBuilder
            public Insert ($index: number, $value: string) : System.Text.StringBuilder
            public Insert ($index: number, $value: boolean) : System.Text.StringBuilder
            public Insert ($index: number, $value: number) : System.Text.StringBuilder
            public Insert ($index: number, $value: System.Array$1<number>) : System.Text.StringBuilder
            public Insert ($index: number, $value: System.Array$1<number>, $startIndex: number, $charCount: number) : System.Text.StringBuilder
            public Insert ($index: number, $value: bigint) : System.Text.StringBuilder
            public Insert ($index: number, $value: System.Decimal) : System.Text.StringBuilder
            public Insert ($index: number, $value: any) : System.Text.StringBuilder
            public AppendFormat ($format: string, $arg0: any) : System.Text.StringBuilder
            public AppendFormat ($format: string, $arg0: any, $arg1: any) : System.Text.StringBuilder
            public AppendFormat ($format: string, $arg0: any, $arg1: any, $arg2: any) : System.Text.StringBuilder
            public AppendFormat ($format: string, ...args: any[]) : System.Text.StringBuilder
            public AppendFormat ($provider: System.IFormatProvider, $format: string, $arg0: any) : System.Text.StringBuilder
            public AppendFormat ($provider: System.IFormatProvider, $format: string, $arg0: any, $arg1: any) : System.Text.StringBuilder
            public AppendFormat ($provider: System.IFormatProvider, $format: string, $arg0: any, $arg1: any, $arg2: any) : System.Text.StringBuilder
            public AppendFormat ($provider: System.IFormatProvider, $format: string, ...args: any[]) : System.Text.StringBuilder
            public Replace ($oldValue: string, $newValue: string) : System.Text.StringBuilder
            public Equals ($sb: System.Text.StringBuilder) : boolean
            public Replace ($oldValue: string, $newValue: string, $startIndex: number, $count: number) : System.Text.StringBuilder
            public Replace ($oldChar: number, $newChar: number) : System.Text.StringBuilder
            public Replace ($oldChar: number, $newChar: number, $startIndex: number, $count: number) : System.Text.StringBuilder
            public constructor ()
            public constructor ($capacity: number)
            public constructor ($value: string)
            public constructor ($value: string, $capacity: number)
            public constructor ($value: string, $startIndex: number, $length: number, $capacity: number)
            public constructor ($capacity: number, $maxCapacity: number)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        interface StringBuilder {
            Clear () : void;
        }
        class UnicodeEncoding extends System.Text.Encoding implements System.ICloneable
        {
            protected [__keep_incompatibility]: never;
            public static CharSize : number
            public constructor ()
            public constructor ($bigEndian: boolean, $byteOrderMark: boolean)
            public constructor ($bigEndian: boolean, $byteOrderMark: boolean, $throwOnInvalidBytes: boolean)
        }
        class UTF32Encoding extends System.Text.Encoding implements System.ICloneable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($bigEndian: boolean, $byteOrderMark: boolean)
            public constructor ($bigEndian: boolean, $byteOrderMark: boolean, $throwOnInvalidCharacters: boolean)
        }
        class UTF7Encoding extends System.Text.Encoding implements System.ICloneable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($allowOptionals: boolean)
        }
        class UTF8Encoding extends System.Text.Encoding implements System.ICloneable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($encoderShouldEmitUTF8Identifier: boolean)
            public constructor ($encoderShouldEmitUTF8Identifier: boolean, $throwOnInvalidBytes: boolean)
        }
    }
    namespace System.TimeZoneInfo {
        class AdjustmentRule extends System.Object implements System.Runtime.Serialization.IDeserializationCallback, System.IEquatable$1<System.TimeZoneInfo.AdjustmentRule>, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Runtime.ExceptionServices {
        class FirstChanceExceptionEventArgs extends System.EventArgs
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Environment {
        enum SpecialFolder
        { MyDocuments = 5, Desktop = 0, MyComputer = 17, Programs = 2, Personal = 5, Favorites = 6, Startup = 7, Recent = 8, SendTo = 9, StartMenu = 11, MyMusic = 13, DesktopDirectory = 16, Templates = 21, ApplicationData = 26, LocalApplicationData = 28, InternetCache = 32, Cookies = 33, History = 34, CommonApplicationData = 35, System = 37, ProgramFiles = 38, MyPictures = 39, CommonProgramFiles = 43, MyVideos = 14, NetworkShortcuts = 19, Fonts = 20, CommonStartMenu = 22, CommonPrograms = 23, CommonStartup = 24, CommonDesktopDirectory = 25, PrinterShortcuts = 27, Windows = 36, UserProfile = 40, SystemX86 = 41, ProgramFilesX86 = 42, CommonProgramFilesX86 = 44, CommonTemplates = 45, CommonDocuments = 46, CommonAdminTools = 47, AdminTools = 48, CommonMusic = 53, CommonPictures = 54, CommonVideos = 55, Resources = 56, LocalizedResources = 57, CommonOemLinks = 58, CDBurning = 59 }
        enum SpecialFolderOption
        { None = 0, DoNotVerify = 16384, Create = 32768 }
    }
    namespace System.ActivationContext {
        enum ContextForm
        { Loose = 0, StoreBounded = 1 }
    }
    namespace System.Runtime.Hosting {
        class ApplicationActivator extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class ActivationArguments extends System.Security.Policy.EvidenceBase
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.IO {
        class TextWriter extends System.MarshalByRefObject implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public static Null : System.IO.TextWriter
            public get FormatProvider(): System.IFormatProvider;
            public get Encoding(): System.Text.Encoding;
            public get NewLine(): string;
            public set NewLine(value: string);
            public Close () : void
            public Dispose () : void
            public Flush () : void
            public static Synchronized ($writer: System.IO.TextWriter) : System.IO.TextWriter
            public Write ($value: number) : void
            public Write ($buffer: System.Array$1<number>) : void
            public Write ($buffer: System.Array$1<number>, $index: number, $count: number) : void
            public Write ($value: boolean) : void
            public Write ($value: bigint) : void
            public Write ($value: System.Decimal) : void
            public Write ($value: string) : void
            public Write ($value: any) : void
            public Write ($format: string, $arg0: any) : void
            public Write ($format: string, $arg0: any, $arg1: any) : void
            public Write ($format: string, $arg0: any, $arg1: any, $arg2: any) : void
            public Write ($format: string, ...arg: any[]) : void
            public WriteLine () : void
            public WriteLine ($value: number) : void
            public WriteLine ($buffer: System.Array$1<number>) : void
            public WriteLine ($buffer: System.Array$1<number>, $index: number, $count: number) : void
            public WriteLine ($value: boolean) : void
            public WriteLine ($value: bigint) : void
            public WriteLine ($value: System.Decimal) : void
            public WriteLine ($value: string) : void
            public WriteLine ($value: any) : void
            public WriteLine ($format: string, $arg0: any) : void
            public WriteLine ($format: string, $arg0: any, $arg1: any) : void
            public WriteLine ($format: string, $arg0: any, $arg1: any, $arg2: any) : void
            public WriteLine ($format: string, ...arg: any[]) : void
            public WriteAsync ($value: number) : $Task<any>
            public WriteAsync ($value: string) : $Task<any>
            public WriteAsync ($buffer: System.Array$1<number>) : $Task<any>
            public WriteAsync ($buffer: System.Array$1<number>, $index: number, $count: number) : $Task<any>
            public WriteLineAsync ($value: number) : $Task<any>
            public WriteLineAsync ($value: string) : $Task<any>
            public WriteLineAsync ($buffer: System.Array$1<number>) : $Task<any>
            public WriteLineAsync ($buffer: System.Array$1<number>, $index: number, $count: number) : $Task<any>
            public WriteLineAsync () : $Task<any>
            public FlushAsync () : $Task<any>
        }
        class TextReader extends System.MarshalByRefObject implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public static Null : System.IO.TextReader
            public Close () : void
            public Dispose () : void
            public Peek () : number
            public Read () : number
            public Read ($buffer: System.Array$1<number>, $index: number, $count: number) : number
            public ReadToEnd () : string
            public ReadBlock ($buffer: System.Array$1<number>, $index: number, $count: number) : number
            public ReadLine () : string
            public ReadLineAsync () : System.Threading.Tasks.Task$1<string>
            public ReadToEndAsync () : System.Threading.Tasks.Task$1<string>
            public ReadAsync ($buffer: System.Array$1<number>, $index: number, $count: number) : System.Threading.Tasks.Task$1<number>
            public ReadBlockAsync ($buffer: System.Array$1<number>, $index: number, $count: number) : System.Threading.Tasks.Task$1<number>
            public static Synchronized ($reader: System.IO.TextReader) : System.IO.TextReader
        }
        class Stream extends System.MarshalByRefObject implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public static Null : System.IO.Stream
            public get CanRead(): boolean;
            public get CanSeek(): boolean;
            public get CanTimeout(): boolean;
            public get CanWrite(): boolean;
            public get Length(): bigint;
            public get Position(): bigint;
            public set Position(value: bigint);
            public get ReadTimeout(): number;
            public set ReadTimeout(value: number);
            public get WriteTimeout(): number;
            public set WriteTimeout(value: number);
            public CopyToAsync ($destination: System.IO.Stream) : $Task<any>
            public CopyToAsync ($destination: System.IO.Stream, $bufferSize: number) : $Task<any>
            public CopyToAsync ($destination: System.IO.Stream, $bufferSize: number, $cancellationToken: System.Threading.CancellationToken) : $Task<any>
            public CopyTo ($destination: System.IO.Stream) : void
            public CopyTo ($destination: System.IO.Stream, $bufferSize: number) : void
            public Close () : void
            public Dispose () : void
            public Flush () : void
            public FlushAsync () : $Task<any>
            public FlushAsync ($cancellationToken: System.Threading.CancellationToken) : $Task<any>
            public BeginRead ($buffer: System.Array$1<number>, $offset: number, $count: number, $callback: System.AsyncCallback, $state: any) : System.IAsyncResult
            public EndRead ($asyncResult: System.IAsyncResult) : number
            public ReadAsync ($buffer: System.Array$1<number>, $offset: number, $count: number) : System.Threading.Tasks.Task$1<number>
            public ReadAsync ($buffer: System.Array$1<number>, $offset: number, $count: number, $cancellationToken: System.Threading.CancellationToken) : System.Threading.Tasks.Task$1<number>
            public BeginWrite ($buffer: System.Array$1<number>, $offset: number, $count: number, $callback: System.AsyncCallback, $state: any) : System.IAsyncResult
            public EndWrite ($asyncResult: System.IAsyncResult) : void
            public WriteAsync ($buffer: System.Array$1<number>, $offset: number, $count: number) : $Task<any>
            public WriteAsync ($buffer: System.Array$1<number>, $offset: number, $count: number, $cancellationToken: System.Threading.CancellationToken) : $Task<any>
            public Seek ($offset: bigint, $origin: System.IO.SeekOrigin) : bigint
            public SetLength ($value: bigint) : void
            public Read ($buffer: System.Array$1<number>, $offset: number, $count: number) : number
            public ReadByte () : number
            public Write ($buffer: System.Array$1<number>, $offset: number, $count: number) : void
            public WriteByte ($value: number) : void
            public static Synchronized ($stream: System.IO.Stream) : System.IO.Stream
            public Read ($destination: System.Span$1<number>) : number
            public Write ($source: System.ReadOnlySpan$1<number>) : void
            public ReadAsync ($destination: System.Memory$1<number>, $cancellationToken?: System.Threading.CancellationToken) : System.Threading.Tasks.ValueTask$1<number>
            public WriteAsync ($source: System.ReadOnlyMemory$1<number>, $cancellationToken?: System.Threading.CancellationToken) : $Task<any>
        }
        class FileStream extends System.IO.Stream implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get CanRead(): boolean;
            public get CanWrite(): boolean;
            public get CanSeek(): boolean;
            public get IsAsync(): boolean;
            public get Name(): string;
            public get Length(): bigint;
            public get Position(): bigint;
            public set Position(value: bigint);
            public get SafeFileHandle(): Microsoft.Win32.SafeHandles.SafeFileHandle;
            public Flush () : void
            public Flush ($flushToDisk: boolean) : void
            public Lock ($position: bigint, $length: bigint) : void
            public Unlock ($position: bigint, $length: bigint) : void
            public GetAccessControl () : System.Security.AccessControl.FileSecurity
            public SetAccessControl ($fileSecurity: System.Security.AccessControl.FileSecurity) : void
            public constructor ($path: string, $mode: System.IO.FileMode)
            public constructor ($path: string, $mode: System.IO.FileMode, $access: System.IO.FileAccess)
            public constructor ($path: string, $mode: System.IO.FileMode, $access: System.IO.FileAccess, $share: System.IO.FileShare)
            public constructor ($path: string, $mode: System.IO.FileMode, $access: System.IO.FileAccess, $share: System.IO.FileShare, $bufferSize: number)
            public constructor ($path: string, $mode: System.IO.FileMode, $access: System.IO.FileAccess, $share: System.IO.FileShare, $bufferSize: number, $useAsync: boolean)
            public constructor ($path: string, $mode: System.IO.FileMode, $access: System.IO.FileAccess, $share: System.IO.FileShare, $bufferSize: number, $options: System.IO.FileOptions)
            public constructor ($handle: Microsoft.Win32.SafeHandles.SafeFileHandle, $access: System.IO.FileAccess)
            public constructor ($handle: Microsoft.Win32.SafeHandles.SafeFileHandle, $access: System.IO.FileAccess, $bufferSize: number)
            public constructor ($handle: Microsoft.Win32.SafeHandles.SafeFileHandle, $access: System.IO.FileAccess, $bufferSize: number, $isAsync: boolean)
            public constructor ($path: string, $mode: System.IO.FileMode, $rights: System.Security.AccessControl.FileSystemRights, $share: System.IO.FileShare, $bufferSize: number, $options: System.IO.FileOptions)
            public constructor ($path: string, $mode: System.IO.FileMode, $rights: System.Security.AccessControl.FileSystemRights, $share: System.IO.FileShare, $bufferSize: number, $options: System.IO.FileOptions, $fileSecurity: System.Security.AccessControl.FileSecurity)
            public constructor ()
        }
        class BinaryReader extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get BaseStream(): System.IO.Stream;
            public Close () : void
            public Dispose () : void
            public PeekChar () : number
            public Read () : number
            public ReadBoolean () : boolean
            public ReadByte () : number
            public ReadSByte () : number
            public ReadChar () : number
            public ReadInt16 () : number
            public ReadUInt16 () : number
            public ReadInt32 () : number
            public ReadUInt32 () : number
            public ReadInt64 () : bigint
            public ReadUInt64 () : bigint
            public ReadSingle () : number
            public ReadDouble () : number
            public ReadDecimal () : System.Decimal
            public ReadString () : string
            public Read ($buffer: System.Array$1<number>, $index: number, $count: number) : number
            public ReadChars ($count: number) : System.Array$1<number>
            public ReadBytes ($count: number) : System.Array$1<number>
            public constructor ($input: System.IO.Stream)
            public constructor ($input: System.IO.Stream, $encoding: System.Text.Encoding)
            public constructor ($input: System.IO.Stream, $encoding: System.Text.Encoding, $leaveOpen: boolean)
            public constructor ()
        }
        class BinaryWriter extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public static Null : System.IO.BinaryWriter
            public get BaseStream(): System.IO.Stream;
            public Close () : void
            public Dispose () : void
            public Flush () : void
            public Seek ($offset: number, $origin: System.IO.SeekOrigin) : bigint
            public Write ($value: boolean) : void
            public Write ($value: number) : void
            public Write ($buffer: System.Array$1<number>) : void
            public Write ($buffer: System.Array$1<number>, $index: number, $count: number) : void
            public Write ($ch: number) : void
            public Write ($chars: System.Array$1<number>) : void
            public Write ($chars: System.Array$1<number>, $index: number, $count: number) : void
            public Write ($value: System.Decimal) : void
            public Write ($value: bigint) : void
            public Write ($value: string) : void
            public constructor ($output: System.IO.Stream)
            public constructor ($output: System.IO.Stream, $encoding: System.Text.Encoding)
            public constructor ($output: System.IO.Stream, $encoding: System.Text.Encoding, $leaveOpen: boolean)
            public constructor ()
        }
        enum SeekOrigin
        { Begin = 0, Current = 1, End = 2 }
        class BufferedStream extends System.IO.Stream implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get CanRead(): boolean;
            public get CanWrite(): boolean;
            public get CanSeek(): boolean;
            public get Length(): bigint;
            public get Position(): bigint;
            public set Position(value: bigint);
            public constructor ($stream: System.IO.Stream)
            public constructor ($stream: System.IO.Stream, $bufferSize: number)
            public constructor ()
        }
        class Directory extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetFiles ($path: string) : System.Array$1<string>
            public static GetFiles ($path: string, $searchPattern: string) : System.Array$1<string>
            public static GetFiles ($path: string, $searchPattern: string, $searchOption: System.IO.SearchOption) : System.Array$1<string>
            public static GetDirectories ($path: string) : System.Array$1<string>
            public static GetDirectories ($path: string, $searchPattern: string) : System.Array$1<string>
            public static GetDirectories ($path: string, $searchPattern: string, $searchOption: System.IO.SearchOption) : System.Array$1<string>
            public static GetFileSystemEntries ($path: string) : System.Array$1<string>
            public static GetFileSystemEntries ($path: string, $searchPattern: string) : System.Array$1<string>
            public static GetFileSystemEntries ($path: string, $searchPattern: string, $searchOption: System.IO.SearchOption) : System.Array$1<string>
            public static EnumerateDirectories ($path: string) : System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateDirectories ($path: string, $searchPattern: string) : System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateDirectories ($path: string, $searchPattern: string, $searchOption: System.IO.SearchOption) : System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFiles ($path: string) : System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFiles ($path: string, $searchPattern: string) : System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFiles ($path: string, $searchPattern: string, $searchOption: System.IO.SearchOption) : System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFileSystemEntries ($path: string) : System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFileSystemEntries ($path: string, $searchPattern: string) : System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFileSystemEntries ($path: string, $searchPattern: string, $searchOption: System.IO.SearchOption) : System.Collections.Generic.IEnumerable$1<string>
            public static GetDirectoryRoot ($path: string) : string
            public static CreateDirectory ($path: string) : System.IO.DirectoryInfo
            public static CreateDirectory ($path: string, $directorySecurity: System.Security.AccessControl.DirectorySecurity) : System.IO.DirectoryInfo
            public static Delete ($path: string) : void
            public static Delete ($path: string, $recursive: boolean) : void
            public static Exists ($path: string) : boolean
            public static GetLastAccessTime ($path: string) : Date
            public static GetLastAccessTimeUtc ($path: string) : Date
            public static GetLastWriteTime ($path: string) : Date
            public static GetLastWriteTimeUtc ($path: string) : Date
            public static GetCreationTime ($path: string) : Date
            public static GetCreationTimeUtc ($path: string) : Date
            public static GetCurrentDirectory () : string
            public static GetLogicalDrives () : System.Array$1<string>
            public static GetParent ($path: string) : System.IO.DirectoryInfo
            public static Move ($sourceDirName: string, $destDirName: string) : void
            public static SetAccessControl ($path: string, $directorySecurity: System.Security.AccessControl.DirectorySecurity) : void
            public static SetCreationTime ($path: string, $creationTime: Date) : void
            public static SetCreationTimeUtc ($path: string, $creationTimeUtc: Date) : void
            public static SetCurrentDirectory ($path: string) : void
            public static SetLastAccessTime ($path: string, $lastAccessTime: Date) : void
            public static SetLastAccessTimeUtc ($path: string, $lastAccessTimeUtc: Date) : void
            public static SetLastWriteTime ($path: string, $lastWriteTime: Date) : void
            public static SetLastWriteTimeUtc ($path: string, $lastWriteTimeUtc: Date) : void
            public static GetAccessControl ($path: string, $includeSections: System.Security.AccessControl.AccessControlSections) : System.Security.AccessControl.DirectorySecurity
            public static GetAccessControl ($path: string) : System.Security.AccessControl.DirectorySecurity
        }
        enum SearchOption
        { TopDirectoryOnly = 0, AllDirectories = 1 }
        class FileSystemInfo extends System.MarshalByRefObject implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get FullName(): string;
            public get Extension(): string;
            public get Name(): string;
            public get Exists(): boolean;
            public get CreationTime(): Date;
            public set CreationTime(value: Date);
            public get CreationTimeUtc(): Date;
            public set CreationTimeUtc(value: Date);
            public get LastAccessTime(): Date;
            public set LastAccessTime(value: Date);
            public get LastAccessTimeUtc(): Date;
            public set LastAccessTimeUtc(value: Date);
            public get LastWriteTime(): Date;
            public set LastWriteTime(value: Date);
            public get LastWriteTimeUtc(): Date;
            public set LastWriteTimeUtc(value: Date);
            public get Attributes(): System.IO.FileAttributes;
            public set Attributes(value: System.IO.FileAttributes);
            public Delete () : void
            public Refresh () : void
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
        }
        class DirectoryInfo extends System.IO.FileSystemInfo implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Exists(): boolean;
            public get Name(): string;
            public get Parent(): System.IO.DirectoryInfo;
            public get Root(): System.IO.DirectoryInfo;
            public Create () : void
            public CreateSubdirectory ($path: string) : System.IO.DirectoryInfo
            public GetFiles () : System.Array$1<System.IO.FileInfo>
            public GetFiles ($searchPattern: string) : System.Array$1<System.IO.FileInfo>
            public GetDirectories () : System.Array$1<System.IO.DirectoryInfo>
            public GetDirectories ($searchPattern: string) : System.Array$1<System.IO.DirectoryInfo>
            public GetFileSystemInfos () : System.Array$1<System.IO.FileSystemInfo>
            public GetFileSystemInfos ($searchPattern: string) : System.Array$1<System.IO.FileSystemInfo>
            public GetFileSystemInfos ($searchPattern: string, $searchOption: System.IO.SearchOption) : System.Array$1<System.IO.FileSystemInfo>
            public Delete () : void
            public Delete ($recursive: boolean) : void
            public MoveTo ($destDirName: string) : void
            public GetDirectories ($searchPattern: string, $searchOption: System.IO.SearchOption) : System.Array$1<System.IO.DirectoryInfo>
            public GetFiles ($searchPattern: string, $searchOption: System.IO.SearchOption) : System.Array$1<System.IO.FileInfo>
            public Create ($directorySecurity: System.Security.AccessControl.DirectorySecurity) : void
            public CreateSubdirectory ($path: string, $directorySecurity: System.Security.AccessControl.DirectorySecurity) : System.IO.DirectoryInfo
            public GetAccessControl () : System.Security.AccessControl.DirectorySecurity
            public GetAccessControl ($includeSections: System.Security.AccessControl.AccessControlSections) : System.Security.AccessControl.DirectorySecurity
            public SetAccessControl ($directorySecurity: System.Security.AccessControl.DirectorySecurity) : void
            public EnumerateDirectories () : System.Collections.Generic.IEnumerable$1<System.IO.DirectoryInfo>
            public EnumerateDirectories ($searchPattern: string) : System.Collections.Generic.IEnumerable$1<System.IO.DirectoryInfo>
            public EnumerateDirectories ($searchPattern: string, $searchOption: System.IO.SearchOption) : System.Collections.Generic.IEnumerable$1<System.IO.DirectoryInfo>
            public EnumerateFiles () : System.Collections.Generic.IEnumerable$1<System.IO.FileInfo>
            public EnumerateFiles ($searchPattern: string) : System.Collections.Generic.IEnumerable$1<System.IO.FileInfo>
            public EnumerateFiles ($searchPattern: string, $searchOption: System.IO.SearchOption) : System.Collections.Generic.IEnumerable$1<System.IO.FileInfo>
            public EnumerateFileSystemInfos () : System.Collections.Generic.IEnumerable$1<System.IO.FileSystemInfo>
            public EnumerateFileSystemInfos ($searchPattern: string) : System.Collections.Generic.IEnumerable$1<System.IO.FileSystemInfo>
            public EnumerateFileSystemInfos ($searchPattern: string, $searchOption: System.IO.SearchOption) : System.Collections.Generic.IEnumerable$1<System.IO.FileSystemInfo>
            public constructor ($path: string)
            public constructor ()
        }
        class IOException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $hresult: number)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class DirectoryNotFoundException extends System.IO.IOException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class DriveNotFoundException extends System.IO.IOException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class EndOfStreamException extends System.IO.IOException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class FileInfo extends System.IO.FileSystemInfo implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Name(): string;
            public get Length(): bigint;
            public get DirectoryName(): string;
            public get Directory(): System.IO.DirectoryInfo;
            public get IsReadOnly(): boolean;
            public set IsReadOnly(value: boolean);
            public get Exists(): boolean;
            public GetAccessControl () : System.Security.AccessControl.FileSecurity
            public GetAccessControl ($includeSections: System.Security.AccessControl.AccessControlSections) : System.Security.AccessControl.FileSecurity
            public SetAccessControl ($fileSecurity: System.Security.AccessControl.FileSecurity) : void
            public OpenText () : System.IO.StreamReader
            public CreateText () : System.IO.StreamWriter
            public AppendText () : System.IO.StreamWriter
            public CopyTo ($destFileName: string) : System.IO.FileInfo
            public CopyTo ($destFileName: string, $overwrite: boolean) : System.IO.FileInfo
            public Create () : System.IO.FileStream
            public Decrypt () : void
            public Encrypt () : void
            public Open ($mode: System.IO.FileMode) : System.IO.FileStream
            public Open ($mode: System.IO.FileMode, $access: System.IO.FileAccess) : System.IO.FileStream
            public Open ($mode: System.IO.FileMode, $access: System.IO.FileAccess, $share: System.IO.FileShare) : System.IO.FileStream
            public OpenRead () : System.IO.FileStream
            public OpenWrite () : System.IO.FileStream
            public MoveTo ($destFileName: string) : void
            public Replace ($destinationFileName: string, $destinationBackupFileName: string) : System.IO.FileInfo
            public Replace ($destinationFileName: string, $destinationBackupFileName: string, $ignoreMetadataErrors: boolean) : System.IO.FileInfo
            public constructor ($fileName: string)
            public constructor ()
        }
        class StreamReader extends System.IO.TextReader implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public static Null : System.IO.StreamReader
            public get CurrentEncoding(): System.Text.Encoding;
            public get BaseStream(): System.IO.Stream;
            public get EndOfStream(): boolean;
            public DiscardBufferedData () : void
            public constructor ($stream: System.IO.Stream)
            public constructor ($stream: System.IO.Stream, $detectEncodingFromByteOrderMarks: boolean)
            public constructor ($stream: System.IO.Stream, $encoding: System.Text.Encoding)
            public constructor ($stream: System.IO.Stream, $encoding: System.Text.Encoding, $detectEncodingFromByteOrderMarks: boolean)
            public constructor ($stream: System.IO.Stream, $encoding: System.Text.Encoding, $detectEncodingFromByteOrderMarks: boolean, $bufferSize: number)
            public constructor ($stream: System.IO.Stream, $encoding: System.Text.Encoding, $detectEncodingFromByteOrderMarks: boolean, $bufferSize: number, $leaveOpen: boolean)
            public constructor ($path: string)
            public constructor ($path: string, $detectEncodingFromByteOrderMarks: boolean)
            public constructor ($path: string, $encoding: System.Text.Encoding)
            public constructor ($path: string, $encoding: System.Text.Encoding, $detectEncodingFromByteOrderMarks: boolean)
            public constructor ($path: string, $encoding: System.Text.Encoding, $detectEncodingFromByteOrderMarks: boolean, $bufferSize: number)
            public constructor ()
        }
        class StreamWriter extends System.IO.TextWriter implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public static Null : System.IO.StreamWriter
            public get AutoFlush(): boolean;
            public set AutoFlush(value: boolean);
            public get BaseStream(): System.IO.Stream;
            public get Encoding(): System.Text.Encoding;
            public constructor ($stream: System.IO.Stream)
            public constructor ($stream: System.IO.Stream, $encoding: System.Text.Encoding)
            public constructor ($stream: System.IO.Stream, $encoding: System.Text.Encoding, $bufferSize: number)
            public constructor ($stream: System.IO.Stream, $encoding: System.Text.Encoding, $bufferSize: number, $leaveOpen: boolean)
            public constructor ($path: string)
            public constructor ($path: string, $append: boolean)
            public constructor ($path: string, $append: boolean, $encoding: System.Text.Encoding)
            public constructor ($path: string, $append: boolean, $encoding: System.Text.Encoding, $bufferSize: number)
            public constructor ()
        }
        enum FileMode
        { CreateNew = 1, Create = 2, Open = 3, OpenOrCreate = 4, Truncate = 5, Append = 6 }
        enum FileAccess
        { Read = 1, Write = 2, ReadWrite = 3 }
        enum FileShare
        { None = 0, Read = 1, Write = 2, ReadWrite = 3, Delete = 4, Inheritable = 16 }
        class FileLoadException extends System.IO.IOException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public get FileName(): string;
            public get FusionLog(): string;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $fileName: string)
            public constructor ($message: string, $fileName: string, $inner: System.Exception)
            public constructor ($message: string, $hresult: number)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class FileNotFoundException extends System.IO.IOException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public get FileName(): string;
            public get FusionLog(): string;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ($message: string, $fileName: string)
            public constructor ($message: string, $fileName: string, $innerException: System.Exception)
            public constructor ($message: string, $hresult: number)
        }
        enum FileAttributes
        { Archive = 32, Compressed = 2048, Device = 64, Directory = 16, Encrypted = 16384, Hidden = 2, Normal = 128, NotContentIndexed = 8192, Offline = 4096, ReadOnly = 1, ReparsePoint = 1024, SparseFile = 512, System = 4, Temporary = 256, IntegrityStream = 32768, NoScrubData = 131072 }
        class MemoryStream extends System.IO.Stream implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get CanRead(): boolean;
            public get CanSeek(): boolean;
            public get CanWrite(): boolean;
            public get Capacity(): number;
            public set Capacity(value: number);
            public get Length(): bigint;
            public get Position(): bigint;
            public set Position(value: bigint);
            public GetBuffer () : System.Array$1<number>
            public TryGetBuffer ($buffer: $Ref<System.ArraySegment$1<number>>) : boolean
            public ToArray () : System.Array$1<number>
            public WriteTo ($stream: System.IO.Stream) : void
            public constructor ()
            public constructor ($capacity: number)
            public constructor ($buffer: System.Array$1<number>)
            public constructor ($buffer: System.Array$1<number>, $writable: boolean)
            public constructor ($buffer: System.Array$1<number>, $index: number, $count: number)
            public constructor ($buffer: System.Array$1<number>, $index: number, $count: number, $writable: boolean)
            public constructor ($buffer: System.Array$1<number>, $index: number, $count: number, $writable: boolean, $publiclyVisible: boolean)
        }
        class PathTooLongException extends System.IO.IOException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class StringReader extends System.IO.TextReader implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($s: string)
            public constructor ()
        }
        class StringWriter extends System.IO.TextWriter implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get Encoding(): System.Text.Encoding;
            public GetStringBuilder () : System.Text.StringBuilder
            public constructor ()
            public constructor ($formatProvider: System.IFormatProvider)
            public constructor ($sb: System.Text.StringBuilder)
            public constructor ($sb: System.Text.StringBuilder, $formatProvider: System.IFormatProvider)
        }
        class UnmanagedMemoryAccessor extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get Capacity(): bigint;
            public get CanRead(): boolean;
            public get CanWrite(): boolean;
            public Dispose () : void
            public ReadBoolean ($position: bigint) : boolean
            public ReadByte ($position: bigint) : number
            public ReadChar ($position: bigint) : number
            public ReadInt16 ($position: bigint) : number
            public ReadInt32 ($position: bigint) : number
            public ReadInt64 ($position: bigint) : bigint
            public ReadDecimal ($position: bigint) : System.Decimal
            public ReadSingle ($position: bigint) : number
            public ReadDouble ($position: bigint) : number
            public ReadSByte ($position: bigint) : number
            public ReadUInt16 ($position: bigint) : number
            public ReadUInt32 ($position: bigint) : number
            public ReadUInt64 ($position: bigint) : bigint
            public Write ($position: bigint, $value: boolean) : void
            public Write ($position: bigint, $value: number) : void
            public Write ($position: bigint, $value: bigint) : void
            public Write ($position: bigint, $value: System.Decimal) : void
            public constructor ($buffer: System.Runtime.InteropServices.SafeBuffer, $offset: bigint, $capacity: bigint)
            public constructor ($buffer: System.Runtime.InteropServices.SafeBuffer, $offset: bigint, $capacity: bigint, $access: System.IO.FileAccess)
            public constructor ()
        }
        class UnmanagedMemoryStream extends System.IO.Stream implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get CanRead(): boolean;
            public get CanSeek(): boolean;
            public get CanWrite(): boolean;
            public get Length(): bigint;
            public get Capacity(): bigint;
            public get Position(): bigint;
            public set Position(value: bigint);
            public constructor ($buffer: System.Runtime.InteropServices.SafeBuffer, $offset: bigint, $length: bigint)
            public constructor ($buffer: System.Runtime.InteropServices.SafeBuffer, $offset: bigint, $length: bigint, $access: System.IO.FileAccess)
            public constructor ()
        }
        class DriveInfo extends System.Object implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get AvailableFreeSpace(): bigint;
            public get TotalFreeSpace(): bigint;
            public get TotalSize(): bigint;
            public get VolumeLabel(): string;
            public set VolumeLabel(value: string);
            public get DriveFormat(): string;
            public get DriveType(): System.IO.DriveType;
            public get Name(): string;
            public get RootDirectory(): System.IO.DirectoryInfo;
            public get IsReady(): boolean;
            public static GetDrives () : System.Array$1<System.IO.DriveInfo>
            public constructor ($driveName: string)
            public constructor ()
        }
        enum DriveType
        { CDRom = 5, Fixed = 3, Network = 4, NoRootDirectory = 1, Ram = 6, Removable = 2, Unknown = 0 }
        class File extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static AppendAllText ($path: string, $contents: string) : void
            public static AppendAllText ($path: string, $contents: string, $encoding: System.Text.Encoding) : void
            public static AppendText ($path: string) : System.IO.StreamWriter
            public static Copy ($sourceFileName: string, $destFileName: string) : void
            public static Copy ($sourceFileName: string, $destFileName: string, $overwrite: boolean) : void
            public static Create ($path: string) : System.IO.FileStream
            public static Create ($path: string, $bufferSize: number) : System.IO.FileStream
            public static Create ($path: string, $bufferSize: number, $options: System.IO.FileOptions) : System.IO.FileStream
            public static Create ($path: string, $bufferSize: number, $options: System.IO.FileOptions, $fileSecurity: System.Security.AccessControl.FileSecurity) : System.IO.FileStream
            public static CreateText ($path: string) : System.IO.StreamWriter
            public static Delete ($path: string) : void
            public static Exists ($path: string) : boolean
            public static GetAccessControl ($path: string) : System.Security.AccessControl.FileSecurity
            public static GetAccessControl ($path: string, $includeSections: System.Security.AccessControl.AccessControlSections) : System.Security.AccessControl.FileSecurity
            public static GetAttributes ($path: string) : System.IO.FileAttributes
            public static GetCreationTime ($path: string) : Date
            public static GetCreationTimeUtc ($path: string) : Date
            public static GetLastAccessTime ($path: string) : Date
            public static GetLastAccessTimeUtc ($path: string) : Date
            public static GetLastWriteTime ($path: string) : Date
            public static GetLastWriteTimeUtc ($path: string) : Date
            public static Move ($sourceFileName: string, $destFileName: string) : void
            public static Open ($path: string, $mode: System.IO.FileMode) : System.IO.FileStream
            public static Open ($path: string, $mode: System.IO.FileMode, $access: System.IO.FileAccess) : System.IO.FileStream
            public static Open ($path: string, $mode: System.IO.FileMode, $access: System.IO.FileAccess, $share: System.IO.FileShare) : System.IO.FileStream
            public static OpenRead ($path: string) : System.IO.FileStream
            public static OpenText ($path: string) : System.IO.StreamReader
            public static OpenWrite ($path: string) : System.IO.FileStream
            public static Replace ($sourceFileName: string, $destinationFileName: string, $destinationBackupFileName: string) : void
            public static Replace ($sourceFileName: string, $destinationFileName: string, $destinationBackupFileName: string, $ignoreMetadataErrors: boolean) : void
            public static SetAccessControl ($path: string, $fileSecurity: System.Security.AccessControl.FileSecurity) : void
            public static SetAttributes ($path: string, $fileAttributes: System.IO.FileAttributes) : void
            public static SetCreationTime ($path: string, $creationTime: Date) : void
            public static SetCreationTimeUtc ($path: string, $creationTimeUtc: Date) : void
            public static SetLastAccessTime ($path: string, $lastAccessTime: Date) : void
            public static SetLastAccessTimeUtc ($path: string, $lastAccessTimeUtc: Date) : void
            public static SetLastWriteTime ($path: string, $lastWriteTime: Date) : void
            public static SetLastWriteTimeUtc ($path: string, $lastWriteTimeUtc: Date) : void
            public static ReadAllBytes ($path: string) : System.Array$1<number>
            public static ReadAllLines ($path: string) : System.Array$1<string>
            public static ReadAllLines ($path: string, $encoding: System.Text.Encoding) : System.Array$1<string>
            public static ReadAllText ($path: string) : string
            public static ReadAllText ($path: string, $encoding: System.Text.Encoding) : string
            public static WriteAllBytes ($path: string, $bytes: System.Array$1<number>) : void
            public static WriteAllLines ($path: string, $contents: System.Array$1<string>) : void
            public static WriteAllLines ($path: string, $contents: System.Array$1<string>, $encoding: System.Text.Encoding) : void
            public static WriteAllText ($path: string, $contents: string) : void
            public static WriteAllText ($path: string, $contents: string, $encoding: System.Text.Encoding) : void
            public static Encrypt ($path: string) : void
            public static Decrypt ($path: string) : void
            public static ReadLines ($path: string) : System.Collections.Generic.IEnumerable$1<string>
            public static ReadLines ($path: string, $encoding: System.Text.Encoding) : System.Collections.Generic.IEnumerable$1<string>
            public static AppendAllLines ($path: string, $contents: System.Collections.Generic.IEnumerable$1<string>) : void
            public static AppendAllLines ($path: string, $contents: System.Collections.Generic.IEnumerable$1<string>, $encoding: System.Text.Encoding) : void
            public static WriteAllLines ($path: string, $contents: System.Collections.Generic.IEnumerable$1<string>) : void
            public static WriteAllLines ($path: string, $contents: System.Collections.Generic.IEnumerable$1<string>, $encoding: System.Text.Encoding) : void
        }
        enum FileOptions
        { None = 0, Encrypted = 16384, DeleteOnClose = 67108864, SequentialScan = 134217728, RandomAccess = 268435456, Asynchronous = 1073741824, WriteThrough = -2147483648 }
        class Path extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static AltDirectorySeparatorChar : number
            public static DirectorySeparatorChar : number
            public static PathSeparator : number
            public static VolumeSeparatorChar : number
            public static ChangeExtension ($path: string, $extension: string) : string
            public static Combine ($path1: string, $path2: string) : string
            public static GetDirectoryName ($path: string) : string
            public static GetExtension ($path: string) : string
            public static GetFileName ($path: string) : string
            public static GetFileNameWithoutExtension ($path: string) : string
            public static GetFullPath ($path: string) : string
            public static GetPathRoot ($path: string) : string
            public static GetTempFileName () : string
            public static GetTempPath () : string
            public static HasExtension ($path: string) : boolean
            public static IsPathRooted ($path: string) : boolean
            public static GetInvalidFileNameChars () : System.Array$1<number>
            public static GetInvalidPathChars () : System.Array$1<number>
            public static GetRandomFileName () : string
            public static Combine (...paths: string[]) : string
            public static Combine ($path1: string, $path2: string, $path3: string) : string
            public static Combine ($path1: string, $path2: string, $path3: string, $path4: string) : string
        }
        enum HandleInheritability
        { None = 0, Inheritable = 1 }
        class ErrorEventArgs extends System.EventArgs
        {
            protected [__keep_incompatibility]: never;
            public GetException () : System.Exception
            public constructor ($exception: System.Exception)
            public constructor ()
        }
        interface ErrorEventHandler
        { 
        (sender: any, e: System.IO.ErrorEventArgs) : void; 
        Invoke?: (sender: any, e: System.IO.ErrorEventArgs) => void;
        }
        var ErrorEventHandler: { new (func: (sender: any, e: System.IO.ErrorEventArgs) => void): ErrorEventHandler; }
        class FileSystemEventArgs extends System.EventArgs
        {
            protected [__keep_incompatibility]: never;
            public get ChangeType(): System.IO.WatcherChangeTypes;
            public get FullPath(): string;
            public get Name(): string;
            public constructor ($changeType: System.IO.WatcherChangeTypes, $directory: string, $name: string)
            public constructor ()
        }
        enum WatcherChangeTypes
        { All = 15, Changed = 4, Created = 1, Deleted = 2, Renamed = 8 }
        interface FileSystemEventHandler
        { 
        (sender: any, e: System.IO.FileSystemEventArgs) : void; 
        Invoke?: (sender: any, e: System.IO.FileSystemEventArgs) => void;
        }
        var FileSystemEventHandler: { new (func: (sender: any, e: System.IO.FileSystemEventArgs) => void): FileSystemEventHandler; }
        class FileSystemWatcher extends System.ComponentModel.Component implements System.ComponentModel.IComponent, System.IDisposable, System.ComponentModel.ISupportInitialize
        {
            protected [__keep_incompatibility]: never;
            public get EnableRaisingEvents(): boolean;
            public set EnableRaisingEvents(value: boolean);
            public get Filter(): string;
            public set Filter(value: string);
            public get IncludeSubdirectories(): boolean;
            public set IncludeSubdirectories(value: boolean);
            public get InternalBufferSize(): number;
            public set InternalBufferSize(value: number);
            public get NotifyFilter(): System.IO.NotifyFilters;
            public set NotifyFilter(value: System.IO.NotifyFilters);
            public get Path(): string;
            public set Path(value: string);
            public get Site(): System.ComponentModel.ISite;
            public set Site(value: System.ComponentModel.ISite);
            public get SynchronizingObject(): System.ComponentModel.ISynchronizeInvoke;
            public set SynchronizingObject(value: System.ComponentModel.ISynchronizeInvoke);
            public BeginInit () : void
            public EndInit () : void
            public WaitForChanged ($changeType: System.IO.WatcherChangeTypes) : System.IO.WaitForChangedResult
            public WaitForChanged ($changeType: System.IO.WatcherChangeTypes, $timeout: number) : System.IO.WaitForChangedResult
            public add_Changed ($value: System.IO.FileSystemEventHandler) : void
            public remove_Changed ($value: System.IO.FileSystemEventHandler) : void
            public add_Created ($value: System.IO.FileSystemEventHandler) : void
            public remove_Created ($value: System.IO.FileSystemEventHandler) : void
            public add_Deleted ($value: System.IO.FileSystemEventHandler) : void
            public remove_Deleted ($value: System.IO.FileSystemEventHandler) : void
            public add_Error ($value: System.IO.ErrorEventHandler) : void
            public remove_Error ($value: System.IO.ErrorEventHandler) : void
            public add_Renamed ($value: System.IO.RenamedEventHandler) : void
            public remove_Renamed ($value: System.IO.RenamedEventHandler) : void
            public constructor ()
            public constructor ($path: string)
            public constructor ($path: string, $filter: string)
        }
        enum NotifyFilters
        { Attributes = 4, CreationTime = 64, DirectoryName = 2, FileName = 1, LastAccess = 32, LastWrite = 16, Security = 256, Size = 8 }
        class WaitForChangedResult extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get ChangeType(): System.IO.WatcherChangeTypes;
            public set ChangeType(value: System.IO.WatcherChangeTypes);
            public get Name(): string;
            public set Name(value: string);
            public get OldName(): string;
            public set OldName(value: string);
            public get TimedOut(): boolean;
            public set TimedOut(value: boolean);
        }
        interface RenamedEventHandler
        { 
        (sender: any, e: System.IO.RenamedEventArgs) : void; 
        Invoke?: (sender: any, e: System.IO.RenamedEventArgs) => void;
        }
        var RenamedEventHandler: { new (func: (sender: any, e: System.IO.RenamedEventArgs) => void): RenamedEventHandler; }
        class RenamedEventArgs extends System.IO.FileSystemEventArgs
        {
            protected [__keep_incompatibility]: never;
            public get OldFullPath(): string;
            public get OldName(): string;
            public constructor ($changeType: System.IO.WatcherChangeTypes, $directory: string, $name: string, $oldName: string)
            public constructor ($changeType: System.IO.WatcherChangeTypes, $directory: string, $name: string)
            public constructor ()
        }
        class IODescriptionAttribute extends System.ComponentModel.DescriptionAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Description(): string;
            public constructor ($description: string)
            public constructor ()
        }
        class InternalBufferOverflowException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $inner: System.Exception)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class InvalidDataException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
    }
    namespace System.Security.Cryptography.X509Certificates {
        class X509Certificate extends System.Object implements System.Runtime.Serialization.IDeserializationCallback, System.IDisposable, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
        }
        class X509CertificateCollection extends System.Collections.CollectionBase implements System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
        }
        class X509Certificate2 extends System.Security.Cryptography.X509Certificates.X509Certificate implements System.Runtime.Serialization.IDeserializationCallback, System.IDisposable, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
        }
        class X509Chain extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
        }
    }
    namespace System.Threading.Tasks {
        class Task extends System.Object implements System.IAsyncResult, System.Threading.IThreadPoolWorkItem, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get IsCompleted(): boolean;
            public get AsyncWaitHandle(): System.Threading.WaitHandle;
            public get AsyncState(): any;
            public get CompletedSynchronously(): boolean;
            public Dispose () : void
        }
        class Task$1<TResult> extends System.Threading.Tasks.Task implements System.IAsyncResult, System.Threading.IThreadPoolWorkItem, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        class ValueTask$1<TResult> extends System.ValueType implements System.IEquatable$1<System.Threading.Tasks.ValueTask$1<TResult>>
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Security.AccessControl {
        class ObjectSecurity extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class CommonObjectSecurity extends System.Security.AccessControl.ObjectSecurity
        {
            protected [__keep_incompatibility]: never;
        }
        class NativeObjectSecurity extends System.Security.AccessControl.CommonObjectSecurity
        {
            protected [__keep_incompatibility]: never;
        }
        class FileSystemSecurity extends System.Security.AccessControl.NativeObjectSecurity
        {
            protected [__keep_incompatibility]: never;
        }
        class DirectorySecurity extends System.Security.AccessControl.FileSystemSecurity
        {
            protected [__keep_incompatibility]: never;
        }
        enum AccessControlSections
        { None = 0, Audit = 1, Access = 2, Owner = 4, Group = 8, All = 15 }
        class FileSecurity extends System.Security.AccessControl.FileSystemSecurity
        {
            protected [__keep_incompatibility]: never;
        }
        enum FileSystemRights
        { ListDirectory = 1, ReadData = 1, CreateFiles = 2, WriteData = 2, AppendData = 4, CreateDirectories = 4, ReadExtendedAttributes = 8, WriteExtendedAttributes = 16, ExecuteFile = 32, Traverse = 32, DeleteSubdirectoriesAndFiles = 64, ReadAttributes = 128, WriteAttributes = 256, Write = 278, Delete = 65536, ReadPermissions = 131072, Read = 131209, ReadAndExecute = 131241, Modify = 197055, ChangePermissions = 262144, TakeOwnership = 524288, Synchronize = 1048576, FullControl = 2032127 }
    }
    namespace System.Runtime.ConstrainedExecution {
        class CriticalFinalizerObject extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace Microsoft.Win32.SafeHandles {
        class SafeHandleZeroOrMinusOneIsInvalid extends System.Runtime.InteropServices.SafeHandle implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        class SafeFileHandle extends Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine {
        class jvalue extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public z : boolean
            public b : number
            public c : number
            public s : number
            public i : number
            public j : bigint
            public f : number
            public d : number
            public l : System.IntPtr
        }
        /** Helper interface for JNI interaction; signature creation and method lookups.
        Note: Using raw JNI functions requires advanced knowledge of the Android Java Native Interface (JNI). Please take note.
        */
        class AndroidJNIHelper extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Set debug to true to log calls through the AndroidJNIHelper.
            */
            public static get debug(): boolean;
            public static set debug(value: boolean);
            /** Scans a particular Java class for a constructor method matching a signature.
            * @param javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param signature Constructor method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            */
            public static GetConstructorID ($javaClass: System.IntPtr) : System.IntPtr
            /** Scans a particular Java class for a constructor method matching a signature.
            * @param javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param signature Constructor method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            */
            public static GetConstructorID ($javaClass: System.IntPtr, $signature: string) : System.IntPtr
            /** Scans a particular Java class for a method matching a name and a signature.
            * @param javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param methodName Name of the method as declared in Java.
            * @param signature Method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            * @param isStatic Set to <tt>true<tt> for static methods; <tt>false<tt> for instance (nonstatic) methods.
            */
            public static GetMethodID ($javaClass: System.IntPtr, $methodName: string) : System.IntPtr
            /** Scans a particular Java class for a method matching a name and a signature.
            * @param javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param methodName Name of the method as declared in Java.
            * @param signature Method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            * @param isStatic Set to <tt>true<tt> for static methods; <tt>false<tt> for instance (nonstatic) methods.
            */
            public static GetMethodID ($javaClass: System.IntPtr, $methodName: string, $signature: string) : System.IntPtr
            /** Scans a particular Java class for a method matching a name and a signature.
            * @param javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param methodName Name of the method as declared in Java.
            * @param signature Method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            * @param isStatic Set to <tt>true<tt> for static methods; <tt>false<tt> for instance (nonstatic) methods.
            */
            public static GetMethodID ($javaClass: System.IntPtr, $methodName: string, $signature: string, $isStatic: boolean) : System.IntPtr
            /** Scans a particular Java class for a field matching a name and a signature.
            * @param javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param fieldName Name of the field as declared in Java.
            * @param signature Field signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            * @param isStatic Set to <tt>true<tt> for static fields; <tt>false<tt> for instance (nonstatic) fields.
            */
            public static GetFieldID ($javaClass: System.IntPtr, $fieldName: string) : System.IntPtr
            /** Scans a particular Java class for a field matching a name and a signature.
            * @param javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param fieldName Name of the field as declared in Java.
            * @param signature Field signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            * @param isStatic Set to <tt>true<tt> for static fields; <tt>false<tt> for instance (nonstatic) fields.
            */
            public static GetFieldID ($javaClass: System.IntPtr, $fieldName: string, $signature: string) : System.IntPtr
            /** Scans a particular Java class for a field matching a name and a signature.
            * @param javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param fieldName Name of the field as declared in Java.
            * @param signature Field signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            * @param isStatic Set to <tt>true<tt> for static fields; <tt>false<tt> for instance (nonstatic) fields.
            */
            public static GetFieldID ($javaClass: System.IntPtr, $fieldName: string, $signature: string, $isStatic: boolean) : System.IntPtr
            /** Creates a UnityJavaRunnable object (implements java.lang.Runnable).
            * @param runnable A delegate representing the java.lang.Runnable.
            */
            public static CreateJavaRunnable ($jrunnable: UnityEngine.AndroidJavaRunnable) : System.IntPtr
            /** Creates a java proxy object which connects to the supplied proxy implementation.
            * @param proxy An implementatinon of a java interface in c#.
            */
            public static CreateJavaProxy ($proxy: UnityEngine.AndroidJavaProxy) : System.IntPtr
            /** Creates a Java array from a managed array.
            * @param array Managed array to be converted into a Java array object.
            */
            public static ConvertToJNIArray ($array: System.Array) : System.IntPtr
            /** Creates the parameter array to be used as argument list when invoking Java code through CallMethod() in AndroidJNI.
            * @param args An array of objects that should be converted to Call parameters.
            */
            public static CreateJNIArgArray ($args: System.Array$1<any>) : System.Array$1<UnityEngine.jvalue>
            /** Deletes any local jni references previously allocated by CreateJNIArgArray().
            * @param args The array of arguments used as a parameter to CreateJNIArgArray().
            * @param jniArgs The array returned by CreateJNIArgArray().
            */
            public static DeleteJNIArgArray ($args: System.Array$1<any>, $jniArgs: System.Array$1<UnityEngine.jvalue>) : void
            /** Get a JNI method ID for a constructor based on calling arguments.
            * @param javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param args Array with parameters to be passed to the constructor when invoked.
            */
            public static GetConstructorID ($jclass: System.IntPtr, $args: System.Array$1<any>) : System.IntPtr
            /** Get a JNI method ID based on calling arguments.
            * @param javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param methodName Name of the method as declared in Java.
            * @param args Array with parameters to be passed to the method when invoked.
            * @param isStatic Set to <tt>true<tt> for static methods; <tt>false<tt> for instance (nonstatic) methods.
            */
            public static GetMethodID ($jclass: System.IntPtr, $methodName: string, $args: System.Array$1<any>, $isStatic: boolean) : System.IntPtr
            /** Creates the JNI signature string for particular object type.
            * @param obj Object for which a signature is to be produced.
            */
            public static GetSignature ($obj: any) : string
            /** Creates the JNI signature string for an object parameter list.
            * @param args Array of object for which a signature is to be produced.
            */
            public static GetSignature ($args: System.Array$1<any>) : string
        }
        /** AndroidJavaRunnable is the Unity representation of a java.lang.Runnable object.
        */
        interface AndroidJavaRunnable
        { 
        () : void; 
        Invoke?: () => void;
        }
        var AndroidJavaRunnable: { new (func: () => void): AndroidJavaRunnable; }
        /** This class can be used to implement any java interface. Any java vm method invocation matching the interface on the proxy object will automatically be passed to the c# implementation.
        */
        class AndroidJavaProxy extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Java interface implemented by the proxy.
            */
            public javaInterface : UnityEngine.AndroidJavaClass
            /** Called by the java vm whenever a method is invoked on the java proxy interface. You can override this to run special code on method invokation, or you can leave the implementation as is, and leave the default behavior which is to look for c# methods matching the signature of the java method.
            * @param methodName Name of the invoked java method.
            * @param args Arguments passed from the java vm - converted into AndroidJavaObject, AndroidJavaClass or a primitive.
            * @param javaArgs Arguments passed from the java vm - all objects are represented by AndroidJavaObject, int for instance is represented by a java.lang.Integer object.
            */
            public Invoke ($methodName: string, $args: System.Array$1<any>) : UnityEngine.AndroidJavaObject
            /** Called by the java vm whenever a method is invoked on the java proxy interface. You can override this to run special code on method invokation, or you can leave the implementation as is, and leave the default behavior which is to look for c# methods matching the signature of the java method.
            * @param methodName Name of the invoked java method.
            * @param args Arguments passed from the java vm - converted into AndroidJavaObject, AndroidJavaClass or a primitive.
            * @param javaArgs Arguments passed from the java vm - all objects are represented by AndroidJavaObject, int for instance is represented by a java.lang.Integer object.
            */
            public Invoke ($methodName: string, $javaArgs: System.Array$1<UnityEngine.AndroidJavaObject>) : UnityEngine.AndroidJavaObject
            /** The equivalent of the java.lang.Object equals() method.
            * @returns Returns true when the objects are equal and false if otherwise. 
            */
            public equals ($obj: UnityEngine.AndroidJavaObject) : boolean
            public hashCode () : number
            public toString () : string
            public constructor ($javaInterface: string)
            public constructor ($javaInterface: UnityEngine.AndroidJavaClass)
            public constructor ()
        }
        /** 'Raw' JNI interface to Android Java VM from Unity scripting (C#).
        Note: Using raw JNI functions requires advanced knowledge of the Android Java Native Interface (JNI). Please take note.
        */
        class AndroidJNI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static AttachCurrentThread () : number
            public static DetachCurrentThread () : number
            public static GetVersion () : number
            /** This function loads a locally-defined class.
            */
            public static FindClass ($name: string) : System.IntPtr
            /** Converts a <tt>java.lang.reflect.Method<tt> or <tt>java.lang.reflect.Constructor<tt> object to a method ID.
            */
            public static FromReflectedMethod ($refMethod: System.IntPtr) : System.IntPtr
            /** Converts a <tt>java.lang.reflect.Field</tt> to a field ID.
            */
            public static FromReflectedField ($refField: System.IntPtr) : System.IntPtr
            /** Converts a method ID derived from clazz to a <tt>java.lang.reflect.Method<tt> or <tt>java.lang.reflect.Constructor<tt> object.
            */
            public static ToReflectedMethod ($clazz: System.IntPtr, $methodID: System.IntPtr, $isStatic: boolean) : System.IntPtr
            /** Converts a field ID derived from cls to a <tt>java.lang.reflect.Field</tt> object.
            */
            public static ToReflectedField ($clazz: System.IntPtr, $fieldID: System.IntPtr, $isStatic: boolean) : System.IntPtr
            /** If <tt>clazz<tt> represents any class other than the class <tt>Object<tt>, then this function returns the object that represents the superclass of the class specified by <tt>clazz</tt>.
            */
            public static GetSuperclass ($clazz: System.IntPtr) : System.IntPtr
            /** Determines whether an object of <tt>clazz1<tt> can be safely cast to <tt>clazz2<tt>.
            */
            public static IsAssignableFrom ($clazz1: System.IntPtr, $clazz2: System.IntPtr) : boolean
            /** Causes a <tt>java.lang.Throwable</tt> object to be thrown.
            */
            public static Throw ($obj: System.IntPtr) : number
            /** Constructs an exception object from the specified class with the <tt>message</tt> specified by message and causes that exception to be thrown.
            */
            public static ThrowNew ($clazz: System.IntPtr, $message: string) : number
            public static ExceptionOccurred () : System.IntPtr
            public static ExceptionDescribe () : void
            public static ExceptionClear () : void
            /** Raises a fatal error and does not expect the VM to recover. This function does not return.
            */
            public static FatalError ($message: string) : void
            /** Creates a new local reference frame, in which at least a given number of local references can be created.
            */
            public static PushLocalFrame ($capacity: number) : number
            /** Pops off the current local reference frame, frees all the local references, and returns a local reference in the previous local reference frame for the given <tt>result</tt> object.
            */
            public static PopLocalFrame ($ptr: System.IntPtr) : System.IntPtr
            /** Creates a new global reference to the object referred to by the <tt>obj</tt> argument.
            */
            public static NewGlobalRef ($obj: System.IntPtr) : System.IntPtr
            /** Deletes the global reference pointed to by <tt>obj</tt>.
            */
            public static DeleteGlobalRef ($obj: System.IntPtr) : void
            /** Creates a new global weak reference to the object referred to by the <tt>obj</tt> argument.
            */
            public static NewWeakGlobalRef ($obj: System.IntPtr) : System.IntPtr
            /** Deletes the global weak reference pointed to by <tt>obj</tt>.
            */
            public static DeleteWeakGlobalRef ($obj: System.IntPtr) : void
            /** Creates a new local reference that refers to the same object as <tt>obj</tt>.
            */
            public static NewLocalRef ($obj: System.IntPtr) : System.IntPtr
            /** Deletes the local reference pointed to by <tt>obj</tt>.
            */
            public static DeleteLocalRef ($obj: System.IntPtr) : void
            /** Tests whether two references refer to the same Java object.
            */
            public static IsSameObject ($obj1: System.IntPtr, $obj2: System.IntPtr) : boolean
            /** Ensures that at least a given number of local references can be created in the current thread.
            */
            public static EnsureLocalCapacity ($capacity: number) : number
            /** Allocates a new Java object without invoking any of the constructors for the object.
            */
            public static AllocObject ($clazz: System.IntPtr) : System.IntPtr
            /** Constructs a new Java object. The method ID indicates which constructor method to invoke. This ID must be obtained by calling GetMethodID() with <init> as the method name and void (V) as the return type.
            */
            public static NewObject ($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : System.IntPtr
            /** Returns the class of an object.
            */
            public static GetObjectClass ($obj: System.IntPtr) : System.IntPtr
            /** Tests whether an object is an instance of a class.
            */
            public static IsInstanceOf ($obj: System.IntPtr, $clazz: System.IntPtr) : boolean
            /** Returns the method ID for an instance (nonstatic) method of a class or interface.
            */
            public static GetMethodID ($clazz: System.IntPtr, $name: string, $sig: string) : System.IntPtr
            /** Returns the field ID for an instance (nonstatic) field of a class.
            */
            public static GetFieldID ($clazz: System.IntPtr, $name: string, $sig: string) : System.IntPtr
            /** Returns the method ID for a static method of a class.
            */
            public static GetStaticMethodID ($clazz: System.IntPtr, $name: string, $sig: string) : System.IntPtr
            /** Returns the field ID for a static field of a class.
            */
            public static GetStaticFieldID ($clazz: System.IntPtr, $name: string, $sig: string) : System.IntPtr
            /** Constructs a new <tt>java.lang.String</tt> object from an array of Unicode characters.
            */
            public static NewString ($chars: string) : System.IntPtr
            /** Constructs a new <tt>java.lang.String</tt> object from an array of Unicode characters.
            */
            public static NewString ($chars: System.Array$1<number>) : System.IntPtr
            /** Constructs a new <tt>java.lang.String</tt> object from an array of characters in modified UTF-8 encoding.
            */
            public static NewStringUTF ($bytes: string) : System.IntPtr
            /** Returns a pointer to the array of Unicode characters of the string. This pointer is valid until ReleaseStringchars() is called.
            */
            public static GetStringChars ($str: System.IntPtr) : string
            /** Returns the length (the count of Unicode characters) of a Java string.
            */
            public static GetStringLength ($str: System.IntPtr) : number
            /** Returns the length in bytes of the modified UTF-8 representation of a string.
            */
            public static GetStringUTFLength ($str: System.IntPtr) : number
            /** Returns a managed string object representing the string in modified UTF-8 encoding.
            */
            public static GetStringUTFChars ($str: System.IntPtr) : string
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallStringMethod ($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : string
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallObjectMethod ($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : System.IntPtr
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallIntMethod ($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : number
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallBooleanMethod ($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : boolean
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallShortMethod ($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : number
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallSByteMethod ($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : number
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallCharMethod ($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : number
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallFloatMethod ($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : number
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallDoubleMethod ($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : number
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallLongMethod ($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : bigint
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallVoidMethod ($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : void
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetStringField ($obj: System.IntPtr, $fieldID: System.IntPtr) : string
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetObjectField ($obj: System.IntPtr, $fieldID: System.IntPtr) : System.IntPtr
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetBooleanField ($obj: System.IntPtr, $fieldID: System.IntPtr) : boolean
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetSByteField ($obj: System.IntPtr, $fieldID: System.IntPtr) : number
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetCharField ($obj: System.IntPtr, $fieldID: System.IntPtr) : number
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetShortField ($obj: System.IntPtr, $fieldID: System.IntPtr) : number
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetIntField ($obj: System.IntPtr, $fieldID: System.IntPtr) : number
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetLongField ($obj: System.IntPtr, $fieldID: System.IntPtr) : bigint
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetFloatField ($obj: System.IntPtr, $fieldID: System.IntPtr) : number
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetDoubleField ($obj: System.IntPtr, $fieldID: System.IntPtr) : number
            /** Sets the value of an instance field of the specified object.
            */
            public static SetStringField ($obj: System.IntPtr, $fieldID: System.IntPtr, $val: string) : void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetObjectField ($obj: System.IntPtr, $fieldID: System.IntPtr, $val: System.IntPtr) : void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetBooleanField ($obj: System.IntPtr, $fieldID: System.IntPtr, $val: boolean) : void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetSByteField ($obj: System.IntPtr, $fieldID: System.IntPtr, $val: number) : void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetCharField ($obj: System.IntPtr, $fieldID: System.IntPtr, $val: number) : void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetShortField ($obj: System.IntPtr, $fieldID: System.IntPtr, $val: number) : void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetIntField ($obj: System.IntPtr, $fieldID: System.IntPtr, $val: number) : void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetLongField ($obj: System.IntPtr, $fieldID: System.IntPtr, $val: bigint) : void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetFloatField ($obj: System.IntPtr, $fieldID: System.IntPtr, $val: number) : void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetDoubleField ($obj: System.IntPtr, $fieldID: System.IntPtr, $val: number) : void
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticStringMethod ($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : string
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticObjectMethod ($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : System.IntPtr
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticIntMethod ($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : number
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticBooleanMethod ($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : boolean
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticShortMethod ($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : number
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticSByteMethod ($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : number
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticCharMethod ($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : number
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticFloatMethod ($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : number
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticDoubleMethod ($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : number
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticLongMethod ($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : bigint
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticVoidMethod ($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>) : void
            /** Returns the value of a static field of an object.
            */
            public static GetStaticStringField ($clazz: System.IntPtr, $fieldID: System.IntPtr) : string
            /** Returns the value of a static field of an object.
            */
            public static GetStaticObjectField ($clazz: System.IntPtr, $fieldID: System.IntPtr) : System.IntPtr
            /** Returns the value of a static field of an object.
            */
            public static GetStaticBooleanField ($clazz: System.IntPtr, $fieldID: System.IntPtr) : boolean
            /** Returns the value of a static field of an object.
            */
            public static GetStaticSByteField ($clazz: System.IntPtr, $fieldID: System.IntPtr) : number
            /** Returns the value of a static field of an object.
            */
            public static GetStaticCharField ($clazz: System.IntPtr, $fieldID: System.IntPtr) : number
            /** Returns the value of a static field of an object.
            */
            public static GetStaticShortField ($clazz: System.IntPtr, $fieldID: System.IntPtr) : number
            /** Returns the value of a static field of an object.
            */
            public static GetStaticIntField ($clazz: System.IntPtr, $fieldID: System.IntPtr) : number
            /** Returns the value of a static field of an object.
            */
            public static GetStaticLongField ($clazz: System.IntPtr, $fieldID: System.IntPtr) : bigint
            /** Returns the value of a static field of an object.
            */
            public static GetStaticFloatField ($clazz: System.IntPtr, $fieldID: System.IntPtr) : number
            /** Returns the value of a static field of an object.
            */
            public static GetStaticDoubleField ($clazz: System.IntPtr, $fieldID: System.IntPtr) : number
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticStringField ($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: string) : void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticObjectField ($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: System.IntPtr) : void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticBooleanField ($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: boolean) : void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticSByteField ($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: number) : void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticCharField ($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: number) : void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticShortField ($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: number) : void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticIntField ($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: number) : void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticLongField ($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: bigint) : void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticFloatField ($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: number) : void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticDoubleField ($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: number) : void
            /** Converts a managed array of System.Boolean to a Java array of <tt>boolean</tt>.
            */
            public static ToBooleanArray ($array: System.Array$1<boolean>) : System.IntPtr
            /** Converts a managed array of System.SByte to a Java array of <tt>byte</tt>.
            */
            public static ToSByteArray ($array: System.Array$1<number>) : System.IntPtr
            /** Converts a managed array of System.Char to a Java array of <tt>char</tt>.
            */
            public static ToCharArray ($array: System.Array$1<number>) : System.IntPtr
            /** Converts a managed array of System.Int16 to a Java array of <tt>short</tt>.
            */
            public static ToShortArray ($array: System.Array$1<number>) : System.IntPtr
            /** Converts a managed array of System.Int32 to a Java array of <tt>int</tt>.
            */
            public static ToIntArray ($array: System.Array$1<number>) : System.IntPtr
            /** Converts a managed array of System.Int64 to a Java array of <tt>long</tt>.
            */
            public static ToLongArray ($array: System.Array$1<bigint>) : System.IntPtr
            /** Converts a managed array of System.Single to a Java array of <tt>float</tt>.
            */
            public static ToFloatArray ($array: System.Array$1<number>) : System.IntPtr
            /** Converts a managed array of System.Double to a Java array of <tt>double</tt>.
            */
            public static ToDoubleArray ($array: System.Array$1<number>) : System.IntPtr
            public static ToObjectArray ($array: System.Array$1<System.IntPtr>, $arrayClass: System.IntPtr) : System.IntPtr
            /** Converts a managed array of System.IntPtr, representing Java objects, to a Java array of <tt>java.lang.Object</tt>.
            */
            public static ToObjectArray ($array: System.Array$1<System.IntPtr>) : System.IntPtr
            /** Converts a Java array of <tt>boolean</tt> to a managed array of System.Boolean.
            */
            public static FromBooleanArray ($array: System.IntPtr) : System.Array$1<boolean>
            /** Converts a Java array of <tt>byte</tt> to a managed array of System.SByte.
            */
            public static FromSByteArray ($array: System.IntPtr) : System.Array$1<number>
            /** Converts a Java array of <tt>char</tt> to a managed array of System.Char.
            */
            public static FromCharArray ($array: System.IntPtr) : System.Array$1<number>
            /** Converts a Java array of <tt>short</tt> to a managed array of System.Int16.
            */
            public static FromShortArray ($array: System.IntPtr) : System.Array$1<number>
            /** Converts a Java array of <tt>int</tt> to a managed array of System.Int32.
            */
            public static FromIntArray ($array: System.IntPtr) : System.Array$1<number>
            /** Converts a Java array of <tt>long</tt> to a managed array of System.Int64.
            */
            public static FromLongArray ($array: System.IntPtr) : System.Array$1<bigint>
            /** Converts a Java array of <tt>float</tt> to a managed array of System.Single.
            */
            public static FromFloatArray ($array: System.IntPtr) : System.Array$1<number>
            /** Converts a Java array of <tt>double</tt> to a managed array of System.Double.
            */
            public static FromDoubleArray ($array: System.IntPtr) : System.Array$1<number>
            /** Converts a Java array of <tt>java.lang.Object</tt> to a managed array of System.IntPtr, representing Java objects.
            */
            public static FromObjectArray ($array: System.IntPtr) : System.Array$1<System.IntPtr>
            /** Returns the number of elements in the array.
            */
            public static GetArrayLength ($array: System.IntPtr) : number
            /** Constructs a new primitive array object.
            */
            public static NewBooleanArray ($size: number) : System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewSByteArray ($size: number) : System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewCharArray ($size: number) : System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewShortArray ($size: number) : System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewIntArray ($size: number) : System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewLongArray ($size: number) : System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewFloatArray ($size: number) : System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewDoubleArray ($size: number) : System.IntPtr
            /** Constructs a new array holding objects in class <tt>clazz<tt>. All elements are initially set to <tt>obj<tt>.
            */
            public static NewObjectArray ($size: number, $clazz: System.IntPtr, $obj: System.IntPtr) : System.IntPtr
            /** Returns the value of one element of a primitive array.
            */
            public static GetBooleanArrayElement ($array: System.IntPtr, $index: number) : boolean
            /** Returns the value of one element of a primitive array.
            */
            public static GetSByteArrayElement ($array: System.IntPtr, $index: number) : number
            /** Returns the value of one element of a primitive array.
            */
            public static GetCharArrayElement ($array: System.IntPtr, $index: number) : number
            /** Returns the value of one element of a primitive array.
            */
            public static GetShortArrayElement ($array: System.IntPtr, $index: number) : number
            /** Returns the value of one element of a primitive array.
            */
            public static GetIntArrayElement ($array: System.IntPtr, $index: number) : number
            /** Returns the value of one element of a primitive array.
            */
            public static GetLongArrayElement ($array: System.IntPtr, $index: number) : bigint
            /** Returns the value of one element of a primitive array.
            */
            public static GetFloatArrayElement ($array: System.IntPtr, $index: number) : number
            /** Returns the value of one element of a primitive array.
            */
            public static GetDoubleArrayElement ($array: System.IntPtr, $index: number) : number
            /** Returns an element of an <tt>Object</tt> array.
            */
            public static GetObjectArrayElement ($array: System.IntPtr, $index: number) : System.IntPtr
            /** Sets the boolean value of one element in a primitive array.
            * @param array The array of native booleans.
            * @param index Index of the array element to set.
            * @param val The value to set.
            */
            public static SetBooleanArrayElement ($array: System.IntPtr, $index: number, $val: boolean) : void
            /** Sets the sbyte value of one element in a primitive array.
            */
            public static SetSByteArrayElement ($array: System.IntPtr, $index: number, $val: number) : void
            /** Sets the char value of one element in a primitive array.
            */
            public static SetCharArrayElement ($array: System.IntPtr, $index: number, $val: number) : void
            /** Sets the short value of one element in a primitive array.
            */
            public static SetShortArrayElement ($array: System.IntPtr, $index: number, $val: number) : void
            /** Sets the int value of one element in a primitive array.
            */
            public static SetIntArrayElement ($array: System.IntPtr, $index: number, $val: number) : void
            /** Sets the long value of one element in a primitive array.
            */
            public static SetLongArrayElement ($array: System.IntPtr, $index: number, $val: bigint) : void
            /** Sets the float value of one element in a primitive array.
            */
            public static SetFloatArrayElement ($array: System.IntPtr, $index: number, $val: number) : void
            /** Sets the double value of one element in a primitive array.
            */
            public static SetDoubleArrayElement ($array: System.IntPtr, $index: number, $val: number) : void
            /** Sets an element of an <tt>Object</tt> array.
            */
            public static SetObjectArrayElement ($array: System.IntPtr, $index: number, $obj: System.IntPtr) : void
        }
        class AndroidJavaException extends System.Exception implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get StackTrace(): string;
        }
        /** AndroidJavaObject is the Unity representation of a generic instance of java.lang.Object.
        */
        class AndroidJavaObject extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
            /** Call a Java method on an object.
            * @param methodName Specifies which method to call.
            * @param args An array of parameters passed to the method.
            */
            public Call ($methodName: string, ...args: any[]) : void
            /** Call a static Java method on a class.
            * @param methodName Specifies which method to call.
            * @param args An array of parameters passed to the method.
            */
            public CallStatic ($methodName: string, ...args: any[]) : void
            public GetRawObject () : System.IntPtr
            public GetRawClass () : System.IntPtr
            public constructor ($className: string, $args: System.Array$1<string>)
            public constructor ($className: string, $args: System.Array$1<UnityEngine.AndroidJavaObject>)
            public constructor ($className: string, $args: System.Array$1<UnityEngine.AndroidJavaClass>)
            public constructor ($className: string, $args: System.Array$1<UnityEngine.AndroidJavaProxy>)
            public constructor ($className: string, $args: System.Array$1<UnityEngine.AndroidJavaRunnable>)
            public constructor ($className: string, ...args: any[])
            public constructor ()
        }
        /** AndroidJavaClass is the Unity representation of a generic instance of java.lang.Class.
        */
        class AndroidJavaClass extends UnityEngine.AndroidJavaObject implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($className: string)
            public constructor ($className: string, $args: System.Array$1<string>)
            public constructor ($className: string, $args: System.Array$1<UnityEngine.AndroidJavaObject>)
            public constructor ($className: string, $args: System.Array$1<UnityEngine.AndroidJavaClass>)
            public constructor ($className: string, $args: System.Array$1<UnityEngine.AndroidJavaProxy>)
            public constructor ($className: string, $args: System.Array$1<UnityEngine.AndroidJavaRunnable>)
            public constructor ($className: string, ...args: any[])
            public constructor ()
        }
        /** Information about what animation clips is played and its weight.
        */
        class AnimationInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Animation clip that is played.
            */
            public get clip(): UnityEngine.AnimationClip;
            /** The weight of the animation clip.
            */
            public get weight(): number;
        }
        /** Base class for all objects Unity can reference.
        */
        class Object extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The name of the object.
            */
            public get name(): string;
            public set name(value: string);
            /** Should the object be hidden, saved with the Scene or modifiable by the user?
            */
            public get hideFlags(): UnityEngine.HideFlags;
            public set hideFlags(value: UnityEngine.HideFlags);
            public GetInstanceID () : number
            public static op_Implicit ($exists: UnityEngine.Object) : boolean
            /** Clones the object original and returns the clone.
            * @param original An existing object that you want to make a copy of.
            * @param position Position for the new object.
            * @param rotation Orientation of the new object.
            * @param parent Parent that will be assigned to the new object.
            * @param instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent..
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param original An existing object that you want to make a copy of.
            * @param position Position for the new object.
            * @param rotation Orientation of the new object.
            * @param parent Parent that will be assigned to the new object.
            * @param instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent..
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $parent: UnityEngine.Transform) : UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param original An existing object that you want to make a copy of.
            * @param position Position for the new object.
            * @param rotation Orientation of the new object.
            * @param parent Parent that will be assigned to the new object.
            * @param instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent..
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object) : UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param original An existing object that you want to make a copy of.
            * @param position Position for the new object.
            * @param rotation Orientation of the new object.
            * @param parent Parent that will be assigned to the new object.
            * @param instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent..
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object, $parent: UnityEngine.Transform) : UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param original An existing object that you want to make a copy of.
            * @param position Position for the new object.
            * @param rotation Orientation of the new object.
            * @param parent Parent that will be assigned to the new object.
            * @param instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent..
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object, $parent: UnityEngine.Transform, $instantiateInWorldSpace: boolean) : UnityEngine.Object
            public static Instantiate ($original: UnityEngine.Object, $parent: UnityEngine.Transform, $worldPositionStays: boolean) : UnityEngine.Object
            /** Removes a GameObject, component or asset.
            * @param obj The object to destroy.
            * @param t The optional amount of time to delay before destroying the object.
            */
            public static Destroy ($obj: UnityEngine.Object, $t: number) : void
            /** Removes a GameObject, component or asset.
            * @param obj The object to destroy.
            * @param t The optional amount of time to delay before destroying the object.
            */
            public static Destroy ($obj: UnityEngine.Object) : void
            /** Destroys the object obj immediately. You are strongly recommended to use Destroy instead.
            * @param obj Object to be destroyed.
            * @param allowDestroyingAssets Set to true to allow assets to be destroyed.
            */
            public static DestroyImmediate ($obj: UnityEngine.Object, $allowDestroyingAssets: boolean) : void
            /** Destroys the object obj immediately. You are strongly recommended to use Destroy instead.
            * @param obj Object to be destroyed.
            * @param allowDestroyingAssets Set to true to allow assets to be destroyed.
            */
            public static DestroyImmediate ($obj: UnityEngine.Object) : void
            /** Returns a list of all active loaded objects of Type type.
            * @param type The type of object to find.
            * @param includeInactive If true, components attached to inactive GameObjects are also included.
            * @returns The array of objects found matching the type specified. 
            */
            public static FindObjectsOfType ($type: System.Type) : System.Array$1<UnityEngine.Object>
            /** Do not destroy the target Object when loading a new Scene.
            * @param target An Object not destroyed on Scene change.
            */
            public static DontDestroyOnLoad ($target: UnityEngine.Object) : void
            /** Returns the first active loaded object of Type type.
            * @param type The type of object to find.
            * @returns This returns the  Object that matches the specified type. It returns null if no Object matches the type. 
            */
            public static FindObjectOfType ($type: System.Type) : UnityEngine.Object
            public static op_Equality ($x: UnityEngine.Object, $y: UnityEngine.Object) : boolean
            public static op_Inequality ($x: UnityEngine.Object, $y: UnityEngine.Object) : boolean
            public constructor ()
        }
        /** Base class for AnimationClips and BlendTrees.
        */
        class Motion extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            public get averageDuration(): number;
            public get averageAngularSpeed(): number;
            public get averageSpeed(): UnityEngine.Vector3;
            public get apparentSpeed(): number;
            public get isLooping(): boolean;
            public get legacy(): boolean;
            public get isHumanMotion(): boolean;
        }
        /** Stores keyframe based animations.
        */
        class AnimationClip extends UnityEngine.Motion
        {
            protected [__keep_incompatibility]: never;
            /** Animation length in seconds. (Read Only)
            */
            public get length(): number;
            /** Frame rate at which keyframes are sampled. (Read Only)
            */
            public get frameRate(): number;
            public set frameRate(value: number);
            /** Sets the default wrap mode used in the animation state.
            */
            public get wrapMode(): UnityEngine.WrapMode;
            public set wrapMode(value: UnityEngine.WrapMode);
            /** AABB of this Animation Clip in local space of Animation component that it is attached too.
            */
            public get localBounds(): UnityEngine.Bounds;
            public set localBounds(value: UnityEngine.Bounds);
            /** Set to true if the AnimationClip will be used with the Legacy Animation component ( instead of the Animator ).
            */
            public get legacy(): boolean;
            public set legacy(value: boolean);
            /** Returns true if the animation contains curve that drives a humanoid rig.
            */
            public get humanMotion(): boolean;
            /** Returns true if the animation clip has no curves and no events.
            */
            public get empty(): boolean;
            /** Returns true if the Animation has animation on the root transform.
            */
            public get hasGenericRootTransform(): boolean;
            /** Returns true if the AnimationClip has editor curves for its root motion.
            */
            public get hasMotionFloatCurves(): boolean;
            /** Returns true if the AnimationClip has root motion curves.
            */
            public get hasMotionCurves(): boolean;
            /** Returns true if the AnimationClip has root Curves.
            */
            public get hasRootCurves(): boolean;
            /** Animation Events for this animation clip.
            */
            public get events(): System.Array$1<UnityEngine.AnimationEvent>;
            public set events(value: System.Array$1<UnityEngine.AnimationEvent>);
            /** Samples an animation at a given time for any animated properties.
            * @param go The animated game object.
            * @param time The time to sample an animation.
            */
            public SampleAnimation ($go: UnityEngine.GameObject, $time: number) : void
            /** Assigns the curve to animate a specific property.
            * @param relativePath Path to the game object this curve applies to. The relativePath
            is formatted similar to a pathname, e.g. "rootspineleftArm".  If relativePath
            is empty it refers to the game object the animation clip is attached to.
            * @param type The class type of the component that is animated.
            * @param propertyName The name or path to the property being animated.
            * @param curve The animation curve.
            */
            public SetCurve ($relativePath: string, $type: System.Type, $propertyName: string, $curve: UnityEngine.AnimationCurve) : void
            public EnsureQuaternionContinuity () : void
            public ClearCurves () : void
            /** Adds an animation event to the clip.
            * @param evt AnimationEvent to add.
            */
            public AddEvent ($evt: UnityEngine.AnimationEvent) : void
            public constructor ()
        }
        /** Base class for everything attached to GameObjects.
        */
        class Component extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The Transform attached to this GameObject.
            */
            public get transform(): UnityEngine.Transform;
            /** The game object this component is attached to. A component is always attached to a game object.
            */
            public get gameObject(): UnityEngine.GameObject;
            /** The tag of this game object.
            */
            public get tag(): string;
            public set tag(value: string);
            /** Returns the component of Type type if the game object has one attached, null if it doesn't.
            * @param type The type of Component to retrieve.
            */
            public GetComponent ($type: System.Type) : UnityEngine.Component
            /** Gets the component of the specified type, if it exists.
            * @param type The type of the component to retrieve.
            * @param component The output argument that will contain the component or null.
            * @returns Returns true if the component is found, false otherwise. 
            */
            public TryGetComponent ($type: System.Type, $component: $Ref<UnityEngine.Component>) : boolean
            /** Returns the component with name type if the game object has one attached, null if it doesn't.
            */
            public GetComponent ($type: string) : UnityEngine.Component
            public GetComponentInChildren ($t: System.Type, $includeInactive: boolean) : UnityEngine.Component
            /** Returns the component of Type type in the GameObject or any of its children using depth first search.
            * @param t The type of Component to retrieve.
            * @returns A component of the matching type, if found. 
            */
            public GetComponentInChildren ($t: System.Type) : UnityEngine.Component
            /** Returns all components of Type type in the GameObject or any of its children.
            * @param t The type of Component to retrieve.
            * @param includeInactive Should Components on inactive GameObjects be included in the found set? includeInactive decides which children of the GameObject will be searched.  The GameObject that you call GetComponentsInChildren on is always searched regardless.
            */
            public GetComponentsInChildren ($t: System.Type, $includeInactive: boolean) : System.Array$1<UnityEngine.Component>
            public GetComponentsInChildren ($t: System.Type) : System.Array$1<UnityEngine.Component>
            /** Returns the component of Type type in the GameObject or any of its parents.
            * @param t The type of Component to retrieve.
            * @returns A component of the matching type, if found. 
            */
            public GetComponentInParent ($t: System.Type) : UnityEngine.Component
            /** Returns all components of Type type in the GameObject or any of its parents.
            * @param t The type of Component to retrieve.
            * @param includeInactive Should inactive Components be included in the found set?
            */
            public GetComponentsInParent ($t: System.Type, $includeInactive: boolean) : System.Array$1<UnityEngine.Component>
            public GetComponentsInParent ($t: System.Type) : System.Array$1<UnityEngine.Component>
            /** Returns all components of Type type in the GameObject.
            * @param type The type of Component to retrieve.
            */
            public GetComponents ($type: System.Type) : System.Array$1<UnityEngine.Component>
            public GetComponents ($type: System.Type, $results: System.Collections.Generic.List$1<UnityEngine.Component>) : void
            /** Is this game object tagged with tag ?
            * @param tag The tag to compare.
            */
            public CompareTag ($tag: string) : boolean
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param methodName Name of method to call.
            * @param value Optional parameter value for the method.
            * @param options Should an error be raised if the method does not exist on the target object?
            */
            public SendMessageUpwards ($methodName: string, $value: any, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param methodName Name of method to call.
            * @param value Optional parameter value for the method.
            * @param options Should an error be raised if the method does not exist on the target object?
            */
            public SendMessageUpwards ($methodName: string, $value: any) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param methodName Name of method to call.
            * @param value Optional parameter value for the method.
            * @param options Should an error be raised if the method does not exist on the target object?
            */
            public SendMessageUpwards ($methodName: string) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param methodName Name of method to call.
            * @param value Optional parameter value for the method.
            * @param options Should an error be raised if the method does not exist on the target object?
            */
            public SendMessageUpwards ($methodName: string, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param methodName Name of the method to call.
            * @param value Optional parameter for the method.
            * @param options Should an error be raised if the target object doesn't implement the method for the message?
            */
            public SendMessage ($methodName: string, $value: any) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param methodName Name of the method to call.
            * @param value Optional parameter for the method.
            * @param options Should an error be raised if the target object doesn't implement the method for the message?
            */
            public SendMessage ($methodName: string) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param methodName Name of the method to call.
            * @param value Optional parameter for the method.
            * @param options Should an error be raised if the target object doesn't implement the method for the message?
            */
            public SendMessage ($methodName: string, $value: any, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param methodName Name of the method to call.
            * @param value Optional parameter for the method.
            * @param options Should an error be raised if the target object doesn't implement the method for the message?
            */
            public SendMessage ($methodName: string, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            * @param methodName Name of the method to call.
            * @param parameter Optional parameter to pass to the method (can be any value).
            * @param options Should an error be raised if the method does not exist for a given target object?
            */
            public BroadcastMessage ($methodName: string, $parameter: any, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            * @param methodName Name of the method to call.
            * @param parameter Optional parameter to pass to the method (can be any value).
            * @param options Should an error be raised if the method does not exist for a given target object?
            */
            public BroadcastMessage ($methodName: string, $parameter: any) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            * @param methodName Name of the method to call.
            * @param parameter Optional parameter to pass to the method (can be any value).
            * @param options Should an error be raised if the method does not exist for a given target object?
            */
            public BroadcastMessage ($methodName: string) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            * @param methodName Name of the method to call.
            * @param parameter Optional parameter to pass to the method (can be any value).
            * @param options Should an error be raised if the method does not exist for a given target object?
            */
            public BroadcastMessage ($methodName: string, $options: UnityEngine.SendMessageOptions) : void
            public constructor ()
        }
        /** Behaviours are Components that can be enabled or disabled.
        */
        class Behaviour extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Enabled Behaviours are Updated, disabled Behaviours are not.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** Has the Behaviour had active and enabled called?
            */
            public get isActiveAndEnabled(): boolean;
            public constructor ()
        }
        /** Interface to control the Mecanim animation system.
        */
        class Animator extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Returns true if the current rig is optimizable with AnimatorUtility.OptimizeTransformHierarchy.
            */
            public get isOptimizable(): boolean;
            /** Returns true if the current rig is humanoid, false if it is generic.
            */
            public get isHuman(): boolean;
            /** Returns true if the current rig has root motion.
            */
            public get hasRootMotion(): boolean;
            /** Returns the scale of the current Avatar for a humanoid rig, (1 by default if the rig is generic).
            */
            public get humanScale(): number;
            /** Returns whether the animator is initialized successfully.
            */
            public get isInitialized(): boolean;
            /** Gets the avatar delta position for the last evaluated frame.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** Gets the avatar delta rotation for the last evaluated frame.
            */
            public get deltaRotation(): UnityEngine.Quaternion;
            /** Gets the avatar velocity  for the last evaluated frame.
            */
            public get velocity(): UnityEngine.Vector3;
            /** Gets the avatar angular velocity for the last evaluated frame.
            */
            public get angularVelocity(): UnityEngine.Vector3;
            /** The root position, the position of the game object.
            */
            public get rootPosition(): UnityEngine.Vector3;
            public set rootPosition(value: UnityEngine.Vector3);
            /** The root rotation, the rotation of the game object.
            */
            public get rootRotation(): UnityEngine.Quaternion;
            public set rootRotation(value: UnityEngine.Quaternion);
            /** Should root motion be applied?
            */
            public get applyRootMotion(): boolean;
            public set applyRootMotion(value: boolean);
            /** Specifies the update mode of the Animator.
            */
            public get updateMode(): UnityEngine.AnimatorUpdateMode;
            public set updateMode(value: UnityEngine.AnimatorUpdateMode);
            /** Returns true if the object has a transform hierarchy.
            */
            public get hasTransformHierarchy(): boolean;
            /** The current gravity weight based on current animations that are played.
            */
            public get gravityWeight(): number;
            /** The position of the body center of mass.
            */
            public get bodyPosition(): UnityEngine.Vector3;
            public set bodyPosition(value: UnityEngine.Vector3);
            /** The rotation of the body center of mass.
            */
            public get bodyRotation(): UnityEngine.Quaternion;
            public set bodyRotation(value: UnityEngine.Quaternion);
            /** Automatic stabilization of feet during transition and blending.
            */
            public get stabilizeFeet(): boolean;
            public set stabilizeFeet(value: boolean);
            /** Returns the number of layers in the controller.
            */
            public get layerCount(): number;
            /** The AnimatorControllerParameter list used by the animator. (Read Only)
            */
            public get parameters(): System.Array$1<UnityEngine.AnimatorControllerParameter>;
            /** Returns the number of parameters in the controller.
            */
            public get parameterCount(): number;
            /** Blends pivot point between body center of mass and feet pivot.
            */
            public get feetPivotActive(): number;
            public set feetPivotActive(value: number);
            /** Gets the pivot weight.
            */
            public get pivotWeight(): number;
            /** Get the current position of the pivot.
            */
            public get pivotPosition(): UnityEngine.Vector3;
            /** If automatic matching is active.
            */
            public get isMatchingTarget(): boolean;
            /** The playback speed of the Animator. 1 is normal playback speed.
            */
            public get speed(): number;
            public set speed(value: number);
            /** Returns the position of the target specified by SetTarget.
            */
            public get targetPosition(): UnityEngine.Vector3;
            /** Returns the rotation of the target specified by SetTarget.
            */
            public get targetRotation(): UnityEngine.Quaternion;
            /** Controls culling of this Animator component.
            */
            public get cullingMode(): UnityEngine.AnimatorCullingMode;
            public set cullingMode(value: UnityEngine.AnimatorCullingMode);
            /** Sets the playback position in the recording buffer.
            */
            public get playbackTime(): number;
            public set playbackTime(value: number);
            /** Start time of the first frame of the buffer relative to the frame at which StartRecording was called.
            */
            public get recorderStartTime(): number;
            public set recorderStartTime(value: number);
            /** End time of the recorded clip relative to when StartRecording was called.
            */
            public get recorderStopTime(): number;
            public set recorderStopTime(value: number);
            /** Gets the mode of the Animator recorder.
            */
            public get recorderMode(): UnityEngine.AnimatorRecorderMode;
            /** The runtime representation of AnimatorController that controls the Animator.
            */
            public get runtimeAnimatorController(): UnityEngine.RuntimeAnimatorController;
            public set runtimeAnimatorController(value: UnityEngine.RuntimeAnimatorController);
            /** Returns true if Animator has any playables assigned to it.
            */
            public get hasBoundPlayables(): boolean;
            /** Gets/Sets the current Avatar.
            */
            public get avatar(): UnityEngine.Avatar;
            public set avatar(value: UnityEngine.Avatar);
            /** The PlayableGraph created by the Animator.
            */
            public get playableGraph(): UnityEngine.Playables.PlayableGraph;
            /** Additional layers affects the center of mass.
            */
            public get layersAffectMassCenter(): boolean;
            public set layersAffectMassCenter(value: boolean);
            /** Get left foot bottom height.
            */
            public get leftFeetBottomHeight(): number;
            /** Get right foot bottom height.
            */
            public get rightFeetBottomHeight(): number;
            public get logWarnings(): boolean;
            public set logWarnings(value: boolean);
            /** Sets whether the Animator sends events of type AnimationEvent.
            */
            public get fireEvents(): boolean;
            public set fireEvents(value: boolean);
            /** Controls the behaviour of the Animator component when a GameObject is disabled.
            */
            public get keepAnimatorControllerStateOnDisable(): boolean;
            public set keepAnimatorControllerStateOnDisable(value: boolean);
            /** Returns the value of the given float parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @returns The value of the parameter. 
            */
            public GetFloat ($name: string) : number
            /** Returns the value of the given float parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @returns The value of the parameter. 
            */
            public GetFloat ($id: number) : number
            /** Send float values to the Animator to affect transitions.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @param value The new parameter value.
            * @param dampTime The damper total time.
            * @param deltaTime The delta time to give to the damper.
            */
            public SetFloat ($name: string, $value: number) : void
            /** Send float values to the Animator to affect transitions.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @param value The new parameter value.
            * @param dampTime The damper total time.
            * @param deltaTime The delta time to give to the damper.
            */
            public SetFloat ($name: string, $value: number, $dampTime: number, $deltaTime: number) : void
            /** Send float values to the Animator to affect transitions.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @param value The new parameter value.
            * @param dampTime The damper total time.
            * @param deltaTime The delta time to give to the damper.
            */
            public SetFloat ($id: number, $value: number) : void
            /** Send float values to the Animator to affect transitions.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @param value The new parameter value.
            * @param dampTime The damper total time.
            * @param deltaTime The delta time to give to the damper.
            */
            public SetFloat ($id: number, $value: number, $dampTime: number, $deltaTime: number) : void
            /** Returns the value of the given boolean parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @returns The value of the parameter. 
            */
            public GetBool ($name: string) : boolean
            /** Returns the value of the given boolean parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @returns The value of the parameter. 
            */
            public GetBool ($id: number) : boolean
            /** Sets the value of the given boolean parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @param value The new parameter value.
            */
            public SetBool ($name: string, $value: boolean) : void
            /** Sets the value of the given boolean parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @param value The new parameter value.
            */
            public SetBool ($id: number, $value: boolean) : void
            /** Returns the value of the given integer parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @returns The value of the parameter. 
            */
            public GetInteger ($name: string) : number
            /** Returns the value of the given integer parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @returns The value of the parameter. 
            */
            public GetInteger ($id: number) : number
            /** Sets the value of the given integer parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @param value The new parameter value.
            */
            public SetInteger ($name: string, $value: number) : void
            /** Sets the value of the given integer parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @param value The new parameter value.
            */
            public SetInteger ($id: number, $value: number) : void
            /** Sets the value of the given trigger parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            */
            public SetTrigger ($name: string) : void
            /** Sets the value of the given trigger parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            */
            public SetTrigger ($id: number) : void
            /** Resets the value of the given trigger parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            */
            public ResetTrigger ($name: string) : void
            /** Resets the value of the given trigger parameter.
            * @param name The parameter name.
            * @param id The parameter ID.
            */
            public ResetTrigger ($id: number) : void
            /** Returns true if the parameter is controlled by a curve, false otherwise.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @returns True if the parameter is controlled by a curve, false otherwise. 
            */
            public IsParameterControlledByCurve ($name: string) : boolean
            /** Returns true if the parameter is controlled by a curve, false otherwise.
            * @param name The parameter name.
            * @param id The parameter ID.
            * @returns True if the parameter is controlled by a curve, false otherwise. 
            */
            public IsParameterControlledByCurve ($id: number) : boolean
            /** Gets the position of an IK goal.
            * @param goal The AvatarIKGoal that is queried.
            * @returns Return the current position of this IK goal in world space. 
            */
            public GetIKPosition ($goal: UnityEngine.AvatarIKGoal) : UnityEngine.Vector3
            /** Sets the position of an IK goal.
            * @param goal The AvatarIKGoal that is set.
            * @param goalPosition The position in world space.
            */
            public SetIKPosition ($goal: UnityEngine.AvatarIKGoal, $goalPosition: UnityEngine.Vector3) : void
            /** Gets the rotation of an IK goal.
            * @param goal The AvatarIKGoal that is is queried.
            */
            public GetIKRotation ($goal: UnityEngine.AvatarIKGoal) : UnityEngine.Quaternion
            /** Sets the rotation of an IK goal.
            * @param goal The AvatarIKGoal that is set.
            * @param goalRotation The rotation in world space.
            */
            public SetIKRotation ($goal: UnityEngine.AvatarIKGoal, $goalRotation: UnityEngine.Quaternion) : void
            /** Gets the translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal).
            * @param goal The AvatarIKGoal that is queried.
            */
            public GetIKPositionWeight ($goal: UnityEngine.AvatarIKGoal) : number
            /** Sets the translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal).
            * @param goal The AvatarIKGoal that is set.
            * @param value The translative weight.
            */
            public SetIKPositionWeight ($goal: UnityEngine.AvatarIKGoal, $value: number) : void
            /** Gets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal).
            * @param goal The AvatarIKGoal that is queried.
            */
            public GetIKRotationWeight ($goal: UnityEngine.AvatarIKGoal) : number
            /** Sets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal).
            * @param goal The AvatarIKGoal that is set.
            * @param value The rotational weight.
            */
            public SetIKRotationWeight ($goal: UnityEngine.AvatarIKGoal, $value: number) : void
            /** Gets the position of an IK hint.
            * @param hint The AvatarIKHint that is queried.
            * @returns Return the current position of this IK hint in world space. 
            */
            public GetIKHintPosition ($hint: UnityEngine.AvatarIKHint) : UnityEngine.Vector3
            /** Sets the position of an IK hint.
            * @param hint The AvatarIKHint that is set.
            * @param hintPosition The position in world space.
            */
            public SetIKHintPosition ($hint: UnityEngine.AvatarIKHint, $hintPosition: UnityEngine.Vector3) : void
            /** Gets the translative weight of an IK Hint (0 = at the original animation before IK, 1 = at the hint).
            * @param hint The AvatarIKHint that is queried.
            * @returns Return translative weight. 
            */
            public GetIKHintPositionWeight ($hint: UnityEngine.AvatarIKHint) : number
            /** Sets the translative weight of an IK hint (0 = at the original animation before IK, 1 = at the hint).
            * @param hint The AvatarIKHint that is set.
            * @param value The translative weight.
            */
            public SetIKHintPositionWeight ($hint: UnityEngine.AvatarIKHint, $value: number) : void
            /** Sets the look at position.
            * @param lookAtPosition The position to lookAt.
            */
            public SetLookAtPosition ($lookAtPosition: UnityEngine.Vector3) : void
            /** Set look at weights.
            * @param weight (0-1) the global weight of the LookAt, multiplier for other parameters.
            * @param bodyWeight (0-1) determines how much the body is involved in the LookAt.
            * @param headWeight (0-1) determines how much the head is involved in the LookAt.
            * @param eyesWeight (0-1) determines how much the eyes are involved in the LookAt.
            * @param clampWeight (0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).
            */
            public SetLookAtWeight ($weight: number) : void
            /** Set look at weights.
            * @param weight (0-1) the global weight of the LookAt, multiplier for other parameters.
            * @param bodyWeight (0-1) determines how much the body is involved in the LookAt.
            * @param headWeight (0-1) determines how much the head is involved in the LookAt.
            * @param eyesWeight (0-1) determines how much the eyes are involved in the LookAt.
            * @param clampWeight (0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).
            */
            public SetLookAtWeight ($weight: number, $bodyWeight: number) : void
            /** Set look at weights.
            * @param weight (0-1) the global weight of the LookAt, multiplier for other parameters.
            * @param bodyWeight (0-1) determines how much the body is involved in the LookAt.
            * @param headWeight (0-1) determines how much the head is involved in the LookAt.
            * @param eyesWeight (0-1) determines how much the eyes are involved in the LookAt.
            * @param clampWeight (0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).
            */
            public SetLookAtWeight ($weight: number, $bodyWeight: number, $headWeight: number) : void
            /** Set look at weights.
            * @param weight (0-1) the global weight of the LookAt, multiplier for other parameters.
            * @param bodyWeight (0-1) determines how much the body is involved in the LookAt.
            * @param headWeight (0-1) determines how much the head is involved in the LookAt.
            * @param eyesWeight (0-1) determines how much the eyes are involved in the LookAt.
            * @param clampWeight (0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).
            */
            public SetLookAtWeight ($weight: number, $bodyWeight: number, $headWeight: number, $eyesWeight: number) : void
            /** Set look at weights.
            * @param weight (0-1) the global weight of the LookAt, multiplier for other parameters.
            * @param bodyWeight (0-1) determines how much the body is involved in the LookAt.
            * @param headWeight (0-1) determines how much the head is involved in the LookAt.
            * @param eyesWeight (0-1) determines how much the eyes are involved in the LookAt.
            * @param clampWeight (0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).
            */
            public SetLookAtWeight ($weight: number, $bodyWeight: number, $headWeight: number, $eyesWeight: number, $clampWeight: number) : void
            /** Sets local rotation of a human bone during a IK pass.
            * @param humanBoneId The human bone Id.
            * @param rotation The local rotation.
            */
            public SetBoneLocalRotation ($humanBoneId: UnityEngine.HumanBodyBones, $rotation: UnityEngine.Quaternion) : void
            public GetBehaviours ($fullPathHash: number, $layerIndex: number) : System.Array$1<UnityEngine.StateMachineBehaviour>
            /** Returns the layer name.
            * @param layerIndex The layer index.
            * @returns The layer name. 
            */
            public GetLayerName ($layerIndex: number) : string
            /** Returns the index of the layer with the given name.
            * @param layerName The layer name.
            * @returns The layer index. 
            */
            public GetLayerIndex ($layerName: string) : number
            /** Returns the weight of the layer at the specified index.
            * @param layerIndex The layer index.
            * @returns The layer weight. 
            */
            public GetLayerWeight ($layerIndex: number) : number
            /** Sets the weight of the layer at the given index.
            * @param layerIndex The layer index.
            * @param weight The new layer weight.
            */
            public SetLayerWeight ($layerIndex: number, $weight: number) : void
            /** Returns an AnimatorStateInfo with the information on the current state.
            * @param layerIndex The layer index.
            * @returns An AnimatorStateInfo with the information on the current state. 
            */
            public GetCurrentAnimatorStateInfo ($layerIndex: number) : UnityEngine.AnimatorStateInfo
            /** Returns an AnimatorStateInfo with the information on the next state.
            * @param layerIndex The layer index.
            * @returns An AnimatorStateInfo with the information on the next state. 
            */
            public GetNextAnimatorStateInfo ($layerIndex: number) : UnityEngine.AnimatorStateInfo
            /** Returns an AnimatorTransitionInfo with the informations on the current transition.
            * @param layerIndex The layer's index.
            * @returns An AnimatorTransitionInfo with the informations on the current transition. 
            */
            public GetAnimatorTransitionInfo ($layerIndex: number) : UnityEngine.AnimatorTransitionInfo
            /** Returns the number of AnimatorClipInfo in the current state.
            * @param layerIndex The layer index.
            * @returns The number of AnimatorClipInfo in the current state. 
            */
            public GetCurrentAnimatorClipInfoCount ($layerIndex: number) : number
            /** Returns the number of AnimatorClipInfo in the next state.
            * @param layerIndex The layer index.
            * @returns The number of AnimatorClipInfo in the next state. 
            */
            public GetNextAnimatorClipInfoCount ($layerIndex: number) : number
            /** Returns an array of all the AnimatorClipInfo in the current state of the given layer.
            * @param layerIndex The layer index.
            * @returns An array of all the AnimatorClipInfo in the current state. 
            */
            public GetCurrentAnimatorClipInfo ($layerIndex: number) : System.Array$1<UnityEngine.AnimatorClipInfo>
            /** Returns an array of all the AnimatorClipInfo in the next state of the given layer.
            * @param layerIndex The layer index.
            * @returns An array of all the AnimatorClipInfo in the next state. 
            */
            public GetNextAnimatorClipInfo ($layerIndex: number) : System.Array$1<UnityEngine.AnimatorClipInfo>
            public GetCurrentAnimatorClipInfo ($layerIndex: number, $clips: System.Collections.Generic.List$1<UnityEngine.AnimatorClipInfo>) : void
            public GetNextAnimatorClipInfo ($layerIndex: number, $clips: System.Collections.Generic.List$1<UnityEngine.AnimatorClipInfo>) : void
            /** Returns true if there is a transition on the given layer, false otherwise.
            * @param layerIndex The layer index.
            * @returns True if there is a transition on the given layer, false otherwise. 
            */
            public IsInTransition ($layerIndex: number) : boolean
            /** See AnimatorController.parameters.
            */
            public GetParameter ($index: number) : UnityEngine.AnimatorControllerParameter
            public MatchTarget ($matchPosition: UnityEngine.Vector3, $matchRotation: UnityEngine.Quaternion, $targetBodyPart: UnityEngine.AvatarTarget, $weightMask: UnityEngine.MatchTargetWeightMask, $startNormalizedTime: number) : void
            /** Automatically adjust the GameObject position and rotation.
            * @param matchPosition The position we want the body part to reach.
            * @param matchRotation The rotation in which we want the body part to be.
            * @param targetBodyPart The body part that is involved in the match.
            * @param weightMask Structure that contains weights for matching position and rotation.
            * @param startNormalizedTime Start time within the animation clip (0 - beginning of clip, 1 - end of clip).
            * @param targetNormalizedTime End time within the animation clip (0 - beginning of clip, 1 - end of clip), values greater than 1 can be set to trigger a match after a certain number of loops. Ex: 2.3 means at 30% of 2nd loop.
            */
            public MatchTarget ($matchPosition: UnityEngine.Vector3, $matchRotation: UnityEngine.Quaternion, $targetBodyPart: UnityEngine.AvatarTarget, $weightMask: UnityEngine.MatchTargetWeightMask, $startNormalizedTime: number, $targetNormalizedTime: number) : void
            public InterruptMatchTarget () : void
            /** Interrupts the automatic target matching.
            */
            public InterruptMatchTarget ($completeMatch: boolean) : void
            public CrossFadeInFixedTime ($stateName: string, $fixedTransitionDuration: number) : void
            public CrossFadeInFixedTime ($stateName: string, $fixedTransitionDuration: number, $layer: number) : void
            public CrossFadeInFixedTime ($stateName: string, $fixedTransitionDuration: number, $layer: number, $fixedTimeOffset: number) : void
            /** Creates a crossfade from the current state to any other state using times in seconds.
            * @param stateName The name of the state.
            * @param stateHashName The hash name of the state.
            * @param fixedTransitionDuration The duration of the transition (in seconds).
            * @param layer The layer where the crossfade occurs.
            * @param fixedTimeOffset The time of the state (in seconds).
            * @param normalizedTransitionTime The time of the transition (normalized).
            */
            public CrossFadeInFixedTime ($stateName: string, $fixedTransitionDuration: number, $layer: number, $fixedTimeOffset: number, $normalizedTransitionTime: number) : void
            public CrossFadeInFixedTime ($stateHashName: number, $fixedTransitionDuration: number, $layer: number, $fixedTimeOffset: number) : void
            public CrossFadeInFixedTime ($stateHashName: number, $fixedTransitionDuration: number, $layer: number) : void
            public CrossFadeInFixedTime ($stateHashName: number, $fixedTransitionDuration: number) : void
            /** Creates a crossfade from the current state to any other state using times in seconds.
            * @param stateName The name of the state.
            * @param stateHashName The hash name of the state.
            * @param fixedTransitionDuration The duration of the transition (in seconds).
            * @param layer The layer where the crossfade occurs.
            * @param fixedTimeOffset The time of the state (in seconds).
            * @param normalizedTransitionTime The time of the transition (normalized).
            */
            public CrossFadeInFixedTime ($stateHashName: number, $fixedTransitionDuration: number, $layer: number, $fixedTimeOffset: number, $normalizedTransitionTime: number) : void
            public WriteDefaultValues () : void
            public CrossFade ($stateName: string, $normalizedTransitionDuration: number, $layer: number, $normalizedTimeOffset: number) : void
            public CrossFade ($stateName: string, $normalizedTransitionDuration: number, $layer: number) : void
            public CrossFade ($stateName: string, $normalizedTransitionDuration: number) : void
            /** Creates a crossfade from the current state to any other state using normalized times.
            * @param stateName The name of the state.
            * @param stateHashName The hash name of the state.
            * @param normalizedTransitionDuration The duration of the transition (normalized).
            * @param layer The layer where the crossfade occurs.
            * @param normalizedTimeOffset The time of the state (normalized).
            * @param normalizedTransitionTime The time of the transition (normalized).
            */
            public CrossFade ($stateName: string, $normalizedTransitionDuration: number, $layer: number, $normalizedTimeOffset: number, $normalizedTransitionTime: number) : void
            /** Creates a crossfade from the current state to any other state using normalized times.
            * @param stateName The name of the state.
            * @param stateHashName The hash name of the state.
            * @param normalizedTransitionDuration The duration of the transition (normalized).
            * @param layer The layer where the crossfade occurs.
            * @param normalizedTimeOffset The time of the state (normalized).
            * @param normalizedTransitionTime The time of the transition (normalized).
            */
            public CrossFade ($stateHashName: number, $normalizedTransitionDuration: number, $layer: number, $normalizedTimeOffset: number, $normalizedTransitionTime: number) : void
            public CrossFade ($stateHashName: number, $normalizedTransitionDuration: number, $layer: number, $normalizedTimeOffset: number) : void
            public CrossFade ($stateHashName: number, $normalizedTransitionDuration: number, $layer: number) : void
            public CrossFade ($stateHashName: number, $normalizedTransitionDuration: number) : void
            public PlayInFixedTime ($stateName: string, $layer: number) : void
            public PlayInFixedTime ($stateName: string) : void
            /** Plays a state.
            * @param stateName The state name.
            * @param stateNameHash The state hash name. If stateNameHash is 0, it changes the current state time.
            * @param layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
            * @param fixedTime The time offset (in seconds).
            */
            public PlayInFixedTime ($stateName: string, $layer: number, $fixedTime: number) : void
            /** Plays a state.
            * @param stateName The state name.
            * @param stateNameHash The state hash name. If stateNameHash is 0, it changes the current state time.
            * @param layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
            * @param fixedTime The time offset (in seconds).
            */
            public PlayInFixedTime ($stateNameHash: number, $layer: number, $fixedTime: number) : void
            public PlayInFixedTime ($stateNameHash: number, $layer: number) : void
            public PlayInFixedTime ($stateNameHash: number) : void
            public Play ($stateName: string, $layer: number) : void
            public Play ($stateName: string) : void
            /** Plays a state.
            * @param stateName The state name.
            * @param stateNameHash The state hash name. If stateNameHash is 0, it changes the current state time.
            * @param layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
            * @param normalizedTime The time offset between zero and one.
            */
            public Play ($stateName: string, $layer: number, $normalizedTime: number) : void
            /** Plays a state.
            * @param stateName The state name.
            * @param stateNameHash The state hash name. If stateNameHash is 0, it changes the current state time.
            * @param layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
            * @param normalizedTime The time offset between zero and one.
            */
            public Play ($stateNameHash: number, $layer: number, $normalizedTime: number) : void
            public Play ($stateNameHash: number, $layer: number) : void
            public Play ($stateNameHash: number) : void
            /** Sets an AvatarTarget and a targetNormalizedTime for the current state.
            * @param targetIndex The avatar body part that is queried.
            * @param targetNormalizedTime The current state Time that is queried.
            */
            public SetTarget ($targetIndex: UnityEngine.AvatarTarget, $targetNormalizedTime: number) : void
            /** Returns Transform mapped to this human bone id.
            * @param humanBoneId The human bone that is queried, see enum HumanBodyBones for a list of possible values.
            */
            public GetBoneTransform ($humanBoneId: UnityEngine.HumanBodyBones) : UnityEngine.Transform
            public StartPlayback () : void
            public StopPlayback () : void
            /** Sets the animator in recording mode, and allocates a circular buffer of size frameCount.
            * @param frameCount The number of frames (updates) that will be recorded. If frameCount is 0, the recording will continue until the user calls StopRecording. The maximum value for frameCount is 10000.
            */
            public StartRecording ($frameCount: number) : void
            public StopRecording () : void
            /** Returns true if the state exists in this layer, false otherwise.
            * @param layerIndex The layer index.
            * @param stateID The state ID.
            * @returns True if the state exists in this layer, false otherwise. 
            */
            public HasState ($layerIndex: number, $stateID: number) : boolean
            /** Generates an parameter id from a string.
            * @param name The string to convert to Id.
            */
            public static StringToHash ($name: string) : number
            /** Evaluates the animator based on deltaTime.
            * @param deltaTime The time delta.
            */
            public Update ($deltaTime: number) : void
            public Rebind () : void
            public ApplyBuiltinRootMotion () : void
            public constructor ()
        }
        /** Representation of 3D vectors and points.
        */
        class Vector3 extends System.ValueType implements System.IEquatable$1<UnityEngine.Vector3>
        {
            protected [__keep_incompatibility]: never;
            public static kEpsilon : number
            public static kEpsilonNormalSqrt : number
            /** X component of the vector.
            */
            public x : number
            /** Y component of the vector.
            */
            public y : number
            /** Z component of the vector.
            */
            public z : number
            /** Returns this vector with a magnitude of 1 (Read Only).
            */
            public get normalized(): UnityEngine.Vector3;
            /** Returns the length of this vector (Read Only).
            */
            public get magnitude(): number;
            /** Returns the squared length of this vector (Read Only).
            */
            public get sqrMagnitude(): number;
            /** Shorthand for writing Vector3(0, 0, 0).
            */
            public static get zero(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(1, 1, 1).
            */
            public static get one(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(0, 0, 1).
            */
            public static get forward(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(0, 0, -1).
            */
            public static get back(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(0, 1, 0).
            */
            public static get up(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(0, -1, 0).
            */
            public static get down(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(-1, 0, 0).
            */
            public static get left(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(1, 0, 0).
            */
            public static get right(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity).
            */
            public static get positiveInfinity(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity).
            */
            public static get negativeInfinity(): UnityEngine.Vector3;
            /** Spherically interpolates between two vectors.
            */
            public static Slerp ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $t: number) : UnityEngine.Vector3
            /** Spherically interpolates between two vectors.
            */
            public static SlerpUnclamped ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $t: number) : UnityEngine.Vector3
            /** Makes vectors normalized and orthogonal to each other.
            */
            public static OrthoNormalize ($normal: $Ref<UnityEngine.Vector3>, $tangent: $Ref<UnityEngine.Vector3>) : void
            /** Makes vectors normalized and orthogonal to each other.
            */
            public static OrthoNormalize ($normal: $Ref<UnityEngine.Vector3>, $tangent: $Ref<UnityEngine.Vector3>, $binormal: $Ref<UnityEngine.Vector3>) : void
            /** Rotates a vector current towards target.
            * @param current The vector being managed.
            * @param target The vector.
            * @param maxRadiansDelta The maximum angle in radians allowed for this rotation.
            * @param maxMagnitudeDelta The maximum allowed change in vector magnitude for this rotation.
            * @returns The location that RotateTowards generates. 
            */
            public static RotateTowards ($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $maxRadiansDelta: number, $maxMagnitudeDelta: number) : UnityEngine.Vector3
            /** Linearly interpolates between two points.
            */
            public static Lerp ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $t: number) : UnityEngine.Vector3
            /** Linearly interpolates between two vectors.
            */
            public static LerpUnclamped ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $t: number) : UnityEngine.Vector3
            /** Calculate a position between the points specified by current and target, moving no farther than the distance specified by maxDistanceDelta.
            * @param current The position to move from.
            * @param target The position to move towards.
            * @param maxDistanceDelta Distance to move current per call.
            * @returns The new position. 
            */
            public static MoveTowards ($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $maxDistanceDelta: number) : UnityEngine.Vector3
            /** Gradually changes a vector towards a desired goal over time.
            * @param current The current position.
            * @param target The position we are trying to reach.
            * @param currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param maxSpeed Optionally allows you to clamp the maximum speed.
            * @param deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $currentVelocity: $Ref<UnityEngine.Vector3>, $smoothTime: number, $maxSpeed: number) : UnityEngine.Vector3
            /** Gradually changes a vector towards a desired goal over time.
            * @param current The current position.
            * @param target The position we are trying to reach.
            * @param currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param maxSpeed Optionally allows you to clamp the maximum speed.
            * @param deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $currentVelocity: $Ref<UnityEngine.Vector3>, $smoothTime: number) : UnityEngine.Vector3
            /** Gradually changes a vector towards a desired goal over time.
            * @param current The current position.
            * @param target The position we are trying to reach.
            * @param currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param maxSpeed Optionally allows you to clamp the maximum speed.
            * @param deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $currentVelocity: $Ref<UnityEngine.Vector3>, $smoothTime: number, $maxSpeed: number, $deltaTime: number) : UnityEngine.Vector3
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Set x, y and z components of an existing Vector3.
            */
            public Set ($newX: number, $newY: number, $newZ: number) : void
            /** Multiplies two vectors component-wise.
            */
            public static Scale ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Multiplies every component of this vector by the same component of scale.
            */
            public Scale ($scale: UnityEngine.Vector3) : void
            /** Cross Product of two vectors.
            */
            public static Cross ($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Returns true if the given vector is exactly equal to this vector.
            */
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Vector3) : boolean
            /** Reflects a vector off the plane defined by a normal.
            */
            public static Reflect ($inDirection: UnityEngine.Vector3, $inNormal: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Makes this vector have a magnitude of 1.
            */
            public static Normalize ($value: UnityEngine.Vector3) : UnityEngine.Vector3
            public Normalize () : void
            /** Dot Product of two vectors.
            */
            public static Dot ($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3) : number
            /** Projects a vector onto another vector.
            */
            public static Project ($vector: UnityEngine.Vector3, $onNormal: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Projects a vector onto a plane defined by a normal orthogonal to the plane.
            * @param planeNormal The direction from the vector towards the plane.
            * @param vector The location of the vector above the plane.
            * @returns The location of the vector on the plane. 
            */
            public static ProjectOnPlane ($vector: UnityEngine.Vector3, $planeNormal: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Returns the angle in degrees between from and to.
            * @param from The vector from which the angular difference is measured.
            * @param to The vector to which the angular difference is measured.
            * @returns The angle in degrees between the two vectors. 
            */
            public static Angle ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3) : number
            /** Returns the signed angle in degrees between from and to.
            * @param from The vector from which the angular difference is measured.
            * @param to The vector to which the angular difference is measured.
            * @param axis A vector around which the other vectors are rotated.
            */
            public static SignedAngle ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $axis: UnityEngine.Vector3) : number
            /** Returns the distance between a and b.
            */
            public static Distance ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3) : number
            /** Returns a copy of vector with its magnitude clamped to maxLength.
            */
            public static ClampMagnitude ($vector: UnityEngine.Vector3, $maxLength: number) : UnityEngine.Vector3
            public static Magnitude ($vector: UnityEngine.Vector3) : number
            public static SqrMagnitude ($vector: UnityEngine.Vector3) : number
            /** Returns a vector that is made from the smallest components of two vectors.
            */
            public static Min ($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Returns a vector that is made from the largest components of two vectors.
            */
            public static Max ($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3) : UnityEngine.Vector3
            public static op_Addition ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3) : UnityEngine.Vector3
            public static op_Subtraction ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3) : UnityEngine.Vector3
            public static op_UnaryNegation ($a: UnityEngine.Vector3) : UnityEngine.Vector3
            public static op_Multiply ($a: UnityEngine.Vector3, $d: number) : UnityEngine.Vector3
            public static op_Multiply ($d: number, $a: UnityEngine.Vector3) : UnityEngine.Vector3
            public static op_Division ($a: UnityEngine.Vector3, $d: number) : UnityEngine.Vector3
            public static op_Equality ($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3) : boolean
            public static op_Inequality ($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3) : boolean
            public ToString () : string
            /** Returns a nicely formatted string for this vector.
            */
            public ToString ($format: string) : string
            public constructor ($x: number, $y: number, $z: number)
            public constructor ($x: number, $y: number)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** Quaternions are used to represent rotations.
        */
        class Quaternion extends System.ValueType implements System.IEquatable$1<UnityEngine.Quaternion>
        {
            protected [__keep_incompatibility]: never;
            /** X component of the Quaternion. Don't modify this directly unless you know quaternions inside out.
            */
            public x : number
            /** Y component of the Quaternion. Don't modify this directly unless you know quaternions inside out.
            */
            public y : number
            /** Z component of the Quaternion. Don't modify this directly unless you know quaternions inside out.
            */
            public z : number
            /** W component of the Quaternion. Do not directly modify quaternions.
            */
            public w : number
            public static kEpsilon : number
            /** The identity rotation (Read Only).
            */
            public static get identity(): UnityEngine.Quaternion;
            /** Returns or sets the euler angle representation of the rotation.
            */
            public get eulerAngles(): UnityEngine.Vector3;
            public set eulerAngles(value: UnityEngine.Vector3);
            /** Returns this quaternion with a magnitude of 1 (Read Only).
            */
            public get normalized(): UnityEngine.Quaternion;
            /** Creates a rotation which rotates from fromDirection to toDirection.
            */
            public static FromToRotation ($fromDirection: UnityEngine.Vector3, $toDirection: UnityEngine.Vector3) : UnityEngine.Quaternion
            /** Returns the Inverse of rotation.
            */
            public static Inverse ($rotation: UnityEngine.Quaternion) : UnityEngine.Quaternion
            /** Spherically interpolates between a and b by t. The parameter t is clamped to the range [0, 1].
            */
            public static Slerp ($a: UnityEngine.Quaternion, $b: UnityEngine.Quaternion, $t: number) : UnityEngine.Quaternion
            /** Spherically interpolates between a and b by t. The parameter t is not clamped.
            */
            public static SlerpUnclamped ($a: UnityEngine.Quaternion, $b: UnityEngine.Quaternion, $t: number) : UnityEngine.Quaternion
            /** Interpolates between a and b by t and normalizes the result afterwards. The parameter t is clamped to the range [0, 1].
            */
            public static Lerp ($a: UnityEngine.Quaternion, $b: UnityEngine.Quaternion, $t: number) : UnityEngine.Quaternion
            /** Interpolates between a and b by t and normalizes the result afterwards. The parameter t is not clamped.
            */
            public static LerpUnclamped ($a: UnityEngine.Quaternion, $b: UnityEngine.Quaternion, $t: number) : UnityEngine.Quaternion
            /** Creates a rotation which rotates angle degrees around axis.
            */
            public static AngleAxis ($angle: number, $axis: UnityEngine.Vector3) : UnityEngine.Quaternion
            /** Creates a rotation with the specified forward and upwards directions.
            * @param forward The direction to look in.
            * @param upwards The vector that defines in which direction up is.
            */
            public static LookRotation ($forward: UnityEngine.Vector3, $upwards: UnityEngine.Vector3) : UnityEngine.Quaternion
            /** Creates a rotation with the specified forward and upwards directions.
            * @param forward The direction to look in.
            * @param upwards The vector that defines in which direction up is.
            */
            public static LookRotation ($forward: UnityEngine.Vector3) : UnityEngine.Quaternion
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Set x, y, z and w components of an existing Quaternion.
            */
            public Set ($newX: number, $newY: number, $newZ: number, $newW: number) : void
            public static op_Multiply ($lhs: UnityEngine.Quaternion, $rhs: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public static op_Multiply ($rotation: UnityEngine.Quaternion, $point: UnityEngine.Vector3) : UnityEngine.Vector3
            public static op_Equality ($lhs: UnityEngine.Quaternion, $rhs: UnityEngine.Quaternion) : boolean
            public static op_Inequality ($lhs: UnityEngine.Quaternion, $rhs: UnityEngine.Quaternion) : boolean
            /** The dot product between two rotations.
            */
            public static Dot ($a: UnityEngine.Quaternion, $b: UnityEngine.Quaternion) : number
            /** Creates a rotation with the specified forward and upwards directions.
            * @param view The direction to look in.
            * @param up The vector that defines in which direction up is.
            */
            public SetLookRotation ($view: UnityEngine.Vector3) : void
            /** Creates a rotation with the specified forward and upwards directions.
            * @param view The direction to look in.
            * @param up The vector that defines in which direction up is.
            */
            public SetLookRotation ($view: UnityEngine.Vector3, $up: UnityEngine.Vector3) : void
            /** Returns the angle in degrees between two rotations a and b.
            */
            public static Angle ($a: UnityEngine.Quaternion, $b: UnityEngine.Quaternion) : number
            /** Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis; applied in that order.
            */
            public static Euler ($x: number, $y: number, $z: number) : UnityEngine.Quaternion
            /** Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.
            */
            public static Euler ($euler: UnityEngine.Vector3) : UnityEngine.Quaternion
            /** Converts a rotation to angle-axis representation (angles in degrees).
            */
            public ToAngleAxis ($angle: $Ref<number>, $axis: $Ref<UnityEngine.Vector3>) : void
            /** Creates a rotation which rotates from fromDirection to toDirection.
            */
            public SetFromToRotation ($fromDirection: UnityEngine.Vector3, $toDirection: UnityEngine.Vector3) : void
            /** Rotates a rotation from towards to.
            */
            public static RotateTowards ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $maxDegreesDelta: number) : UnityEngine.Quaternion
            /** Converts this quaternion to one with the same orientation but with a magnitude of 1.
            */
            public static Normalize ($q: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public Normalize () : void
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Quaternion) : boolean
            public ToString () : string
            /** Returns a nicely formatted string of the Quaternion.
            */
            public ToString ($format: string) : string
            public constructor ($x: number, $y: number, $z: number, $w: number)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** The update mode of the Animator.
        */
        enum AnimatorUpdateMode
        { Normal = 0, AnimatePhysics = 1, UnscaledTime = 2 }
        /** IK Goal.
        */
        enum AvatarIKGoal
        { LeftFoot = 0, RightFoot = 1, LeftHand = 2, RightHand = 3 }
        /** IK Hint.
        */
        enum AvatarIKHint
        { LeftKnee = 0, RightKnee = 1, LeftElbow = 2, RightElbow = 3 }
        /** Human Body Bones.
        */
        enum HumanBodyBones
        { Hips = 0, LeftUpperLeg = 1, RightUpperLeg = 2, LeftLowerLeg = 3, RightLowerLeg = 4, LeftFoot = 5, RightFoot = 6, Spine = 7, Chest = 8, UpperChest = 54, Neck = 9, Head = 10, LeftShoulder = 11, RightShoulder = 12, LeftUpperArm = 13, RightUpperArm = 14, LeftLowerArm = 15, RightLowerArm = 16, LeftHand = 17, RightHand = 18, LeftToes = 19, RightToes = 20, LeftEye = 21, RightEye = 22, Jaw = 23, LeftThumbProximal = 24, LeftThumbIntermediate = 25, LeftThumbDistal = 26, LeftIndexProximal = 27, LeftIndexIntermediate = 28, LeftIndexDistal = 29, LeftMiddleProximal = 30, LeftMiddleIntermediate = 31, LeftMiddleDistal = 32, LeftRingProximal = 33, LeftRingIntermediate = 34, LeftRingDistal = 35, LeftLittleProximal = 36, LeftLittleIntermediate = 37, LeftLittleDistal = 38, RightThumbProximal = 39, RightThumbIntermediate = 40, RightThumbDistal = 41, RightIndexProximal = 42, RightIndexIntermediate = 43, RightIndexDistal = 44, RightMiddleProximal = 45, RightMiddleIntermediate = 46, RightMiddleDistal = 47, RightRingProximal = 48, RightRingIntermediate = 49, RightRingDistal = 50, RightLittleProximal = 51, RightLittleIntermediate = 52, RightLittleDistal = 53, LastBone = 55 }
        /** A class you can derive from if you want to create objects that don't need to be attached to game objects.
        */
        class ScriptableObject extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Creates an instance of a scriptable object.
            * @param className The type of the ScriptableObject to create, as the name of the type.
            * @param type The type of the ScriptableObject to create, as a System.Type instance.
            * @returns The created ScriptableObject. 
            */
            public static CreateInstance ($className: string) : UnityEngine.ScriptableObject
            /** Creates an instance of a scriptable object.
            * @param className The type of the ScriptableObject to create, as the name of the type.
            * @param type The type of the ScriptableObject to create, as a System.Type instance.
            * @returns The created ScriptableObject. 
            */
            public static CreateInstance ($type: System.Type) : UnityEngine.ScriptableObject
            public constructor ()
        }
        /** StateMachineBehaviour is a component that can be added to a state machine state. It's the base class every script on a state derives from.
        */
        class StateMachineBehaviour extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            public OnStateEnter ($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number) : void
            public OnStateUpdate ($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number) : void
            public OnStateExit ($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number) : void
            public OnStateMove ($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number) : void
            public OnStateIK ($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number) : void
            /** Called on the first Update frame when making a transition to a state machine. This is not called when making a transition into a state machine sub-state.
            * @param animator The Animator playing this state machine.
            * @param stateMachinePathHash The full path hash for this state machine.
            */
            public OnStateMachineEnter ($animator: UnityEngine.Animator, $stateMachinePathHash: number) : void
            /** Called on the last Update frame when making a transition out of a StateMachine. This is not called when making a transition into a StateMachine sub-state.
            * @param animator The Animator playing this state machine.
            * @param stateMachinePathHash The full path hash for this state machine.
            */
            public OnStateMachineExit ($animator: UnityEngine.Animator, $stateMachinePathHash: number) : void
            public OnStateEnter ($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable) : void
            public OnStateUpdate ($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable) : void
            public OnStateExit ($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable) : void
            public OnStateMove ($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable) : void
            public OnStateIK ($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable) : void
            public OnStateMachineEnter ($animator: UnityEngine.Animator, $stateMachinePathHash: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable) : void
            public OnStateMachineExit ($animator: UnityEngine.Animator, $stateMachinePathHash: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable) : void
        }
        /** Information about the current or next state.
        */
        class AnimatorStateInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The full path hash for this state.
            */
            public get fullPathHash(): number;
            /** The hash is generated using Animator.StringToHash. The hash does not include the name of the parent layer.
            */
            public get shortNameHash(): number;
            /** Normalized time of the State.
            */
            public get normalizedTime(): number;
            /** Current duration of the state.
            */
            public get length(): number;
            /** The playback speed of the animation. 1 is the normal playback speed.
            */
            public get speed(): number;
            /** The speed multiplier for this state.
            */
            public get speedMultiplier(): number;
            /** The Tag of the State.
            */
            public get tagHash(): number;
            /** Is the state looping.
            */
            public get loop(): boolean;
            /** Does name match the name of the active state in the statemachine?
            */
            public IsName ($name: string) : boolean
            /** Does tag match the tag of the active state in the statemachine.
            */
            public IsTag ($tag: string) : boolean
        }
        /** Information about the current transition.
        */
        class AnimatorTransitionInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The hash name of the Transition.
            */
            public get fullPathHash(): number;
            /** The simplified name of the Transition.
            */
            public get nameHash(): number;
            /** The user-specified name of the Transition.
            */
            public get userNameHash(): number;
            /** The unit of the transition duration.
            */
            public get durationUnit(): UnityEngine.DurationUnit;
            /** Duration of the transition.
            */
            public get duration(): number;
            /** Normalized time of the Transition.
            */
            public get normalizedTime(): number;
            /** Returns true if the transition is from an AnyState node, or from Animator.CrossFade.
            */
            public get anyState(): boolean;
            /** Does name match the name of the active Transition.
            */
            public IsName ($name: string) : boolean
            /** Does userName match the name of the active Transition.
            */
            public IsUserName ($name: string) : boolean
        }
        /** Information about clip being played and blended by the Animator.
        */
        class AnimatorClipInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Returns the animation clip played by the Animator.
            */
            public get clip(): UnityEngine.AnimationClip;
            /** Returns the blending weight used by the Animator to blend this clip.
            */
            public get weight(): number;
        }
        /** Used to communicate between scripting and the controller. Some parameters can be set in scripting and used by the controller, while other parameters are based on Custom Curves in Animation Clips and can be sampled using the scripting API.
        */
        class AnimatorControllerParameter extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The name of the parameter.
            */
            public get name(): string;
            public set name(value: string);
            /** Returns the hash of the parameter based on its name.
            */
            public get nameHash(): number;
            /** The type of the parameter.
            */
            public get type(): UnityEngine.AnimatorControllerParameterType;
            public set type(value: UnityEngine.AnimatorControllerParameterType);
            /** The default float value for the parameter.
            */
            public get defaultFloat(): number;
            public set defaultFloat(value: number);
            /** The default int value for the parameter.
            */
            public get defaultInt(): number;
            public set defaultInt(value: number);
            /** The default bool value for the parameter.
            */
            public get defaultBool(): boolean;
            public set defaultBool(value: boolean);
            public constructor ()
        }
        /** Target.
        */
        enum AvatarTarget
        { Root = 0, Body = 1, LeftFoot = 2, RightFoot = 3, LeftHand = 4, RightHand = 5 }
        /** Use this struct to specify the position and rotation weight mask for Animator.MatchTarget.
        */
        class MatchTargetWeightMask extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Position XYZ weight.
            */
            public get positionXYZWeight(): UnityEngine.Vector3;
            public set positionXYZWeight(value: UnityEngine.Vector3);
            /** Rotation weight.
            */
            public get rotationWeight(): number;
            public set rotationWeight(value: number);
            public constructor ($positionXYZWeight: UnityEngine.Vector3, $rotationWeight: number)
            public constructor ()
        }
        /** Position, rotation and scale of an object.
        */
        class Transform extends UnityEngine.Component implements System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
            /** The world space position of the Transform.
            */
            public get position(): UnityEngine.Vector3;
            public set position(value: UnityEngine.Vector3);
            /** Position of the transform relative to the parent transform.
            */
            public get localPosition(): UnityEngine.Vector3;
            public set localPosition(value: UnityEngine.Vector3);
            /** The rotation as Euler angles in degrees.
            */
            public get eulerAngles(): UnityEngine.Vector3;
            public set eulerAngles(value: UnityEngine.Vector3);
            /** The rotation as Euler angles in degrees relative to the parent transform's rotation.
            */
            public get localEulerAngles(): UnityEngine.Vector3;
            public set localEulerAngles(value: UnityEngine.Vector3);
            /** The red axis of the transform in world space.
            */
            public get right(): UnityEngine.Vector3;
            public set right(value: UnityEngine.Vector3);
            /** The green axis of the transform in world space.
            */
            public get up(): UnityEngine.Vector3;
            public set up(value: UnityEngine.Vector3);
            /** Returns a normalized vector representing the blue axis of the transform in world space.
            */
            public get forward(): UnityEngine.Vector3;
            public set forward(value: UnityEngine.Vector3);
            /** A Quaternion that stores the rotation of the Transform in world space.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** The rotation of the transform relative to the transform rotation of the parent.
            */
            public get localRotation(): UnityEngine.Quaternion;
            public set localRotation(value: UnityEngine.Quaternion);
            /** The scale of the transform relative to the GameObjects parent.
            */
            public get localScale(): UnityEngine.Vector3;
            public set localScale(value: UnityEngine.Vector3);
            /** The parent of the transform.
            */
            public get parent(): UnityEngine.Transform;
            public set parent(value: UnityEngine.Transform);
            /** Matrix that transforms a point from world space into local space (Read Only).
            */
            public get worldToLocalMatrix(): UnityEngine.Matrix4x4;
            /** Matrix that transforms a point from local space into world space (Read Only).
            */
            public get localToWorldMatrix(): UnityEngine.Matrix4x4;
            /** Returns the topmost transform in the hierarchy.
            */
            public get root(): UnityEngine.Transform;
            /** The number of children the parent Transform has.
            */
            public get childCount(): number;
            /** The global scale of the object (Read Only).
            */
            public get lossyScale(): UnityEngine.Vector3;
            /** Has the transform changed since the last time the flag was set to 'false'?
            */
            public get hasChanged(): boolean;
            public set hasChanged(value: boolean);
            /** The transform capacity of the transform's hierarchy data structure.
            */
            public get hierarchyCapacity(): number;
            public set hierarchyCapacity(value: number);
            /** The number of transforms in the transform's hierarchy data structure.
            */
            public get hierarchyCount(): number;
            /** Set the parent of the transform.
            * @param parent The parent Transform to use.
            * @param worldPositionStays If true, the parent-relative position, scale and rotation are modified such that the object keeps the same world space position, rotation and scale as before.
            */
            public SetParent ($p: UnityEngine.Transform) : void
            /** Set the parent of the transform.
            * @param parent The parent Transform to use.
            * @param worldPositionStays If true, the parent-relative position, scale and rotation are modified such that the object keeps the same world space position, rotation and scale as before.
            */
            public SetParent ($parent: UnityEngine.Transform, $worldPositionStays: boolean) : void
            /** Sets the world space position and rotation of the Transform component.
            */
            public SetPositionAndRotation ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            /** Moves the transform in the direction and distance of translation.
            */
            public Translate ($translation: UnityEngine.Vector3, $relativeTo: UnityEngine.Space) : void
            /** Moves the transform in the direction and distance of translation.
            */
            public Translate ($translation: UnityEngine.Vector3) : void
            /** Moves the transform by x along the x axis, y along the y axis, and z along the z axis.
            */
            public Translate ($x: number, $y: number, $z: number, $relativeTo: UnityEngine.Space) : void
            /** Moves the transform by x along the x axis, y along the y axis, and z along the z axis.
            */
            public Translate ($x: number, $y: number, $z: number) : void
            /** Moves the transform in the direction and distance of translation.
            */
            public Translate ($translation: UnityEngine.Vector3, $relativeTo: UnityEngine.Transform) : void
            /** Moves the transform by x along the x axis, y along the y axis, and z along the z axis.
            */
            public Translate ($x: number, $y: number, $z: number, $relativeTo: UnityEngine.Transform) : void
            /** Applies a rotation of eulerAngles.z degrees around the z-axis, eulerAngles.x degrees around the x-axis, and eulerAngles.y degrees around the y-axis (in that order).
            * @param eulers The rotation to apply.
            * @param relativeTo Determines whether to rotate the GameObject either locally to  the GameObject or relative to the Scene in world space.
            */
            public Rotate ($eulers: UnityEngine.Vector3, $relativeTo: UnityEngine.Space) : void
            public Rotate ($eulers: UnityEngine.Vector3) : void
            /** The implementation of this method applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).
            * @param relativeTo Determines whether to rotate the GameObject either locally to the GameObject or relative to the Scene in world space.
            * @param xAngle Degrees to rotate the GameObject around the X axis.
            * @param yAngle Degrees to rotate the GameObject around the Y axis.
            * @param zAngle Degrees to rotate the GameObject around the Z axis.
            */
            public Rotate ($xAngle: number, $yAngle: number, $zAngle: number, $relativeTo: UnityEngine.Space) : void
            public Rotate ($xAngle: number, $yAngle: number, $zAngle: number) : void
            /** Rotates the object around the given axis by the number of degrees defined by the given angle.
            * @param angle The degrees of rotation to apply.
            * @param axis The axis to apply rotation to.
            * @param relativeTo Determines whether to rotate the GameObject either locally to the GameObject or relative to the Scene in world space.
            */
            public Rotate ($axis: UnityEngine.Vector3, $angle: number, $relativeTo: UnityEngine.Space) : void
            public Rotate ($axis: UnityEngine.Vector3, $angle: number) : void
            /** Rotates the transform about axis passing through point in world coordinates by angle degrees.
            */
            public RotateAround ($point: UnityEngine.Vector3, $axis: UnityEngine.Vector3, $angle: number) : void
            /** Rotates the transform so the forward vector points at target's current position.
            * @param target Object to point towards.
            * @param worldUp Vector specifying the upward direction.
            */
            public LookAt ($target: UnityEngine.Transform, $worldUp: UnityEngine.Vector3) : void
            /** Rotates the transform so the forward vector points at target's current position.
            * @param target Object to point towards.
            * @param worldUp Vector specifying the upward direction.
            */
            public LookAt ($target: UnityEngine.Transform) : void
            /** Rotates the transform so the forward vector points at worldPosition.
            * @param worldPosition Point to look at.
            * @param worldUp Vector specifying the upward direction.
            */
            public LookAt ($worldPosition: UnityEngine.Vector3, $worldUp: UnityEngine.Vector3) : void
            /** Rotates the transform so the forward vector points at worldPosition.
            * @param worldPosition Point to look at.
            * @param worldUp Vector specifying the upward direction.
            */
            public LookAt ($worldPosition: UnityEngine.Vector3) : void
            /** Transforms direction from local space to world space.
            */
            public TransformDirection ($direction: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms direction x, y, z from local space to world space.
            */
            public TransformDirection ($x: number, $y: number, $z: number) : UnityEngine.Vector3
            /** Transforms a direction from world space to local space. The opposite of Transform.TransformDirection.
            */
            public InverseTransformDirection ($direction: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms the direction x, y, z from world space to local space. The opposite of Transform.TransformDirection.
            */
            public InverseTransformDirection ($x: number, $y: number, $z: number) : UnityEngine.Vector3
            /** Transforms vector from local space to world space.
            */
            public TransformVector ($vector: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms vector x, y, z from local space to world space.
            */
            public TransformVector ($x: number, $y: number, $z: number) : UnityEngine.Vector3
            /** Transforms a vector from world space to local space. The opposite of Transform.TransformVector.
            */
            public InverseTransformVector ($vector: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms the vector x, y, z from world space to local space. The opposite of Transform.TransformVector.
            */
            public InverseTransformVector ($x: number, $y: number, $z: number) : UnityEngine.Vector3
            /** Transforms position from local space to world space.
            */
            public TransformPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms the position x, y, z from local space to world space.
            */
            public TransformPoint ($x: number, $y: number, $z: number) : UnityEngine.Vector3
            /** Transforms position from world space to local space.
            */
            public InverseTransformPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms the position x, y, z from world space to local space. The opposite of Transform.TransformPoint.
            */
            public InverseTransformPoint ($x: number, $y: number, $z: number) : UnityEngine.Vector3
            public DetachChildren () : void
            public SetAsFirstSibling () : void
            public SetAsLastSibling () : void
            /** Sets the sibling index.
            * @param index Index to set.
            */
            public SetSiblingIndex ($index: number) : void
            public GetSiblingIndex () : number
            /** Finds a child by n and returns it.
            * @param n Name of child to be found.
            * @returns The returned child transform or null if no child is found. 
            */
            public Find ($n: string) : UnityEngine.Transform
            /** Is this transform a child of parent?
            */
            public IsChildOf ($parent: UnityEngine.Transform) : boolean
            public GetEnumerator () : System.Collections.IEnumerator
            /** Returns a transform child by index.
            * @param index Index of the child transform to return. Must be smaller than Transform.childCount.
            * @returns Transform child by index. 
            */
            public GetChild ($index: number) : UnityEngine.Transform
        }
        /** Culling mode for the Animator.
        */
        enum AnimatorCullingMode
        { AlwaysAnimate = 0, CullUpdateTransforms = 1, CullCompletely = 2, BasedOnRenderers = 1 }
        /** The mode of the Animator's recorder.
        */
        enum AnimatorRecorderMode
        { Offline = 0, Playback = 1, Record = 2 }
        /** The runtime representation of the AnimatorController. Use this representation to change the Animator Controller during runtime.
        */
        class RuntimeAnimatorController extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Retrieves all AnimationClip used by the controller.
            */
            public get animationClips(): System.Array$1<UnityEngine.AnimationClip>;
        }
        /** Avatar definition.
        */
        class Avatar extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Return true if this avatar is a valid mecanim avatar. It can be a generic avatar or a human avatar.
            */
            public get isValid(): boolean;
            /** Return true if this avatar is a valid human avatar.
            */
            public get isHuman(): boolean;
            /** Returns the HumanDescription used to create this Avatar.
            */
            public get humanDescription(): UnityEngine.HumanDescription;
        }
        interface IAnimationClipSource
        {
            GetAnimationClips ($results: System.Collections.Generic.List$1<UnityEngine.AnimationClip>) : void
        }
        /** SharedBetweenAnimatorsAttribute is an attribute that specify that this StateMachineBehaviour should be instantiate only once and shared among all Animator instance. This attribute reduce the memory footprint for each controller instance.
        */
        class SharedBetweenAnimatorsAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Base class for all entities in Unity Scenes.
        */
        class GameObject extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The Transform attached to this GameObject.
            */
            public get transform(): UnityEngine.Transform;
            /** The layer the game object is in.
            */
            public get layer(): number;
            public set layer(value: number);
            /** The local active state of this GameObject. (Read Only)
            */
            public get activeSelf(): boolean;
            /** Defines whether the GameObject is active in the Scene.
            */
            public get activeInHierarchy(): boolean;
            /** Gets and sets the GameObject's StaticEditorFlags.
            */
            public get isStatic(): boolean;
            public set isStatic(value: boolean);
            /** The tag of this game object.
            */
            public get tag(): string;
            public set tag(value: string);
            /** Scene that the GameObject is part of.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            /** Scene culling mask Unity uses to determine which scene to render the GameObject in.
            */
            public get sceneCullingMask(): bigint;
            public get gameObject(): UnityEngine.GameObject;
            /** Creates a game object with a primitive mesh renderer and appropriate collider.
            * @param type The type of primitive object to create.
            */
            public static CreatePrimitive ($type: UnityEngine.PrimitiveType) : UnityEngine.GameObject
            /** Returns the component of Type type if the game object has one attached, null if it doesn't.
            * @param type The type of Component to retrieve.
            */
            public GetComponent ($type: System.Type) : UnityEngine.Component
            /** Returns the component with name type if the game object has one attached, null if it doesn't.
            * @param type The type of Component to retrieve.
            */
            public GetComponent ($type: string) : UnityEngine.Component
            /** Returns the component of Type type in the GameObject or any of its children using depth first search.
            * @param type The type of Component to retrieve.
            * @returns A component of the matching type, if found. 
            */
            public GetComponentInChildren ($type: System.Type, $includeInactive: boolean) : UnityEngine.Component
            /** Returns the component of Type type in the GameObject or any of its children using depth first search.
            * @param type The type of Component to retrieve.
            * @returns A component of the matching type, if found. 
            */
            public GetComponentInChildren ($type: System.Type) : UnityEngine.Component
            /** Returns the component of Type type in the GameObject or any of its parents.
            * @param type Type of component to find.
            */
            public GetComponentInParent ($type: System.Type) : UnityEngine.Component
            /** Returns all components of Type type in the GameObject.
            * @param type The type of component to retrieve.
            */
            public GetComponents ($type: System.Type) : System.Array$1<UnityEngine.Component>
            public GetComponents ($type: System.Type, $results: System.Collections.Generic.List$1<UnityEngine.Component>) : void
            /** Returns all components of Type type in the GameObject or any of its children.
            * @param type The type of Component to retrieve.
            * @param includeInactive Should Components on inactive GameObjects be included in the found set?
            */
            public GetComponentsInChildren ($type: System.Type) : System.Array$1<UnityEngine.Component>
            /** Returns all components of Type type in the GameObject or any of its children.
            * @param type The type of Component to retrieve.
            * @param includeInactive Should Components on inactive GameObjects be included in the found set?
            */
            public GetComponentsInChildren ($type: System.Type, $includeInactive: boolean) : System.Array$1<UnityEngine.Component>
            public GetComponentsInParent ($type: System.Type) : System.Array$1<UnityEngine.Component>
            /** Returns all components of Type type in the GameObject or any of its parents.
            * @param type The type of Component to retrieve.
            * @param includeInactive Should inactive Components be included in the found set?
            */
            public GetComponentsInParent ($type: System.Type, $includeInactive: boolean) : System.Array$1<UnityEngine.Component>
            /** Gets the component of the specified type, if it exists.
            * @param type The type of component to retrieve.
            * @param component The output argument that will contain the component or null.
            * @returns Returns true if the component is found, false otherwise. 
            */
            public TryGetComponent ($type: System.Type, $component: $Ref<UnityEngine.Component>) : boolean
            /** Returns one active GameObject tagged tag. Returns null if no GameObject was found.
            * @param tag The tag to search for.
            */
            public static FindWithTag ($tag: string) : UnityEngine.GameObject
            public SendMessageUpwards ($methodName: string, $options: UnityEngine.SendMessageOptions) : void
            public SendMessage ($methodName: string, $options: UnityEngine.SendMessageOptions) : void
            public BroadcastMessage ($methodName: string, $options: UnityEngine.SendMessageOptions) : void
            /** Adds a component class of type componentType to the game object. C# Users can use a generic version.
            */
            public AddComponent ($componentType: System.Type) : UnityEngine.Component
            /** ActivatesDeactivates the GameObject, depending on the given true or false/ value.
            * @param value Activate or deactivate the object, where true activates the GameObject and false deactivates the GameObject.
            */
            public SetActive ($value: boolean) : void
            /** Is this game object tagged with tag ?
            * @param tag The tag to compare.
            */
            public CompareTag ($tag: string) : boolean
            public static FindGameObjectWithTag ($tag: string) : UnityEngine.GameObject
            /** Returns an array of active GameObjects tagged tag. Returns empty array if no GameObject was found.
            * @param tag The name of the tag to search GameObjects for.
            */
            public static FindGameObjectsWithTag ($tag: string) : System.Array$1<UnityEngine.GameObject>
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param methodName The name of the method to call.
            * @param value An optional parameter value to pass to the called method.
            * @param options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessageUpwards ($methodName: string, $value: any, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param methodName The name of the method to call.
            * @param value An optional parameter value to pass to the called method.
            * @param options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessageUpwards ($methodName: string, $value: any) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param methodName The name of the method to call.
            * @param value An optional parameter value to pass to the called method.
            * @param options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessageUpwards ($methodName: string) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param methodName The name of the method to call.
            * @param value An optional parameter value to pass to the called method.
            * @param options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessage ($methodName: string, $value: any, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param methodName The name of the method to call.
            * @param value An optional parameter value to pass to the called method.
            * @param options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessage ($methodName: string, $value: any) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param methodName The name of the method to call.
            * @param value An optional parameter value to pass to the called method.
            * @param options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessage ($methodName: string) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            */
            public BroadcastMessage ($methodName: string, $parameter: any, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            */
            public BroadcastMessage ($methodName: string, $parameter: any) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            */
            public BroadcastMessage ($methodName: string) : void
            /** Finds a GameObject by name and returns it.
            */
            public static Find ($name: string) : UnityEngine.GameObject
            public constructor ($name: string)
            public constructor ()
            public constructor ($name: string, ...components: System.Type[])
        }
        /** Store a collection of Keyframes that can be evaluated over time.
        */
        class AnimationCurve extends System.Object implements System.IEquatable$1<UnityEngine.AnimationCurve>
        {
            protected [__keep_incompatibility]: never;
            /** All keys defined in the animation curve.
            */
            public get keys(): System.Array$1<UnityEngine.Keyframe>;
            public set keys(value: System.Array$1<UnityEngine.Keyframe>);
            /** The number of keys in the curve. (Read Only)
            */
            public get length(): number;
            /** The behaviour of the animation before the first keyframe.
            */
            public get preWrapMode(): UnityEngine.WrapMode;
            public set preWrapMode(value: UnityEngine.WrapMode);
            /** The behaviour of the animation after the last keyframe.
            */
            public get postWrapMode(): UnityEngine.WrapMode;
            public set postWrapMode(value: UnityEngine.WrapMode);
            /** Evaluate the curve at time.
            * @param time The time within the curve you want to evaluate (the horizontal axis in the curve graph).
            * @returns The value of the curve, at the point in time specified. 
            */
            public Evaluate ($time: number) : number
            /** Add a new key to the curve.
            * @param time The time at which to add the key (horizontal axis in the curve graph).
            * @param value The value for the key (vertical axis in the curve graph).
            * @returns The index of the added key, or -1 if the key could not be added. 
            */
            public AddKey ($time: number, $value: number) : number
            /** Add a new key to the curve.
            * @param key The key to add to the curve.
            * @returns The index of the added key, or -1 if the key could not be added. 
            */
            public AddKey ($key: UnityEngine.Keyframe) : number
            /** Removes the keyframe at index and inserts key.
            * @param index The index of the key to move.
            * @param key The key (with its new time) to insert.
            * @returns The index of the keyframe after moving it. 
            */
            public MoveKey ($index: number, $key: UnityEngine.Keyframe) : number
            /** Removes a key.
            * @param index The index of the key to remove.
            */
            public RemoveKey ($index: number) : void
            public get_Item ($index: number) : UnityEngine.Keyframe
            /** Smooth the in and out tangents of the keyframe at index.
            * @param index The index of the keyframe to be smoothed.
            * @param weight The smoothing weight to apply to the keyframe's tangents.
            */
            public SmoothTangents ($index: number, $weight: number) : void
            /** Creates a constant "curve" starting at timeStart, ending at timeEnd and with the value value.
            * @param timeStart The start time for the constant curve.
            * @param timeEnd The start time for the constant curve.
            * @param value The value for the constant curve.
            * @returns The constant curve created from the specified values. 
            */
            public static Constant ($timeStart: number, $timeEnd: number, $value: number) : UnityEngine.AnimationCurve
            /** A straight Line starting at timeStart, valueStart and ending at timeEnd, valueEnd.
            * @param timeStart The start time for the linear curve.
            * @param valueStart The start value for the linear curve.
            * @param timeEnd The end time for the linear curve.
            * @param valueEnd The end value for the linear curve.
            * @returns The linear curve created from the specified values. 
            */
            public static Linear ($timeStart: number, $valueStart: number, $timeEnd: number, $valueEnd: number) : UnityEngine.AnimationCurve
            /** Creates an ease-in and out curve starting at timeStart, valueStart and ending at timeEnd, valueEnd.
            * @param timeStart The start time for the ease curve.
            * @param valueStart The start value for the ease curve.
            * @param timeEnd The end time for the ease curve.
            * @param valueEnd The end value for the ease curve.
            * @returns The ease-in and out curve generated from the specified values. 
            */
            public static EaseInOut ($timeStart: number, $valueStart: number, $timeEnd: number, $valueEnd: number) : UnityEngine.AnimationCurve
            public Equals ($o: any) : boolean
            public Equals ($other: UnityEngine.AnimationCurve) : boolean
            public constructor (...keys: UnityEngine.Keyframe[])
            public constructor ()
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        /** Determines how time is treated outside of the keyframed range of an AnimationClip or AnimationCurve.
        */
        enum WrapMode
        { Once = 1, Loop = 2, PingPong = 4, Default = 0, ClampForever = 8, Clamp = 1 }
        /** Represents an axis aligned bounding box.
        */
        class Bounds extends System.ValueType implements System.IEquatable$1<UnityEngine.Bounds>
        {
            protected [__keep_incompatibility]: never;
            /** The center of the bounding box.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The total size of the box. This is always twice as large as the extents.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            /** The extents of the Bounding Box. This is always half of the size of the Bounds.
            */
            public get extents(): UnityEngine.Vector3;
            public set extents(value: UnityEngine.Vector3);
            /** The minimal point of the box. This is always equal to center-extents.
            */
            public get min(): UnityEngine.Vector3;
            public set min(value: UnityEngine.Vector3);
            /** The maximal point of the box. This is always equal to center+extents.
            */
            public get max(): UnityEngine.Vector3;
            public set max(value: UnityEngine.Vector3);
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Bounds) : boolean
            public static op_Equality ($lhs: UnityEngine.Bounds, $rhs: UnityEngine.Bounds) : boolean
            public static op_Inequality ($lhs: UnityEngine.Bounds, $rhs: UnityEngine.Bounds) : boolean
            /** Sets the bounds to the min and max value of the box.
            */
            public SetMinMax ($min: UnityEngine.Vector3, $max: UnityEngine.Vector3) : void
            /** Grows the Bounds to include the point.
            */
            public Encapsulate ($point: UnityEngine.Vector3) : void
            /** Grow the bounds to encapsulate the bounds.
            */
            public Encapsulate ($bounds: UnityEngine.Bounds) : void
            /** Expand the bounds by increasing its size by amount along each side.
            */
            public Expand ($amount: number) : void
            /** Expand the bounds by increasing its size by amount along each side.
            */
            public Expand ($amount: UnityEngine.Vector3) : void
            /** Does another bounding box intersect with this bounding box?
            */
            public Intersects ($bounds: UnityEngine.Bounds) : boolean
            /** Does ray intersect this bounding box?
            */
            public IntersectRay ($ray: UnityEngine.Ray) : boolean
            /** Does ray intersect this bounding box?
            */
            public IntersectRay ($ray: UnityEngine.Ray, $distance: $Ref<number>) : boolean
            public ToString () : string
            /** Returns a nicely formatted string for the bounds.
            */
            public ToString ($format: string) : string
            /** Is point contained in the bounding box?
            */
            public Contains ($point: UnityEngine.Vector3) : boolean
            /** The smallest squared distance between the point and this bounding box.
            */
            public SqrDistance ($point: UnityEngine.Vector3) : number
            /** The closest point on the bounding box.
            * @param point Arbitrary point.
            * @returns The point on the bounding box or inside the bounding box. 
            */
            public ClosestPoint ($point: UnityEngine.Vector3) : UnityEngine.Vector3
            public constructor ($center: UnityEngine.Vector3, $size: UnityEngine.Vector3)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** AnimationEvent lets you call a script function similar to SendMessage as part of playing back an animation.
        */
        class AnimationEvent extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** String parameter that is stored in the event and will be sent to the function.
            */
            public get stringParameter(): string;
            public set stringParameter(value: string);
            /** Float parameter that is stored in the event and will be sent to the function.
            */
            public get floatParameter(): number;
            public set floatParameter(value: number);
            /** Int parameter that is stored in the event and will be sent to the function.
            */
            public get intParameter(): number;
            public set intParameter(value: number);
            /** Object reference parameter that is stored in the event and will be sent to the function.
            */
            public get objectReferenceParameter(): UnityEngine.Object;
            public set objectReferenceParameter(value: UnityEngine.Object);
            /** The name of the function that will be called.
            */
            public get functionName(): string;
            public set functionName(value: string);
            /** The time at which the event will be fired off.
            */
            public get time(): number;
            public set time(value: number);
            /** Function call options.
            */
            public get messageOptions(): UnityEngine.SendMessageOptions;
            public set messageOptions(value: UnityEngine.SendMessageOptions);
            /** Returns true if this Animation event has been fired by an Animation component.
            */
            public get isFiredByLegacy(): boolean;
            /** Returns true if this Animation event has been fired by an Animator component.
            */
            public get isFiredByAnimator(): boolean;
            /** The animation state that fired this event (Read Only).
            */
            public get animationState(): UnityEngine.AnimationState;
            /** The animator state info related to this event (Read Only).
            */
            public get animatorStateInfo(): UnityEngine.AnimatorStateInfo;
            /** The animator clip info related to this event (Read Only).
            */
            public get animatorClipInfo(): UnityEngine.AnimatorClipInfo;
            public constructor ()
        }
        /** The type of the parameter.
        */
        enum AnimatorControllerParameterType
        { Float = 1, Int = 3, Bool = 4, Trigger = 9 }
        /** Describe the unit of a duration.
        */
        enum DurationUnit
        { Fixed = 0, Normalized = 1 }
        /** This class defines a pair of clips used by AnimatorOverrideController.
        */
        class AnimationClipPair extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The original clip from the controller.
            */
            public originalClip : UnityEngine.AnimationClip
            /** The override animation clip.
            */
            public overrideClip : UnityEngine.AnimationClip
            public constructor ()
        }
        /** Interface to control Animator Override Controller.
        */
        class AnimatorOverrideController extends UnityEngine.RuntimeAnimatorController
        {
            protected [__keep_incompatibility]: never;
            /** The Runtime Animator Controller that the Animator Override Controller overrides.
            */
            public get runtimeAnimatorController(): UnityEngine.RuntimeAnimatorController;
            public set runtimeAnimatorController(value: UnityEngine.RuntimeAnimatorController);
            /** Returns the count of overrides.
            */
            public get overridesCount(): number;
            public get_Item ($name: string) : UnityEngine.AnimationClip
            public set_Item ($name: string, $value: UnityEngine.AnimationClip) : void
            public get_Item ($clip: UnityEngine.AnimationClip) : UnityEngine.AnimationClip
            public set_Item ($clip: UnityEngine.AnimationClip, $value: UnityEngine.AnimationClip) : void
            public GetOverrides ($overrides: System.Collections.Generic.List$1<System.Collections.Generic.KeyValuePair$2<UnityEngine.AnimationClip, UnityEngine.AnimationClip>>) : void
            public ApplyOverrides ($overrides: System.Collections.Generic.IList$1<System.Collections.Generic.KeyValuePair$2<UnityEngine.AnimationClip, UnityEngine.AnimationClip>>) : void
            public constructor ()
            public constructor ($controller: UnityEngine.RuntimeAnimatorController)
        }
        /** Various utilities for animator manipulation.
        */
        class AnimatorUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** This function will remove all transform hierarchy under GameObject, the animator will write directly transform matrices into the skin mesh matrices saving alot of CPU cycles.
            * @param go GameObject to Optimize.
            * @param exposedTransforms List of transform name to expose.
            */
            public static OptimizeTransformHierarchy ($go: UnityEngine.GameObject, $exposedTransforms: System.Array$1<string>) : void
            /** This function will recreate all transform hierarchy under GameObject.
            * @param go GameObject to Deoptimize.
            */
            public static DeoptimizeTransformHierarchy ($go: UnityEngine.GameObject) : void
            public constructor ()
        }
        /** Enumeration of all the muscles in the body.
        */
        enum BodyDof
        { SpineFrontBack = 0, SpineLeftRight = 1, SpineRollLeftRight = 2, ChestFrontBack = 3, ChestLeftRight = 4, ChestRollLeftRight = 5, UpperChestFrontBack = 6, UpperChestLeftRight = 7, UpperChestRollLeftRight = 8, LastBodyDof = 9 }
        /** Enumeration of all the muscles in the head.
        */
        enum HeadDof
        { NeckFrontBack = 0, NeckLeftRight = 1, NeckRollLeftRight = 2, HeadFrontBack = 3, HeadLeftRight = 4, HeadRollLeftRight = 5, LeftEyeDownUp = 6, LeftEyeInOut = 7, RightEyeDownUp = 8, RightEyeInOut = 9, JawDownUp = 10, JawLeftRight = 11, LastHeadDof = 12 }
        /** Enumeration of all the muscles in a leg.
        */
        enum LegDof
        { UpperLegFrontBack = 0, UpperLegInOut = 1, UpperLegRollInOut = 2, LegCloseOpen = 3, LegRollInOut = 4, FootCloseOpen = 5, FootInOut = 6, ToesUpDown = 7, LastLegDof = 8 }
        /** Enumeration of all the muscles in an arm.
        */
        enum ArmDof
        { ShoulderDownUp = 0, ShoulderFrontBack = 1, ArmDownUp = 2, ArmFrontBack = 3, ArmRollInOut = 4, ForeArmCloseOpen = 5, ForeArmRollInOut = 6, HandDownUp = 7, HandInOut = 8, LastArmDof = 9 }
        /** Enumeration of all the muscles in a finger.
        */
        enum FingerDof
        { ProximalDownUp = 0, ProximalInOut = 1, IntermediateCloseOpen = 2, DistalCloseOpen = 3, LastFingerDof = 4 }
        /** Enumeration of all the parts in a human.
        */
        enum HumanPartDof
        { Body = 0, Head = 1, LeftLeg = 2, RightLeg = 3, LeftArm = 4, RightArm = 5, LeftThumb = 6, LeftIndex = 7, LeftMiddle = 8, LeftRing = 9, LeftLittle = 10, RightThumb = 11, RightIndex = 12, RightMiddle = 13, RightRing = 14, RightLittle = 15, LastHumanPartDof = 16 }
        /** Class that holds humanoid avatar parameters to pass to the AvatarBuilder.BuildHumanAvatar function.
        */
        class HumanDescription extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Mapping between Mecanim bone names and bone names in the rig.
            */
            public human : System.Array$1<UnityEngine.HumanBone>
            /** List of bone Transforms to include in the model.
            */
            public skeleton : System.Array$1<UnityEngine.SkeletonBone>
            /** Defines how the upper arm's roll/twisting is distributed between the shoulder and elbow joints.
            */
            public get upperArmTwist(): number;
            public set upperArmTwist(value: number);
            /** Defines how the lower arm's roll/twisting is distributed between the elbow and wrist joints.
            */
            public get lowerArmTwist(): number;
            public set lowerArmTwist(value: number);
            /** Defines how the upper leg's roll/twisting is distributed between the thigh and knee joints.
            */
            public get upperLegTwist(): number;
            public set upperLegTwist(value: number);
            /** Defines how the lower leg's roll/twisting is distributed between the knee and ankle.
            */
            public get lowerLegTwist(): number;
            public set lowerLegTwist(value: number);
            /** Amount by which the arm's length is allowed to stretch when using IK.
            */
            public get armStretch(): number;
            public set armStretch(value: number);
            /** Amount by which the leg's length is allowed to stretch when using IK.
            */
            public get legStretch(): number;
            public set legStretch(value: number);
            /** Modification to the minimum distance between the feet of a humanoid model.
            */
            public get feetSpacing(): number;
            public set feetSpacing(value: number);
            /** True for any human that has a translation Degree of Freedom (DoF). It is set to false by default.
            */
            public get hasTranslationDoF(): boolean;
            public set hasTranslationDoF(value: boolean);
        }
        /** Details of the Transform name mapped to the skeleton bone of a model and its default position and rotation in the T-pose.
        */
        class SkeletonBone extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The name of the Transform mapped to the bone.
            */
            public name : string
            /** The T-pose position of the bone in local space.
            */
            public position : UnityEngine.Vector3
            /** The T-pose rotation of the bone in local space.
            */
            public rotation : UnityEngine.Quaternion
            /** The T-pose scaling of the bone in local space.
            */
            public scale : UnityEngine.Vector3
        }
        /** This class stores the rotation limits that define the muscle for a single human bone.
        */
        class HumanLimit extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Should this limit use the default values?
            */
            public get useDefaultValues(): boolean;
            public set useDefaultValues(value: boolean);
            /** The maximum negative rotation away from the initial value that this muscle can apply.
            */
            public get min(): UnityEngine.Vector3;
            public set min(value: UnityEngine.Vector3);
            /** The maximum rotation away from the initial value that this muscle can apply.
            */
            public get max(): UnityEngine.Vector3;
            public set max(value: UnityEngine.Vector3);
            /** The default orientation of a bone when no muscle action is applied.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** Length of the bone to which the limit is applied.
            */
            public get axisLength(): number;
            public set axisLength(value: number);
        }
        /** The mapping between a bone in the model and the conceptual bone in the Mecanim human anatomy.
        */
        class HumanBone extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The rotation limits that define the muscle for this bone.
            */
            public limit : UnityEngine.HumanLimit
            /** The name of the bone to which the Mecanim human bone is mapped.
            */
            public get boneName(): string;
            public set boneName(value: string);
            /** The name of the Mecanim human bone to which the bone from the model is mapped.
            */
            public get humanName(): string;
            public set humanName(value: string);
        }
        /** Class to build avatars from user scripts.
        */
        class AvatarBuilder extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Create a humanoid avatar.
            * @param go Root object of your transform hierachy. It must be the top most gameobject when you create the avatar.
            * @param humanDescription Humanoid description of the avatar.
            * @returns Returns the Avatar, you must always always check the avatar is valid before using it with Avatar.isValid. 
            */
            public static BuildHumanAvatar ($go: UnityEngine.GameObject, $humanDescription: UnityEngine.HumanDescription) : UnityEngine.Avatar
            /** Create a new generic avatar.
            * @param go Root object of your transform hierarchy.
            * @param rootMotionTransformName Transform name of the root motion transform. If empty no root motion is defined and you must take care of avatar movement yourself.
            */
            public static BuildGenericAvatar ($go: UnityEngine.GameObject, $rootMotionTransformName: string) : UnityEngine.Avatar
            public constructor ()
        }
        /** Avatar body part.
        */
        enum AvatarMaskBodyPart
        { Root = 0, Body = 1, Head = 2, LeftLeg = 3, RightLeg = 4, LeftArm = 5, RightArm = 6, LeftFingers = 7, RightFingers = 8, LeftFootIK = 9, RightFootIK = 10, LeftHandIK = 11, RightHandIK = 12, LastBodyPart = 13 }
        /** AvatarMask is used to mask out humanoid body parts and transforms.
        */
        class AvatarMask extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Number of transforms.
            */
            public get transformCount(): number;
            public set transformCount(value: number);
            /** Returns true if the humanoid body part at the given index is active.
            * @param index The index of the humanoid body part.
            */
            public GetHumanoidBodyPartActive ($index: UnityEngine.AvatarMaskBodyPart) : boolean
            /** Sets the humanoid body part at the given index to active or not.
            * @param index The index of the humanoid body part.
            * @param value Active or not.
            */
            public SetHumanoidBodyPartActive ($index: UnityEngine.AvatarMaskBodyPart, $value: boolean) : void
            public AddTransformPath ($transform: UnityEngine.Transform) : void
            /** Adds a transform path into the AvatarMask.
            * @param transform The transform to add into the AvatarMask.
            * @param recursive Whether to also add all children of the specified transform.
            */
            public AddTransformPath ($transform: UnityEngine.Transform, $recursive: boolean) : void
            public RemoveTransformPath ($transform: UnityEngine.Transform) : void
            /** Removes a transform path from the AvatarMask.
            * @param transform The Transform that should be removed from the AvatarMask.
            * @param recursive Whether to also remove all children of the specified transform.
            */
            public RemoveTransformPath ($transform: UnityEngine.Transform, $recursive: boolean) : void
            /** Returns the path of the transform at the given index.
            * @param index The index of the transform.
            */
            public GetTransformPath ($index: number) : string
            /** Sets the path of the transform at the given index.
            * @param index The index of the transform.
            * @param path The path of the transform.
            */
            public SetTransformPath ($index: number, $path: string) : void
            /** Returns true if the transform at the given index is active.
            * @param index The index of the transform.
            */
            public GetTransformActive ($index: number) : boolean
            /** Sets the tranform at the given index to active or not.
            * @param index The index of the transform.
            * @param value Active or not.
            */
            public SetTransformActive ($index: number, $value: boolean) : void
            public constructor ()
        }
        /** Retargetable humanoid pose.
        */
        class HumanPose extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The human body position for that pose.
            */
            public bodyPosition : UnityEngine.Vector3
            /** The human body orientation for that pose.
            */
            public bodyRotation : UnityEngine.Quaternion
            /** The array of muscle values for that pose.
            */
            public muscles : System.Array$1<number>
        }
        /** A handler that lets you read or write a HumanPose from or to a humanoid avatar skeleton hierarchy.
        */
        class HumanPoseHandler extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
            /** Gets a human pose from the handled avatar skeleton.
            * @param humanPose The output human pose.
            */
            public GetHumanPose ($humanPose: $Ref<UnityEngine.HumanPose>) : void
            /** Sets a human pose on the handled avatar skeleton.
            * @param humanPose The human pose to be set.
            */
            public SetHumanPose ($humanPose: $Ref<UnityEngine.HumanPose>) : void
            public constructor ($avatar: UnityEngine.Avatar, $root: UnityEngine.Transform)
            public constructor ()
        }
        /** Details of all the human bone and muscle types defined by Mecanim.
        */
        class HumanTrait extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The number of human muscle types defined by Mecanim.
            */
            public static get MuscleCount(): number;
            /** Array of the names of all human muscle types defined by Mecanim.
            */
            public static get MuscleName(): System.Array$1<string>;
            /** The number of human bone types defined by Mecanim.
            */
            public static get BoneCount(): number;
            /** Array of the names of all human bone types defined by Mecanim.
            */
            public static get BoneName(): System.Array$1<string>;
            /** The number of bone types that are required by Mecanim for any human model.
            */
            public static get RequiredBoneCount(): number;
            /** Obtain the muscle index for a particular bone index and "degree of freedom".
            * @param i Bone index.
            * @param dofIndex Number representing a "degree of freedom": 0 for X-Axis, 1 for Y-Axis, 2 for Z-Axis.
            */
            public static MuscleFromBone ($i: number, $dofIndex: number) : number
            /** Return the bone to which a particular muscle is connected.
            * @param i Muscle index.
            */
            public static BoneFromMuscle ($i: number) : number
            /** Is the bone a member of the minimal set of bones that Mecanim requires for a human model?
            * @param i Index of the bone to test.
            */
            public static RequiredBone ($i: number) : boolean
            /** Get the default minimum value of rotation for a muscle in degrees.
            * @param i Muscle index.
            */
            public static GetMuscleDefaultMin ($i: number) : number
            /** Get the default maximum value of rotation for a muscle in degrees.
            * @param i Muscle index.
            */
            public static GetMuscleDefaultMax ($i: number) : number
            /** Gets the bone hierarchy mass.
            * @param i The humanoid bone index.
            * @returns The bone hierarchy mass. 
            */
            public static GetBoneDefaultHierarchyMass ($i: number) : number
            /** Returns parent humanoid bone index of a bone.
            * @param i Humanoid bone index to get parent from.
            * @returns Humanoid bone index of parent. 
            */
            public static GetParentBone ($i: number) : number
            public constructor ()
        }
        /** Options for how to send a message.
        */
        enum SendMessageOptions
        { RequireReceiver = 0, DontRequireReceiver = 1 }
        class TrackedReference extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static op_Equality ($x: UnityEngine.TrackedReference, $y: UnityEngine.TrackedReference) : boolean
            public static op_Inequality ($x: UnityEngine.TrackedReference, $y: UnityEngine.TrackedReference) : boolean
            public static op_Implicit ($exists: UnityEngine.TrackedReference) : boolean
        }
        /** The AnimationState gives full control over animation blending.
        */
        class AnimationState extends UnityEngine.TrackedReference
        {
            protected [__keep_incompatibility]: never;
            /** Enables / disables the animation.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The weight of animation.
            */
            public get weight(): number;
            public set weight(value: number);
            /** Wrapping mode of the animation.
            */
            public get wrapMode(): UnityEngine.WrapMode;
            public set wrapMode(value: UnityEngine.WrapMode);
            /** The current time of the animation.
            */
            public get time(): number;
            public set time(value: number);
            /** The normalized time of the animation.
            */
            public get normalizedTime(): number;
            public set normalizedTime(value: number);
            /** The playback speed of the animation. 1 is normal playback speed.
            */
            public get speed(): number;
            public set speed(value: number);
            /** The normalized playback speed.
            */
            public get normalizedSpeed(): number;
            public set normalizedSpeed(value: number);
            /** The length of the animation clip in seconds.
            */
            public get length(): number;
            public get layer(): number;
            public set layer(value: number);
            /** The clip that is being played by this animation state.
            */
            public get clip(): UnityEngine.AnimationClip;
            /** The name of the animation.
            */
            public get name(): string;
            public set name(value: string);
            /** Which blend mode should be used?
            */
            public get blendMode(): UnityEngine.AnimationBlendMode;
            public set blendMode(value: UnityEngine.AnimationBlendMode);
            /** Adds a transform which should be animated. This allows you to reduce the number of animations you have to create.
            * @param mix The transform to animate.
            * @param recursive Whether to also animate all children of the specified transform.
            */
            public AddMixingTransform ($mix: UnityEngine.Transform, $recursive: boolean) : void
            /** Adds a transform which should be animated. This allows you to reduce the number of animations you have to create.
            * @param mix The transform to animate.
            * @param recursive Whether to also animate all children of the specified transform.
            */
            public AddMixingTransform ($mix: UnityEngine.Transform) : void
            /** Removes a transform which should be animated.
            */
            public RemoveMixingTransform ($mix: UnityEngine.Transform) : void
            public constructor ()
        }
        /** Used by Animation.Play function.
        */
        enum PlayMode
        { StopSameLayer = 0, StopAll = 4 }
        /** Used by Animation.Play function.
        */
        enum QueueMode
        { CompleteOthers = 0, PlayNow = 2 }
        /** Used by Animation.Play function.
        */
        enum AnimationBlendMode
        { Blend = 0, Additive = 1 }
        enum AnimationPlayMode
        { Stop = 0, Queue = 1, Mix = 2 }
        /** This enum controlls culling of Animation component.
        */
        enum AnimationCullingType
        { AlwaysAnimate = 0, BasedOnRenderers = 1, BasedOnClipBounds = 2, BasedOnUserBounds = 3 }
        /** The animation component is used to play back animations.
        */
        class Animation extends UnityEngine.Behaviour implements System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
            /** The default animation.
            */
            public get clip(): UnityEngine.AnimationClip;
            public set clip(value: UnityEngine.AnimationClip);
            /** Should the default animation clip (the Animation.clip property) automatically start playing on startup?
            */
            public get playAutomatically(): boolean;
            public set playAutomatically(value: boolean);
            /** How should time beyond the playback range of the clip be treated?
            */
            public get wrapMode(): UnityEngine.WrapMode;
            public set wrapMode(value: UnityEngine.WrapMode);
            /** Is an animation currently being played?
            */
            public get isPlaying(): boolean;
            /** When turned on, animations will be executed in the physics loop. This is only useful in conjunction with kinematic rigidbodies.
            */
            public get animatePhysics(): boolean;
            public set animatePhysics(value: boolean);
            /** Controls culling of this Animation component.
            */
            public get cullingType(): UnityEngine.AnimationCullingType;
            public set cullingType(value: UnityEngine.AnimationCullingType);
            /** AABB of this Animation animation component in local space.
            */
            public get localBounds(): UnityEngine.Bounds;
            public set localBounds(value: UnityEngine.Bounds);
            public Stop () : void
            /** Stops an animation named name.
            */
            public Stop ($name: string) : void
            /** Rewinds the animation named name.
            */
            public Rewind ($name: string) : void
            public Rewind () : void
            public Sample () : void
            /** Is the animation named name playing?
            */
            public IsPlaying ($name: string) : boolean
            public get_Item ($name: string) : UnityEngine.AnimationState
            /** Plays an animation without blending.
            */
            public Play () : boolean
            /** Plays an animation without blending.
            */
            public Play ($mode: UnityEngine.PlayMode) : boolean
            /** Plays an animation without blending.
            */
            public Play ($animation: string, $mode: UnityEngine.PlayMode) : boolean
            /** Plays an animation without blending.
            */
            public Play ($animation: string) : boolean
            /** Fades the animation with name animation in over a period of time seconds and fades other animations out.
            */
            public CrossFade ($animation: string, $fadeLength: number, $mode: UnityEngine.PlayMode) : void
            /** Fades the animation with name animation in over a period of time seconds and fades other animations out.
            */
            public CrossFade ($animation: string, $fadeLength: number) : void
            /** Fades the animation with name animation in over a period of time seconds and fades other animations out.
            */
            public CrossFade ($animation: string) : void
            /** Blends the animation named animation towards targetWeight over the next time seconds.
            */
            public Blend ($animation: string, $targetWeight: number, $fadeLength: number) : void
            /** Blends the animation named animation towards targetWeight over the next time seconds.
            */
            public Blend ($animation: string, $targetWeight: number) : void
            /** Blends the animation named animation towards targetWeight over the next time seconds.
            */
            public Blend ($animation: string) : void
            /** Cross fades an animation after previous animations has finished playing.
            */
            public CrossFadeQueued ($animation: string, $fadeLength: number, $queue: UnityEngine.QueueMode, $mode: UnityEngine.PlayMode) : UnityEngine.AnimationState
            /** Cross fades an animation after previous animations has finished playing.
            */
            public CrossFadeQueued ($animation: string, $fadeLength: number, $queue: UnityEngine.QueueMode) : UnityEngine.AnimationState
            /** Cross fades an animation after previous animations has finished playing.
            */
            public CrossFadeQueued ($animation: string, $fadeLength: number) : UnityEngine.AnimationState
            /** Cross fades an animation after previous animations has finished playing.
            */
            public CrossFadeQueued ($animation: string) : UnityEngine.AnimationState
            /** Plays an animation after previous animations has finished playing.
            */
            public PlayQueued ($animation: string, $queue: UnityEngine.QueueMode, $mode: UnityEngine.PlayMode) : UnityEngine.AnimationState
            /** Plays an animation after previous animations has finished playing.
            */
            public PlayQueued ($animation: string, $queue: UnityEngine.QueueMode) : UnityEngine.AnimationState
            /** Plays an animation after previous animations has finished playing.
            */
            public PlayQueued ($animation: string) : UnityEngine.AnimationState
            /** Adds a clip to the animation with name newName.
            */
            public AddClip ($clip: UnityEngine.AnimationClip, $newName: string) : void
            /** Adds clip to the only play between firstFrame and lastFrame. The new clip will also be added to the animation with name newName.
            * @param addLoopFrame Should an extra frame be inserted at the end that matches the first frame? Turn this on if you are making a looping animation.
            */
            public AddClip ($clip: UnityEngine.AnimationClip, $newName: string, $firstFrame: number, $lastFrame: number, $addLoopFrame: boolean) : void
            /** Adds clip to the only play between firstFrame and lastFrame. The new clip will also be added to the animation with name newName.
            * @param addLoopFrame Should an extra frame be inserted at the end that matches the first frame? Turn this on if you are making a looping animation.
            */
            public AddClip ($clip: UnityEngine.AnimationClip, $newName: string, $firstFrame: number, $lastFrame: number) : void
            /** Remove clip from the animation list.
            */
            public RemoveClip ($clip: UnityEngine.AnimationClip) : void
            /** Remove clip from the animation list.
            */
            public RemoveClip ($clipName: string) : void
            public GetClipCount () : number
            public SyncLayer ($layer: number) : void
            public GetEnumerator () : System.Collections.IEnumerator
            public GetClip ($name: string) : UnityEngine.AnimationClip
            public constructor ()
        }
        /** The result of an Asset Bundle Load or Recompress Operation.
        */
        enum AssetBundleLoadResult
        { Success = 0, Cancelled = 1, NotMatchingCrc = 2, FailedCache = 3, NotValidAssetBundle = 4, NoSerializedData = 5, NotCompatible = 6, AlreadyLoaded = 7, FailedRead = 8, FailedDecompression = 9, FailedWrite = 10, FailedDeleteRecompressionTarget = 11, RecompressionTargetIsLoaded = 12, RecompressionTargetExistsButNotArchive = 13 }
        /** AssetBundles let you stream additional assets via the UnityWebRequest class and instantiate them at runtime. AssetBundles are created via BuildPipeline.BuildAssetBundle.
        */
        class AssetBundle extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Return true if the AssetBundle is a streamed Scene AssetBundle.
            */
            public get isStreamedSceneAssetBundle(): boolean;
            /** Unloads all currently loaded Asset Bundles.
            * @param unloadAllObjects Determines whether the current instances of objects loaded from Asset Bundles will also be unloaded.
            */
            public static UnloadAllAssetBundles ($unloadAllObjects: boolean) : void
            public static GetAllLoadedAssetBundles () : System.Collections.Generic.IEnumerable$1<UnityEngine.AssetBundle>
            public static LoadFromFileAsync ($path: string) : UnityEngine.AssetBundleCreateRequest
            public static LoadFromFileAsync ($path: string, $crc: number) : UnityEngine.AssetBundleCreateRequest
            /** Asynchronously loads an AssetBundle from a file on disk.
            * @param path Path of the file on disk.
            * @param crc An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.
            * @param offset An optional byte offset. This value specifies where to start reading the AssetBundle from.
            * @returns Asynchronous create request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded. 
            */
            public static LoadFromFileAsync ($path: string, $crc: number, $offset: bigint) : UnityEngine.AssetBundleCreateRequest
            public static LoadFromFile ($path: string) : UnityEngine.AssetBundle
            public static LoadFromFile ($path: string, $crc: number) : UnityEngine.AssetBundle
            /** Synchronously loads an AssetBundle from a file on disk.
            * @param path Path of the file on disk.
            * @param crc An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.
            * @param offset An optional byte offset. This value specifies where to start reading the AssetBundle from.
            * @returns Loaded AssetBundle object or null if failed. 
            */
            public static LoadFromFile ($path: string, $crc: number, $offset: bigint) : UnityEngine.AssetBundle
            public static LoadFromMemoryAsync ($binary: System.Array$1<number>) : UnityEngine.AssetBundleCreateRequest
            /** Asynchronously create an AssetBundle from a memory region.
            * @param binary Array of bytes with the AssetBundle data.
            * @param crc An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.
            * @returns Asynchronous create request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded. 
            */
            public static LoadFromMemoryAsync ($binary: System.Array$1<number>, $crc: number) : UnityEngine.AssetBundleCreateRequest
            public static LoadFromMemory ($binary: System.Array$1<number>) : UnityEngine.AssetBundle
            /** Synchronously create an AssetBundle from a memory region.
            * @param binary Array of bytes with the AssetBundle data.
            * @param crc An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.
            * @returns Loaded AssetBundle object or null if failed. 
            */
            public static LoadFromMemory ($binary: System.Array$1<number>, $crc: number) : UnityEngine.AssetBundle
            /** Asynchronously loads an AssetBundle from a managed Stream.
            * @param stream The managed Stream object. Unity calls Read(), Seek() and the Length property on this object to load the AssetBundle data.
            * @param crc An optional CRC-32 checksum of the uncompressed content.
            * @param managedReadBufferSize You can use this to override the size of the read buffer Unity uses while loading data. The default size is 32KB.
            * @returns Asynchronous create request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded. 
            */
            public static LoadFromStreamAsync ($stream: System.IO.Stream, $crc: number, $managedReadBufferSize: number) : UnityEngine.AssetBundleCreateRequest
            public static LoadFromStreamAsync ($stream: System.IO.Stream, $crc: number) : UnityEngine.AssetBundleCreateRequest
            public static LoadFromStreamAsync ($stream: System.IO.Stream) : UnityEngine.AssetBundleCreateRequest
            /** Synchronously loads an AssetBundle from a managed Stream.
            * @param stream The managed Stream object. Unity calls Read(), Seek() and the Length property on this object to load the AssetBundle data.
            * @param crc An optional CRC-32 checksum of the uncompressed content.
            * @param managedReadBufferSize You can use this to override the size of the read buffer Unity uses while loading data. The default size is 32KB.
            * @returns The loaded AssetBundle object or null when the object fails to load. 
            */
            public static LoadFromStream ($stream: System.IO.Stream, $crc: number, $managedReadBufferSize: number) : UnityEngine.AssetBundle
            public static LoadFromStream ($stream: System.IO.Stream, $crc: number) : UnityEngine.AssetBundle
            public static LoadFromStream ($stream: System.IO.Stream) : UnityEngine.AssetBundle
            /** Check if an AssetBundle contains a specific object.
            */
            public Contains ($name: string) : boolean
            /** Loads asset with name of type T from the bundle.
            */
            public LoadAsset ($name: string) : UnityEngine.Object
            /** Loads asset with name of a given type from the bundle.
            */
            public LoadAsset ($name: string, $type: System.Type) : UnityEngine.Object
            /** Asynchronously loads asset with name of a given T from the bundle.
            */
            public LoadAssetAsync ($name: string) : UnityEngine.AssetBundleRequest
            /** Asynchronously loads asset with name of a given type from the bundle.
            */
            public LoadAssetAsync ($name: string, $type: System.Type) : UnityEngine.AssetBundleRequest
            /** Loads asset and sub assets with name of type T from the bundle.
            */
            public LoadAssetWithSubAssets ($name: string) : System.Array$1<UnityEngine.Object>
            /** Loads asset and sub assets with name of a given type from the bundle.
            */
            public LoadAssetWithSubAssets ($name: string, $type: System.Type) : System.Array$1<UnityEngine.Object>
            /** Loads asset with sub assets with name of type T from the bundle asynchronously.
            */
            public LoadAssetWithSubAssetsAsync ($name: string) : UnityEngine.AssetBundleRequest
            /** Loads asset with sub assets with name of a given type from the bundle asynchronously.
            */
            public LoadAssetWithSubAssetsAsync ($name: string, $type: System.Type) : UnityEngine.AssetBundleRequest
            public LoadAllAssets () : System.Array$1<UnityEngine.Object>
            /** Loads all assets contained in the asset bundle that inherit from type.
            */
            public LoadAllAssets ($type: System.Type) : System.Array$1<UnityEngine.Object>
            public LoadAllAssetsAsync () : UnityEngine.AssetBundleRequest
            /** Loads all assets contained in the asset bundle that inherit from type asynchronously.
            */
            public LoadAllAssetsAsync ($type: System.Type) : UnityEngine.AssetBundleRequest
            /** Unloads assets in the bundle.
            */
            public Unload ($unloadAllLoadedObjects: boolean) : void
            public GetAllAssetNames () : System.Array$1<string>
            public GetAllScenePaths () : System.Array$1<string>
            /** Asynchronously recompress a downloaded/stored AssetBundle from one BuildCompression to another.
            * @param inputPath Path to the AssetBundle to recompress.
            * @param outputPath Path to the recompressed AssetBundle to be generated. Can be the same as inputPath.
            * @param method The compression method, level and blocksize to use during recompression. Only some BuildCompression types are supported (see note).
            * @param expectedCRC CRC of the AssetBundle to test against. Testing this requires additional file reading and computation. Pass in 0 to skip this check. Unity does not compute a CRC when the source and destination BuildCompression are the same, so no CRC verification takes place (see note).
            * @param priority The priority at which the recompression operation should run. This sets thread priority during the operation and does not effect the order in which operations are performed. Recompression operations run on a background worker thread.
            */
            public static RecompressAssetBundleAsync ($inputPath: string, $outputPath: string, $method: UnityEngine.BuildCompression, $expectedCRC?: number, $priority?: UnityEngine.ThreadPriority) : UnityEngine.AssetBundleRecompressOperation
        }
        /** Base class for all yield instructions.
        */
        class YieldInstruction extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Asynchronous operation coroutine.
        */
        class AsyncOperation extends UnityEngine.YieldInstruction
        {
            protected [__keep_incompatibility]: never;
            /** Has the operation finished? (Read Only)
            */
            public get isDone(): boolean;
            /** What's the operation's progress. (Read Only)
            */
            public get progress(): number;
            /** Priority lets you tweak in which order async operation calls will be performed.
            */
            public get priority(): number;
            public set priority(value: number);
            /** Allow Scenes to be activated as soon as it is ready.
            */
            public get allowSceneActivation(): boolean;
            public set allowSceneActivation(value: boolean);
            public add_completed ($value: System.Action$1<UnityEngine.AsyncOperation>) : void
            public remove_completed ($value: System.Action$1<UnityEngine.AsyncOperation>) : void
            public constructor ()
        }
        /** Asynchronous create request for an AssetBundle.
        */
        class AssetBundleCreateRequest extends UnityEngine.AsyncOperation
        {
            protected [__keep_incompatibility]: never;
            /** Asset object being loaded (Read Only).
            */
            public get assetBundle(): UnityEngine.AssetBundle;
            public constructor ()
        }
        /** Asynchronous load request from an AssetBundle.
        */
        class AssetBundleRequest extends UnityEngine.AsyncOperation
        {
            protected [__keep_incompatibility]: never;
            /** Asset object being loaded (Read Only).
            */
            public get asset(): UnityEngine.Object;
            /** Asset objects with sub assets being loaded. (Read Only)
            */
            public get allAssets(): System.Array$1<UnityEngine.Object>;
            public constructor ()
        }
        /** Asynchronous AssetBundle recompression from one compression method and level to another.
        */
        class AssetBundleRecompressOperation extends UnityEngine.AsyncOperation
        {
            protected [__keep_incompatibility]: never;
            /** A string describing the recompression operation result (Read Only).
            */
            public get humanReadableResult(): string;
            /** Path of the AssetBundle being recompressed (Read Only).
            */
            public get inputPath(): string;
            /** Path of the resulting recompressed AssetBundle (Read Only).
            */
            public get outputPath(): string;
            /** Result of the recompression operation.
            */
            public get result(): UnityEngine.AssetBundleLoadResult;
            /** True if the recompress operation is complete and was successful, otherwise false (Read Only).
            */
            public get success(): boolean;
            public constructor ()
        }
        /** Contains information about compression methods, compression levels and block sizes that are supported by Asset Bundle compression at build time and recompression at runtime.
        */
        class BuildCompression extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Uncompressed Asset Bundle.
            */
            public static Uncompressed : UnityEngine.BuildCompression
            /** LZ4HC "Chunk Based" Compression.
            */
            public static LZ4 : UnityEngine.BuildCompression
            /** LZMA Compression.
            */
            public static LZMA : UnityEngine.BuildCompression
            /** Uncompressed Asset Bundle.
            */
            public static UncompressedRuntime : UnityEngine.BuildCompression
            /** LZ4 Compression for runtime recompression.
            */
            public static LZ4Runtime : UnityEngine.BuildCompression
            public get compression(): UnityEngine.CompressionType;
            public get level(): UnityEngine.CompressionLevel;
            public get blockSize(): number;
        }
        /** Priority of a thread.
        */
        enum ThreadPriority
        { Low = 0, BelowNormal = 1, Normal = 2, High = 4 }
        /** Manifest for all the AssetBundles in the build.
        */
        class AssetBundleManifest extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            public GetAllAssetBundles () : System.Array$1<string>
            public GetAllAssetBundlesWithVariant () : System.Array$1<string>
            /** Get the hash for the given AssetBundle.
            * @param assetBundleName Name of the asset bundle.
            * @returns The 128-bit hash for the asset bundle. 
            */
            public GetAssetBundleHash ($assetBundleName: string) : UnityEngine.Hash128
            /** Get the direct dependent AssetBundles for the given AssetBundle.
            * @param assetBundleName Name of the asset bundle.
            * @returns Array of asset bundle names this asset bundle depends on. 
            */
            public GetDirectDependencies ($assetBundleName: string) : System.Array$1<string>
            /** Get all the dependent AssetBundles for the given AssetBundle.
            * @param assetBundleName Name of the asset bundle.
            */
            public GetAllDependencies ($assetBundleName: string) : System.Array$1<string>
        }
        /** Represent the hash value.
        */
        class Hash128 extends System.ValueType implements System.IComparable, System.IComparable$1<UnityEngine.Hash128>, System.IEquatable$1<UnityEngine.Hash128>
        {
            protected [__keep_incompatibility]: never;
            /** Get if the hash value is valid or not. (Read Only)
            */
            public get isValid(): boolean;
            public CompareTo ($rhs: UnityEngine.Hash128) : number
            /** Convert the input string to Hash128.
            */
            public static Parse ($hashString: string) : UnityEngine.Hash128
            /** Compute a hash of the input string.
            */
            public static Compute ($hashString: string) : UnityEngine.Hash128
            public Equals ($obj: any) : boolean
            public Equals ($obj: UnityEngine.Hash128) : boolean
            public CompareTo ($obj: any) : number
            public static op_Equality ($hash1: UnityEngine.Hash128, $hash2: UnityEngine.Hash128) : boolean
            public static op_Inequality ($hash1: UnityEngine.Hash128, $hash2: UnityEngine.Hash128) : boolean
            public static op_LessThan ($x: UnityEngine.Hash128, $y: UnityEngine.Hash128) : boolean
            public static op_GreaterThan ($x: UnityEngine.Hash128, $y: UnityEngine.Hash128) : boolean
            public constructor ($u32_0: number, $u32_1: number, $u32_2: number, $u32_3: number)
            public constructor ($u64_0: bigint, $u64_1: bigint)
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** Compression Method for Asset Bundles.
        */
        enum CompressionType
        { None = 0, Lzma = 1, Lz4 = 2, Lz4HC = 3 }
        /** Compression Levels relate to how much time should be spent compressing Assets into an Asset Bundle.
        */
        enum CompressionLevel
        { None = 0, Fastest = 1, Fast = 2, Normal = 3, High = 4, Maximum = 5 }
        /** Controls the global audio settings from script.
        */
        class AudioSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the speaker mode capability of the current audio driver. (Read Only)
            */
            public static get driverCapabilities(): UnityEngine.AudioSpeakerMode;
            /** Gets the current speaker mode. Default is 2 channel stereo.
            */
            public static get speakerMode(): UnityEngine.AudioSpeakerMode;
            public static set speakerMode(value: UnityEngine.AudioSpeakerMode);
            /** Returns the current time of the audio system.
            */
            public static get dspTime(): number;
            /** Get the mixer's current output rate.
            */
            public static get outputSampleRate(): number;
            public static set outputSampleRate(value: number);
            /** Get the mixer's buffer size in samples.
            * @param bufferLength Is the length of each buffer in the ringbuffer.
            * @param numBuffers Is number of buffers.
            */
            public static GetDSPBufferSize ($bufferLength: $Ref<number>, $numBuffers: $Ref<number>) : void
            public static GetSpatializerPluginNames () : System.Array$1<string>
            public static GetSpatializerPluginName () : string
            /** Sets the spatializer plugin for all platform groups. If a null or empty string is passed in, the existing spatializer plugin will be cleared.
            * @param pluginName The spatializer plugin name.
            */
            public static SetSpatializerPluginName ($pluginName: string) : void
            public static GetConfiguration () : UnityEngine.AudioConfiguration
            /** Performs a change of the device configuration. In response to this the AudioSettings.OnAudioConfigurationChanged delegate is invoked with the argument deviceWasChanged=false. It cannot be guaranteed that the exact settings specified can be used, but the an attempt is made to use the closest match supported by the system.
            * @param config The new configuration to be used.
            * @returns True if all settings could be successfully applied. 
            */
            public static Reset ($config: UnityEngine.AudioConfiguration) : boolean
            public static add_OnAudioConfigurationChanged ($value: UnityEngine.AudioSettings.AudioConfigurationChangeHandler) : void
            public static remove_OnAudioConfigurationChanged ($value: UnityEngine.AudioSettings.AudioConfigurationChangeHandler) : void
            public constructor ()
        }
        /** These are speaker types defined for use with AudioSettings.speakerMode.
        */
        enum AudioSpeakerMode
        { Raw = 0, Mono = 1, Stereo = 2, Quad = 3, Surround = 4, Mode5point1 = 5, Mode7point1 = 6, Prologic = 7 }
        /** Specifies the current properties or desired properties to be set for the audio system.
        */
        class AudioConfiguration extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The current speaker mode used by the audio output device.
            */
            public speakerMode : UnityEngine.AudioSpeakerMode
            /** The length of the DSP buffer in samples determining the latency of sounds by the audio output device.
            */
            public dspBufferSize : number
            /** The current sample rate of the audio output device used.
            */
            public sampleRate : number
            /** The current maximum number of simultaneously audible sounds in the game.
            */
            public numRealVoices : number
            /** The  maximum number of managed sounds in the game. Beyond this limit sounds will simply stop playing.
            */
            public numVirtualVoices : number
        }
        class AudioBehaviour extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** A representation of audio sources in 3D.
        */
        class AudioSource extends UnityEngine.AudioBehaviour
        {
            protected [__keep_incompatibility]: never;
            /** The volume of the audio source (0.0 to 1.0).
            */
            public get volume(): number;
            public set volume(value: number);
            /** The pitch of the audio source.
            */
            public get pitch(): number;
            public set pitch(value: number);
            /** Playback position in seconds.
            */
            public get time(): number;
            public set time(value: number);
            /** Playback position in PCM samples.
            */
            public get timeSamples(): number;
            public set timeSamples(value: number);
            /** The default AudioClip to play.
            */
            public get clip(): UnityEngine.AudioClip;
            public set clip(value: UnityEngine.AudioClip);
            /** The target group to which the AudioSource should route its signal.
            */
            public get outputAudioMixerGroup(): UnityEngine.Audio.AudioMixerGroup;
            public set outputAudioMixerGroup(value: UnityEngine.Audio.AudioMixerGroup);
            /** Is the clip playing right now (Read Only)?
            */
            public get isPlaying(): boolean;
            /** True if all sounds played by the AudioSource (main sound started by Play() or playOnAwake as well as one-shots) are culled by the audio system.
            */
            public get isVirtual(): boolean;
            /** Is the audio clip looping?
            */
            public get loop(): boolean;
            public set loop(value: boolean);
            /** This makes the audio source not take into account the volume of the audio listener.
            */
            public get ignoreListenerVolume(): boolean;
            public set ignoreListenerVolume(value: boolean);
            /** If set to true, the audio source will automatically start playing on awake.
            */
            public get playOnAwake(): boolean;
            public set playOnAwake(value: boolean);
            /** Allows AudioSource to play even though AudioListener.pause is set to true. This is useful for the menu element sounds or background music in pause menus.
            */
            public get ignoreListenerPause(): boolean;
            public set ignoreListenerPause(value: boolean);
            /** Whether the Audio Source should be updated in the fixed or dynamic update.
            */
            public get velocityUpdateMode(): UnityEngine.AudioVelocityUpdateMode;
            public set velocityUpdateMode(value: UnityEngine.AudioVelocityUpdateMode);
            /** Pans a playing sound in a stereo way (left or right). This only applies to sounds that are Mono or Stereo.
            */
            public get panStereo(): number;
            public set panStereo(value: number);
            /** Sets how much this AudioSource is affected by 3D spatialisation calculations (attenuation, doppler etc). 0.0 makes the sound full 2D, 1.0 makes it full 3D.
            */
            public get spatialBlend(): number;
            public set spatialBlend(value: number);
            /** Enables or disables spatialization.
            */
            public get spatialize(): boolean;
            public set spatialize(value: boolean);
            /** Determines if the spatializer effect is inserted before or after the effect filters.
            */
            public get spatializePostEffects(): boolean;
            public set spatializePostEffects(value: boolean);
            /** The amount by which the signal from the AudioSource will be mixed into the global reverb associated with the Reverb Zones.
            */
            public get reverbZoneMix(): number;
            public set reverbZoneMix(value: number);
            /** Bypass effects (Applied from filter components or global listener filters).
            */
            public get bypassEffects(): boolean;
            public set bypassEffects(value: boolean);
            /** When set global effects on the AudioListener will not be applied to the audio signal generated by the AudioSource. Does not apply if the AudioSource is playing into a mixer group.
            */
            public get bypassListenerEffects(): boolean;
            public set bypassListenerEffects(value: boolean);
            /** When set doesn't route the signal from an AudioSource into the global reverb associated with reverb zones.
            */
            public get bypassReverbZones(): boolean;
            public set bypassReverbZones(value: boolean);
            /** Sets the Doppler scale for this AudioSource.
            */
            public get dopplerLevel(): number;
            public set dopplerLevel(value: number);
            /** Sets the spread angle (in degrees) of a 3d stereo or multichannel sound in speaker space.
            */
            public get spread(): number;
            public set spread(value: number);
            /** Sets the priority of the AudioSource.
            */
            public get priority(): number;
            public set priority(value: number);
            /** Un- / Mutes the AudioSource. Mute sets the volume=0, Un-Mute restore the original volume.
            */
            public get mute(): boolean;
            public set mute(value: boolean);
            /** Within the Min distance the AudioSource will cease to grow louder in volume.
            */
            public get minDistance(): number;
            public set minDistance(value: number);
            /** (Logarithmic rolloff) MaxDistance is the distance a sound stops attenuating at.
            */
            public get maxDistance(): number;
            public set maxDistance(value: number);
            /** Sets/Gets how the AudioSource attenuates over distance.
            */
            public get rolloffMode(): UnityEngine.AudioRolloffMode;
            public set rolloffMode(value: UnityEngine.AudioRolloffMode);
            /** Plays the clip.
            * @param delay Deprecated. Delay in number of samples, assuming a 44100Hz sample rate (meaning that Play(44100) will delay the playing by exactly 1 sec).
            */
            public Play () : void
            /** Plays the clip.
            * @param delay Deprecated. Delay in number of samples, assuming a 44100Hz sample rate (meaning that Play(44100) will delay the playing by exactly 1 sec).
            */
            public Play ($delay: bigint) : void
            /** Plays the clip with a delay specified in seconds. Users are advised to use this function instead of the old Play(delay) function that took a delay specified in samples relative to a reference rate of 44.1 kHz as an argument.
            * @param delay Delay time specified in seconds.
            */
            public PlayDelayed ($delay: number) : void
            /** Plays the clip at a specific time on the absolute time-line that AudioSettings.dspTime reads from.
            * @param time Time in seconds on the absolute time-line that AudioSettings.dspTime refers to for when the sound should start playing.
            */
            public PlayScheduled ($time: number) : void
            /** Plays an AudioClip, and scales the AudioSource volume by volumeScale.
            * @param clip The clip being played.
            * @param volumeScale The scale of the volume (0-1).
            */
            public PlayOneShot ($clip: UnityEngine.AudioClip) : void
            /** Plays an AudioClip, and scales the AudioSource volume by volumeScale.
            * @param clip The clip being played.
            * @param volumeScale The scale of the volume (0-1).
            */
            public PlayOneShot ($clip: UnityEngine.AudioClip, $volumeScale: number) : void
            /** Changes the time at which a sound that has already been scheduled to play will start.
            * @param time Time in seconds.
            */
            public SetScheduledStartTime ($time: number) : void
            /** Changes the time at which a sound that has already been scheduled to play will end. Notice that depending on the timing not all rescheduling requests can be fulfilled.
            * @param time Time in seconds.
            */
            public SetScheduledEndTime ($time: number) : void
            public Stop () : void
            public Pause () : void
            public UnPause () : void
            /** Plays an AudioClip at a given position in world space.
            * @param clip Audio data to play.
            * @param position Position in world space from which sound originates.
            * @param volume Playback volume.
            */
            public static PlayClipAtPoint ($clip: UnityEngine.AudioClip, $position: UnityEngine.Vector3) : void
            /** Plays an AudioClip at a given position in world space.
            * @param clip Audio data to play.
            * @param position Position in world space from which sound originates.
            * @param volume Playback volume.
            */
            public static PlayClipAtPoint ($clip: UnityEngine.AudioClip, $position: UnityEngine.Vector3, $volume: number) : void
            /** Set the custom curve for the given AudioSourceCurveType.
            * @param type The curve type that should be set.
            * @param curve The curve that should be applied to the given curve type.
            */
            public SetCustomCurve ($type: UnityEngine.AudioSourceCurveType, $curve: UnityEngine.AnimationCurve) : void
            /** Get the current custom curve for the given AudioSourceCurveType.
            * @param type The curve type to get.
            * @returns The custom AnimationCurve corresponding to the given curve type. 
            */
            public GetCustomCurve ($type: UnityEngine.AudioSourceCurveType) : UnityEngine.AnimationCurve
            /** Provides a block of the currently playing source's output data.
            * @param samples The array to populate with audio samples. Its length must be a power of 2.
            * @param channel The channel to sample from.
            */
            public GetOutputData ($samples: System.Array$1<number>, $channel: number) : void
            /** Provides a block of the currently playing audio source's spectrum data.
            * @param samples The array to populate with audio samples. Its length must be a power of 2.
            * @param channel The channel to sample from.
            * @param window The FFTWindow type to use when sampling.
            */
            public GetSpectrumData ($samples: System.Array$1<number>, $channel: number, $window: UnityEngine.FFTWindow) : void
            /** Sets a user-defined parameter of a custom spatializer effect that is attached to an AudioSource.
            * @param index Zero-based index of user-defined parameter to be set.
            * @param value New value of the user-defined parameter.
            * @returns True, if the parameter could be set. 
            */
            public SetSpatializerFloat ($index: number, $value: number) : boolean
            /** Reads a user-defined parameter of a custom spatializer effect that is attached to an AudioSource.
            * @param index Zero-based index of user-defined parameter to be read.
            * @param value Return value of the user-defined parameter that is read.
            * @returns True, if the parameter could be read. 
            */
            public GetSpatializerFloat ($index: number, $value: $Ref<number>) : boolean
            /** Reads a user-defined parameter of a custom ambisonic decoder effect that is attached to an AudioSource.
            * @param index Zero-based index of user-defined parameter to be read.
            * @param value Return value of the user-defined parameter that is read.
            * @returns True, if the parameter could be read. 
            */
            public GetAmbisonicDecoderFloat ($index: number, $value: $Ref<number>) : boolean
            /** Sets a user-defined parameter of a custom ambisonic decoder effect that is attached to an AudioSource.
            * @param index Zero-based index of user-defined parameter to be set.
            * @param value New value of the user-defined parameter.
            * @returns True, if the parameter could be set. 
            */
            public SetAmbisonicDecoderFloat ($index: number, $value: number) : boolean
            public constructor ()
        }
        /** A container for audio data.
        */
        class AudioClip extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The length of the audio clip in seconds. (Read Only)
            */
            public get length(): number;
            /** The length of the audio clip in samples. (Read Only)
            */
            public get samples(): number;
            /** The number of channels in the audio clip. (Read Only)
            */
            public get channels(): number;
            /** The sample frequency of the clip in Hertz. (Read Only)
            */
            public get frequency(): number;
            /** The load type of the clip (read-only).
            */
            public get loadType(): UnityEngine.AudioClipLoadType;
            /** Preloads audio data of the clip when the clip asset is loaded. When this flag is off, scripts have to call AudioClip.LoadAudioData() to load the data before the clip can be played. Properties like length, channels and format are available before the audio data has been loaded.
            */
            public get preloadAudioData(): boolean;
            /** Returns true if this audio clip is ambisonic (read-only).
            */
            public get ambisonic(): boolean;
            /** Corresponding to the "Load In Background" flag in the inspector, when this flag is set, the loading will happen delayed without blocking the main thread.
            */
            public get loadInBackground(): boolean;
            /** Returns the current load state of the audio data associated with an AudioClip.
            */
            public get loadState(): UnityEngine.AudioDataLoadState;
            public LoadAudioData () : boolean
            public UnloadAudioData () : boolean
            /** Fills an array with sample data from the clip.
            */
            public GetData ($data: System.Array$1<number>, $offsetSamples: number) : boolean
            /** Set sample data in a clip.
            */
            public SetData ($data: System.Array$1<number>, $offsetSamples: number) : boolean
            /** Creates a user AudioClip with a name and with the given length in samples, channels and frequency.
            * @param name Name of clip.
            * @param lengthSamples Number of sample frames.
            * @param channels Number of channels per frame.
            * @param frequency Sample frequency of clip.
            * @param _3D Audio clip is played back in 3D.
            * @param stream True if clip is streamed, that is if the pcmreadercallback generates data on the fly.
            * @param pcmreadercallback This callback is invoked to generate a block of sample data. Non-streamed clips call this only once at creation time while streamed clips call this continuously.
            * @param pcmsetpositioncallback This callback is invoked whenever the clip loops or changes playback position.
            * @returns A reference to the created AudioClip. 
            */
            public static Create ($name: string, $lengthSamples: number, $channels: number, $frequency: number, $stream: boolean) : UnityEngine.AudioClip
            public static Create ($name: string, $lengthSamples: number, $channels: number, $frequency: number, $stream: boolean, $pcmreadercallback: UnityEngine.AudioClip.PCMReaderCallback) : UnityEngine.AudioClip
            public static Create ($name: string, $lengthSamples: number, $channels: number, $frequency: number, $stream: boolean, $pcmreadercallback: UnityEngine.AudioClip.PCMReaderCallback, $pcmsetpositioncallback: UnityEngine.AudioClip.PCMSetPositionCallback) : UnityEngine.AudioClip
        }
        /** Describes when an AudioSource or AudioListener is updated.
        */
        enum AudioVelocityUpdateMode
        { Auto = 0, Fixed = 1, Dynamic = 2 }
        /** This defines the curve type of the different custom curves that can be queried and set within the AudioSource.
        */
        enum AudioSourceCurveType
        { CustomRolloff = 0, SpatialBlend = 1, ReverbZoneMix = 2, Spread = 3 }
        /** Rolloff modes that a 3D sound can have in an audio source.
        */
        enum AudioRolloffMode
        { Logarithmic = 0, Linear = 1, Custom = 2 }
        /** Spectrum analysis windowing types.
        */
        enum FFTWindow
        { Rectangular = 0, Triangle = 1, Hamming = 2, Hanning = 3, Blackman = 4, BlackmanHarris = 5 }
        /** The Audio Low Pass Filter passes low frequencies of an AudioSource or all sounds reaching an AudioListener, while removing frequencies higher than the Cutoff Frequency.
        */
        class AudioLowPassFilter extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Returns or sets the current custom frequency cutoff curve.
            */
            public get customCutoffCurve(): UnityEngine.AnimationCurve;
            public set customCutoffCurve(value: UnityEngine.AnimationCurve);
            /** Lowpass cutoff frequency in hz. 10.0 to 22000.0. Default = 5000.0.
            */
            public get cutoffFrequency(): number;
            public set cutoffFrequency(value: number);
            /** Determines how much the filter's self-resonance is dampened.
            */
            public get lowpassResonanceQ(): number;
            public set lowpassResonanceQ(value: number);
            public constructor ()
        }
        /** The Audio High Pass Filter passes high frequencies of an AudioSource, and cuts off signals with frequencies lower than the Cutoff Frequency.
        */
        class AudioHighPassFilter extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Highpass cutoff frequency in hz. 10.0 to 22000.0. Default = 5000.0.
            */
            public get cutoffFrequency(): number;
            public set cutoffFrequency(value: number);
            /** Determines how much the filter's self-resonance isdampened.
            */
            public get highpassResonanceQ(): number;
            public set highpassResonanceQ(value: number);
            public constructor ()
        }
        /** The Audio Reverb Filter takes an Audio Clip and distorts it to create a custom reverb effect.
        */
        class AudioReverbFilter extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Set/Get reverb preset properties.
            */
            public get reverbPreset(): UnityEngine.AudioReverbPreset;
            public set reverbPreset(value: UnityEngine.AudioReverbPreset);
            /** Mix level of dry signal in output in millibels (mB). Ranges from -10000.0 to 0.0. Default is 0.
            */
            public get dryLevel(): number;
            public set dryLevel(value: number);
            /** Room effect level at low frequencies in millibels (mB). Ranges from -10000.0 to 0.0. Default is 0.0.
            */
            public get room(): number;
            public set room(value: number);
            /** Room effect high-frequency level re. low frequency level in millibels (mB). Ranges from -10000.0 to 0.0. Default is 0.0.
            */
            public get roomHF(): number;
            public set roomHF(value: number);
            /** Reverberation decay time at low-frequencies in seconds. Ranges from 0.1 to 20.0. Default is 1.0.
            */
            public get decayTime(): number;
            public set decayTime(value: number);
            /** Decay HF Ratio : High-frequency to low-frequency decay time ratio. Ranges from 0.1 to 2.0. Default is 0.5.
            */
            public get decayHFRatio(): number;
            public set decayHFRatio(value: number);
            /** Early reflections level relative to room effect in millibels (mB). Ranges from -10000.0 to 1000.0. Default is -10000.0.
            */
            public get reflectionsLevel(): number;
            public set reflectionsLevel(value: number);
            /** Late reverberation level relative to room effect in millibels (mB). Ranges from -10000.0 to 2000.0. Default is 0.0.
            */
            public get reflectionsDelay(): number;
            public set reflectionsDelay(value: number);
            /** Late reverberation level relative to room effect in millibels (mB). Ranges from -10000.0 to 2000.0. Default is 0.0.
            */
            public get reverbLevel(): number;
            public set reverbLevel(value: number);
            /** Late reverberation delay time relative to first reflection in seconds. Ranges from 0.0 to 0.1. Default is 0.04.
            */
            public get reverbDelay(): number;
            public set reverbDelay(value: number);
            /** Reverberation diffusion (echo density) in percent. Ranges from 0.0 to 100.0. Default is 100.0.
            */
            public get diffusion(): number;
            public set diffusion(value: number);
            /** Reverberation density (modal density) in percent. Ranges from 0.0 to 100.0. Default is 100.0.
            */
            public get density(): number;
            public set density(value: number);
            /** Reference high frequency in hertz (Hz). Ranges from 1000.0 to 20000.0. Default is 5000.0.
            */
            public get hfReference(): number;
            public set hfReference(value: number);
            /** Room effect low-frequency level in millibels (mB). Ranges from -10000.0 to 0.0. Default is 0.0.
            */
            public get roomLF(): number;
            public set roomLF(value: number);
            /** Reference low-frequency in hertz (Hz). Ranges from 20.0 to 1000.0. Default is 250.0.
            */
            public get lfReference(): number;
            public set lfReference(value: number);
            public constructor ()
        }
        /** Reverb presets used by the Reverb Zone class and the audio reverb filter.
        */
        enum AudioReverbPreset
        { Off = 0, Generic = 1, PaddedCell = 2, Room = 3, Bathroom = 4, Livingroom = 5, Stoneroom = 6, Auditorium = 7, Concerthall = 8, Cave = 9, Arena = 10, Hangar = 11, CarpetedHallway = 12, Hallway = 13, StoneCorridor = 14, Alley = 15, Forest = 16, City = 17, Mountains = 18, Quarry = 19, Plain = 20, ParkingLot = 21, SewerPipe = 22, Underwater = 23, Drugged = 24, Dizzy = 25, Psychotic = 26, User = 27 }
        /** Value describing the current load state of the audio data associated with an AudioClip.
        */
        enum AudioDataLoadState
        { Unloaded = 0, Loading = 1, Loaded = 2, Failed = 3 }
        /** An enum containing different compression types.
        */
        enum AudioCompressionFormat
        { PCM = 0, Vorbis = 1, ADPCM = 2, MP3 = 3, VAG = 4, HEVAG = 5, XMA = 6, AAC = 7, GCADPCM = 8, ATRAC9 = 9 }
        /** Determines how the audio clip is loaded in.
        */
        enum AudioClipLoadType
        { DecompressOnLoad = 0, CompressedInMemory = 1, Streaming = 2 }
        /** Representation of a listener in 3D space.
        */
        class AudioListener extends UnityEngine.AudioBehaviour
        {
            protected [__keep_incompatibility]: never;
            /** Controls the game sound volume (0.0 to 1.0).
            */
            public static get volume(): number;
            public static set volume(value: number);
            /** The paused state of the audio system.
            */
            public static get pause(): boolean;
            public static set pause(value: boolean);
            /** This lets you set whether the Audio Listener should be updated in the fixed or dynamic update.
            */
            public get velocityUpdateMode(): UnityEngine.AudioVelocityUpdateMode;
            public set velocityUpdateMode(value: UnityEngine.AudioVelocityUpdateMode);
            /** Provides a block of the listener (master)'s output data.
            * @param samples The array to populate with audio samples. Its length must be a power of 2.
            * @param channel The channel to sample from.
            */
            public static GetOutputData ($samples: System.Array$1<number>, $channel: number) : void
            /** Provides a block of the listener (master)'s spectrum data.
            * @param samples The array to populate with audio samples. Its length must be a power of 2.
            * @param channel The channel to sample from.
            * @param window The FFTWindow type to use when sampling.
            */
            public static GetSpectrumData ($samples: System.Array$1<number>, $channel: number, $window: UnityEngine.FFTWindow) : void
            public constructor ()
        }
        /** Reverb Zones are used when you want to create location based ambient effects in the Scene.
        */
        class AudioReverbZone extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The distance from the centerpoint that the reverb will have full effect at. Default = 10.0.
            */
            public get minDistance(): number;
            public set minDistance(value: number);
            /** The distance from the centerpoint that the reverb will not have any effect. Default = 15.0.
            */
            public get maxDistance(): number;
            public set maxDistance(value: number);
            /** Set/Get reverb preset properties.
            */
            public get reverbPreset(): UnityEngine.AudioReverbPreset;
            public set reverbPreset(value: UnityEngine.AudioReverbPreset);
            /** Room effect level (at mid frequencies).
            */
            public get room(): number;
            public set room(value: number);
            /** Relative room effect level at high frequencies.
            */
            public get roomHF(): number;
            public set roomHF(value: number);
            /** Relative room effect level at low frequencies.
            */
            public get roomLF(): number;
            public set roomLF(value: number);
            /** Reverberation decay time at mid frequencies.
            */
            public get decayTime(): number;
            public set decayTime(value: number);
            /** High-frequency to mid-frequency decay time ratio.
            */
            public get decayHFRatio(): number;
            public set decayHFRatio(value: number);
            /** Early reflections level relative to room effect.
            */
            public get reflections(): number;
            public set reflections(value: number);
            /** Initial reflection delay time.
            */
            public get reflectionsDelay(): number;
            public set reflectionsDelay(value: number);
            /** Late reverberation level relative to room effect.
            */
            public get reverb(): number;
            public set reverb(value: number);
            /** Late reverberation delay time relative to initial reflection.
            */
            public get reverbDelay(): number;
            public set reverbDelay(value: number);
            /** Reference high frequency (hz).
            */
            public get HFReference(): number;
            public set HFReference(value: number);
            /** Reference low frequency (hz).
            */
            public get LFReference(): number;
            public set LFReference(value: number);
            /** Value that controls the echo density in the late reverberation decay.
            */
            public get diffusion(): number;
            public set diffusion(value: number);
            /** Value that controls the modal density in the late reverberation decay.
            */
            public get density(): number;
            public set density(value: number);
            public constructor ()
        }
        /** The Audio Distortion Filter distorts the sound from an AudioSource or sounds reaching the AudioListener.
        */
        class AudioDistortionFilter extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Distortion value. 0.0 to 1.0. Default = 0.5.
            */
            public get distortionLevel(): number;
            public set distortionLevel(value: number);
            public constructor ()
        }
        /** The Audio Echo Filter repeats a sound after a given Delay, attenuating the repetitions based on the Decay Ratio.
        */
        class AudioEchoFilter extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Echo delay in ms. 10 to 5000. Default = 500.
            */
            public get delay(): number;
            public set delay(value: number);
            /** Echo decay per delay. 0 to 1. 1.0 = No decay, 0.0 = total decay (i.e. simple 1 line delay). Default = 0.5.
            */
            public get decayRatio(): number;
            public set decayRatio(value: number);
            /** Volume of original signal to pass to output. 0.0 to 1.0. Default = 1.0.
            */
            public get dryMix(): number;
            public set dryMix(value: number);
            /** Volume of echo signal to pass to output. 0.0 to 1.0. Default = 1.0.
            */
            public get wetMix(): number;
            public set wetMix(value: number);
            public constructor ()
        }
        /** The Audio Chorus Filter takes an Audio Clip and processes it creating a chorus effect.
        */
        class AudioChorusFilter extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Volume of original signal to pass to output. 0.0 to 1.0. Default = 0.5.
            */
            public get dryMix(): number;
            public set dryMix(value: number);
            /** Volume of 1st chorus tap. 0.0 to 1.0. Default = 0.5.
            */
            public get wetMix1(): number;
            public set wetMix1(value: number);
            /** Volume of 2nd chorus tap. This tap is 90 degrees out of phase of the first tap. 0.0 to 1.0. Default = 0.5.
            */
            public get wetMix2(): number;
            public set wetMix2(value: number);
            /** Volume of 3rd chorus tap. This tap is 90 degrees out of phase of the second tap. 0.0 to 1.0. Default = 0.5.
            */
            public get wetMix3(): number;
            public set wetMix3(value: number);
            /** Chorus delay in ms. 0.1 to 100.0. Default = 40.0 ms.
            */
            public get delay(): number;
            public set delay(value: number);
            /** Chorus modulation rate in hz. 0.0 to 20.0. Default = 0.8 hz.
            */
            public get rate(): number;
            public set rate(value: number);
            /** Chorus modulation depth. 0.0 to 1.0. Default = 0.03.
            */
            public get depth(): number;
            public set depth(value: number);
            public constructor ()
        }
        /** Use this class to record to an AudioClip using a connected microphone.
        */
        class Microphone extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A list of available microphone devices, identified by name.
            */
            public static get devices(): System.Array$1<string>;
            /** Start Recording with device.
            * @param deviceName The name of the device.
            * @param loop Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.
            * @param lengthSec Is the length of the AudioClip produced by the recording.
            * @param frequency The sample rate of the AudioClip produced by the recording.
            * @returns The function returns null if the recording fails to start. 
            */
            public static Start ($deviceName: string, $loop: boolean, $lengthSec: number, $frequency: number) : UnityEngine.AudioClip
            /** Stops recording.
            * @param deviceName The name of the device.
            */
            public static End ($deviceName: string) : void
            /** Query if a device is currently recording.
            * @param deviceName The name of the device.
            */
            public static IsRecording ($deviceName: string) : boolean
            /** Get the position in samples of the recording.
            * @param deviceName The name of the device.
            */
            public static GetPosition ($deviceName: string) : number
            /** Get the frequency capabilities of a device.
            * @param deviceName The name of the device.
            * @param minFreq Returns the minimum sampling frequency of the device.
            * @param maxFreq Returns the maximum sampling frequency of the device.
            */
            public static GetDeviceCaps ($deviceName: string, $minFreq: $Ref<number>, $maxFreq: $Ref<number>) : void
            public constructor ()
        }
        /** Allow recording the main output of the game or specific groups in the AudioMixer.
        */
        class AudioRenderer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Start () : boolean
            public static Stop () : boolean
            public static GetSampleCountForCaptureFrame () : number
            public static Render ($buffer: Unity.Collections.NativeArray$1<number>) : boolean
            public constructor ()
        }
        /** Base class for texture handling. Contains functionality that is common to both Texture2D and RenderTexture classes.
        */
        class Texture extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Can be used with texture constructors that take a mip count to indicate that all mips should be generated.  The value of this field is -1.
            */
            public static GenerateAllMips : number
            public static get masterTextureLimit(): number;
            public static set masterTextureLimit(value: number);
            /** How many mipmap levels are in this texture (Read Only).
            */
            public get mipmapCount(): number;
            public static get anisotropicFiltering(): UnityEngine.AnisotropicFiltering;
            public static set anisotropicFiltering(value: UnityEngine.AnisotropicFiltering);
            /** Returns the GraphicsFormat format or color format of a texture object.
            */
            public get graphicsFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            /** Width of the texture in pixels. (Read Only)
            */
            public get width(): number;
            public set width(value: number);
            /** Height of the texture in pixels. (Read Only)
            */
            public get height(): number;
            public set height(value: number);
            /** Dimensionality (type) of the texture (Read Only).
            */
            public get dimension(): UnityEngine.Rendering.TextureDimension;
            public set dimension(value: UnityEngine.Rendering.TextureDimension);
            /** Returns true if the Read/Write Enabled checkbox was checked when the texture was imported; otherwise returns false. For a dynamic Texture created from script, always returns true. For additional information, see TextureImporter.isReadable.
            */
            public get isReadable(): boolean;
            /** Texture coordinate wrapping mode.
            */
            public get wrapMode(): UnityEngine.TextureWrapMode;
            public set wrapMode(value: UnityEngine.TextureWrapMode);
            /** Texture U coordinate wrapping mode.
            */
            public get wrapModeU(): UnityEngine.TextureWrapMode;
            public set wrapModeU(value: UnityEngine.TextureWrapMode);
            /** Texture V coordinate wrapping mode.
            */
            public get wrapModeV(): UnityEngine.TextureWrapMode;
            public set wrapModeV(value: UnityEngine.TextureWrapMode);
            /** Texture W coordinate wrapping mode for Texture3D.
            */
            public get wrapModeW(): UnityEngine.TextureWrapMode;
            public set wrapModeW(value: UnityEngine.TextureWrapMode);
            /** Filtering mode of the texture.
            */
            public get filterMode(): UnityEngine.FilterMode;
            public set filterMode(value: UnityEngine.FilterMode);
            /** Anisotropic filtering level of the texture.
            */
            public get anisoLevel(): number;
            public set anisoLevel(value: number);
            /** Mip map bias of the texture.
            */
            public get mipMapBias(): number;
            public set mipMapBias(value: number);
            public get texelSize(): UnityEngine.Vector2;
            /** This counter is incremented when the texture is updated.
            */
            public get updateCount(): number;
            /** The hash value of the Texture.
            */
            public get imageContentsHash(): UnityEngine.Hash128;
            public set imageContentsHash(value: UnityEngine.Hash128);
            /** The total amount of memory that would be used by all textures at mipmap level 0.
            */
            public static get totalTextureMemory(): bigint;
            /** This amount of texture memory would be used before the texture streaming budget is applied.
            */
            public static get desiredTextureMemory(): bigint;
            /** The amount of memory used by textures after the mipmap streaming and budget are applied and loading is complete.
            */
            public static get targetTextureMemory(): bigint;
            /** The amount of memory currently being used by textures.
            */
            public static get currentTextureMemory(): bigint;
            /** Total amount of memory being used by non-streaming textures.
            */
            public static get nonStreamingTextureMemory(): bigint;
            /** How many times has a texture been uploaded due to texture mipmap streaming.
            */
            public static get streamingMipmapUploadCount(): bigint;
            /** Number of renderers registered with the texture streaming system.
            */
            public static get streamingRendererCount(): bigint;
            /** Number of streaming textures.
            */
            public static get streamingTextureCount(): bigint;
            /** Number of non-streaming textures.
            */
            public static get nonStreamingTextureCount(): bigint;
            /** Number of streaming textures with outstanding mipmaps to be loaded.
            */
            public static get streamingTexturePendingLoadCount(): bigint;
            /** Number of streaming textures with mipmaps currently loading.
            */
            public static get streamingTextureLoadingCount(): bigint;
            /** Force streaming textures to load all mipmap levels.
            */
            public static get streamingTextureForceLoadAll(): boolean;
            public static set streamingTextureForceLoadAll(value: boolean);
            /** Force the streaming texture system to discard all unused mipmaps immediately, rather than caching them until the texture memory budget is exceeded.
            */
            public static get streamingTextureDiscardUnusedMips(): boolean;
            public static set streamingTextureDiscardUnusedMips(value: boolean);
            /** Allow texture creation to occur on any thread (rather than the dedicated render thread).
            */
            public static get allowThreadedTextureCreation(): boolean;
            public static set allowThreadedTextureCreation(value: boolean);
            /** Sets Anisotropic limits.
            */
            public static SetGlobalAnisotropicFilteringLimits ($forcedMin: number, $globalMax: number) : void
            public GetNativeTexturePtr () : System.IntPtr
            public IncrementUpdateCount () : void
            public static SetStreamingTextureMaterialDebugProperties () : void
        }
        /** MovieTexture has been removed. Use VideoPlayer instead.
        */
        class MovieTexture extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
        }
        enum WebCamFlags
        { FrontFacing = 1, AutoFocusPointSupported = 2 }
        /** Enum representing the different types of web camera device.
        */
        enum WebCamKind
        { WideAngle = 1, Telephoto = 2, ColorAndDepth = 3 }
        /** A structure describing the webcam device.
        */
        class WebCamDevice extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** A human-readable name of the device. Varies across different systems.
            */
            public get name(): string;
            /** True if camera faces the same direction a screen does, false otherwise.
            */
            public get isFrontFacing(): boolean;
            /** Property of type WebCamKind denoting the kind of webcam device.
            */
            public get kind(): UnityEngine.WebCamKind;
            /** A string identifier used to create a depth data based WebCamTexture.
            */
            public get depthCameraName(): string;
            /** Returns true if the camera supports automatic focusing on points of interest and false otherwise.
            */
            public get isAutoFocusPointSupported(): boolean;
            /** Possible WebCamTexture resolutions for this device.
            */
            public get availableResolutions(): System.Array$1<UnityEngine.Resolution>;
        }
        /** Represents a display resolution.
        */
        class Resolution extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Resolution width in pixels.
            */
            public get width(): number;
            public set width(value: number);
            /** Resolution height in pixels.
            */
            public get height(): number;
            public set height(value: number);
            /** Resolution's vertical refresh rate in Hz.
            */
            public get refreshRate(): number;
            public set refreshRate(value: number);
        }
        /** WebCam Textures are textures onto which the live video input is rendered.
        */
        class WebCamTexture extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** This property allows you to set/get the auto focus point of the camera. This works only on Android and iOS devices.
            */
            public get autoFocusPoint(): UnityEngine.Vector2 | null;
            public set autoFocusPoint(value: UnityEngine.Vector2 | null);
            /** This property is true if the texture is based on depth data.
            */
            public get isDepth(): boolean;
            /** Returns if the camera is currently playing.
            */
            public get isPlaying(): boolean;
            /** Set this to specify the name of the device to use.
            */
            public get deviceName(): string;
            public set deviceName(value: string);
            /** Set the requested frame rate of the camera device (in frames per second).
            */
            public get requestedFPS(): number;
            public set requestedFPS(value: number);
            /** Set the requested width of the camera device.
            */
            public get requestedWidth(): number;
            public set requestedWidth(value: number);
            /** Set the requested height of the camera device.
            */
            public get requestedHeight(): number;
            public set requestedHeight(value: number);
            /** Return a list of available devices.
            */
            public static get devices(): System.Array$1<UnityEngine.WebCamDevice>;
            /** Returns an clockwise angle (in degrees), which can be used to rotate a polygon so camera contents are shown in correct orientation.
            */
            public get videoRotationAngle(): number;
            /** Returns if the texture image is vertically flipped.
            */
            public get videoVerticallyMirrored(): boolean;
            /** Did the video buffer update this frame?
            */
            public get didUpdateThisFrame(): boolean;
            public Play () : void
            public Pause () : void
            public Stop () : void
            /** Returns pixel color at coordinates (x, y).
            */
            public GetPixel ($x: number, $y: number) : UnityEngine.Color
            public GetPixels () : System.Array$1<UnityEngine.Color>
            /** Get a block of pixel colors.
            */
            public GetPixels ($x: number, $y: number, $blockWidth: number, $blockHeight: number) : System.Array$1<UnityEngine.Color>
            /** Returns the pixels data in raw format.
            * @param colors Optional array to receive pixel data.
            */
            public GetPixels32 ($colors: System.Array$1<UnityEngine.Color32>) : System.Array$1<UnityEngine.Color32>
            /** Returns the pixels data in raw format.
            * @param colors Optional array to receive pixel data.
            */
            public GetPixels32 () : System.Array$1<UnityEngine.Color32>
            public constructor ($deviceName: string, $requestedWidth: number, $requestedHeight: number, $requestedFPS: number)
            public constructor ($deviceName: string, $requestedWidth: number, $requestedHeight: number)
            public constructor ($deviceName: string)
            public constructor ($requestedWidth: number, $requestedHeight: number, $requestedFPS: number)
            public constructor ($requestedWidth: number, $requestedHeight: number)
            public constructor ()
        }
        /** Representation of 2D vectors and points.
        */
        class Vector2 extends System.ValueType implements System.IEquatable$1<UnityEngine.Vector2>
        {
            protected [__keep_incompatibility]: never;
            /** X component of the vector.
            */
            public x : number
            /** Y component of the vector.
            */
            public y : number
            public static kEpsilon : number
            public static kEpsilonNormalSqrt : number
            /** Returns this vector with a magnitude of 1 (Read Only).
            */
            public get normalized(): UnityEngine.Vector2;
            /** Returns the length of this vector (Read Only).
            */
            public get magnitude(): number;
            /** Returns the squared length of this vector (Read Only).
            */
            public get sqrMagnitude(): number;
            /** Shorthand for writing Vector2(0, 0).
            */
            public static get zero(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(1, 1).
            */
            public static get one(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(0, 1).
            */
            public static get up(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(0, -1).
            */
            public static get down(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(-1, 0).
            */
            public static get left(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(1, 0).
            */
            public static get right(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(float.PositiveInfinity, float.PositiveInfinity).
            */
            public static get positiveInfinity(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(float.NegativeInfinity, float.NegativeInfinity).
            */
            public static get negativeInfinity(): UnityEngine.Vector2;
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Set x and y components of an existing Vector2.
            */
            public Set ($newX: number, $newY: number) : void
            /** Linearly interpolates between vectors a and b by t.
            */
            public static Lerp ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2, $t: number) : UnityEngine.Vector2
            /** Linearly interpolates between vectors a and b by t.
            */
            public static LerpUnclamped ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2, $t: number) : UnityEngine.Vector2
            /** Moves a point current towards target.
            */
            public static MoveTowards ($current: UnityEngine.Vector2, $target: UnityEngine.Vector2, $maxDistanceDelta: number) : UnityEngine.Vector2
            /** Multiplies two vectors component-wise.
            */
            public static Scale ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Multiplies every component of this vector by the same component of scale.
            */
            public Scale ($scale: UnityEngine.Vector2) : void
            public Normalize () : void
            public ToString () : string
            /** Returns a nicely formatted string for this vector.
            */
            public ToString ($format: string) : string
            /** Returns true if the given vector is exactly equal to this vector.
            */
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Vector2) : boolean
            /** Reflects a vector off the vector defined by a normal.
            */
            public static Reflect ($inDirection: UnityEngine.Vector2, $inNormal: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Returns the 2D vector perpendicular to this 2D vector. The result is always rotated 90-degrees in a counter-clockwise direction for a 2D coordinate system where the positive Y axis goes up.
            * @param inDirection The input direction.
            * @returns The perpendicular direction. 
            */
            public static Perpendicular ($inDirection: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Dot Product of two vectors.
            */
            public static Dot ($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2) : number
            /** Returns the unsigned angle in degrees between from and to.
            * @param from The vector from which the angular difference is measured.
            * @param to The vector to which the angular difference is measured.
            */
            public static Angle ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2) : number
            /** Returns the signed angle in degrees between from and to.
            * @param from The vector from which the angular difference is measured.
            * @param to The vector to which the angular difference is measured.
            */
            public static SignedAngle ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2) : number
            /** Returns the distance between a and b.
            */
            public static Distance ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : number
            /** Returns a copy of vector with its magnitude clamped to maxLength.
            */
            public static ClampMagnitude ($vector: UnityEngine.Vector2, $maxLength: number) : UnityEngine.Vector2
            public static SqrMagnitude ($a: UnityEngine.Vector2) : number
            public SqrMagnitude () : number
            /** Returns a vector that is made from the smallest components of two vectors.
            */
            public static Min ($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Returns a vector that is made from the largest components of two vectors.
            */
            public static Max ($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Gradually changes a vector towards a desired goal over time.
            * @param current The current position.
            * @param target The position we are trying to reach.
            * @param currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param maxSpeed Optionally allows you to clamp the maximum speed.
            * @param deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: UnityEngine.Vector2, $target: UnityEngine.Vector2, $currentVelocity: $Ref<UnityEngine.Vector2>, $smoothTime: number, $maxSpeed: number) : UnityEngine.Vector2
            /** Gradually changes a vector towards a desired goal over time.
            * @param current The current position.
            * @param target The position we are trying to reach.
            * @param currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param maxSpeed Optionally allows you to clamp the maximum speed.
            * @param deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: UnityEngine.Vector2, $target: UnityEngine.Vector2, $currentVelocity: $Ref<UnityEngine.Vector2>, $smoothTime: number) : UnityEngine.Vector2
            /** Gradually changes a vector towards a desired goal over time.
            * @param current The current position.
            * @param target The position we are trying to reach.
            * @param currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param maxSpeed Optionally allows you to clamp the maximum speed.
            * @param deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: UnityEngine.Vector2, $target: UnityEngine.Vector2, $currentVelocity: $Ref<UnityEngine.Vector2>, $smoothTime: number, $maxSpeed: number, $deltaTime: number) : UnityEngine.Vector2
            public static op_Addition ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_Subtraction ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_Multiply ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_Division ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_UnaryNegation ($a: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_Multiply ($a: UnityEngine.Vector2, $d: number) : UnityEngine.Vector2
            public static op_Multiply ($d: number, $a: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_Division ($a: UnityEngine.Vector2, $d: number) : UnityEngine.Vector2
            public static op_Equality ($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2) : boolean
            public static op_Inequality ($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2) : boolean
            public static op_Implicit ($v: UnityEngine.Vector3) : UnityEngine.Vector2
            public static op_Implicit ($v: UnityEngine.Vector2) : UnityEngine.Vector3
            public constructor ($x: number, $y: number)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** Representation of RGBA colors.
        */
        class Color extends System.ValueType implements System.IEquatable$1<UnityEngine.Color>
        {
            protected [__keep_incompatibility]: never;
            /** Red component of the color.
            */
            public r : number
            /** Green component of the color.
            */
            public g : number
            /** Blue component of the color.
            */
            public b : number
            /** Alpha component of the color (0 is transparent, 1 is opaque).
            */
            public a : number
            /** Solid red. RGBA is (1, 0, 0, 1).
            */
            public static get red(): UnityEngine.Color;
            /** Solid green. RGBA is (0, 1, 0, 1).
            */
            public static get green(): UnityEngine.Color;
            /** Solid blue. RGBA is (0, 0, 1, 1).
            */
            public static get blue(): UnityEngine.Color;
            /** Solid white. RGBA is (1, 1, 1, 1).
            */
            public static get white(): UnityEngine.Color;
            /** Solid black. RGBA is (0, 0, 0, 1).
            */
            public static get black(): UnityEngine.Color;
            /** Yellow. RGBA is (1, 0.92, 0.016, 1), but the color is nice to look at!
            */
            public static get yellow(): UnityEngine.Color;
            /** Cyan. RGBA is (0, 1, 1, 1).
            */
            public static get cyan(): UnityEngine.Color;
            /** Magenta. RGBA is (1, 0, 1, 1).
            */
            public static get magenta(): UnityEngine.Color;
            /** Gray. RGBA is (0.5, 0.5, 0.5, 1).
            */
            public static get gray(): UnityEngine.Color;
            /** English spelling for gray. RGBA is the same (0.5, 0.5, 0.5, 1).
            */
            public static get grey(): UnityEngine.Color;
            /** Completely transparent. RGBA is (0, 0, 0, 0).
            */
            public static get clear(): UnityEngine.Color;
            /** The grayscale value of the color. (Read Only)
            */
            public get grayscale(): number;
            /** A linear value of an sRGB color.
            */
            public get linear(): UnityEngine.Color;
            /** A version of the color that has had the gamma curve applied.
            */
            public get gamma(): UnityEngine.Color;
            /** Returns the maximum color component value: Max(r,g,b).
            */
            public get maxColorComponent(): number;
            public ToString () : string
            /** Returns a nicely formatted string of this color.
            */
            public ToString ($format: string) : string
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Color) : boolean
            public static op_Addition ($a: UnityEngine.Color, $b: UnityEngine.Color) : UnityEngine.Color
            public static op_Subtraction ($a: UnityEngine.Color, $b: UnityEngine.Color) : UnityEngine.Color
            public static op_Multiply ($a: UnityEngine.Color, $b: UnityEngine.Color) : UnityEngine.Color
            public static op_Multiply ($a: UnityEngine.Color, $b: number) : UnityEngine.Color
            public static op_Multiply ($b: number, $a: UnityEngine.Color) : UnityEngine.Color
            public static op_Division ($a: UnityEngine.Color, $b: number) : UnityEngine.Color
            public static op_Equality ($lhs: UnityEngine.Color, $rhs: UnityEngine.Color) : boolean
            public static op_Inequality ($lhs: UnityEngine.Color, $rhs: UnityEngine.Color) : boolean
            /** Linearly interpolates between colors a and b by t.
            * @param a Color a.
            * @param b Color b.
            * @param t Float for combining a and b.
            */
            public static Lerp ($a: UnityEngine.Color, $b: UnityEngine.Color, $t: number) : UnityEngine.Color
            /** Linearly interpolates between colors a and b by t.
            */
            public static LerpUnclamped ($a: UnityEngine.Color, $b: UnityEngine.Color, $t: number) : UnityEngine.Color
            public static op_Implicit ($c: UnityEngine.Color) : UnityEngine.Vector4
            public static op_Implicit ($v: UnityEngine.Vector4) : UnityEngine.Color
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Calculates the hue, saturation and value of an RGB input color.
            * @param rgbColor An input color.
            * @param H Output variable for hue.
            * @param S Output variable for saturation.
            * @param V Output variable for value.
            */
            public static RGBToHSV ($rgbColor: UnityEngine.Color, $H: $Ref<number>, $S: $Ref<number>, $V: $Ref<number>) : void
            /** Creates an RGB colour from HSV input.
            * @param H Hue [0..1].
            * @param S Saturation [0..1].
            * @param V Brightness value [0..1].
            * @param hdr Output HDR colours. If true, the returned colour will not be clamped to [0..1].
            * @returns An opaque colour with HSV matching the input. 
            */
            public static HSVToRGB ($H: number, $S: number, $V: number) : UnityEngine.Color
            /** Creates an RGB colour from HSV input.
            * @param H Hue [0..1].
            * @param S Saturation [0..1].
            * @param V Brightness value [0..1].
            * @param hdr Output HDR colours. If true, the returned colour will not be clamped to [0..1].
            * @returns An opaque colour with HSV matching the input. 
            */
            public static HSVToRGB ($H: number, $S: number, $V: number, $hdr: boolean) : UnityEngine.Color
            public constructor ($r: number, $g: number, $b: number, $a: number)
            public constructor ($r: number, $g: number, $b: number)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** Representation of RGBA colors in 32 bit format.
        */
        class Color32 extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Red component of the color.
            */
            public r : number
            /** Green component of the color.
            */
            public g : number
            /** Blue component of the color.
            */
            public b : number
            /** Alpha component of the color.
            */
            public a : number
            public static op_Implicit ($c: UnityEngine.Color) : UnityEngine.Color32
            public static op_Implicit ($c: UnityEngine.Color32) : UnityEngine.Color
            /** Linearly interpolates between colors a and b by t.
            */
            public static Lerp ($a: UnityEngine.Color32, $b: UnityEngine.Color32, $t: number) : UnityEngine.Color32
            /** Linearly interpolates between colors a and b by t.
            */
            public static LerpUnclamped ($a: UnityEngine.Color32, $b: UnityEngine.Color32, $t: number) : UnityEngine.Color32
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public ToString () : string
            /** Returns a nicely formatted string of this color.
            */
            public ToString ($format: string) : string
            public constructor ($r: number, $g: number, $b: number, $a: number)
            public constructor ()
        }
        /** A pair of SphereColliders used to define shapes for Cloth objects to collide against.
        */
        class ClothSphereColliderPair extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The first SphereCollider of a ClothSphereColliderPair.
            */
            public get first(): UnityEngine.SphereCollider;
            public set first(value: UnityEngine.SphereCollider);
            /** The second SphereCollider of a ClothSphereColliderPair.
            */
            public get second(): UnityEngine.SphereCollider;
            public set second(value: UnityEngine.SphereCollider);
            public constructor ($a: UnityEngine.SphereCollider)
            public constructor ($a: UnityEngine.SphereCollider, $b: UnityEngine.SphereCollider)
            public constructor ()
        }
        /** A base class of all colliders.
        */
        class Collider extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Enabled Colliders will collide with other Colliders, disabled Colliders won't.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The rigidbody the collider is attached to.
            */
            public get attachedRigidbody(): UnityEngine.Rigidbody;
            /** Is the collider a trigger?
            */
            public get isTrigger(): boolean;
            public set isTrigger(value: boolean);
            /** Contact offset value of this collider.
            */
            public get contactOffset(): number;
            public set contactOffset(value: number);
            /** The world space bounding volume of the collider (Read Only).
            */
            public get bounds(): UnityEngine.Bounds;
            /** The shared physic material of this collider.
            */
            public get sharedMaterial(): UnityEngine.PhysicMaterial;
            public set sharedMaterial(value: UnityEngine.PhysicMaterial);
            /** The material used by the collider.
            */
            public get material(): UnityEngine.PhysicMaterial;
            public set material(value: UnityEngine.PhysicMaterial);
            /** Returns a point on the collider that is closest to a given location.
            * @param position Location you want to find the closest point to.
            * @returns The point on the collider that is closest to the specified location. 
            */
            public ClosestPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Casts a Ray that ignores all Colliders except this one.
            * @param ray The starting point and direction of the ray.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit.
            * @param maxDistance The max length of the ray.
            * @returns True when the ray intersects the collider, otherwise false. 
            */
            public Raycast ($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            /** The closest point to the bounding box of the attached collider.
            */
            public ClosestPointOnBounds ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            public constructor ()
        }
        /** A sphere-shaped primitive collider.
        */
        class SphereCollider extends UnityEngine.Collider
        {
            protected [__keep_incompatibility]: never;
            /** The center of the sphere in the object's local space.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The radius of the sphere measured in the object's local space.
            */
            public get radius(): number;
            public set radius(value: number);
            public constructor ()
        }
        /** The ClothSkinningCoefficient struct is used to set up how a Cloth component is allowed to move with respect to the SkinnedMeshRenderer it is attached to.
        */
        class ClothSkinningCoefficient extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Distance a vertex is allowed to travel from the skinned mesh vertex position.
            */
            public maxDistance : number
            /** Definition of a sphere a vertex is not allowed to enter. This allows collision against the animated cloth.
            */
            public collisionSphereDistance : number
        }
        /** The Cloth class provides an interface to cloth simulation physics.
        */
        class Cloth extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** The current vertex positions of the cloth object.
            */
            public get vertices(): System.Array$1<UnityEngine.Vector3>;
            /** The current normals of the cloth object.
            */
            public get normals(): System.Array$1<UnityEngine.Vector3>;
            /** The cloth skinning coefficients used to set up how the cloth interacts with the skinned mesh.
            */
            public get coefficients(): System.Array$1<UnityEngine.ClothSkinningCoefficient>;
            public set coefficients(value: System.Array$1<UnityEngine.ClothSkinningCoefficient>);
            /** An array of CapsuleColliders which this Cloth instance should collide with.
            */
            public get capsuleColliders(): System.Array$1<UnityEngine.CapsuleCollider>;
            public set capsuleColliders(value: System.Array$1<UnityEngine.CapsuleCollider>);
            /** An array of ClothSphereColliderPairs which this Cloth instance should collide with.
            */
            public get sphereColliders(): System.Array$1<UnityEngine.ClothSphereColliderPair>;
            public set sphereColliders(value: System.Array$1<UnityEngine.ClothSphereColliderPair>);
            /** Cloth's sleep threshold.
            */
            public get sleepThreshold(): number;
            public set sleepThreshold(value: number);
            /** Bending stiffness of the cloth.
            */
            public get bendingStiffness(): number;
            public set bendingStiffness(value: number);
            /** Stretching stiffness of the cloth.
            */
            public get stretchingStiffness(): number;
            public set stretchingStiffness(value: number);
            /** Damp cloth motion.
            */
            public get damping(): number;
            public set damping(value: number);
            /** A constant, external acceleration applied to the cloth.
            */
            public get externalAcceleration(): UnityEngine.Vector3;
            public set externalAcceleration(value: UnityEngine.Vector3);
            /** A random, external acceleration applied to the cloth.
            */
            public get randomAcceleration(): UnityEngine.Vector3;
            public set randomAcceleration(value: UnityEngine.Vector3);
            /** Should gravity affect the cloth simulation?
            */
            public get useGravity(): boolean;
            public set useGravity(value: boolean);
            /** Is this cloth enabled?
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The friction of the cloth when colliding with the character.
            */
            public get friction(): number;
            public set friction(value: number);
            /** How much to increase mass of colliding particles.
            */
            public get collisionMassScale(): number;
            public set collisionMassScale(value: number);
            /** Enable continuous collision to improve collision stability.
            */
            public get enableContinuousCollision(): boolean;
            public set enableContinuousCollision(value: boolean);
            /** Add one virtual particle per triangle to improve collision stability.
            */
            public get useVirtualParticles(): number;
            public set useVirtualParticles(value: number);
            /** How much world-space movement of the character will affect cloth vertices.
            */
            public get worldVelocityScale(): number;
            public set worldVelocityScale(value: number);
            /** How much world-space acceleration of the character will affect cloth vertices.
            */
            public get worldAccelerationScale(): number;
            public set worldAccelerationScale(value: number);
            /** Number of cloth solver iterations per second.
            */
            public get clothSolverFrequency(): number;
            public set clothSolverFrequency(value: number);
            /** Use Tether Anchors.
            */
            public get useTethers(): boolean;
            public set useTethers(value: boolean);
            /** Sets the stiffness frequency parameter.
            */
            public get stiffnessFrequency(): number;
            public set stiffnessFrequency(value: number);
            /** Minimum distance at which two cloth particles repel each other (default: 0.0).
            */
            public get selfCollisionDistance(): number;
            public set selfCollisionDistance(value: number);
            /** Self-collision stiffness defines how strong the separating impulse should be for colliding particles.
            */
            public get selfCollisionStiffness(): number;
            public set selfCollisionStiffness(value: number);
            public ClearTransformMotion () : void
            /** Fade the cloth simulation in or out.
            * @param enabled Fading enabled or not.
            */
            public SetEnabledFading ($enabled: boolean, $interpolationTime: number) : void
            public SetEnabledFading ($enabled: boolean) : void
            public GetVirtualParticleIndices ($indices: System.Collections.Generic.List$1<number>) : void
            public SetVirtualParticleIndices ($indices: System.Collections.Generic.List$1<number>) : void
            public GetVirtualParticleWeights ($weights: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public SetVirtualParticleWeights ($weights: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public GetSelfAndInterCollisionIndices ($indices: System.Collections.Generic.List$1<number>) : void
            public SetSelfAndInterCollisionIndices ($indices: System.Collections.Generic.List$1<number>) : void
            public constructor ()
        }
        /** A capsule-shaped primitive collider.
        */
        class CapsuleCollider extends UnityEngine.Collider
        {
            protected [__keep_incompatibility]: never;
            /** The center of the capsule, measured in the object's local space.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The radius of the sphere, measured in the object's local space.
            */
            public get radius(): number;
            public set radius(value: number);
            /** The height of the capsule measured in the object's local space.
            */
            public get height(): number;
            public set height(value: number);
            /** The direction of the capsule.
            */
            public get direction(): number;
            public set direction(value: number);
            public constructor ()
        }
        /** Values to determine the type of input value to be expect from one entry of ClusterInput.
        */
        enum ClusterInputType
        { Button = 0, Axis = 1, Tracker = 2, CustomProvidedInput = 3 }
        /** Interface for reading and writing inputs in a Unity Cluster.
        */
        class ClusterInput extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the axis value as a continous float.
            * @param name Name of input to poll.c.
            */
            public static GetAxis ($name: string) : number
            /** Returns the binary value of a button.
            * @param name Name of input to poll.
            */
            public static GetButton ($name: string) : boolean
            /** Return the position of a tracker as a Vector3.
            * @param name Name of input to poll.
            */
            public static GetTrackerPosition ($name: string) : UnityEngine.Vector3
            /** Returns the rotation of a tracker as a Quaternion.
            * @param name Name of input to poll.
            */
            public static GetTrackerRotation ($name: string) : UnityEngine.Quaternion
            /** Sets the axis value for this input. Only works for input typed Custom.
            * @param name Name of input to modify.
            * @param value Value to set.
            */
            public static SetAxis ($name: string, $value: number) : void
            /** Sets the button value for this input. Only works for input typed Custom.
            * @param name Name of input to modify.
            * @param value Value to set.
            */
            public static SetButton ($name: string, $value: boolean) : void
            /** Sets the tracker position for this input. Only works for input typed Custom.
            * @param name Name of input to modify.
            * @param value Value to set.
            */
            public static SetTrackerPosition ($name: string, $value: UnityEngine.Vector3) : void
            /** Sets the tracker rotation for this input. Only works for input typed Custom.
            * @param name Name of input to modify.
            * @param value Value to set.
            */
            public static SetTrackerRotation ($name: string, $value: UnityEngine.Quaternion) : void
            /** Add a new VRPN input entry.
            * @param name Name of the input entry. This has to be unique.
            * @param deviceName Device name registered to VRPN server.
            * @param serverUrl URL to the vrpn server.
            * @param index Index of the Input entry, refer to vrpn.cfg if unsure.
            * @param type Type of the input.
            * @returns True if the operation succeed. 
            */
            public static AddInput ($name: string, $deviceName: string, $serverUrl: string, $index: number, $type: UnityEngine.ClusterInputType) : boolean
            /** Edit an input entry which added via ClusterInput.AddInput.
            * @param name Name of the input entry. This has to be unique.
            * @param deviceName Device name registered to VRPN server.
            * @param serverUrl URL to the vrpn server.
            * @param index Index of the Input entry, refer to vrpn.cfg if unsure.
            * @param type Type of the ClusterInputType as follow.
            */
            public static EditInput ($name: string, $deviceName: string, $serverUrl: string, $index: number, $type: UnityEngine.ClusterInputType) : boolean
            /** Check the connection status of the device to the VRPN server it connected to.
            * @param name Name of the input entry.
            */
            public static CheckConnectionToServer ($name: string) : boolean
            public constructor ()
        }
        /** A helper class that contains static method to inquire status of Unity Cluster.
        */
        class ClusterNetwork extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Check whether the current instance is a master node in the cluster network.
            */
            public static get isMasterOfCluster(): boolean;
            /** Check whether the current instance is disconnected from the cluster network.
            */
            public static get isDisconnected(): boolean;
            /** To acquire or set the node index of the current machine from the cluster network.
            */
            public static get nodeIndex(): number;
            public static set nodeIndex(value: number);
            public constructor ()
        }
        /** The various primitives that can be created using the GameObject.CreatePrimitive function.
        */
        enum PrimitiveType
        { Sphere = 0, Capsule = 1, Cylinder = 2, Cube = 3, Plane = 4, Quad = 5 }
        /** The coordinate space in which to operate.
        */
        enum Space
        { World = 0, Self = 1 }
        /** The platform application is running. Returned by Application.platform.
        */
        enum RuntimePlatform
        { OSXEditor = 0, OSXPlayer = 1, WindowsPlayer = 2, OSXWebPlayer = 3, OSXDashboardPlayer = 4, WindowsWebPlayer = 5, WindowsEditor = 7, IPhonePlayer = 8, XBOX360 = 10, PS3 = 9, Android = 11, NaCl = 12, FlashPlayer = 15, LinuxPlayer = 13, LinuxEditor = 16, WebGLPlayer = 17, MetroPlayerX86 = 18, WSAPlayerX86 = 18, MetroPlayerX64 = 19, WSAPlayerX64 = 19, MetroPlayerARM = 20, WSAPlayerARM = 20, WP8Player = 21, BB10Player = 22, BlackBerryPlayer = 22, TizenPlayer = 23, PSP2 = 24, PS4 = 25, PSM = 26, XboxOne = 27, SamsungTVPlayer = 28, WiiU = 30, tvOS = 31, Switch = 32, Lumin = 33, Stadia = 34 }
        /** The language the user's operating system is running in. Returned by Application.systemLanguage.
        */
        enum SystemLanguage
        { Afrikaans = 0, Arabic = 1, Basque = 2, Belarusian = 3, Bulgarian = 4, Catalan = 5, Chinese = 6, Czech = 7, Danish = 8, Dutch = 9, English = 10, Estonian = 11, Faroese = 12, Finnish = 13, French = 14, German = 15, Greek = 16, Hebrew = 17, Hugarian = 18, Icelandic = 19, Indonesian = 20, Italian = 21, Japanese = 22, Korean = 23, Latvian = 24, Lithuanian = 25, Norwegian = 26, Polish = 27, Portuguese = 28, Romanian = 29, Russian = 30, SerboCroatian = 31, Slovak = 32, Slovenian = 33, Spanish = 34, Swedish = 35, Thai = 36, Turkish = 37, Ukrainian = 38, Vietnamese = 39, ChineseSimplified = 40, ChineseTraditional = 41, Unknown = 42, Hungarian = 18 }
        /** The type of the log message in Debug.unityLogger.Log or delegate registered with Application.RegisterLogCallback.
        */
        enum LogType
        { Error = 0, Assert = 1, Warning = 2, Log = 3, Exception = 4 }
        /** Option flags for specifying special treatment of a log message.
        */
        enum LogOption
        { None = 0, NoStacktrace = 1 }
        /** SortingLayer allows you to set the render order of multiple sprites easily. There is always a default SortingLayer named "Default" which all sprites are added to initially. Added more SortingLayers to easily control the order of rendering of groups of sprites. Layers can be ordered before or after the default layer.
        */
        class SortingLayer extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** This is the unique id assigned to the layer. It is not an ordered running value and it should not be used to compare with other layers to determine the sorting order.
            */
            public get id(): number;
            /** Returns the name of the layer as defined in the TagManager.
            */
            public get name(): string;
            /** This is the relative value that indicates the sort order of this layer relative to the other layers.
            */
            public get value(): number;
            /** Returns all the layers defined in this project.
            */
            public static get layers(): System.Array$1<UnityEngine.SortingLayer>;
            /** Returns the final sorting layer value. To determine the sorting order between the various sorting layers, use this method to retrieve the final sorting value and use CompareTo to determine the order.
            * @param id The unique value of the sorting layer as returned by any renderer's sortingLayerID property.
            * @returns The final sorting value of the layer relative to other layers. 
            */
            public static GetLayerValueFromID ($id: number) : number
            /** Returns the final sorting layer value. See Also: GetLayerValueFromID.
            * @param name The unique value of the sorting layer as returned by any renderer's sortingLayerID property.
            * @returns The final sorting value of the layer relative to other layers. 
            */
            public static GetLayerValueFromName ($name: string) : number
            /** Returns the id given the name. Will return 0 if an invalid name was given.
            * @param name The name of the layer.
            * @returns The unique id of the layer with name. 
            */
            public static NameToID ($name: string) : number
            /** Returns the unique id of the layer. Will return "<unknown layer>" if an invalid id is given.
            * @param id The unique id of the layer.
            * @returns The name of the layer with id or "<unknown layer>" for invalid id. 
            */
            public static IDToName ($id: number) : string
            /** Returns true if the id provided is a valid layer id.
            * @param id The unique id of a layer.
            * @returns True if the id provided is valid and assigned to a layer. 
            */
            public static IsValid ($id: number) : boolean
        }
        /** Sets which weights to use when calculating curve segments.
        */
        enum WeightedMode
        { None = 0, In = 1, Out = 2, Both = 3 }
        /** A single keyframe that can be injected into an animation curve.
        */
        class Keyframe extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The time of the keyframe.
            */
            public get time(): number;
            public set time(value: number);
            /** The value of the curve at keyframe.
            */
            public get value(): number;
            public set value(value: number);
            /** Sets the incoming tangent for this key. The incoming tangent affects the slope of the curve from the previous key to this key.
            */
            public get inTangent(): number;
            public set inTangent(value: number);
            /** Sets the outgoing tangent for this key. The outgoing tangent affects the slope of the curve from this key to the next key.
            */
            public get outTangent(): number;
            public set outTangent(value: number);
            /** Sets the incoming weight for this key. The incoming weight affects the slope of the curve from the previous key to this key.
            */
            public get inWeight(): number;
            public set inWeight(value: number);
            /** Sets the outgoing weight for this key. The outgoing weight affects the slope of the curve from this key to the next key.
            */
            public get outWeight(): number;
            public set outWeight(value: number);
            /** Weighted mode for the keyframe.
            */
            public get weightedMode(): UnityEngine.WeightedMode;
            public set weightedMode(value: UnityEngine.WeightedMode);
            public constructor ($time: number, $value: number)
            public constructor ($time: number, $value: number, $inTangent: number, $outTangent: number)
            public constructor ($time: number, $value: number, $inTangent: number, $outTangent: number, $inWeight: number, $outWeight: number)
            public constructor ()
        }
        /** Access to application run-time data.
        */
        class Application extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns true when called in any kind of built Player, or when called in the Editor in Play Mode (Read Only).
            */
            public static get isPlaying(): boolean;
            /** Whether the player currently has focus. Read-only.
            */
            public static get isFocused(): boolean;
            /** Returns a GUID for this build (Read Only).
            */
            public static get buildGUID(): string;
            /** Should the player be running when the application is in the background?
            */
            public static get runInBackground(): boolean;
            public static set runInBackground(value: boolean);
            /** Returns true when Unity is launched with the -batchmode flag from the command line (Read Only).
            */
            public static get isBatchMode(): boolean;
            /** Contains the path to the game data folder on the target device (Read Only).
            */
            public static get dataPath(): string;
            /** The path to the StreamingAssets folder (Read Only).
            */
            public static get streamingAssetsPath(): string;
            /** Contains the path to a persistent data directory (Read Only).
            */
            public static get persistentDataPath(): string;
            /** Contains the path to a temporary data / cache directory (Read Only).
            */
            public static get temporaryCachePath(): string;
            /** The URL of the document. For WebGL, this a web URL. For Android, iOS, or Universal Windows Platform (UWP) this is a deep link URL. (Read Only)
            */
            public static get absoluteURL(): string;
            /** The version of the Unity runtime used to play the content.
            */
            public static get unityVersion(): string;
            /** Returns application version number  (Read Only).
            */
            public static get version(): string;
            /** Returns the name of the store or package that installed the application (Read Only).
            */
            public static get installerName(): string;
            /** Returns application identifier at runtime. On Apple platforms this is the 'bundleIdentifier' saved in the info.plist file, on Android it's the 'package' from the AndroidManifest.xml. 
            */
            public static get identifier(): string;
            /** Returns application install mode (Read Only).
            */
            public static get installMode(): UnityEngine.ApplicationInstallMode;
            /** Returns application running in sandbox (Read Only).
            */
            public static get sandboxType(): UnityEngine.ApplicationSandboxType;
            /** Returns application product name (Read Only).
            */
            public static get productName(): string;
            /** Return application company name (Read Only).
            */
            public static get companyName(): string;
            /** A unique cloud project identifier. It is unique for every project (Read Only).
            */
            public static get cloudProjectId(): string;
            /** Instructs the game to try to render at a specified frame rate.
            */
            public static get targetFrameRate(): number;
            public static set targetFrameRate(value: number);
            /** Returns the path to the console log file, or an empty string if the current platform does not support log files.
            */
            public static get consoleLogPath(): string;
            /** Priority of background loading thread.
            */
            public static get backgroundLoadingPriority(): UnityEngine.ThreadPriority;
            public static set backgroundLoadingPriority(value: UnityEngine.ThreadPriority);
            /** Returns false if application is altered in any way after it was built.
            */
            public static get genuine(): boolean;
            /** Returns true if application integrity can be confirmed.
            */
            public static get genuineCheckAvailable(): boolean;
            /** Returns the platform the game is running on (Read Only).
            */
            public static get platform(): UnityEngine.RuntimePlatform;
            /** Is the current Runtime platform a known mobile platform.
            */
            public static get isMobilePlatform(): boolean;
            /** Is the current Runtime platform a known console platform.
            */
            public static get isConsolePlatform(): boolean;
            /** The language the user's operating system is running in.
            */
            public static get systemLanguage(): UnityEngine.SystemLanguage;
            /** Returns the type of Internet reachability currently possible on the device.
            */
            public static get internetReachability(): UnityEngine.NetworkReachability;
            /** Are we running inside the Unity editor? (Read Only)
            */
            public static get isEditor(): boolean;
            public static Quit ($exitCode: number) : void
            public static Quit () : void
            public static Unload () : void
            /** Can the streamed level be loaded?
            */
            public static CanStreamedLevelBeLoaded ($levelIndex: number) : boolean
            /** Can the streamed level be loaded?
            */
            public static CanStreamedLevelBeLoaded ($levelName: string) : boolean
            /** Returns true if the given object is part of the playing world either in any kind of built Player or in Play Mode.
            * @param obj The object to test.
            * @returns True if the object is part of the playing world. 
            */
            public static IsPlaying ($obj: UnityEngine.Object) : boolean
            public static GetBuildTags () : System.Array$1<string>
            /** Set an array of feature tags for this build.
            */
            public static SetBuildTags ($buildTags: System.Array$1<string>) : void
            public static HasProLicense () : boolean
            public static RequestAdvertisingIdentifierAsync ($delegateMethod: UnityEngine.Application.AdvertisingIdentifierCallback) : boolean
            /** Opens the URL specified, subject to the permissions and limitations of your app’s current platform and environment. This is handled in different ways depending on the nature of the URL, and with different security restrictions, depending on the runtime platform.
            * @param url The URL to open.
            */
            public static OpenURL ($url: string) : void
            /** Get stack trace logging options. The default value is StackTraceLogType.ScriptOnly.
            */
            public static GetStackTraceLogType ($logType: UnityEngine.LogType) : UnityEngine.StackTraceLogType
            /** Set stack trace logging options. The default value is StackTraceLogType.ScriptOnly.
            */
            public static SetStackTraceLogType ($logType: UnityEngine.LogType, $stackTraceType: UnityEngine.StackTraceLogType) : void
            /** Request authorization to use the webcam or microphone on iOS.
            */
            public static RequestUserAuthorization ($mode: UnityEngine.UserAuthorization) : UnityEngine.AsyncOperation
            /** Check if the user has authorized use of the webcam or microphone in the Web Player.
            */
            public static HasUserAuthorization ($mode: UnityEngine.UserAuthorization) : boolean
            public static add_lowMemory ($value: UnityEngine.Application.LowMemoryCallback) : void
            public static remove_lowMemory ($value: UnityEngine.Application.LowMemoryCallback) : void
            public static add_logMessageReceived ($value: UnityEngine.Application.LogCallback) : void
            public static remove_logMessageReceived ($value: UnityEngine.Application.LogCallback) : void
            public static add_logMessageReceivedThreaded ($value: UnityEngine.Application.LogCallback) : void
            public static remove_logMessageReceivedThreaded ($value: UnityEngine.Application.LogCallback) : void
            public static add_onBeforeRender ($value: UnityEngine.Events.UnityAction) : void
            public static remove_onBeforeRender ($value: UnityEngine.Events.UnityAction) : void
            public static add_focusChanged ($value: System.Action$1<boolean>) : void
            public static remove_focusChanged ($value: System.Action$1<boolean>) : void
            public static add_deepLinkActivated ($value: System.Action$1<string>) : void
            public static remove_deepLinkActivated ($value: System.Action$1<string>) : void
            public static add_wantsToQuit ($value: System.Func$1<boolean>) : void
            public static remove_wantsToQuit ($value: System.Func$1<boolean>) : void
            public static add_quitting ($value: System.Action) : void
            public static remove_quitting ($value: System.Action) : void
            public constructor ()
        }
        /** Application installation mode (Read Only).
        */
        enum ApplicationInstallMode
        { Unknown = 0, Store = 1, DeveloperBuild = 2, Adhoc = 3, Enterprise = 4, Editor = 5 }
        /** Application sandbox type.
        */
        enum ApplicationSandboxType
        { Unknown = 0, NotSandboxed = 1, Sandboxed = 2, SandboxBroken = 3 }
        /** Stack trace logging options.
        */
        enum StackTraceLogType
        { None = 0, ScriptOnly = 1, Full = 2 }
        /** Constants to pass to Application.RequestUserAuthorization.
        */
        enum UserAuthorization
        { WebCam = 1, Microphone = 2 }
        /** Describes network reachability options.
        */
        enum NetworkReachability
        { NotReachable = 0, ReachableViaCarrierDataNetwork = 1, ReachableViaLocalAreaNetwork = 2 }
        /** Type of the imported(native) data.
        */
        enum AudioType
        { UNKNOWN = 0, ACC = 1, AIFF = 2, IT = 10, MOD = 12, MPEG = 13, OGGVORBIS = 14, S3M = 17, WAV = 20, XM = 21, XMA = 22, VAG = 23, AUDIOQUEUE = 24 }
        /** Data structure for downloading AssetBundles to a customized cache path. See Also:UnityWebRequestAssetBundle.GetAssetBundle for more information.
        */
        class CachedAssetBundle extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** AssetBundle name which is used as the customized cache path.
            */
            public get name(): string;
            public set name(value: string);
            /** Hash128 which is used as the version of the AssetBundle.
            */
            public get hash(): UnityEngine.Hash128;
            public set hash(value: UnityEngine.Hash128);
            public constructor ($name: string, $hash: UnityEngine.Hash128)
            public constructor ()
        }
        /** Data structure for cache. Please refer to See Also:Caching.AddCache for more information.
        */
        class Cache extends System.ValueType implements System.IEquatable$1<UnityEngine.Cache>
        {
            protected [__keep_incompatibility]: never;
            /** Returns true if the cache is valid.
            */
            public get valid(): boolean;
            /** Returns true if the cache is ready.
            */
            public get ready(): boolean;
            /** Returns true if the cache is readonly.
            */
            public get readOnly(): boolean;
            /** Returns the path of the cache.
            */
            public get path(): string;
            /** Returns the index of the cache in the cache list.
            */
            public get index(): number;
            /** Returns the number of currently unused bytes in the cache.
            */
            public get spaceFree(): bigint;
            /** Allows you to specify the total number of bytes that can be allocated for the cache.
            */
            public get maximumAvailableStorageSpace(): bigint;
            public set maximumAvailableStorageSpace(value: bigint);
            /** Returns the used disk space in bytes.
            */
            public get spaceOccupied(): bigint;
            /** The number of seconds that an AssetBundle may remain unused in the cache before it is automatically deleted.
            */
            public get expirationDelay(): number;
            public set expirationDelay(value: number);
            public static op_Equality ($lhs: UnityEngine.Cache, $rhs: UnityEngine.Cache) : boolean
            public static op_Inequality ($lhs: UnityEngine.Cache, $rhs: UnityEngine.Cache) : boolean
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Cache) : boolean
            public ClearCache () : boolean
            /** Removes all cached content in the cache that has been cached by the current application.
            * @param expiration The number of seconds that AssetBundles may remain unused in the cache.
            * @returns Returns True when cache clearing succeeded. 
            */
            public ClearCache ($expiration: number) : boolean
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        class CacheIndex extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public name : string
            public bytesUsed : number
            public expires : number
        }
        /** The Caching class lets you manage cached AssetBundles, downloaded using UnityWebRequestAssetBundle.GetAssetBundle().
        */
        class Caching extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Controls compression of cache data. Enabled by default.
            */
            public static get compressionEnabled(): boolean;
            public static set compressionEnabled(value: boolean);
            /** Returns true if Caching system is ready for use.
            */
            public static get ready(): boolean;
            /** Returns the cache count in the cache list.
            */
            public static get cacheCount(): number;
            /** Returns the default cache which is added by Unity internally.
            */
            public static get defaultCache(): UnityEngine.Cache;
            /** Gets or sets the current cache in which AssetBundles should be cached.
            */
            public static get currentCacheForWriting(): UnityEngine.Cache;
            public static set currentCacheForWriting(value: UnityEngine.Cache);
            public static ClearCache () : boolean
            /** Removes all AssetBundle content that has been cached by the current application.
            * @param expiration The number of seconds that AssetBundles may remain unused in the cache.
            * @returns True when cache clearing succeeded, false if cache was in use. 
            */
            public static ClearCache ($expiration: number) : boolean
            /** Removes the given version of the AssetBundle.
            * @param assetBundleName The AssetBundle name.
            * @param hash Version needs to be cleaned.
            * @returns Returns true when cache clearing succeeded.  Can return false if any cached bundle is in use. 
            */
            public static ClearCachedVersion ($assetBundleName: string, $hash: UnityEngine.Hash128) : boolean
            /** Removes all the cached versions of the AssetBundle from the cache, except for the specified version.
            * @param assetBundleName The AssetBundle name.
            * @param hash Version needs to be kept.
            * @returns Returns true when cache clearing succeeded. 
            */
            public static ClearOtherCachedVersions ($assetBundleName: string, $hash: UnityEngine.Hash128) : boolean
            /** Removes all the cached versions of the given AssetBundle from the cache.
            * @param assetBundleName The AssetBundle name.
            * @returns Returns true when cache clearing succeeded. 
            */
            public static ClearAllCachedVersions ($assetBundleName: string) : boolean
            public static GetCachedVersions ($assetBundleName: string, $outCachedVersions: System.Collections.Generic.List$1<UnityEngine.Hash128>) : void
            public static IsVersionCached ($url: string, $hash: UnityEngine.Hash128) : boolean
            public static IsVersionCached ($cachedBundle: UnityEngine.CachedAssetBundle) : boolean
            public static MarkAsUsed ($url: string, $hash: UnityEngine.Hash128) : boolean
            public static MarkAsUsed ($cachedBundle: UnityEngine.CachedAssetBundle) : boolean
            public static SetNoBackupFlag ($url: string, $hash: UnityEngine.Hash128) : void
            public static SetNoBackupFlag ($cachedBundle: UnityEngine.CachedAssetBundle) : void
            public static ResetNoBackupFlag ($url: string, $hash: UnityEngine.Hash128) : void
            public static ResetNoBackupFlag ($cachedBundle: UnityEngine.CachedAssetBundle) : void
            /** Add a cache with the given path.
            * @param cachePath Path to the cache folder.
            */
            public static AddCache ($cachePath: string) : UnityEngine.Cache
            /** Returns the Cache at the given position in the cache list.
            * @param cacheIndex Index of the cache to get.
            * @returns A reference to the Cache at the index specified. 
            */
            public static GetCacheAt ($cacheIndex: number) : UnityEngine.Cache
            /** Returns the Cache that has the given cache path.
            * @param cachePath The cache path.
            * @returns A reference to the Cache with the given path. 
            */
            public static GetCacheByPath ($cachePath: string) : UnityEngine.Cache
            public static GetAllCachePaths ($cachePaths: System.Collections.Generic.List$1<string>) : void
            /** Removes the Cache from cache list.
            * @param cache The Cache to be removed.
            * @returns Returns true if the Cache is removed. 
            */
            public static RemoveCache ($cache: UnityEngine.Cache) : boolean
            /** Moves the source Cache before the destination Cache in the cache list.
            * @param src The Cache to move.
            * @param dst The Cache which should come after the source Cache in the cache list.
            */
            public static MoveCacheBefore ($src: UnityEngine.Cache, $dst: UnityEngine.Cache) : void
            /** Moves the source Cache after the destination Cache in the cache list.
            * @param src The Cache to move.
            * @param dst The Cache which should come before the source Cache in the cache list.
            */
            public static MoveCacheAfter ($src: UnityEngine.Cache, $dst: UnityEngine.Cache) : void
            public constructor ()
        }
        /** A Camera is a device through which the player views the world.
        */
        class Camera extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Event that is fired before any camera starts culling.
            */
            public static onPreCull : UnityEngine.Camera.CameraCallback
            /** Event that is fired before any camera starts rendering.
            */
            public static onPreRender : UnityEngine.Camera.CameraCallback
            /** Event that is fired after any camera finishes rendering.
            */
            public static onPostRender : UnityEngine.Camera.CameraCallback
            /** The near clipping plane distance.
            */
            public get nearClipPlane(): number;
            public set nearClipPlane(value: number);
            /** The far clipping plane distance.
            */
            public get farClipPlane(): number;
            public set farClipPlane(value: number);
            /** The field of view of the camera in degrees.
            */
            public get fieldOfView(): number;
            public set fieldOfView(value: number);
            /** The rendering path that should be used, if possible.
            */
            public get renderingPath(): UnityEngine.RenderingPath;
            public set renderingPath(value: UnityEngine.RenderingPath);
            /** The rendering path that is currently being used (Read Only).
            */
            public get actualRenderingPath(): UnityEngine.RenderingPath;
            /** High dynamic range rendering.
            */
            public get allowHDR(): boolean;
            public set allowHDR(value: boolean);
            /** MSAA rendering.
            */
            public get allowMSAA(): boolean;
            public set allowMSAA(value: boolean);
            /** Dynamic Resolution Scaling.
            */
            public get allowDynamicResolution(): boolean;
            public set allowDynamicResolution(value: boolean);
            /** Should camera rendering be forced into a RenderTexture.
            */
            public get forceIntoRenderTexture(): boolean;
            public set forceIntoRenderTexture(value: boolean);
            /** Camera's half-size when in orthographic mode.
            */
            public get orthographicSize(): number;
            public set orthographicSize(value: number);
            /** Is the camera orthographic (true) or perspective (false)?
            */
            public get orthographic(): boolean;
            public set orthographic(value: boolean);
            /** Opaque object sorting mode.
            */
            public get opaqueSortMode(): UnityEngine.Rendering.OpaqueSortMode;
            public set opaqueSortMode(value: UnityEngine.Rendering.OpaqueSortMode);
            /** Transparent object sorting mode.
            */
            public get transparencySortMode(): UnityEngine.TransparencySortMode;
            public set transparencySortMode(value: UnityEngine.TransparencySortMode);
            /** An axis that describes the direction along which the distances of objects are measured for the purpose of sorting.
            */
            public get transparencySortAxis(): UnityEngine.Vector3;
            public set transparencySortAxis(value: UnityEngine.Vector3);
            /** Camera's depth in the camera rendering order.
            */
            public get depth(): number;
            public set depth(value: number);
            /** The aspect ratio (width divided by height).
            */
            public get aspect(): number;
            public set aspect(value: number);
            /** Get the world-space speed of the camera (Read Only).
            */
            public get velocity(): UnityEngine.Vector3;
            /** This is used to render parts of the Scene selectively.
            */
            public get cullingMask(): number;
            public set cullingMask(value: number);
            /** Mask to select which layers can trigger events on the camera.
            */
            public get eventMask(): number;
            public set eventMask(value: number);
            /** How to perform per-layer culling for a Camera.
            */
            public get layerCullSpherical(): boolean;
            public set layerCullSpherical(value: boolean);
            /** Identifies what kind of camera this is.
            */
            public get cameraType(): UnityEngine.CameraType;
            public set cameraType(value: UnityEngine.CameraType);
            /** Sets the culling maks used to determine which objects from which Scenes to draw.
            See EditorSceneManager.SetSceneCullingMask.
            */
            public get overrideSceneCullingMask(): bigint;
            public set overrideSceneCullingMask(value: bigint);
            /** Per-layer culling distances.
            */
            public get layerCullDistances(): System.Array$1<number>;
            public set layerCullDistances(value: System.Array$1<number>);
            /** Whether or not the Camera will use occlusion culling during rendering.
            */
            public get useOcclusionCulling(): boolean;
            public set useOcclusionCulling(value: boolean);
            /** Sets a custom matrix for the camera to use for all culling queries.
            */
            public get cullingMatrix(): UnityEngine.Matrix4x4;
            public set cullingMatrix(value: UnityEngine.Matrix4x4);
            /** The color with which the screen will be cleared.
            */
            public get backgroundColor(): UnityEngine.Color;
            public set backgroundColor(value: UnityEngine.Color);
            /** How the camera clears the background.
            */
            public get clearFlags(): UnityEngine.CameraClearFlags;
            public set clearFlags(value: UnityEngine.CameraClearFlags);
            /** How and if camera generates a depth texture.
            */
            public get depthTextureMode(): UnityEngine.DepthTextureMode;
            public set depthTextureMode(value: UnityEngine.DepthTextureMode);
            /** Should the camera clear the stencil buffer after the deferred light pass?
            */
            public get clearStencilAfterLightingPass(): boolean;
            public set clearStencilAfterLightingPass(value: boolean);
            /** Enable [UsePhysicalProperties] to use physical camera properties to compute the field of view and the frustum.
            */
            public get usePhysicalProperties(): boolean;
            public set usePhysicalProperties(value: boolean);
            /** The size of the camera sensor, expressed in millimeters.
            */
            public get sensorSize(): UnityEngine.Vector2;
            public set sensorSize(value: UnityEngine.Vector2);
            /** The lens offset of the camera. The lens shift is relative to the sensor size. For example, a lens shift of 0.5 offsets the sensor by half its horizontal size.
            */
            public get lensShift(): UnityEngine.Vector2;
            public set lensShift(value: UnityEngine.Vector2);
            /** The camera focal length, expressed in millimeters. To use this property, enable UsePhysicalProperties.
            */
            public get focalLength(): number;
            public set focalLength(value: number);
            /** There are two gates for a camera, the sensor gate and the resolution gate. The physical camera sensor gate is defined by the sensorSize property, the resolution gate is defined by the render target area.
            */
            public get gateFit(): UnityEngine.Camera.GateFitMode;
            public set gateFit(value: UnityEngine.Camera.GateFitMode);
            /** Where on the screen is the camera rendered in normalized coordinates.
            */
            public get rect(): UnityEngine.Rect;
            public set rect(value: UnityEngine.Rect);
            /** Where on the screen is the camera rendered in pixel coordinates.
            */
            public get pixelRect(): UnityEngine.Rect;
            public set pixelRect(value: UnityEngine.Rect);
            /** How wide is the camera in pixels (not accounting for dynamic resolution scaling) (Read Only).
            */
            public get pixelWidth(): number;
            /** How tall is the camera in pixels (not accounting for dynamic resolution scaling) (Read Only).
            */
            public get pixelHeight(): number;
            /** How wide is the camera in pixels (accounting for dynamic resolution scaling) (Read Only).
            */
            public get scaledPixelWidth(): number;
            /** How tall is the camera in pixels (accounting for dynamic resolution scaling) (Read Only).
            */
            public get scaledPixelHeight(): number;
            /** Destination render texture.
            */
            public get targetTexture(): UnityEngine.RenderTexture;
            public set targetTexture(value: UnityEngine.RenderTexture);
            /** Gets the temporary RenderTexture target for this Camera.
            */
            public get activeTexture(): UnityEngine.RenderTexture;
            /** Set the target display for this Camera.
            */
            public get targetDisplay(): number;
            public set targetDisplay(value: number);
            /** Matrix that transforms from camera space to world space (Read Only).
            */
            public get cameraToWorldMatrix(): UnityEngine.Matrix4x4;
            /** Matrix that transforms from world to camera space.
            */
            public get worldToCameraMatrix(): UnityEngine.Matrix4x4;
            public set worldToCameraMatrix(value: UnityEngine.Matrix4x4);
            /** Set a custom projection matrix.
            */
            public get projectionMatrix(): UnityEngine.Matrix4x4;
            public set projectionMatrix(value: UnityEngine.Matrix4x4);
            /** Get or set the raw projection matrix with no camera offset (no jittering).
            */
            public get nonJitteredProjectionMatrix(): UnityEngine.Matrix4x4;
            public set nonJitteredProjectionMatrix(value: UnityEngine.Matrix4x4);
            /** Should the jittered matrix be used for transparency rendering?
            */
            public get useJitteredProjectionMatrixForTransparentRendering(): boolean;
            public set useJitteredProjectionMatrixForTransparentRendering(value: boolean);
            /** Get the view projection matrix used on the last frame.
            */
            public get previousViewProjectionMatrix(): UnityEngine.Matrix4x4;
            /** The first enabled camera tagged "MainCamera" (Read Only).
            */
            public static get main(): UnityEngine.Camera;
            /** The camera we are currently rendering with, for low-level render control only (Read Only).
            */
            public static get current(): UnityEngine.Camera;
            /** If not null, the camera will only render the contents of the specified Scene.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public set scene(value: UnityEngine.SceneManagement.Scene);
            /** Stereoscopic rendering.
            */
            public get stereoEnabled(): boolean;
            /** The distance between the virtual eyes. Use this to query or set the current eye separation. Note that most VR devices provide this value, in which case setting the value will have no effect.
            */
            public get stereoSeparation(): number;
            public set stereoSeparation(value: number);
            /** Distance to a point where virtual eyes converge.
            */
            public get stereoConvergence(): number;
            public set stereoConvergence(value: number);
            /** Determines whether the stereo view matrices are suitable to allow for a single pass cull.
            */
            public get areVRStereoViewMatricesWithinSingleCullTolerance(): boolean;
            /** Defines which eye of a VR display the Camera renders into.
            */
            public get stereoTargetEye(): UnityEngine.StereoTargetEyeMask;
            public set stereoTargetEye(value: UnityEngine.StereoTargetEyeMask);
            /** Returns the eye that is currently rendering.
            If called when stereo is not enabled it will return Camera.MonoOrStereoscopicEye.Mono.
            If called during a camera rendering callback such as OnRenderImage it will return the currently rendering eye.
            If called outside of a rendering callback and stereo is enabled, it will return the default eye which is Camera.MonoOrStereoscopicEye.Left.
            */
            public get stereoActiveEye(): UnityEngine.Camera.MonoOrStereoscopicEye;
            /** The number of cameras in the current Scene.
            */
            public static get allCamerasCount(): number;
            /** Returns all enabled cameras in the Scene.
            */
            public static get allCameras(): System.Array$1<UnityEngine.Camera>;
            /** Number of command buffers set up on this camera (Read Only).
            */
            public get commandBufferCount(): number;
            public Reset () : void
            public ResetTransparencySortSettings () : void
            public ResetAspect () : void
            public ResetCullingMatrix () : void
            /** Make the camera render with shader replacement.
            */
            public SetReplacementShader ($shader: UnityEngine.Shader, $replacementTag: string) : void
            public ResetReplacementShader () : void
            public GetGateFittedFieldOfView () : number
            public GetGateFittedLensShift () : UnityEngine.Vector2
            /** Sets the Camera to render to the chosen buffers of one or more RenderTextures.
            * @param colorBuffer The RenderBuffer(s) to which color information will be rendered.
            * @param depthBuffer The RenderBuffer to which depth information will be rendered.
            */
            public SetTargetBuffers ($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer) : void
            /** Sets the Camera to render to the chosen buffers of one or more RenderTextures.
            * @param colorBuffer The RenderBuffer(s) to which color information will be rendered.
            * @param depthBuffer The RenderBuffer to which depth information will be rendered.
            */
            public SetTargetBuffers ($colorBuffer: System.Array$1<UnityEngine.RenderBuffer>, $depthBuffer: UnityEngine.RenderBuffer) : void
            public ResetWorldToCameraMatrix () : void
            public ResetProjectionMatrix () : void
            /** Calculates and returns oblique near-plane projection matrix.
            * @param clipPlane Vector4 that describes a clip plane.
            * @returns Oblique near-plane projection matrix. 
            */
            public CalculateObliqueMatrix ($clipPlane: UnityEngine.Vector4) : UnityEngine.Matrix4x4
            public WorldToScreenPoint ($position: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye) : UnityEngine.Vector3
            public WorldToViewportPoint ($position: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye) : UnityEngine.Vector3
            public ViewportToWorldPoint ($position: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye) : UnityEngine.Vector3
            public ScreenToWorldPoint ($position: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye) : UnityEngine.Vector3
            /** Transforms position from world space into screen space.
            * @param eye Optional argument that can be used to specify which eye transform to use. Default is Mono.
            */
            public WorldToScreenPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms position from world space into viewport space.
            * @param eye Optional argument that can be used to specify which eye transform to use. Default is Mono.
            */
            public WorldToViewportPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms position from viewport space into world space.
            * @param position The 3d vector in Viewport space.
            * @returns The 3d vector in World space. 
            */
            public ViewportToWorldPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms a point from screen space into world space, where world space is defined as the coordinate system at the very top of your game's hierarchy.
            * @param position A screen space position (often mouse x, y), plus a z position for depth (for example, a camera clipping plane).
            * @param eye By default, Camera.MonoOrStereoscopicEye.Mono. Can be set to Camera.MonoOrStereoscopicEye.Left or Camera.MonoOrStereoscopicEye.Right for use in stereoscopic rendering (e.g., for VR).
            * @returns The worldspace point created by converting the screen space point at the provided distance z from the camera plane. 
            */
            public ScreenToWorldPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms position from screen space into viewport space.
            */
            public ScreenToViewportPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms position from viewport space into screen space.
            */
            public ViewportToScreenPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            public ViewportPointToRay ($pos: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye) : UnityEngine.Ray
            /** Returns a ray going from camera through a viewport point.
            * @param eye Optional argument that can be used to specify which eye transform to use. Default is Mono.
            */
            public ViewportPointToRay ($pos: UnityEngine.Vector3) : UnityEngine.Ray
            public ScreenPointToRay ($pos: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye) : UnityEngine.Ray
            /** Returns a ray going from camera through a screen point.
            * @param eye Optional argument that can be used to specify which eye transform to use. Default is Mono.
            */
            public ScreenPointToRay ($pos: UnityEngine.Vector3) : UnityEngine.Ray
            public CalculateFrustumCorners ($viewport: UnityEngine.Rect, $z: number, $eye: UnityEngine.Camera.MonoOrStereoscopicEye, $outCorners: System.Array$1<UnityEngine.Vector3>) : void
            public static CalculateProjectionMatrixFromPhysicalProperties ($output: $Ref<UnityEngine.Matrix4x4>, $focalLength: number, $sensorSize: UnityEngine.Vector2, $lensShift: UnityEngine.Vector2, $nearClip: number, $farClip: number, $gateFitParameters?: UnityEngine.Camera.GateFitParameters) : void
            /** Converts focal length to field of view.
            * @param focalLength Focal length in millimeters.
            * @param sensorSize Sensor size in millimeters. Use the sensor height to get the vertical field of view. Use the sensor width to get the horizontal field of view.
            * @returns field of view in degrees. 
            */
            public static FocalLengthToFieldOfView ($focalLength: number, $sensorSize: number) : number
            /** Converts field of view to focal length. Use either sensor height and vertical field of view or sensor width and horizontal field of view.
            * @param fieldOfView field of view in degrees.
            * @param sensorSize Sensor size in millimeters.
            * @returns Focal length in millimeters. 
            */
            public static FieldOfViewToFocalLength ($fieldOfView: number, $sensorSize: number) : number
            /** Converts the horizontal field of view (FOV) to the vertical FOV, based on the value of the aspect ratio parameter.
            * @param horizontalFOV The horizontal FOV value in degrees.
            * @param aspectRatio The aspect ratio value used for the conversion
            */
            public static HorizontalToVerticalFieldOfView ($horizontalFieldOfView: number, $aspectRatio: number) : number
            /** Converts the vertical field of view (FOV) to the horizontal FOV, based on the value of the aspect ratio parameter.
            * @param verticalFieldOfView The vertical FOV value in degrees.
            * @param aspectRatio The aspect ratio value used for the conversion
            */
            public static VerticalToHorizontalFieldOfView ($verticalFieldOfView: number, $aspectRatio: number) : number
            public GetStereoNonJitteredProjectionMatrix ($eye: UnityEngine.Camera.StereoscopicEye) : UnityEngine.Matrix4x4
            public GetStereoViewMatrix ($eye: UnityEngine.Camera.StereoscopicEye) : UnityEngine.Matrix4x4
            public CopyStereoDeviceProjectionMatrixToNonJittered ($eye: UnityEngine.Camera.StereoscopicEye) : void
            public GetStereoProjectionMatrix ($eye: UnityEngine.Camera.StereoscopicEye) : UnityEngine.Matrix4x4
            public SetStereoProjectionMatrix ($eye: UnityEngine.Camera.StereoscopicEye, $matrix: UnityEngine.Matrix4x4) : void
            public ResetStereoProjectionMatrices () : void
            public SetStereoViewMatrix ($eye: UnityEngine.Camera.StereoscopicEye, $matrix: UnityEngine.Matrix4x4) : void
            public ResetStereoViewMatrices () : void
            /** Fills an array of Camera with the current cameras in the Scene, without allocating a new array.
            * @param cameras An array to be filled up with cameras currently in the Scene.
            */
            public static GetAllCameras ($cameras: System.Array$1<UnityEngine.Camera>) : number
            /** Render into a static cubemap from this camera.
            * @param cubemap The cube map to render to.
            * @param faceMask A bitmask which determines which of the six faces are rendered to.
            * @returns False if rendering fails, else true. 
            */
            public RenderToCubemap ($cubemap: UnityEngine.Cubemap, $faceMask: number) : boolean
            public RenderToCubemap ($cubemap: UnityEngine.Cubemap) : boolean
            /** Render into a cubemap from this camera.
            * @param faceMask A bitfield indicating which cubemap faces should be rendered into.
            * @param cubemap The texture to render to.
            * @returns False if rendering fails, else true. 
            */
            public RenderToCubemap ($cubemap: UnityEngine.RenderTexture, $faceMask: number) : boolean
            public RenderToCubemap ($cubemap: UnityEngine.RenderTexture) : boolean
            public RenderToCubemap ($cubemap: UnityEngine.RenderTexture, $faceMask: number, $stereoEye: UnityEngine.Camera.MonoOrStereoscopicEye) : boolean
            public Render () : void
            /** Render the camera with shader replacement.
            */
            public RenderWithShader ($shader: UnityEngine.Shader, $replacementTag: string) : void
            public RenderDontRestore () : void
            public static SetupCurrent ($cur: UnityEngine.Camera) : void
            /** Makes this camera's settings match other camera.
            * @param other Copy camera settings to the other camera.
            */
            public CopyFrom ($other: UnityEngine.Camera) : void
            /** Remove command buffers from execution at a specified place.
            * @param evt When to execute the command buffer during rendering.
            */
            public RemoveCommandBuffers ($evt: UnityEngine.Rendering.CameraEvent) : void
            public RemoveAllCommandBuffers () : void
            /** Add a command buffer to be executed at a specified place.
            * @param evt When to execute the command buffer during rendering.
            * @param buffer The buffer to execute.
            */
            public AddCommandBuffer ($evt: UnityEngine.Rendering.CameraEvent, $buffer: UnityEngine.Rendering.CommandBuffer) : void
            /** Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.
            * @param evt The point during the graphics processing at which this command buffer should commence on the GPU.
            * @param buffer The buffer to execute.
            * @param queueType The desired async compute queue type to execute the buffer on.
            */
            public AddCommandBufferAsync ($evt: UnityEngine.Rendering.CameraEvent, $buffer: UnityEngine.Rendering.CommandBuffer, $queueType: UnityEngine.Rendering.ComputeQueueType) : void
            /** Remove command buffer from execution at a specified place.
            * @param evt When to execute the command buffer during rendering.
            * @param buffer The buffer to execute.
            */
            public RemoveCommandBuffer ($evt: UnityEngine.Rendering.CameraEvent, $buffer: UnityEngine.Rendering.CommandBuffer) : void
            /** Get command buffers to be executed at a specified place.
            * @param evt When to execute the command buffer during rendering.
            * @returns Array of command buffers. 
            */
            public GetCommandBuffers ($evt: UnityEngine.Rendering.CameraEvent) : System.Array$1<UnityEngine.Rendering.CommandBuffer>
            /** Get culling parameters for a camera.
            * @param cullingParameters Resultant culling parameters.
            * @param stereoAware Generate single-pass stereo aware culling parameters.
            * @returns Flag indicating whether culling parameters are valid. 
            */
            public TryGetCullingParameters ($cullingParameters: $Ref<UnityEngine.Rendering.ScriptableCullingParameters>) : boolean
            /** Get culling parameters for a camera.
            * @param cullingParameters Resultant culling parameters.
            * @param stereoAware Generate single-pass stereo aware culling parameters.
            * @returns Flag indicating whether culling parameters are valid. 
            */
            public TryGetCullingParameters ($stereoAware: boolean, $cullingParameters: $Ref<UnityEngine.Rendering.ScriptableCullingParameters>) : boolean
            public constructor ()
        }
        /** Rendering path of a Camera.
        */
        enum RenderingPath
        { UsePlayerSettings = -1, VertexLit = 0, Forward = 1, DeferredLighting = 2, DeferredShading = 3 }
        /** Transparent object sorting mode of a Camera.
        */
        enum TransparencySortMode
        { Default = 0, Perspective = 1, Orthographic = 2, CustomAxis = 3 }
        /** Describes different types of camera.
        */
        enum CameraType
        { Game = 1, SceneView = 2, Preview = 4, VR = 8, Reflection = 16 }
        /** A standard 4x4 transformation matrix.
        */
        class Matrix4x4 extends System.ValueType implements System.IEquatable$1<UnityEngine.Matrix4x4>
        {
            protected [__keep_incompatibility]: never;
            public m00 : number
            public m10 : number
            public m20 : number
            public m30 : number
            public m01 : number
            public m11 : number
            public m21 : number
            public m31 : number
            public m02 : number
            public m12 : number
            public m22 : number
            public m32 : number
            public m03 : number
            public m13 : number
            public m23 : number
            public m33 : number
            /** Attempts to get a rotation quaternion from this matrix.
            */
            public get rotation(): UnityEngine.Quaternion;
            /** Attempts to get a scale value from the matrix. (Read Only)
            */
            public get lossyScale(): UnityEngine.Vector3;
            /** Checks whether this is an identity matrix. (Read Only)
            */
            public get isIdentity(): boolean;
            /** The determinant of the matrix. (Read Only)
            */
            public get determinant(): number;
            /** This property takes a projection matrix and returns the six plane coordinates that define a projection frustum.
            */
            public get decomposeProjection(): UnityEngine.FrustumPlanes;
            /** The inverse of this matrix. (Read Only)
            */
            public get inverse(): UnityEngine.Matrix4x4;
            /** Returns the transpose of this matrix (Read Only).
            */
            public get transpose(): UnityEngine.Matrix4x4;
            /** Returns a matrix with all elements set to zero (Read Only).
            */
            public static get zero(): UnityEngine.Matrix4x4;
            /** Returns the identity matrix (Read Only).
            */
            public static get identity(): UnityEngine.Matrix4x4;
            public ValidTRS () : boolean
            public static Determinant ($m: UnityEngine.Matrix4x4) : number
            /** Creates a translation, rotation and scaling matrix.
            */
            public static TRS ($pos: UnityEngine.Vector3, $q: UnityEngine.Quaternion, $s: UnityEngine.Vector3) : UnityEngine.Matrix4x4
            /** Sets this matrix to a translation, rotation and scaling matrix.
            */
            public SetTRS ($pos: UnityEngine.Vector3, $q: UnityEngine.Quaternion, $s: UnityEngine.Vector3) : void
            /** Computes the inverse of a 3D affine matrix.
            * @param input Input matrix to invert.
            * @param result The result of the inversion. Equal to the input matrix if the function fails.
            * @returns Returns true and a valid result if the function succeeds, false and a copy of the input matrix if the function fails. 
            */
            public static Inverse3DAffine ($input: UnityEngine.Matrix4x4, $result: $Ref<UnityEngine.Matrix4x4>) : boolean
            public static Inverse ($m: UnityEngine.Matrix4x4) : UnityEngine.Matrix4x4
            public static Transpose ($m: UnityEngine.Matrix4x4) : UnityEngine.Matrix4x4
            /** Create an orthogonal projection matrix.
            * @param left Left-side x-coordinate.
            * @param right Right-side x-coordinate.
            * @param bottom Bottom y-coordinate.
            * @param top Top y-coordinate.
            * @param zNear Near depth clipping plane value.
            * @param zFar Far depth clipping plane value.
            * @returns The projection matrix. 
            */
            public static Ortho ($left: number, $right: number, $bottom: number, $top: number, $zNear: number, $zFar: number) : UnityEngine.Matrix4x4
            /** Create a perspective projection matrix.
            * @param fov Vertical field-of-view in degrees.
            * @param aspect Aspect ratio (width divided by height).
            * @param zNear Near depth clipping plane value.
            * @param zFar Far depth clipping plane value.
            * @returns The projection matrix. 
            */
            public static Perspective ($fov: number, $aspect: number, $zNear: number, $zFar: number) : UnityEngine.Matrix4x4
            /** Create a "look at" matrix.
            * @param from The source point.
            * @param to The target point.
            * @param up The vector describing the up direction (typically Vector3.up).
            * @returns The resulting transformation matrix. 
            */
            public static LookAt ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $up: UnityEngine.Vector3) : UnityEngine.Matrix4x4
            /** This function returns a projection matrix with viewing frustum that has a near plane defined by the coordinates that were passed in.
            * @param left The X coordinate of the left side of the near projection plane in view space.
            * @param right The X coordinate of the right side of the near projection plane in view space.
            * @param bottom The Y coordinate of the bottom side of the near projection plane in view space.
            * @param top The Y coordinate of the top side of the near projection plane in view space.
            * @param zNear Z distance to the near plane from the origin in view space.
            * @param zFar Z distance to the far plane from the origin in view space.
            * @param frustumPlanes Frustum planes struct that contains the view space coordinates of that define a viewing frustum.
            * @returns A projection matrix with a viewing frustum defined by the plane coordinates passed in. 
            */
            public static Frustum ($left: number, $right: number, $bottom: number, $top: number, $zNear: number, $zFar: number) : UnityEngine.Matrix4x4
            /** This function returns a projection matrix with viewing frustum that has a near plane defined by the coordinates that were passed in.
            * @param left The X coordinate of the left side of the near projection plane in view space.
            * @param right The X coordinate of the right side of the near projection plane in view space.
            * @param bottom The Y coordinate of the bottom side of the near projection plane in view space.
            * @param top The Y coordinate of the top side of the near projection plane in view space.
            * @param zNear Z distance to the near plane from the origin in view space.
            * @param zFar Z distance to the far plane from the origin in view space.
            * @param frustumPlanes Frustum planes struct that contains the view space coordinates of that define a viewing frustum.
            * @returns A projection matrix with a viewing frustum defined by the plane coordinates passed in. 
            */
            public static Frustum ($fp: UnityEngine.FrustumPlanes) : UnityEngine.Matrix4x4
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Matrix4x4) : boolean
            public static op_Multiply ($lhs: UnityEngine.Matrix4x4, $rhs: UnityEngine.Matrix4x4) : UnityEngine.Matrix4x4
            public static op_Multiply ($lhs: UnityEngine.Matrix4x4, $vector: UnityEngine.Vector4) : UnityEngine.Vector4
            public static op_Equality ($lhs: UnityEngine.Matrix4x4, $rhs: UnityEngine.Matrix4x4) : boolean
            public static op_Inequality ($lhs: UnityEngine.Matrix4x4, $rhs: UnityEngine.Matrix4x4) : boolean
            /** Get a column of the matrix.
            */
            public GetColumn ($index: number) : UnityEngine.Vector4
            /** Returns a row of the matrix.
            */
            public GetRow ($index: number) : UnityEngine.Vector4
            /** Sets a column of the matrix.
            */
            public SetColumn ($index: number, $column: UnityEngine.Vector4) : void
            /** Sets a row of the matrix.
            */
            public SetRow ($index: number, $row: UnityEngine.Vector4) : void
            /** Transforms a position by this matrix (generic).
            */
            public MultiplyPoint ($point: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms a position by this matrix (fast).
            */
            public MultiplyPoint3x4 ($point: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms a direction by this matrix.
            */
            public MultiplyVector ($vector: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Returns a plane that is transformed in space.
            */
            public TransformPlane ($plane: UnityEngine.Plane) : UnityEngine.Plane
            /** Creates a scaling matrix.
            */
            public static Scale ($vector: UnityEngine.Vector3) : UnityEngine.Matrix4x4
            /** Creates a translation matrix.
            */
            public static Translate ($vector: UnityEngine.Vector3) : UnityEngine.Matrix4x4
            /** Creates a rotation matrix.
            */
            public static Rotate ($q: UnityEngine.Quaternion) : UnityEngine.Matrix4x4
            public ToString () : string
            /** Returns a nicely formatted string for this matrix.
            */
            public ToString ($format: string) : string
            public constructor ($column0: UnityEngine.Vector4, $column1: UnityEngine.Vector4, $column2: UnityEngine.Vector4, $column3: UnityEngine.Vector4)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** Values for Camera.clearFlags, determining what to clear when rendering a Camera.
        */
        enum CameraClearFlags
        { Skybox = 1, Color = 2, SolidColor = 2, Depth = 3, Nothing = 4 }
        /** Depth texture generation mode for Camera.
        */
        enum DepthTextureMode
        { None = 0, Depth = 1, DepthNormals = 2, MotionVectors = 4 }
        /** Shader scripts used for all rendering.
        */
        class Shader extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Shader LOD level for this shader.
            */
            public get maximumLOD(): number;
            public set maximumLOD(value: number);
            /** Shader LOD level for all shaders.
            */
            public static get globalMaximumLOD(): number;
            public static set globalMaximumLOD(value: number);
            /** Can this shader run on the end-users graphics card? (Read Only)
            */
            public get isSupported(): boolean;
            /** Render pipeline currently in use.
            */
            public static get globalRenderPipeline(): string;
            public static set globalRenderPipeline(value: string);
            /** Render queue of this shader. (Read Only)
            */
            public get renderQueue(): number;
            /** Returns the number of shader passes on the active SubShader.
            */
            public get passCount(): number;
            /** Finds a shader with the given name.
            */
            public static Find ($name: string) : UnityEngine.Shader
            /** Set a global shader keyword.
            */
            public static EnableKeyword ($keyword: string) : void
            /** Unset a global shader keyword.
            */
            public static DisableKeyword ($keyword: string) : void
            /** Is global shader keyword enabled?
            */
            public static IsKeywordEnabled ($keyword: string) : boolean
            public static WarmupAllShaders () : void
            /** Gets unique identifier for a shader property name.
            * @param name Shader property name.
            * @returns Unique integer for the name. 
            */
            public static PropertyToID ($name: string) : number
            /** Returns the dependency shader.
            * @param name The name of the dependency to query.
            */
            public GetDependency ($name: string) : UnityEngine.Shader
            /** Search for the pass tag specified by tagName on the shader's active SubShader and returns the value of the tag.
            * @param passIndex The index of the pass.
            * @param tagName The name of the pass tag.
            */
            public FindPassTagValue ($passIndex: number, $tagName: UnityEngine.Rendering.ShaderTagId) : UnityEngine.Rendering.ShaderTagId
            /** Sets a global float property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalFloat ($name: string, $value: number) : void
            /** Sets a global float property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalFloat ($nameID: number, $value: number) : void
            /** Sets a global int property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalInt ($name: string, $value: number) : void
            /** Sets a global int property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalInt ($nameID: number, $value: number) : void
            /** Sets a global vector property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalVector ($name: string, $value: UnityEngine.Vector4) : void
            /** Sets a global vector property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalVector ($nameID: number, $value: UnityEngine.Vector4) : void
            /** Sets a global color property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalColor ($name: string, $value: UnityEngine.Color) : void
            /** Sets a global color property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalColor ($nameID: number, $value: UnityEngine.Color) : void
            /** Sets a global matrix property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalMatrix ($name: string, $value: UnityEngine.Matrix4x4) : void
            /** Sets a global matrix property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalMatrix ($nameID: number, $value: UnityEngine.Matrix4x4) : void
            /** Sets a global texture property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            * @param value The texture to set.
            * @param element Optional parameter that specifies the type of data from the render texture to set.
            */
            public static SetGlobalTexture ($name: string, $value: UnityEngine.Texture) : void
            /** Sets a global texture property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            * @param value The texture to set.
            * @param element Optional parameter that specifies the type of data from the render texture to set.
            */
            public static SetGlobalTexture ($nameID: number, $value: UnityEngine.Texture) : void
            /** Sets a global texture property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            * @param value The texture to set.
            * @param element Optional parameter that specifies the type of data from the render texture to set.
            */
            public static SetGlobalTexture ($name: string, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Sets a global texture property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            * @param value The texture to set.
            * @param element Optional parameter that specifies the type of data from the render texture to set.
            */
            public static SetGlobalTexture ($nameID: number, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Sets a global compute buffer property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalBuffer ($name: string, $value: UnityEngine.ComputeBuffer) : void
            /** Sets a global compute buffer property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalBuffer ($nameID: number, $value: UnityEngine.ComputeBuffer) : void
            /** Sets a ComputeBuffer as a named constant buffer for the material.
            * @param nameID The name of the constant buffer to override.
            * @param value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
            * @param offset Offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.MinConstantBufferAlignment, or 0 if that value is 0.
            * @param size The number of bytes to bind.
            */
            public static SetGlobalConstantBuffer ($nameID: number, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            public static SetGlobalFloatArray ($name: string, $values: System.Collections.Generic.List$1<number>) : void
            public static SetGlobalFloatArray ($nameID: number, $values: System.Collections.Generic.List$1<number>) : void
            /** Sets a global float array property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalFloatArray ($name: string, $values: System.Array$1<number>) : void
            /** Sets a global float array property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalFloatArray ($nameID: number, $values: System.Array$1<number>) : void
            public static SetGlobalVectorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public static SetGlobalVectorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** Sets a global vector array property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalVectorArray ($name: string, $values: System.Array$1<UnityEngine.Vector4>) : void
            /** Sets a global vector array property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalVectorArray ($nameID: number, $values: System.Array$1<UnityEngine.Vector4>) : void
            public static SetGlobalMatrixArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public static SetGlobalMatrixArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            /** Sets a global matrix array property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalMatrixArray ($name: string, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Sets a global matrix array property for all shaders.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static SetGlobalMatrixArray ($nameID: number, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Gets a global float property for all shaders previously set using SetGlobalFloat.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalFloat ($name: string) : number
            /** Gets a global float property for all shaders previously set using SetGlobalFloat.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalFloat ($nameID: number) : number
            /** Gets a global int property for all shaders previously set using SetGlobalInt.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalInt ($name: string) : number
            /** Gets a global int property for all shaders previously set using SetGlobalInt.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalInt ($nameID: number) : number
            /** Gets a global vector property for all shaders previously set using SetGlobalVector.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalVector ($name: string) : UnityEngine.Vector4
            /** Gets a global vector property for all shaders previously set using SetGlobalVector.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalVector ($nameID: number) : UnityEngine.Vector4
            /** Gets a global color property for all shaders previously set using SetGlobalColor.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalColor ($name: string) : UnityEngine.Color
            /** Gets a global color property for all shaders previously set using SetGlobalColor.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalColor ($nameID: number) : UnityEngine.Color
            /** Gets a global matrix property for all shaders previously set using SetGlobalMatrix.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalMatrix ($name: string) : UnityEngine.Matrix4x4
            /** Gets a global matrix property for all shaders previously set using SetGlobalMatrix.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalMatrix ($nameID: number) : UnityEngine.Matrix4x4
            /** Gets a global texture property for all shaders previously set using SetGlobalTexture.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalTexture ($name: string) : UnityEngine.Texture
            /** Gets a global texture property for all shaders previously set using SetGlobalTexture.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalTexture ($nameID: number) : UnityEngine.Texture
            /** Gets a global float array for all shaders previously set using SetGlobalFloatArray.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalFloatArray ($name: string) : System.Array$1<number>
            /** Gets a global float array for all shaders previously set using SetGlobalFloatArray.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalFloatArray ($nameID: number) : System.Array$1<number>
            /** Gets a global vector array for all shaders previously set using SetGlobalVectorArray.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalVectorArray ($name: string) : System.Array$1<UnityEngine.Vector4>
            /** Gets a global vector array for all shaders previously set using SetGlobalVectorArray.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalVectorArray ($nameID: number) : System.Array$1<UnityEngine.Vector4>
            /** Gets a global matrix array for all shaders previously set using SetGlobalMatrixArray.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalMatrixArray ($name: string) : System.Array$1<UnityEngine.Matrix4x4>
            /** Gets a global matrix array for all shaders previously set using SetGlobalMatrixArray.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public static GetGlobalMatrixArray ($nameID: number) : System.Array$1<UnityEngine.Matrix4x4>
            public static GetGlobalFloatArray ($name: string, $values: System.Collections.Generic.List$1<number>) : void
            public static GetGlobalFloatArray ($nameID: number, $values: System.Collections.Generic.List$1<number>) : void
            public static GetGlobalVectorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public static GetGlobalVectorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public static GetGlobalMatrixArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public static GetGlobalMatrixArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public GetPropertyCount () : number
            /** Finds the index of a shader property by its name.
            * @param propertyName The name of the shader property.
            */
            public FindPropertyIndex ($propertyName: string) : number
            /** Returns the name of the shader property at the specified index.
            * @param propertyIndex The index of the shader property.
            */
            public GetPropertyName ($propertyIndex: number) : string
            /** Returns the nameId of the shader property at the specified index.
            * @param propertyIndex The index of the shader property.
            */
            public GetPropertyNameId ($propertyIndex: number) : number
            /** Returns the ShaderPropertyType of the property at the specified index.
            * @param propertyIndex The index of the shader property.
            */
            public GetPropertyType ($propertyIndex: number) : UnityEngine.Rendering.ShaderPropertyType
            /** Returns the description string of the shader property at the specified index.
            * @param propertyIndex The index of the shader property.
            */
            public GetPropertyDescription ($propertyIndex: number) : string
            /** Returns the ShaderPropertyFlags of the shader property at the specified index.
            * @param propertyIndex The index of the shader property.
            */
            public GetPropertyFlags ($propertyIndex: number) : UnityEngine.Rendering.ShaderPropertyFlags
            /** Returns an array of strings containing attributes of the shader property at the specified index.
            * @param propertyIndex The index of the shader property.
            */
            public GetPropertyAttributes ($propertyIndex: number) : System.Array$1<string>
            /** Returns the default float value of the shader property at the specified index.
            * @param propertyIndex The index of the shader property.
            */
            public GetPropertyDefaultFloatValue ($propertyIndex: number) : number
            /** Returns the default Vector4 value of the shader property at the specified index.
            * @param propertyIndex The index of the shader property.
            */
            public GetPropertyDefaultVectorValue ($propertyIndex: number) : UnityEngine.Vector4
            /** Returns the min and max limits for a <a href="Rendering.ShaderPropertyType.Range.html">Range</a> property at the specified index.
            * @param propertyIndex The index of the shader property.
            */
            public GetPropertyRangeLimits ($propertyIndex: number) : UnityEngine.Vector2
            /** Returns the TextureDimension of a <a href="Rendering.ShaderPropertyType.Texture.html">Texture</a> shader property at the specified index.
            * @param propertyIndex The index of the shader property.
            */
            public GetPropertyTextureDimension ($propertyIndex: number) : UnityEngine.Rendering.TextureDimension
            /** Returns the default Texture name of a <a href="Rendering.ShaderPropertyType.Texture.html">Texture</a> shader property at the specified index.
            * @param propertyIndex The index of the shader property.
            */
            public GetPropertyTextureDefaultName ($propertyIndex: number) : string
        }
        /** A 2D Rectangle defined by X and Y position, width and height.
        */
        class Rect extends System.ValueType implements System.IEquatable$1<UnityEngine.Rect>
        {
            protected [__keep_incompatibility]: never;
            /** Shorthand for writing new Rect(0,0,0,0).
            */
            public static get zero(): UnityEngine.Rect;
            /** The X coordinate of the rectangle.
            */
            public get x(): number;
            public set x(value: number);
            /** The Y coordinate of the rectangle.
            */
            public get y(): number;
            public set y(value: number);
            /** The X and Y position of the rectangle.
            */
            public get position(): UnityEngine.Vector2;
            public set position(value: UnityEngine.Vector2);
            /** The position of the center of the rectangle.
            */
            public get center(): UnityEngine.Vector2;
            public set center(value: UnityEngine.Vector2);
            /** The position of the minimum corner of the rectangle.
            */
            public get min(): UnityEngine.Vector2;
            public set min(value: UnityEngine.Vector2);
            /** The position of the maximum corner of the rectangle.
            */
            public get max(): UnityEngine.Vector2;
            public set max(value: UnityEngine.Vector2);
            /** The width of the rectangle, measured from the X position.
            */
            public get width(): number;
            public set width(value: number);
            /** The height of the rectangle, measured from the Y position.
            */
            public get height(): number;
            public set height(value: number);
            /** The width and height of the rectangle.
            */
            public get size(): UnityEngine.Vector2;
            public set size(value: UnityEngine.Vector2);
            /** The minimum X coordinate of the rectangle.
            */
            public get xMin(): number;
            public set xMin(value: number);
            /** The minimum Y coordinate of the rectangle.
            */
            public get yMin(): number;
            public set yMin(value: number);
            /** The maximum X coordinate of the rectangle.
            */
            public get xMax(): number;
            public set xMax(value: number);
            /** The maximum Y coordinate of the rectangle.
            */
            public get yMax(): number;
            public set yMax(value: number);
            /** Creates a rectangle from min/max coordinate values.
            * @param xmin The minimum X coordinate.
            * @param ymin The minimum Y coordinate.
            * @param xmax The maximum X coordinate.
            * @param ymax The maximum Y coordinate.
            * @returns A rectangle matching the specified coordinates. 
            */
            public static MinMaxRect ($xmin: number, $ymin: number, $xmax: number, $ymax: number) : UnityEngine.Rect
            /** Set components of an existing Rect.
            */
            public Set ($x: number, $y: number, $width: number, $height: number) : void
            /** Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
            * @param point Point to test.
            * @param allowInverse Does the test allow the Rect's width and height to be negative?
            * @returns True if the point lies within the specified rectangle. 
            */
            public Contains ($point: UnityEngine.Vector2) : boolean
            /** Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
            * @param point Point to test.
            * @param allowInverse Does the test allow the Rect's width and height to be negative?
            * @returns True if the point lies within the specified rectangle. 
            */
            public Contains ($point: UnityEngine.Vector3) : boolean
            /** Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
            * @param point Point to test.
            * @param allowInverse Does the test allow the Rect's width and height to be negative?
            * @returns True if the point lies within the specified rectangle. 
            */
            public Contains ($point: UnityEngine.Vector3, $allowInverse: boolean) : boolean
            /** Returns true if the other rectangle overlaps this one. If allowInverse is present and true, the widths and heights of the Rects are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
            * @param other Other rectangle to test overlapping with.
            * @param allowInverse Does the test allow the widths and heights of the Rects to be negative?
            */
            public Overlaps ($other: UnityEngine.Rect) : boolean
            /** Returns true if the other rectangle overlaps this one. If allowInverse is present and true, the widths and heights of the Rects are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
            * @param other Other rectangle to test overlapping with.
            * @param allowInverse Does the test allow the widths and heights of the Rects to be negative?
            */
            public Overlaps ($other: UnityEngine.Rect, $allowInverse: boolean) : boolean
            /** Returns a point inside a rectangle, given normalized coordinates.
            * @param rectangle Rectangle to get a point inside.
            * @param normalizedRectCoordinates Normalized coordinates to get a point for.
            */
            public static NormalizedToPoint ($rectangle: UnityEngine.Rect, $normalizedRectCoordinates: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Returns the normalized coordinates cooresponding the the point.
            * @param rectangle Rectangle to get normalized coordinates inside.
            * @param point A point inside the rectangle to get normalized coordinates for.
            */
            public static PointToNormalized ($rectangle: UnityEngine.Rect, $point: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_Inequality ($lhs: UnityEngine.Rect, $rhs: UnityEngine.Rect) : boolean
            public static op_Equality ($lhs: UnityEngine.Rect, $rhs: UnityEngine.Rect) : boolean
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Rect) : boolean
            public ToString () : string
            /** Returns a nicely formatted string for this Rect.
            */
            public ToString ($format: string) : string
            public constructor ($x: number, $y: number, $width: number, $height: number)
            public constructor ($position: UnityEngine.Vector2, $size: UnityEngine.Vector2)
            public constructor ($source: UnityEngine.Rect)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** Render textures are textures that can be rendered to.
        */
        class RenderTexture extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** The width of the render texture in pixels.
            */
            public get width(): number;
            public set width(value: number);
            /** The height of the render texture in pixels.
            */
            public get height(): number;
            public set height(value: number);
            /** Dimensionality (type) of the render texture.
            */
            public get dimension(): UnityEngine.Rendering.TextureDimension;
            public set dimension(value: UnityEngine.Rendering.TextureDimension);
            /** The color format of the render texture.
            */
            public get graphicsFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set graphicsFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            /** Render texture has mipmaps when this flag is set.
            */
            public get useMipMap(): boolean;
            public set useMipMap(value: boolean);
            /** Does this render texture use sRGB read/write conversions? (Read Only).
            */
            public get sRGB(): boolean;
            /** If this RenderTexture is a VR eye texture used in stereoscopic rendering, this property decides what special rendering occurs, if any.
            */
            public get vrUsage(): UnityEngine.VRTextureUsage;
            public set vrUsage(value: UnityEngine.VRTextureUsage);
            /** The render texture memoryless mode property.
            */
            public get memorylessMode(): UnityEngine.RenderTextureMemoryless;
            public set memorylessMode(value: UnityEngine.RenderTextureMemoryless);
            public get format(): UnityEngine.RenderTextureFormat;
            public set format(value: UnityEngine.RenderTextureFormat);
            /** The format of the stencil data that is encapsulated in the render texture.
            Specifying this property will create a stencil element for the render texture and set its format.
            This allows for stencil data to be bound as a texture to all shader types for the platforms that support it.
            This property does not specify the format of the stencil buffer, which is constrained by the depth buffer format specified in RenderTexture.depth.
            At the moment, most platforms only support R8_UInt (DirectX11, DirectX12), while PS4 also supports R8_UNorm.
            */
            public get stencilFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set stencilFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            /** Mipmap levels are generated automatically when this flag is set.
            */
            public get autoGenerateMips(): boolean;
            public set autoGenerateMips(value: boolean);
            /** Volume extent of a 3D render texture or number of slices of array texture.
            */
            public get volumeDepth(): number;
            public set volumeDepth(value: number);
            /** The antialiasing level for the RenderTexture.
            */
            public get antiAliasing(): number;
            public set antiAliasing(value: number);
            /** If true and antiAliasing is greater than 1, the render texture will not be resolved by default.  Use this if the render texture needs to be bound as a multisampled texture in a shader.
            */
            public get bindTextureMS(): boolean;
            public set bindTextureMS(value: boolean);
            /** Enable random access write into this render texture on Shader Model 5.0 level shaders.
            */
            public get enableRandomWrite(): boolean;
            public set enableRandomWrite(value: boolean);
            /** Is the render texture marked to be scaled by the Dynamic Resolution system.
            */
            public get useDynamicScale(): boolean;
            public set useDynamicScale(value: boolean);
            public get isPowerOfTwo(): boolean;
            public set isPowerOfTwo(value: boolean);
            /** Currently active render texture.
            */
            public static get active(): UnityEngine.RenderTexture;
            public static set active(value: UnityEngine.RenderTexture);
            /** Color buffer of the render texture (Read Only).
            */
            public get colorBuffer(): UnityEngine.RenderBuffer;
            /** Depth/stencil buffer of the render texture (Read Only).
            */
            public get depthBuffer(): UnityEngine.RenderBuffer;
            /** The precision of the render texture's depth buffer in bits (0, 16, 24/32 are supported).
            */
            public get depth(): number;
            public set depth(value: number);
            /** This struct contains all the information required to create a RenderTexture. It can be copied, cached, and reused to easily create RenderTextures that all share the same properties.
            */
            public get descriptor(): UnityEngine.RenderTextureDescriptor;
            public set descriptor(value: UnityEngine.RenderTextureDescriptor);
            public GetNativeDepthBufferPtr () : System.IntPtr
            /** Hint the GPU driver that the contents of the RenderTexture will not be used.
            * @param discardColor Should the colour buffer be discarded?
            * @param discardDepth Should the depth buffer be discarded?
            */
            public DiscardContents ($discardColor: boolean, $discardDepth: boolean) : void
            public MarkRestoreExpected () : void
            public DiscardContents () : void
            public ResolveAntiAliasedSurface () : void
            /** Force an antialiased render texture to be resolved.
            * @param target The render texture to resolve into.  If set, the target render texture must have the same dimensions and format as the source.
            */
            public ResolveAntiAliasedSurface ($target: UnityEngine.RenderTexture) : void
            /** Assigns this RenderTexture as a global shader property named propertyName.
            */
            public SetGlobalShaderProperty ($propertyName: string) : void
            public Create () : boolean
            public Release () : void
            public IsCreated () : boolean
            public GenerateMips () : void
            public ConvertToEquirect ($equirect: UnityEngine.RenderTexture, $eye?: UnityEngine.Camera.MonoOrStereoscopicEye) : void
            /** Does a RenderTexture have stencil buffer?
            * @param rt Render texture, or null for main screen.
            */
            public static SupportsStencil ($rt: UnityEngine.RenderTexture) : boolean
            /** Release a temporary texture allocated with GetTemporary.
            */
            public static ReleaseTemporary ($temp: UnityEngine.RenderTexture) : void
            /** Allocate a temporary render texture.
            * @param width Width in pixels.
            * @param height Height in pixels.
            * @param depthBuffer Depth buffer bits (0, 16 or 24). Note that only 24 bit depth has stencil buffer.
            * @param format Render texture format.
            * @param readWrite Color space conversion mode.
            * @param antiAliasing Number of antialiasing samples to store in the texture. Valid values are 1, 2, 4, and 8. Throws an exception if any other value is passed.
            * @param memorylessMode Render texture memoryless mode.
            * @param desc Use this RenderTextureDesc for the settings when creating the temporary RenderTexture.
            */
            public static GetTemporary ($desc: UnityEngine.RenderTextureDescriptor) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless, $vrUsage: UnityEngine.VRTextureUsage, $useDynamicScale: boolean) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless, $vrUsage: UnityEngine.VRTextureUsage) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $antiAliasing: number) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat) : UnityEngine.RenderTexture
            /** Allocate a temporary render texture.
            * @param width Width in pixels.
            * @param height Height in pixels.
            * @param depthBuffer Depth buffer bits (0, 16 or 24). Note that only 24 bit depth has stencil buffer.
            * @param format Render texture format.
            * @param readWrite Color space conversion mode.
            * @param antiAliasing Number of antialiasing samples to store in the texture. Valid values are 1, 2, 4, and 8. Throws an exception if any other value is passed.
            * @param memorylessMode Render texture memoryless mode.
            * @param desc Use this RenderTextureDesc for the settings when creating the temporary RenderTexture.
            */
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless, $vrUsage: UnityEngine.VRTextureUsage, $useDynamicScale: boolean) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless, $vrUsage: UnityEngine.VRTextureUsage) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite, $antiAliasing: number) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number) : UnityEngine.RenderTexture
            public constructor ($desc: UnityEngine.RenderTextureDescriptor)
            public constructor ($textureToCopy: UnityEngine.RenderTexture)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat)
            public constructor ($width: number, $height: number, $depth: number)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat, $mipCount: number)
            public constructor ()
        }
        /** Color or depth buffer part of a RenderTexture.
        */
        class RenderBuffer extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public GetNativeRenderBufferPtr () : System.IntPtr
        }
        /** Representation of four-dimensional vectors.
        */
        class Vector4 extends System.ValueType implements System.IEquatable$1<UnityEngine.Vector4>
        {
            protected [__keep_incompatibility]: never;
            public static kEpsilon : number
            /** X component of the vector.
            */
            public x : number
            /** Y component of the vector.
            */
            public y : number
            /** Z component of the vector.
            */
            public z : number
            /** W component of the vector.
            */
            public w : number
            /** Returns this vector with a magnitude of 1 (Read Only).
            */
            public get normalized(): UnityEngine.Vector4;
            /** Returns the length of this vector (Read Only).
            */
            public get magnitude(): number;
            /** Returns the squared length of this vector (Read Only).
            */
            public get sqrMagnitude(): number;
            /** Shorthand for writing Vector4(0,0,0,0).
            */
            public static get zero(): UnityEngine.Vector4;
            /** Shorthand for writing Vector4(1,1,1,1).
            */
            public static get one(): UnityEngine.Vector4;
            /** Shorthand for writing Vector4(float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity).
            */
            public static get positiveInfinity(): UnityEngine.Vector4;
            /** Shorthand for writing Vector4(float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity).
            */
            public static get negativeInfinity(): UnityEngine.Vector4;
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Set x, y, z and w components of an existing Vector4.
            */
            public Set ($newX: number, $newY: number, $newZ: number, $newW: number) : void
            /** Linearly interpolates between two vectors.
            */
            public static Lerp ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4, $t: number) : UnityEngine.Vector4
            /** Linearly interpolates between two vectors.
            */
            public static LerpUnclamped ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4, $t: number) : UnityEngine.Vector4
            /** Moves a point current towards target.
            */
            public static MoveTowards ($current: UnityEngine.Vector4, $target: UnityEngine.Vector4, $maxDistanceDelta: number) : UnityEngine.Vector4
            /** Multiplies two vectors component-wise.
            */
            public static Scale ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4) : UnityEngine.Vector4
            /** Multiplies every component of this vector by the same component of scale.
            */
            public Scale ($scale: UnityEngine.Vector4) : void
            /** Returns true if the given vector is exactly equal to this vector.
            */
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Vector4) : boolean
            public static Normalize ($a: UnityEngine.Vector4) : UnityEngine.Vector4
            public Normalize () : void
            /** Dot Product of two vectors.
            */
            public static Dot ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4) : number
            /** Projects a vector onto another vector.
            */
            public static Project ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4) : UnityEngine.Vector4
            /** Returns the distance between a and b.
            */
            public static Distance ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4) : number
            public static Magnitude ($a: UnityEngine.Vector4) : number
            /** Returns a vector that is made from the smallest components of two vectors.
            */
            public static Min ($lhs: UnityEngine.Vector4, $rhs: UnityEngine.Vector4) : UnityEngine.Vector4
            /** Returns a vector that is made from the largest components of two vectors.
            */
            public static Max ($lhs: UnityEngine.Vector4, $rhs: UnityEngine.Vector4) : UnityEngine.Vector4
            public static op_Addition ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4) : UnityEngine.Vector4
            public static op_Subtraction ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4) : UnityEngine.Vector4
            public static op_UnaryNegation ($a: UnityEngine.Vector4) : UnityEngine.Vector4
            public static op_Multiply ($a: UnityEngine.Vector4, $d: number) : UnityEngine.Vector4
            public static op_Multiply ($d: number, $a: UnityEngine.Vector4) : UnityEngine.Vector4
            public static op_Division ($a: UnityEngine.Vector4, $d: number) : UnityEngine.Vector4
            public static op_Equality ($lhs: UnityEngine.Vector4, $rhs: UnityEngine.Vector4) : boolean
            public static op_Inequality ($lhs: UnityEngine.Vector4, $rhs: UnityEngine.Vector4) : boolean
            public static op_Implicit ($v: UnityEngine.Vector3) : UnityEngine.Vector4
            public static op_Implicit ($v: UnityEngine.Vector4) : UnityEngine.Vector3
            public static op_Implicit ($v: UnityEngine.Vector2) : UnityEngine.Vector4
            public static op_Implicit ($v: UnityEngine.Vector4) : UnityEngine.Vector2
            public ToString () : string
            /** Returns a nicely formatted string for this vector.
            */
            public ToString ($format: string) : string
            public static SqrMagnitude ($a: UnityEngine.Vector4) : number
            public SqrMagnitude () : number
            public constructor ($x: number, $y: number, $z: number, $w: number)
            public constructor ($x: number, $y: number, $z: number)
            public constructor ($x: number, $y: number)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** Representation of rays.
        */
        class Ray extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The origin point of the ray.
            */
            public get origin(): UnityEngine.Vector3;
            public set origin(value: UnityEngine.Vector3);
            /** The direction of the ray.
            */
            public get direction(): UnityEngine.Vector3;
            public set direction(value: UnityEngine.Vector3);
            /** Returns a point at distance units along the ray.
            */
            public GetPoint ($distance: number) : UnityEngine.Vector3
            public ToString () : string
            /** Returns a nicely formatted string for this ray.
            */
            public ToString ($format: string) : string
            public constructor ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3)
            public constructor ()
        }
        /** Enum values for the Camera's targetEye property.
        */
        enum StereoTargetEyeMask
        { None = 0, Left = 1, Right = 2, Both = 3 }
        /** Class for handling cube maps, Use this to create or modify existing.
        */
        class Cubemap extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** The format of the pixel data in the texture (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            public get isReadable(): boolean;
            /** Determines whether mipmap streaming is enabled for this Texture.
            */
            public get streamingMipmaps(): boolean;
            /** Sets the relative priority for this Texture when reducing memory size to fit within the memory budget.
            */
            public get streamingMipmapsPriority(): number;
            /** The mipmap level to load.
            */
            public get requestedMipmapLevel(): number;
            public set requestedMipmapLevel(value: number);
            /** The mipmap level that the streaming system would load before memory budgets are applied.
            */
            public get desiredMipmapLevel(): number;
            /** The mipmap level that the mipmap streaming system is in the process of loading.
            */
            public get loadingMipmapLevel(): number;
            /** The mipmap level that is currently loaded by the streaming system.
            */
            public get loadedMipmapLevel(): number;
            /** Updates Unity cubemap to use different native cubemap texture object.
            * @param nativeTexture Native cubemap texture object.
            */
            public UpdateExternalTexture ($nativeTexture: System.IntPtr) : void
            /** Performs smoothing of near edge regions.
            * @param smoothRegionWidthInPixels Pixel distance at edges over which to apply smoothing.
            */
            public SmoothEdges ($smoothRegionWidthInPixels: number) : void
            public SmoothEdges () : void
            /** Returns pixel colors of a cubemap face.
            * @param face The face from which pixel data is taken.
            * @param miplevel Mipmap level for the chosen face.
            */
            public GetPixels ($face: UnityEngine.CubemapFace, $miplevel: number) : System.Array$1<UnityEngine.Color>
            public GetPixels ($face: UnityEngine.CubemapFace) : System.Array$1<UnityEngine.Color>
            /** Sets pixel colors of a cubemap face.
            * @param colors Pixel data for the Cubemap face.
            * @param face The face to which the new data should be applied.
            * @param miplevel The mipmap level for the face.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $face: UnityEngine.CubemapFace, $miplevel: number) : void
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $face: UnityEngine.CubemapFace) : void
            public ClearRequestedMipmapLevel () : void
            public IsRequestedMipmapLevelLoaded () : boolean
            /** Creates a Unity cubemap out of externally created native cubemap object.
            * @param size The width and height of each face of the cubemap should be the same.
            * @param format Format of underlying cubemap object.
            * @param mipmap Does the cubemap have mipmaps?
            * @param nativeTex Native cubemap texture object.
            */
            public static CreateExternalTexture ($width: number, $format: UnityEngine.TextureFormat, $mipmap: boolean, $nativeTex: System.IntPtr) : UnityEngine.Cubemap
            /** Sets pixel color at coordinates (face, x, y).
            */
            public SetPixel ($face: UnityEngine.CubemapFace, $x: number, $y: number, $color: UnityEngine.Color) : void
            /** Returns pixel color at coordinates (face, x, y).
            */
            public GetPixel ($face: UnityEngine.CubemapFace, $x: number, $y: number) : UnityEngine.Color
            /** Actually apply all previous SetPixel and SetPixels changes.
            * @param updateMipmaps When set to true, mipmap levels are recalculated.
            * @param makeNoLongerReadable When set to true, system memory copy of a texture is released.
            */
            public Apply ($updateMipmaps: boolean, $makeNoLongerReadable: boolean) : void
            public Apply ($updateMipmaps: boolean) : void
            public Apply () : void
            public constructor ($width: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $format: UnityEngine.TextureFormat, $mipCount: number)
            public constructor ($width: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor ($width: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor ()
        }
        /** Describes a single bounding sphere for use by a CullingGroup.
        */
        class BoundingSphere extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The position of the center of the BoundingSphere.
            */
            public position : UnityEngine.Vector3
            /** The radius of the BoundingSphere.
            */
            public radius : number
            public constructor ($pos: UnityEngine.Vector3, $rad: number)
            public constructor ($packedSphere: UnityEngine.Vector4)
            public constructor ()
        }
        /** Provides information about the current and previous states of one sphere in a CullingGroup.
        */
        class CullingGroupEvent extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The index of the sphere that has changed.
            */
            public get index(): number;
            /** Was the sphere considered visible by the most recent culling pass?
            */
            public get isVisible(): boolean;
            /** Was the sphere visible before the most recent culling pass?
            */
            public get wasVisible(): boolean;
            /** Did this sphere change from being invisible to being visible in the most recent culling pass?
            */
            public get hasBecomeVisible(): boolean;
            /** Did this sphere change from being visible to being invisible in the most recent culling pass?
            */
            public get hasBecomeInvisible(): boolean;
            /** The current distance band index of the sphere, after the most recent culling pass.
            */
            public get currentDistance(): number;
            /** The distance band index of the sphere before the most recent culling pass.
            */
            public get previousDistance(): number;
        }
        /** Describes a set of bounding spheres that should have their visibility and distances maintained.
        */
        class CullingGroup extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Sets the callback that will be called when a sphere's visibility and/or distance state has changed.
            */
            public get onStateChanged(): UnityEngine.CullingGroup.StateChanged;
            public set onStateChanged(value: UnityEngine.CullingGroup.StateChanged);
            /** Pauses culling group execution.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** Locks the CullingGroup to a specific camera.
            */
            public get targetCamera(): UnityEngine.Camera;
            public set targetCamera(value: UnityEngine.Camera);
            public Dispose () : void
            /** Sets the array of bounding sphere definitions that the CullingGroup should compute culling for.
            * @param array The BoundingSpheres to cull.
            */
            public SetBoundingSpheres ($array: System.Array$1<UnityEngine.BoundingSphere>) : void
            /** Sets the number of bounding spheres in the bounding spheres array that are actually being used.
            * @param count The number of bounding spheres being used.
            */
            public SetBoundingSphereCount ($count: number) : void
            /** Erase a given bounding sphere by moving the final sphere on top of it.
            * @param index The index of the entry to erase.
            */
            public EraseSwapBack ($index: number) : void
            /** Retrieve the indices of spheres that have particular visibility and/or distance states.
            * @param visible True if only visible spheres should be retrieved; false if only invisible spheres should be retrieved.
            * @param distanceIndex The distance band that retrieved spheres must be in.
            * @param result An array that will be filled with the retrieved sphere indices.
            * @param firstIndex The index of the sphere to begin searching at.
            * @returns The number of sphere indices found and written into the result array. 
            */
            public QueryIndices ($visible: boolean, $result: System.Array$1<number>, $firstIndex: number) : number
            /** Retrieve the indices of spheres that have particular visibility and/or distance states.
            * @param visible True if only visible spheres should be retrieved; false if only invisible spheres should be retrieved.
            * @param distanceIndex The distance band that retrieved spheres must be in.
            * @param result An array that will be filled with the retrieved sphere indices.
            * @param firstIndex The index of the sphere to begin searching at.
            * @returns The number of sphere indices found and written into the result array. 
            */
            public QueryIndices ($distanceIndex: number, $result: System.Array$1<number>, $firstIndex: number) : number
            /** Retrieve the indices of spheres that have particular visibility and/or distance states.
            * @param visible True if only visible spheres should be retrieved; false if only invisible spheres should be retrieved.
            * @param distanceIndex The distance band that retrieved spheres must be in.
            * @param result An array that will be filled with the retrieved sphere indices.
            * @param firstIndex The index of the sphere to begin searching at.
            * @returns The number of sphere indices found and written into the result array. 
            */
            public QueryIndices ($visible: boolean, $distanceIndex: number, $result: System.Array$1<number>, $firstIndex: number) : number
            /** Returns true if the bounding sphere at index is currently visible from any of the contributing cameras.
            * @param index The index of the bounding sphere.
            * @returns True if the sphere is visible; false if it is invisible. 
            */
            public IsVisible ($index: number) : boolean
            /** Get the current distance band index of a given sphere.
            * @param index The index of the sphere.
            * @returns The sphere's current distance band index. 
            */
            public GetDistance ($index: number) : number
            /** Set bounding distances for 'distance bands' the group should compute, as well as options for how spheres falling into each distance band should be treated.
            * @param distances An array of bounding distances. The distances should be sorted in increasing order.
            * @param distanceBehaviours An array of CullingDistanceBehaviour settings. The array should be the same length as the array provided to the distances parameter. It can also be omitted or passed as null, in which case all distances will be given CullingDistanceBehaviour.Normal behaviour.
            */
            public SetBoundingDistances ($distances: System.Array$1<number>) : void
            /** Set the reference point from which distance bands are measured.
            * @param point A fixed point to measure the distance from.
            * @param transform A transform to measure the distance from. The transform's position will be automatically tracked.
            */
            public SetDistanceReferencePoint ($point: UnityEngine.Vector3) : void
            /** Set the reference point from which distance bands are measured.
            * @param point A fixed point to measure the distance from.
            * @param transform A transform to measure the distance from. The transform's position will be automatically tracked.
            */
            public SetDistanceReferencePoint ($transform: UnityEngine.Transform) : void
            public constructor ()
        }
        /** FlareLayer component.
        */
        class FlareLayer extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
        }
        /** The reflection probe is used to capture the surroundings into a texture which is passed to the shaders and used for reflections.
        */
        class ReflectionProbe extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The size of the box area in which reflections will be applied to the objects. Measured in the probes's local space.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            /** The center of the box area in which reflections will be applied to the objects. Measured in the probes's local space.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The near clipping plane distance when rendering the probe.
            */
            public get nearClipPlane(): number;
            public set nearClipPlane(value: number);
            /** The far clipping plane distance when rendering the probe.
            */
            public get farClipPlane(): number;
            public set farClipPlane(value: number);
            /** The intensity modifier that is applied to the texture of reflection probe in the shader.
            */
            public get intensity(): number;
            public set intensity(value: number);
            /** The bounding volume of the reflection probe (Read Only).
            */
            public get bounds(): UnityEngine.Bounds;
            /** Should this reflection probe use HDR rendering?
            */
            public get hdr(): boolean;
            public set hdr(value: boolean);
            /** Shadow drawing distance when rendering the probe.
            */
            public get shadowDistance(): number;
            public set shadowDistance(value: number);
            /** Resolution of the underlying reflection texture in pixels.
            */
            public get resolution(): number;
            public set resolution(value: number);
            /** This is used to render parts of the reflecion probe's surrounding selectively.
            */
            public get cullingMask(): number;
            public set cullingMask(value: number);
            /** How the reflection probe clears the background.
            */
            public get clearFlags(): UnityEngine.Rendering.ReflectionProbeClearFlags;
            public set clearFlags(value: UnityEngine.Rendering.ReflectionProbeClearFlags);
            /** The color with which the texture of reflection probe will be cleared.
            */
            public get backgroundColor(): UnityEngine.Color;
            public set backgroundColor(value: UnityEngine.Color);
            /** Distance around probe used for blending (used in deferred probes).
            */
            public get blendDistance(): number;
            public set blendDistance(value: number);
            /** Should this reflection probe use box projection?
            */
            public get boxProjection(): boolean;
            public set boxProjection(value: boolean);
            /** Should reflection probe texture be generated in the Editor (ReflectionProbeMode.Baked) or should probe use custom specified texure (ReflectionProbeMode.Custom)?
            */
            public get mode(): UnityEngine.Rendering.ReflectionProbeMode;
            public set mode(value: UnityEngine.Rendering.ReflectionProbeMode);
            /** Reflection probe importance.
            */
            public get importance(): number;
            public set importance(value: number);
            /** Sets the way the probe will refresh.
            See Also: ReflectionProbeRefreshMode.
            */
            public get refreshMode(): UnityEngine.Rendering.ReflectionProbeRefreshMode;
            public set refreshMode(value: UnityEngine.Rendering.ReflectionProbeRefreshMode);
            /** Sets this probe time-slicing mode
            See Also: ReflectionProbeTimeSlicingMode.
            */
            public get timeSlicingMode(): UnityEngine.Rendering.ReflectionProbeTimeSlicingMode;
            public set timeSlicingMode(value: UnityEngine.Rendering.ReflectionProbeTimeSlicingMode);
            /** Reference to the baked texture of the reflection probe's surrounding.
            */
            public get bakedTexture(): UnityEngine.Texture;
            public set bakedTexture(value: UnityEngine.Texture);
            /** Reference to the baked texture of the reflection probe's surrounding. Use this to assign custom reflection texture.
            */
            public get customBakedTexture(): UnityEngine.Texture;
            public set customBakedTexture(value: UnityEngine.Texture);
            /** Reference to the realtime texture of the reflection probe's surroundings. Use this to assign a RenderTexture to use for realtime reflection.
            */
            public get realtimeTexture(): UnityEngine.RenderTexture;
            public set realtimeTexture(value: UnityEngine.RenderTexture);
            /** Texture which is passed to the shader of the objects in the vicinity of the reflection probe (Read Only).
            */
            public get texture(): UnityEngine.Texture;
            /** HDR decode values of the reflection probe texture.
            */
            public get textureHDRDecodeValues(): UnityEngine.Vector4;
            public static get minBakedCubemapResolution(): number;
            public static get maxBakedCubemapResolution(): number;
            /** HDR decode values of the default reflection probe texture.
            */
            public static get defaultTextureHDRDecodeValues(): UnityEngine.Vector4;
            /** Texture which is used outside of all reflection probes (Read Only).
            */
            public static get defaultTexture(): UnityEngine.Texture;
            public Reset () : void
            public RenderProbe () : number
            /** Refreshes the probe's cubemap.
            * @param targetTexture Target RendeTexture in which rendering should be done. Specifying null will update the probe's default texture.
            * @returns 
            An integer representing a RenderID which can subsequently be used to check if the probe has finished rendering while rendering in time-slice mode.
            See Also: IsFinishedRendering
            See Also: timeSlicingMode
            */
            public RenderProbe ($targetTexture: UnityEngine.RenderTexture) : number
            /** Checks if a probe has finished a time-sliced render.
            * @param renderId An integer representing the RenderID as returned by the RenderProbe method.
            * @returns 
            True if the render has finished, false otherwise.
            See Also: timeSlicingMode
            */
            public IsFinishedRendering ($renderId: number) : boolean
            /** Utility method to blend 2 cubemaps into a target render texture.
            * @param src Cubemap to blend from.
            * @param dst Cubemap to blend to.
            * @param blend Blend weight.
            * @param target RenderTexture which will hold the result of the blend.
            * @returns Returns trues if cubemaps were blended, false otherwise. 
            */
            public static BlendCubemap ($src: UnityEngine.Texture, $dst: UnityEngine.Texture, $blend: number, $target: UnityEngine.RenderTexture) : boolean
            public static add_reflectionProbeChanged ($value: System.Action$2<UnityEngine.ReflectionProbe, UnityEngine.ReflectionProbe.ReflectionProbeEvent>) : void
            public static remove_reflectionProbeChanged ($value: System.Action$2<UnityEngine.ReflectionProbe, UnityEngine.ReflectionProbe.ReflectionProbeEvent>) : void
            public static add_defaultReflectionSet ($value: System.Action$1<UnityEngine.Cubemap>) : void
            public static remove_defaultReflectionSet ($value: System.Action$1<UnityEngine.Cubemap>) : void
            public constructor ()
        }
        /** Holds data for a single application crash event and provides access to all gathered crash reports.
        */
        class CrashReport extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Time, when the crash occured.
            */
            public time : Date
            /** Crash report data as formatted text.
            */
            public text : string
            /** Returns all currently available reports in a new array.
            */
            public static get reports(): System.Array$1<UnityEngine.CrashReport>;
            /** Returns last crash report, or null if no reports are available.
            */
            public static get lastReport(): UnityEngine.CrashReport;
            public static RemoveAll () : void
            public Remove () : void
        }
        /** Class containing methods to ease debugging while developing a game.
        */
        class Debug extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Get default debug logger.
            */
            public static get unityLogger(): UnityEngine.ILogger;
            /** Reports whether the development console is visible. The development console cannot be made to appear using:
            */
            public static get developerConsoleVisible(): boolean;
            public static set developerConsoleVisible(value: boolean);
            /** In the Build Settings dialog there is a check box called "Development Build".
            */
            public static get isDebugBuild(): boolean;
            /** Draws a line between specified start and end points.
            * @param start Point in world space where the line should start.
            * @param end Point in world space where the line should end.
            * @param color Color of the line.
            * @param duration How long the line should be visible for.
            * @param depthTest Should the line be obscured by objects closer to the camera?
            */
            public static DrawLine ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $color: UnityEngine.Color, $duration: number) : void
            /** Draws a line between specified start and end points.
            * @param start Point in world space where the line should start.
            * @param end Point in world space where the line should end.
            * @param color Color of the line.
            * @param duration How long the line should be visible for.
            * @param depthTest Should the line be obscured by objects closer to the camera?
            */
            public static DrawLine ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $color: UnityEngine.Color) : void
            /** Draws a line between specified start and end points.
            * @param start Point in world space where the line should start.
            * @param end Point in world space where the line should end.
            * @param color Color of the line.
            * @param duration How long the line should be visible for.
            * @param depthTest Should the line be obscured by objects closer to the camera?
            */
            public static DrawLine ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3) : void
            /** Draws a line between specified start and end points.
            * @param start Point in world space where the line should start.
            * @param end Point in world space where the line should end.
            * @param color Color of the line.
            * @param duration How long the line should be visible for.
            * @param depthTest Should the line be obscured by objects closer to the camera?
            */
            public static DrawLine ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $color: UnityEngine.Color, $duration: number, $depthTest: boolean) : void
            /** Draws a line from start to start + dir in world coordinates.
            * @param start Point in world space where the ray should start.
            * @param dir Direction and length of the ray.
            * @param color Color of the drawn line.
            * @param duration How long the line will be visible for (in seconds).
            * @param depthTest Should the line be obscured by other objects closer to the camera?
            */
            public static DrawRay ($start: UnityEngine.Vector3, $dir: UnityEngine.Vector3, $color: UnityEngine.Color, $duration: number) : void
            /** Draws a line from start to start + dir in world coordinates.
            * @param start Point in world space where the ray should start.
            * @param dir Direction and length of the ray.
            * @param color Color of the drawn line.
            * @param duration How long the line will be visible for (in seconds).
            * @param depthTest Should the line be obscured by other objects closer to the camera?
            */
            public static DrawRay ($start: UnityEngine.Vector3, $dir: UnityEngine.Vector3, $color: UnityEngine.Color) : void
            /** Draws a line from start to start + dir in world coordinates.
            * @param start Point in world space where the ray should start.
            * @param dir Direction and length of the ray.
            * @param color Color of the drawn line.
            * @param duration How long the line will be visible for (in seconds).
            * @param depthTest Should the line be obscured by other objects closer to the camera?
            */
            public static DrawRay ($start: UnityEngine.Vector3, $dir: UnityEngine.Vector3) : void
            /** Draws a line from start to start + dir in world coordinates.
            * @param start Point in world space where the ray should start.
            * @param dir Direction and length of the ray.
            * @param color Color of the drawn line.
            * @param duration How long the line will be visible for (in seconds).
            * @param depthTest Should the line be obscured by other objects closer to the camera?
            */
            public static DrawRay ($start: UnityEngine.Vector3, $dir: UnityEngine.Vector3, $color: UnityEngine.Color, $duration: number, $depthTest: boolean) : void
            public static Break () : void
            public static DebugBreak () : void
            /** Logs a message to the Unity Console.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public static Log ($message: any) : void
            /** Logs a message to the Unity Console.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public static Log ($message: any, $context: UnityEngine.Object) : void
            /** Logs a formatted message to the Unity Console.
            * @param format A composite format string.
            * @param args Format arguments.
            * @param context Object to which the message applies.
            * @param logType Type of message e.g. warn or error etc.
            * @param logOptions Option flags to treat the log message special.
            */
            public static LogFormat ($format: string, ...args: any[]) : void
            /** Logs a formatted message to the Unity Console.
            * @param format A composite format string.
            * @param args Format arguments.
            * @param context Object to which the message applies.
            * @param logType Type of message e.g. warn or error etc.
            * @param logOptions Option flags to treat the log message special.
            */
            public static LogFormat ($context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** Logs a formatted message to the Unity Console.
            * @param format A composite format string.
            * @param args Format arguments.
            * @param context Object to which the message applies.
            * @param logType Type of message e.g. warn or error etc.
            * @param logOptions Option flags to treat the log message special.
            */
            public static LogFormat ($logType: UnityEngine.LogType, $logOptions: UnityEngine.LogOption, $context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** A variant of Debug.Log that logs an error message to the console.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public static LogError ($message: any) : void
            /** A variant of Debug.Log that logs an error message to the console.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public static LogError ($message: any, $context: UnityEngine.Object) : void
            /** Logs a formatted error message to the Unity console.
            * @param format A composite format string.
            * @param args Format arguments.
            * @param context Object to which the message applies.
            */
            public static LogErrorFormat ($format: string, ...args: any[]) : void
            /** Logs a formatted error message to the Unity console.
            * @param format A composite format string.
            * @param args Format arguments.
            * @param context Object to which the message applies.
            */
            public static LogErrorFormat ($context: UnityEngine.Object, $format: string, ...args: any[]) : void
            public static ClearDeveloperConsole () : void
            /** A variant of Debug.Log that logs an error message to the console.
            * @param context Object to which the message applies.
            * @param exception Runtime Exception.
            */
            public static LogException ($exception: System.Exception) : void
            /** A variant of Debug.Log that logs an error message to the console.
            * @param context Object to which the message applies.
            * @param exception Runtime Exception.
            */
            public static LogException ($exception: System.Exception, $context: UnityEngine.Object) : void
            /** A variant of Debug.Log that logs a warning message to the console.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public static LogWarning ($message: any) : void
            /** A variant of Debug.Log that logs a warning message to the console.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public static LogWarning ($message: any, $context: UnityEngine.Object) : void
            /** Logs a formatted warning message to the Unity Console.
            * @param format A composite format string.
            * @param args Format arguments.
            * @param context Object to which the message applies.
            */
            public static LogWarningFormat ($format: string, ...args: any[]) : void
            /** Logs a formatted warning message to the Unity Console.
            * @param format A composite format string.
            * @param args Format arguments.
            * @param context Object to which the message applies.
            */
            public static LogWarningFormat ($context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** Assert a condition and logs an error message to the Unity console on failure.
            * @param condition Condition you expect to be true.
            * @param context Object to which the message applies.
            * @param message String or object to be converted to string representation for display.
            */
            public static Assert ($condition: boolean) : void
            /** Assert a condition and logs an error message to the Unity console on failure.
            * @param condition Condition you expect to be true.
            * @param context Object to which the message applies.
            * @param message String or object to be converted to string representation for display.
            */
            public static Assert ($condition: boolean, $context: UnityEngine.Object) : void
            /** Assert a condition and logs an error message to the Unity console on failure.
            * @param condition Condition you expect to be true.
            * @param context Object to which the message applies.
            * @param message String or object to be converted to string representation for display.
            */
            public static Assert ($condition: boolean, $message: any) : void
            public static Assert ($condition: boolean, $message: string) : void
            /** Assert a condition and logs an error message to the Unity console on failure.
            * @param condition Condition you expect to be true.
            * @param context Object to which the message applies.
            * @param message String or object to be converted to string representation for display.
            */
            public static Assert ($condition: boolean, $message: any, $context: UnityEngine.Object) : void
            public static Assert ($condition: boolean, $message: string, $context: UnityEngine.Object) : void
            /** Assert a condition and logs a formatted error message to the Unity console on failure.
            * @param condition Condition you expect to be true.
            * @param format A composite format string.
            * @param args Format arguments.
            * @param context Object to which the message applies.
            */
            public static AssertFormat ($condition: boolean, $format: string, ...args: any[]) : void
            /** Assert a condition and logs a formatted error message to the Unity console on failure.
            * @param condition Condition you expect to be true.
            * @param format A composite format string.
            * @param args Format arguments.
            * @param context Object to which the message applies.
            */
            public static AssertFormat ($condition: boolean, $context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** A variant of Debug.Log that logs an assertion message to the console.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public static LogAssertion ($message: any) : void
            /** A variant of Debug.Log that logs an assertion message to the console.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public static LogAssertion ($message: any, $context: UnityEngine.Object) : void
            /** Logs a formatted assertion message to the Unity console.
            * @param format A composite format string.
            * @param args Format arguments.
            * @param context Object to which the message applies.
            */
            public static LogAssertionFormat ($format: string, ...args: any[]) : void
            /** Logs a formatted assertion message to the Unity console.
            * @param format A composite format string.
            * @param args Format arguments.
            * @param context Object to which the message applies.
            */
            public static LogAssertionFormat ($context: UnityEngine.Object, $format: string, ...args: any[]) : void
            public constructor ()
        }
        interface ILogger extends UnityEngine.ILogHandler
        {
            /** Set Logger.ILogHandler.
            */
            logHandler : UnityEngine.ILogHandler
            /** To runtime toggle debug logging [ON/OFF].
            */
            logEnabled : boolean
            /** To selective enable debug log message.
            */
            filterLogType : UnityEngine.LogType
            /** Check logging is enabled based on the LogType.
            * @returns Retrun true in case logs of LogType will be logged otherwise returns false. 
            */
            IsLogTypeAllowed ($logType: UnityEngine.LogType) : boolean
            /** Logs message to the Unity Console using default logger.
            */
            Log ($logType: UnityEngine.LogType, $message: any) : void
            /** Logs message to the Unity Console using default logger.
            */
            Log ($logType: UnityEngine.LogType, $message: any, $context: UnityEngine.Object) : void
            /** Logs message to the Unity Console using default logger.
            */
            Log ($logType: UnityEngine.LogType, $tag: string, $message: any) : void
            /** Logs message to the Unity Console using default logger.
            */
            Log ($logType: UnityEngine.LogType, $tag: string, $message: any, $context: UnityEngine.Object) : void
            /** Logs message to the Unity Console using default logger.
            */
            Log ($message: any) : void
            /** Logs message to the Unity Console using default logger.
            */
            Log ($tag: string, $message: any) : void
            /** Logs message to the Unity Console using default logger.
            */
            Log ($tag: string, $message: any, $context: UnityEngine.Object) : void
            /** A variant of Logger.Log that logs an warning message.
            */
            LogWarning ($tag: string, $message: any) : void
            /** A variant of Logger.Log that logs an warning message.
            */
            LogWarning ($tag: string, $message: any, $context: UnityEngine.Object) : void
            /** A variant of ILogger.Log that logs an error message.
            */
            LogError ($tag: string, $message: any) : void
            /** A variant of ILogger.Log that logs an error message.
            */
            LogError ($tag: string, $message: any, $context: UnityEngine.Object) : void
            /** Logs a formatted message.
            */
            LogFormat ($logType: UnityEngine.LogType, $format: string, ...args: any[]) : void
            /** A variant of ILogger.Log that logs an exception message.
            */
            LogException ($exception: System.Exception) : void
            /** Logs a formatted message.
            * @param logType The type of the log message.
            * @param context Object to which the message applies.
            * @param format A composite format string.
            * @param args Format arguments.
            */
            LogFormat ($logType: UnityEngine.LogType, $context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** A variant of ILogHandler.LogFormat that logs an exception message.
            * @param exception Runtime Exception.
            * @param context Object to which the message applies.
            */
            LogException ($exception: System.Exception, $context: UnityEngine.Object) : void
        }
        interface ILogHandler
        {
            /** Logs a formatted message.
            * @param logType The type of the log message.
            * @param context Object to which the message applies.
            * @param format A composite format string.
            * @param args Format arguments.
            */
            LogFormat ($logType: UnityEngine.LogType, $context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** A variant of ILogHandler.LogFormat that logs an exception message.
            * @param exception Runtime Exception.
            * @param context Object to which the message applies.
            */
            LogException ($exception: System.Exception, $context: UnityEngine.Object) : void
        }
        /** Object that is used to resolve references to an ExposedReference field.
        */
        class ExposedPropertyResolver extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        interface IExposedPropertyTable
        {
            /** Assigns a value for an ExposedReference.
            * @param id Identifier of the ExposedReference.
            * @param value The value to assigned to the ExposedReference.
            */
            SetReferenceValue ($id: UnityEngine.PropertyName, $value: UnityEngine.Object) : void
            /** Retrieves a value for the given identifier.
            * @param id Identifier of the ExposedReference.
            * @param idValid Is the identifier valid?
            * @returns The value stored in the table. 
            */
            GetReferenceValue ($id: UnityEngine.PropertyName, $idValid: $Ref<boolean>) : UnityEngine.Object
            /** Remove a value for the given reference.
            * @param id Identifier of the ExposedReference.
            */
            ClearReferenceValue ($id: UnityEngine.PropertyName) : void
        }
        /** Represents a string as an int for efficient lookup and comparison. Use this for common PropertyNames.
        Internally stores just an int to represent the string. A PropertyName can be created from a string but can not be converted back to a string. The same string always results in the same int representing that string. Thus this is a very efficient string representation in both memory and speed when all you need is comparison.
        PropertyName is serializable.
        ToString() is only implemented for debugging purposes in the editor it returns "theName:3737" in the player it returns "Unknown:3737".
        */
        class PropertyName extends System.ValueType implements System.IEquatable$1<UnityEngine.PropertyName>
        {
            protected [__keep_incompatibility]: never;
            /** Indicates whether the specified PropertyName is an Empty string.
            */
            public static IsNullOrEmpty ($prop: UnityEngine.PropertyName) : boolean
            public static op_Equality ($lhs: UnityEngine.PropertyName, $rhs: UnityEngine.PropertyName) : boolean
            public static op_Inequality ($lhs: UnityEngine.PropertyName, $rhs: UnityEngine.PropertyName) : boolean
            /** Determines whether this instance and a specified object, which must also be a PropertyName object, have the same value.
            */
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.PropertyName) : boolean
            public static op_Implicit ($name: string) : UnityEngine.PropertyName
            public static op_Implicit ($id: number) : UnityEngine.PropertyName
            public constructor ($name: string)
            public constructor ($other: UnityEngine.PropertyName)
            public constructor ($id: number)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        class EventProvider extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static WriteCustomEvent ($value: number, $text: string) : void
            public constructor ()
        }
        /** Allows to control the dynamic Global Illumination.
        */
        class DynamicGI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Allows for scaling the contribution coming from realtime & baked lightmaps.
            Note: this value can be set in the Lighting Window UI and it is serialized, that is not the case for other properties in this class.
            */
            public static get indirectScale(): number;
            public static set indirectScale(value: number);
            /** Threshold for limiting updates of realtime GI. The unit of measurement is "percentage intensity change".
            */
            public static get updateThreshold(): number;
            public static set updateThreshold(value: number);
            /** The number of milliseconds that can be spent on material updates.
            */
            public static get materialUpdateTimeSlice(): number;
            public static set materialUpdateTimeSlice(value: number);
            /** When enabled, new dynamic Global Illumination output is shown in each frame.
            */
            public static get synchronousMode(): boolean;
            public static set synchronousMode(value: boolean);
            /** Is precomputed realtime Global Illumination output converged?
            */
            public static get isConverged(): boolean;
            /** Allows to set an emissive color for a given renderer quickly, without the need to render the emissive input for the entire system.
            * @param renderer The Renderer that should get a new color.
            * @param color The emissive Color.
            */
            public static SetEmissive ($renderer: UnityEngine.Renderer, $color: UnityEngine.Color) : void
            /** Allows overriding the distant environment lighting for Realtime GI, without changing the Skybox Material.
            * @param input Array of float values to be used for Realtime GI environment lighting.
            */
            public static SetEnvironmentData ($input: System.Array$1<number>) : void
            public static UpdateEnvironment () : void
            public constructor ()
        }
        /** General functionality for all renderers.
        */
        class Renderer extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** The bounding volume of the renderer (Read Only).
            */
            public get bounds(): UnityEngine.Bounds;
            /** Makes the rendered 3D object visible if enabled.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** Is this renderer visible in any camera? (Read Only)
            */
            public get isVisible(): boolean;
            /** Does this object cast shadows?
            */
            public get shadowCastingMode(): UnityEngine.Rendering.ShadowCastingMode;
            public set shadowCastingMode(value: UnityEngine.Rendering.ShadowCastingMode);
            /** Does this object receive shadows?
            */
            public get receiveShadows(): boolean;
            public set receiveShadows(value: boolean);
            /** Allows turning off rendering for a specific component.
            */
            public get forceRenderingOff(): boolean;
            public set forceRenderingOff(value: boolean);
            /** Specifies the mode for motion vector rendering.
            */
            public get motionVectorGenerationMode(): UnityEngine.MotionVectorGenerationMode;
            public set motionVectorGenerationMode(value: UnityEngine.MotionVectorGenerationMode);
            /** The light probe interpolation type.
            */
            public get lightProbeUsage(): UnityEngine.Rendering.LightProbeUsage;
            public set lightProbeUsage(value: UnityEngine.Rendering.LightProbeUsage);
            /** Should reflection probes be used for this Renderer?
            */
            public get reflectionProbeUsage(): UnityEngine.Rendering.ReflectionProbeUsage;
            public set reflectionProbeUsage(value: UnityEngine.Rendering.ReflectionProbeUsage);
            /** Determines which rendering layer this renderer lives on.
            */
            public get renderingLayerMask(): number;
            public set renderingLayerMask(value: number);
            /** This value sorts renderers by priority. Lower values are rendered first and higher values are rendered last.
            */
            public get rendererPriority(): number;
            public set rendererPriority(value: number);
            /** Describes how this renderer is updated for ray tracing.
            */
            public get rayTracingMode(): UnityEngine.Experimental.Rendering.RayTracingMode;
            public set rayTracingMode(value: UnityEngine.Experimental.Rendering.RayTracingMode);
            /** Name of the Renderer's sorting layer.
            */
            public get sortingLayerName(): string;
            public set sortingLayerName(value: string);
            /** Unique ID of the Renderer's sorting layer.
            */
            public get sortingLayerID(): number;
            public set sortingLayerID(value: number);
            /** Renderer's order within a sorting layer.
            */
            public get sortingOrder(): number;
            public set sortingOrder(value: number);
            /** Controls if dynamic occlusion culling should be performed for this renderer.
            */
            public get allowOcclusionWhenDynamic(): boolean;
            public set allowOcclusionWhenDynamic(value: boolean);
            /** Has this renderer been statically batched with any other renderers?
            */
            public get isPartOfStaticBatch(): boolean;
            /** Matrix that transforms a point from world space into local space (Read Only).
            */
            public get worldToLocalMatrix(): UnityEngine.Matrix4x4;
            /** Matrix that transforms a point from local space into world space (Read Only).
            */
            public get localToWorldMatrix(): UnityEngine.Matrix4x4;
            /** If set, the Renderer will use the Light Probe Proxy Volume component attached to the source GameObject.
            */
            public get lightProbeProxyVolumeOverride(): UnityEngine.GameObject;
            public set lightProbeProxyVolumeOverride(value: UnityEngine.GameObject);
            /** If set, Renderer will use this Transform's position to find the light or reflection probe.
            */
            public get probeAnchor(): UnityEngine.Transform;
            public set probeAnchor(value: UnityEngine.Transform);
            /** The index of the baked lightmap applied to this renderer.
            */
            public get lightmapIndex(): number;
            public set lightmapIndex(value: number);
            /** The index of the realtime lightmap applied to this renderer.
            */
            public get realtimeLightmapIndex(): number;
            public set realtimeLightmapIndex(value: number);
            /** The UV scale & offset used for a lightmap.
            */
            public get lightmapScaleOffset(): UnityEngine.Vector4;
            public set lightmapScaleOffset(value: UnityEngine.Vector4);
            /** The UV scale & offset used for a realtime lightmap.
            */
            public get realtimeLightmapScaleOffset(): UnityEngine.Vector4;
            public set realtimeLightmapScaleOffset(value: UnityEngine.Vector4);
            /** Returns all the instantiated materials of this object.
            */
            public get materials(): System.Array$1<UnityEngine.Material>;
            public set materials(value: System.Array$1<UnityEngine.Material>);
            /** Returns the first instantiated Material assigned to the renderer.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            /** The shared material of this object.
            */
            public get sharedMaterial(): UnityEngine.Material;
            public set sharedMaterial(value: UnityEngine.Material);
            /** All the shared materials of this object.
            */
            public get sharedMaterials(): System.Array$1<UnityEngine.Material>;
            public set sharedMaterials(value: System.Array$1<UnityEngine.Material>);
            public HasPropertyBlock () : boolean
            /** Lets you set or clear per-renderer or per-material parameter overrides.
            * @param properties Property block with values you want to override.
            * @param materialIndex The index of the Material you want to override the parameters of. The index ranges from 0 to Renderer.sharedMaterial.Length-1.
            */
            public SetPropertyBlock ($properties: UnityEngine.MaterialPropertyBlock) : void
            /** Lets you set or clear per-renderer or per-material parameter overrides.
            * @param properties Property block with values you want to override.
            * @param materialIndex The index of the Material you want to override the parameters of. The index ranges from 0 to Renderer.sharedMaterial.Length-1.
            */
            public SetPropertyBlock ($properties: UnityEngine.MaterialPropertyBlock, $materialIndex: number) : void
            /** Get per-Renderer or per-Material property block.
            * @param properties Material parameters to retrieve.
            * @param materialIndex The index of the Material you want to get overridden parameters from. The index ranges from 0 to Renderer.sharedMaterials.Length-1.
            */
            public GetPropertyBlock ($properties: UnityEngine.MaterialPropertyBlock) : void
            /** Get per-Renderer or per-Material property block.
            * @param properties Material parameters to retrieve.
            * @param materialIndex The index of the Material you want to get overridden parameters from. The index ranges from 0 to Renderer.sharedMaterials.Length-1.
            */
            public GetPropertyBlock ($properties: UnityEngine.MaterialPropertyBlock, $materialIndex: number) : void
            public GetMaterials ($m: System.Collections.Generic.List$1<UnityEngine.Material>) : void
            public GetSharedMaterials ($m: System.Collections.Generic.List$1<UnityEngine.Material>) : void
            public GetClosestReflectionProbes ($result: System.Collections.Generic.List$1<UnityEngine.Rendering.ReflectionProbeBlendInfo>) : void
            public constructor ()
        }
        /** General functionality for all renderers.
        */
        interface Renderer {
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Renderer.
            */
            UpdateGIMaterials () : void;
        }
        /** Represents an axis aligned bounding box with all values as integers.
        */
        class BoundsInt extends System.ValueType implements System.IEquatable$1<UnityEngine.BoundsInt>
        {
            protected [__keep_incompatibility]: never;
            /** X value of the minimal point of the box.
            */
            public get x(): number;
            public set x(value: number);
            /** Y value of the minimal point of the box.
            */
            public get y(): number;
            public set y(value: number);
            /** Z value of the minimal point of the box.
            */
            public get z(): number;
            public set z(value: number);
            /** The center of the bounding box.
            */
            public get center(): UnityEngine.Vector3;
            /** The minimal point of the box.
            */
            public get min(): UnityEngine.Vector3Int;
            public set min(value: UnityEngine.Vector3Int);
            /** The maximal point of the box.
            */
            public get max(): UnityEngine.Vector3Int;
            public set max(value: UnityEngine.Vector3Int);
            /** The minimal x point of the box.
            */
            public get xMin(): number;
            public set xMin(value: number);
            /** The minimal y point of the box.
            */
            public get yMin(): number;
            public set yMin(value: number);
            /** The minimal z point of the box.
            */
            public get zMin(): number;
            public set zMin(value: number);
            /** The maximal x point of the box.
            */
            public get xMax(): number;
            public set xMax(value: number);
            /** The maximal y point of the box.
            */
            public get yMax(): number;
            public set yMax(value: number);
            /** The maximal z point of the box.
            */
            public get zMax(): number;
            public set zMax(value: number);
            /** The position of the bounding box.
            */
            public get position(): UnityEngine.Vector3Int;
            public set position(value: UnityEngine.Vector3Int);
            /** The total size of the box.
            */
            public get size(): UnityEngine.Vector3Int;
            public set size(value: UnityEngine.Vector3Int);
            /** A BoundsInt.PositionCollection that contains all positions within the BoundsInt.
            */
            public get allPositionsWithin(): UnityEngine.BoundsInt.PositionEnumerator;
            /** Sets the bounds to the min and max value of the box.
            */
            public SetMinMax ($minPosition: UnityEngine.Vector3Int, $maxPosition: UnityEngine.Vector3Int) : void
            /** Clamps the position and size of this bounding box to the given bounds.
            * @param bounds Bounds to clamp to.
            */
            public ClampToBounds ($bounds: UnityEngine.BoundsInt) : void
            /** Is point contained in the bounding box?
            * @param position Point to check.
            * @param inclusive Whether the max limits are included in the check.
            * @returns Is point contained in the bounding box? 
            */
            public Contains ($position: UnityEngine.Vector3Int) : boolean
            public static op_Equality ($lhs: UnityEngine.BoundsInt, $rhs: UnityEngine.BoundsInt) : boolean
            public static op_Inequality ($lhs: UnityEngine.BoundsInt, $rhs: UnityEngine.BoundsInt) : boolean
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.BoundsInt) : boolean
            public constructor ($xMin: number, $yMin: number, $zMin: number, $sizeX: number, $sizeY: number, $sizeZ: number)
            public constructor ($position: UnityEngine.Vector3Int, $size: UnityEngine.Vector3Int)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** Representation of 3D vectors and points using integers.
        */
        class Vector3Int extends System.ValueType implements System.IEquatable$1<UnityEngine.Vector3Int>
        {
            protected [__keep_incompatibility]: never;
            /** X component of the vector.
            */
            public get x(): number;
            public set x(value: number);
            /** Y component of the vector.
            */
            public get y(): number;
            public set y(value: number);
            /** Z component of the vector.
            */
            public get z(): number;
            public set z(value: number);
            /** Returns the length of this vector (Read Only).
            */
            public get magnitude(): number;
            /** Returns the squared length of this vector (Read Only).
            */
            public get sqrMagnitude(): number;
            /** Shorthand for writing Vector3Int (0, 0, 0).
            */
            public static get zero(): UnityEngine.Vector3Int;
            /** Shorthand for writing Vector3Int (1, 1, 1).
            */
            public static get one(): UnityEngine.Vector3Int;
            /** Shorthand for writing Vector3Int (0, 1, 0).
            */
            public static get up(): UnityEngine.Vector3Int;
            /** Shorthand for writing Vector3Int (0, -1, 0).
            */
            public static get down(): UnityEngine.Vector3Int;
            /** Shorthand for writing Vector3Int (-1, 0, 0).
            */
            public static get left(): UnityEngine.Vector3Int;
            /** Shorthand for writing Vector3Int (1, 0, 0).
            */
            public static get right(): UnityEngine.Vector3Int;
            /** Set x, y and z components of an existing Vector3Int.
            */
            public Set ($x: number, $y: number, $z: number) : void
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Returns the distance between a and b.
            */
            public static Distance ($a: UnityEngine.Vector3Int, $b: UnityEngine.Vector3Int) : number
            /** Returns a vector that is made from the smallest components of two vectors.
            */
            public static Min ($lhs: UnityEngine.Vector3Int, $rhs: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            /** Returns a vector that is made from the largest components of two vectors.
            */
            public static Max ($lhs: UnityEngine.Vector3Int, $rhs: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            /** Multiplies two vectors component-wise.
            */
            public static Scale ($a: UnityEngine.Vector3Int, $b: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            /** Multiplies every component of this vector by the same component of scale.
            */
            public Scale ($scale: UnityEngine.Vector3Int) : void
            /** Clamps the Vector3Int to the bounds given by min and max.
            */
            public Clamp ($min: UnityEngine.Vector3Int, $max: UnityEngine.Vector3Int) : void
            public static op_Implicit ($v: UnityEngine.Vector3Int) : UnityEngine.Vector3
            public static op_Explicit ($v: UnityEngine.Vector3Int) : UnityEngine.Vector2Int
            /** Converts a  Vector3 to a Vector3Int by doing a Floor to each value.
            */
            public static FloorToInt ($v: UnityEngine.Vector3) : UnityEngine.Vector3Int
            /** Converts a  Vector3 to a Vector3Int by doing a Ceiling to each value.
            */
            public static CeilToInt ($v: UnityEngine.Vector3) : UnityEngine.Vector3Int
            /** Converts a  Vector3 to a Vector3Int by doing a Round to each value.
            */
            public static RoundToInt ($v: UnityEngine.Vector3) : UnityEngine.Vector3Int
            public static op_Addition ($a: UnityEngine.Vector3Int, $b: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            public static op_Subtraction ($a: UnityEngine.Vector3Int, $b: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            public static op_Multiply ($a: UnityEngine.Vector3Int, $b: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            public static op_UnaryNegation ($a: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            public static op_Multiply ($a: UnityEngine.Vector3Int, $b: number) : UnityEngine.Vector3Int
            public static op_Multiply ($a: number, $b: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            public static op_Division ($a: UnityEngine.Vector3Int, $b: number) : UnityEngine.Vector3Int
            public static op_Equality ($lhs: UnityEngine.Vector3Int, $rhs: UnityEngine.Vector3Int) : boolean
            public static op_Inequality ($lhs: UnityEngine.Vector3Int, $rhs: UnityEngine.Vector3Int) : boolean
            /** Returns true if the objects are equal.
            */
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Vector3Int) : boolean
            public ToString () : string
            /** Returns a nicely formatted string for this vector.
            */
            public ToString ($format: string) : string
            public constructor ($x: number, $y: number, $z: number)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** Utility class for common geometric functions.
        */
        class GeometryUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Calculates frustum planes.
            * @param camera The camera with the view frustum that you want to calculate planes from.
            * @returns The planes that form the camera's view frustum. 
            */
            public static CalculateFrustumPlanes ($camera: UnityEngine.Camera) : System.Array$1<UnityEngine.Plane>
            /** Calculates frustum planes.
            * @param worldToProjectionMatrix A matrix that transforms from world space to projection space, from which the planes will be calculated.
            * @returns The planes that enclose the projection space described by the matrix. 
            */
            public static CalculateFrustumPlanes ($worldToProjectionMatrix: UnityEngine.Matrix4x4) : System.Array$1<UnityEngine.Plane>
            /** Calculates frustum planes.
            * @param camera The camera with the view frustum that you want to calculate planes from.
            * @param planes An array of 6 Planes that will be overwritten with the calculated plane values.
            */
            public static CalculateFrustumPlanes ($camera: UnityEngine.Camera, $planes: System.Array$1<UnityEngine.Plane>) : void
            /** Calculates frustum planes.
            * @param worldToProjectionMatrix A matrix that transforms from world space to projection space, from which the planes will be calculated.
            * @param planes An array of 6 Planes that will be overwritten with the calculated plane values.
            */
            public static CalculateFrustumPlanes ($worldToProjectionMatrix: UnityEngine.Matrix4x4, $planes: System.Array$1<UnityEngine.Plane>) : void
            /** Calculates the bounding box from the given array of positions and the transformation matrix.
            * @param positions An array that stores the location of 3d positions.
            * @param transform A matrix that changes the position, rotation and size of the bounds calculation.
            * @returns Calculates the axis-aligned bounding box. 
            */
            public static CalculateBounds ($positions: System.Array$1<UnityEngine.Vector3>, $transform: UnityEngine.Matrix4x4) : UnityEngine.Bounds
            /** GeometryUtility.TryCreatePlaneFromPolygon creates a plane from the given list of vertices that define the polygon, as long as they do not characterize a straight line or zero area.
            * @param vertices An array of vertex positions that define the shape of a polygon.
            * @param plane A valid plane that goes through the vertices.
            * @returns Returns true on success, false if Unity did not create a plane from the vertices. 
            */
            public static TryCreatePlaneFromPolygon ($vertices: System.Array$1<UnityEngine.Vector3>, $plane: $Ref<UnityEngine.Plane>) : boolean
            /** Returns true if bounds are inside the plane array.
            */
            public static TestPlanesAABB ($planes: System.Array$1<UnityEngine.Plane>, $bounds: UnityEngine.Bounds) : boolean
            public constructor ()
        }
        /** Representation of a plane in 3D space.
        */
        class Plane extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Normal vector of the plane.
            */
            public get normal(): UnityEngine.Vector3;
            public set normal(value: UnityEngine.Vector3);
            /** Distance from the origin to the plane.
            */
            public get distance(): number;
            public set distance(value: number);
            /** Returns a copy of the plane that faces in the opposite direction.
            */
            public get flipped(): UnityEngine.Plane;
            /** Sets a plane using a point that lies within it along with a normal to orient it.
            * @param inNormal The plane's normal vector.
            * @param inPoint A point that lies on the plane.
            */
            public SetNormalAndPosition ($inNormal: UnityEngine.Vector3, $inPoint: UnityEngine.Vector3) : void
            /** Sets a plane using three points that lie within it.  The points go around clockwise as you look down on the top surface of the plane.
            * @param a First point in clockwise order.
            * @param b Second point in clockwise order.
            * @param c Third point in clockwise order.
            */
            public Set3Points ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $c: UnityEngine.Vector3) : void
            public Flip () : void
            /** Moves the plane in space by the translation vector.
            * @param translation The offset in space to move the plane with.
            */
            public Translate ($translation: UnityEngine.Vector3) : void
            /** Returns a copy of the given plane that is moved in space by the given translation.
            * @param plane The plane to move in space.
            * @param translation The offset in space to move the plane with.
            * @returns The translated plane. 
            */
            public static Translate ($plane: UnityEngine.Plane, $translation: UnityEngine.Vector3) : UnityEngine.Plane
            /** For a given point returns the closest point on the plane.
            * @param point The point to project onto the plane.
            * @returns A point on the plane that is closest to point. 
            */
            public ClosestPointOnPlane ($point: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Returns a signed distance from plane to point.
            */
            public GetDistanceToPoint ($point: UnityEngine.Vector3) : number
            /** Is a point on the positive side of the plane?
            */
            public GetSide ($point: UnityEngine.Vector3) : boolean
            /** Are two points on the same side of the plane?
            */
            public SameSide ($inPt0: UnityEngine.Vector3, $inPt1: UnityEngine.Vector3) : boolean
            /** Intersects a ray with the plane.
            */
            public Raycast ($ray: UnityEngine.Ray, $enter: $Ref<number>) : boolean
            public ToString () : string
            public ToString ($format: string) : string
            public constructor ($inNormal: UnityEngine.Vector3, $inPoint: UnityEngine.Vector3)
            public constructor ($inNormal: UnityEngine.Vector3, $d: number)
            public constructor ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $c: UnityEngine.Vector3)
            public constructor ()
        }
        /** A ray in 2D space.
        */
        class Ray2D extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The starting point of the ray in world space.
            */
            public get origin(): UnityEngine.Vector2;
            public set origin(value: UnityEngine.Vector2);
            /** The direction of the ray in world space.
            */
            public get direction(): UnityEngine.Vector2;
            public set direction(value: UnityEngine.Vector2);
            /** Get a point that lies a given distance along a ray.
            * @param distance Distance of the desired point along the path of the ray.
            */
            public GetPoint ($distance: number) : UnityEngine.Vector2
            public ToString () : string
            public ToString ($format: string) : string
            public constructor ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2)
            public constructor ()
        }
        /** A 2D Rectangle defined by x, y, width, height with integers.
        */
        class RectInt extends System.ValueType implements System.IEquatable$1<UnityEngine.RectInt>
        {
            protected [__keep_incompatibility]: never;
            /** Left coordinate of the rectangle.
            */
            public get x(): number;
            public set x(value: number);
            /** Top coordinate of the rectangle.
            */
            public get y(): number;
            public set y(value: number);
            /** Center coordinate of the rectangle.
            */
            public get center(): UnityEngine.Vector2;
            /** Lower left corner of the rectangle.
            */
            public get min(): UnityEngine.Vector2Int;
            public set min(value: UnityEngine.Vector2Int);
            /** Upper right corner of the rectangle.
            */
            public get max(): UnityEngine.Vector2Int;
            public set max(value: UnityEngine.Vector2Int);
            /** Width of the rectangle.
            */
            public get width(): number;
            public set width(value: number);
            /** Height of the rectangle.
            */
            public get height(): number;
            public set height(value: number);
            /** Returns the minimum X value of the RectInt.
            */
            public get xMin(): number;
            public set xMin(value: number);
            /** Returns the minimum Y value of the RectInt.
            */
            public get yMin(): number;
            public set yMin(value: number);
            /** Returns the maximum X value of the RectInt.
            */
            public get xMax(): number;
            public set xMax(value: number);
            /** Returns the maximum Y value of the RectInt.
            */
            public get yMax(): number;
            public set yMax(value: number);
            /** Returns the position (x, y) of the RectInt.
            */
            public get position(): UnityEngine.Vector2Int;
            public set position(value: UnityEngine.Vector2Int);
            /** Returns the width and height of the RectInt.
            */
            public get size(): UnityEngine.Vector2Int;
            public set size(value: UnityEngine.Vector2Int);
            /** A RectInt.PositionCollection that contains all positions within the RectInt.
            */
            public get allPositionsWithin(): UnityEngine.RectInt.PositionEnumerator;
            /** Sets the bounds to the min and max value of the rect.
            */
            public SetMinMax ($minPosition: UnityEngine.Vector2Int, $maxPosition: UnityEngine.Vector2Int) : void
            /** Clamps the position and size of the RectInt to the given bounds.
            * @param bounds Bounds to clamp the RectInt.
            */
            public ClampToBounds ($bounds: UnityEngine.RectInt) : void
            /** Returns true if the given position is within the RectInt.
            * @param position Position to check.
            * @returns Whether the position is within the RectInt. 
            */
            public Contains ($position: UnityEngine.Vector2Int) : boolean
            /** RectInts overlap if each RectInt Contains a shared point.
            * @param other Other rectangle to test overlapping with.
            * @returns True if the other rectangle overlaps this one. 
            */
            public Overlaps ($other: UnityEngine.RectInt) : boolean
            /** Returns true if the given RectInt is equal to this RectInt.
            */
            public Equals ($other: UnityEngine.RectInt) : boolean
            public constructor ($xMin: number, $yMin: number, $width: number, $height: number)
            public constructor ($position: UnityEngine.Vector2Int, $size: UnityEngine.Vector2Int)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** Representation of 2D vectors and points using integers.
        */
        class Vector2Int extends System.ValueType implements System.IEquatable$1<UnityEngine.Vector2Int>
        {
            protected [__keep_incompatibility]: never;
            /** X component of the vector.
            */
            public get x(): number;
            public set x(value: number);
            /** Y component of the vector.
            */
            public get y(): number;
            public set y(value: number);
            /** Returns the length of this vector (Read Only).
            */
            public get magnitude(): number;
            /** Returns the squared length of this vector (Read Only).
            */
            public get sqrMagnitude(): number;
            /** Shorthand for writing Vector2Int (0, 0).
            */
            public static get zero(): UnityEngine.Vector2Int;
            /** Shorthand for writing Vector2Int (1, 1).
            */
            public static get one(): UnityEngine.Vector2Int;
            /** Shorthand for writing Vector2Int (0, 1).
            */
            public static get up(): UnityEngine.Vector2Int;
            /** Shorthand for writing Vector2Int (0, -1).
            */
            public static get down(): UnityEngine.Vector2Int;
            /** Shorthand for writing Vector2Int (-1, 0).
            */
            public static get left(): UnityEngine.Vector2Int;
            /** Shorthand for writing Vector2Int (1, 0).
            */
            public static get right(): UnityEngine.Vector2Int;
            /** Set x and y components of an existing Vector2Int.
            */
            public Set ($x: number, $y: number) : void
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Returns the distance between a and b.
            */
            public static Distance ($a: UnityEngine.Vector2Int, $b: UnityEngine.Vector2Int) : number
            /** Returns a vector that is made from the smallest components of two vectors.
            */
            public static Min ($lhs: UnityEngine.Vector2Int, $rhs: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            /** Returns a vector that is made from the largest components of two vectors.
            */
            public static Max ($lhs: UnityEngine.Vector2Int, $rhs: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            /** Multiplies two vectors component-wise.
            */
            public static Scale ($a: UnityEngine.Vector2Int, $b: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            /** Multiplies every component of this vector by the same component of scale.
            */
            public Scale ($scale: UnityEngine.Vector2Int) : void
            /** Clamps the Vector2Int to the bounds given by min and max.
            */
            public Clamp ($min: UnityEngine.Vector2Int, $max: UnityEngine.Vector2Int) : void
            public static op_Implicit ($v: UnityEngine.Vector2Int) : UnityEngine.Vector2
            public static op_Explicit ($v: UnityEngine.Vector2Int) : UnityEngine.Vector3Int
            /** Converts a Vector2 to a Vector2Int by doing a Floor to each value.
            */
            public static FloorToInt ($v: UnityEngine.Vector2) : UnityEngine.Vector2Int
            /** Converts a  Vector2 to a Vector2Int by doing a Ceiling to each value.
            */
            public static CeilToInt ($v: UnityEngine.Vector2) : UnityEngine.Vector2Int
            /** Converts a  Vector2 to a Vector2Int by doing a Round to each value.
            */
            public static RoundToInt ($v: UnityEngine.Vector2) : UnityEngine.Vector2Int
            public static op_UnaryNegation ($v: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            public static op_Addition ($a: UnityEngine.Vector2Int, $b: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            public static op_Subtraction ($a: UnityEngine.Vector2Int, $b: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            public static op_Multiply ($a: UnityEngine.Vector2Int, $b: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            public static op_Multiply ($a: number, $b: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            public static op_Multiply ($a: UnityEngine.Vector2Int, $b: number) : UnityEngine.Vector2Int
            public static op_Division ($a: UnityEngine.Vector2Int, $b: number) : UnityEngine.Vector2Int
            public static op_Equality ($lhs: UnityEngine.Vector2Int, $rhs: UnityEngine.Vector2Int) : boolean
            public static op_Inequality ($lhs: UnityEngine.Vector2Int, $rhs: UnityEngine.Vector2Int) : boolean
            /** Returns true if the objects are equal.
            */
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Vector2Int) : boolean
            public constructor ($x: number, $y: number)
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** Offsets for rectangles, borders, etc.
        */
        class RectOffset extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Left edge size.
            */
            public get left(): number;
            public set left(value: number);
            /** Right edge size.
            */
            public get right(): number;
            public set right(value: number);
            /** Top edge size.
            */
            public get top(): number;
            public set top(value: number);
            /** Bottom edge size.
            */
            public get bottom(): number;
            public set bottom(value: number);
            /** Shortcut for left + right. (Read Only)
            */
            public get horizontal(): number;
            /** Shortcut for top + bottom. (Read Only)
            */
            public get vertical(): number;
            /** Add the border offsets to a rect.
            */
            public Add ($rect: UnityEngine.Rect) : UnityEngine.Rect
            /** Remove the border offsets from a rect.
            */
            public Remove ($rect: UnityEngine.Rect) : UnityEngine.Rect
            public constructor ()
            public constructor ($left: number, $right: number, $top: number, $bottom: number)
        }
        /** Gizmos are used to give visual debugging or setup aids in the Scene view.
        */
        class Gizmos extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Sets the color for the gizmos that will be drawn next.
            */
            public static get color(): UnityEngine.Color;
            public static set color(value: UnityEngine.Color);
            /** Sets the Matrix4x4 that the Unity Editor uses to draw Gizmos.
            */
            public static get matrix(): UnityEngine.Matrix4x4;
            public static set matrix(value: UnityEngine.Matrix4x4);
            /** Set a texture that contains the exposure correction for LightProbe gizmos. The value is sampled from the red channel in the middle of the texture.
            */
            public static get exposure(): UnityEngine.Texture;
            public static set exposure(value: UnityEngine.Texture);
            /** Draws a line starting at from towards to.
            */
            public static DrawLine ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3) : void
            /** Draws a wireframe sphere with center and radius.
            */
            public static DrawWireSphere ($center: UnityEngine.Vector3, $radius: number) : void
            /** Draws a solid sphere with center and radius.
            */
            public static DrawSphere ($center: UnityEngine.Vector3, $radius: number) : void
            /** Draw a wireframe box with center and size.
            */
            public static DrawWireCube ($center: UnityEngine.Vector3, $size: UnityEngine.Vector3) : void
            /** Draw a solid box with center and size.
            */
            public static DrawCube ($center: UnityEngine.Vector3, $size: UnityEngine.Vector3) : void
            /** Draws a mesh.
            * @param mesh Mesh to draw as a gizmo.
            * @param position Position (default is zero).
            * @param rotation Rotation (default is no rotation).
            * @param scale Scale (default is no scale).
            * @param submeshIndex Submesh to draw (default is -1, which draws whole mesh).
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3) : void
            /** Draws a wireframe mesh.
            * @param mesh Mesh to draw as a gizmo.
            * @param position Position (default is zero).
            * @param rotation Rotation (default is no rotation).
            * @param scale Scale (default is no scale).
            * @param submeshIndex Submesh to draw (default is -1, which draws whole mesh).
            */
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3) : void
            /** Draw an icon at a position in the Scene view.
            */
            public static DrawIcon ($center: UnityEngine.Vector3, $name: string, $allowScaling: boolean) : void
            public static DrawIcon ($center: UnityEngine.Vector3, $name: string, $allowScaling: boolean, $tint: UnityEngine.Color) : void
            /** Draw a texture in the Scene.
            * @param screenRect The size and position of the texture on the "screen" defined by the XY plane.
            * @param texture The texture to be displayed.
            * @param mat An optional material to apply the texture.
            * @param leftBorder Inset from the rectangle's left edge.
            * @param rightBorder Inset from the rectangle's right edge.
            * @param topBorder Inset from the rectangle's top edge.
            * @param bottomBorder Inset from the rectangle's bottom edge.
            */
            public static DrawGUITexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material) : void
            /** Draw a camera frustum using the currently set Gizmos.matrix for it's location and rotation.
            * @param center The apex of the truncated pyramid.
            * @param fov Vertical field of view (ie, the angle at the apex in degrees).
            * @param maxRange Distance of the frustum's far plane.
            * @param minRange Distance of the frustum's near plane.
            * @param aspect Width/height ratio.
            */
            public static DrawFrustum ($center: UnityEngine.Vector3, $fov: number, $maxRange: number, $minRange: number, $aspect: number) : void
            /** Draws a ray starting at from to from + direction.
            */
            public static DrawRay ($r: UnityEngine.Ray) : void
            /** Draws a ray starting at from to from + direction.
            */
            public static DrawRay ($from: UnityEngine.Vector3, $direction: UnityEngine.Vector3) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh) : void
            /** Draws a mesh.
            * @param mesh Mesh to draw as a gizmo.
            * @param position Position (default is zero).
            * @param rotation Rotation (default is no rotation).
            * @param scale Scale (default is no scale).
            * @param submeshIndex Submesh to draw (default is -1, which draws whole mesh).
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number) : void
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3) : void
            public static DrawWireMesh ($mesh: UnityEngine.Mesh) : void
            /** Draws a wireframe mesh.
            * @param mesh Mesh to draw as a gizmo.
            * @param position Position (default is zero).
            * @param rotation Rotation (default is no rotation).
            * @param scale Scale (default is no scale).
            * @param submeshIndex Submesh to draw (default is -1, which draws whole mesh).
            */
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3) : void
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3) : void
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number) : void
            /** Draw an icon at a position in the Scene view.
            */
            public static DrawIcon ($center: UnityEngine.Vector3, $name: string) : void
            /** Draw a texture in the Scene.
            * @param screenRect The size and position of the texture on the "screen" defined by the XY plane.
            * @param texture The texture to be displayed.
            * @param mat An optional material to apply the texture.
            * @param leftBorder Inset from the rectangle's left edge.
            * @param rightBorder Inset from the rectangle's right edge.
            * @param topBorder Inset from the rectangle's top edge.
            * @param bottomBorder Inset from the rectangle's bottom edge.
            */
            public static DrawGUITexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture) : void
            /** Draw a texture in the Scene.
            * @param screenRect The size and position of the texture on the "screen" defined by the XY plane.
            * @param texture The texture to be displayed.
            * @param mat An optional material to apply the texture.
            * @param leftBorder Inset from the rectangle's left edge.
            * @param rightBorder Inset from the rectangle's right edge.
            * @param topBorder Inset from the rectangle's top edge.
            * @param bottomBorder Inset from the rectangle's bottom edge.
            */
            public static DrawGUITexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $mat: UnityEngine.Material) : void
            /** Draw a texture in the Scene.
            * @param screenRect The size and position of the texture on the "screen" defined by the XY plane.
            * @param texture The texture to be displayed.
            * @param mat An optional material to apply the texture.
            * @param leftBorder Inset from the rectangle's left edge.
            * @param rightBorder Inset from the rectangle's right edge.
            * @param topBorder Inset from the rectangle's top edge.
            * @param bottomBorder Inset from the rectangle's bottom edge.
            */
            public static DrawGUITexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number) : void
            public constructor ()
        }
        /** A class that allows creating or modifying meshes from scripts.
        */
        class Mesh extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Format of the mesh index buffer data.
            */
            public get indexFormat(): UnityEngine.Rendering.IndexFormat;
            public set indexFormat(value: UnityEngine.Rendering.IndexFormat);
            /** Gets the number of vertex buffers present in the Mesh. (Read Only)
            */
            public get vertexBufferCount(): number;
            /** Returns BlendShape count on this mesh.
            */
            public get blendShapeCount(): number;
            /** The bind poses. The bind pose at each index refers to the bone with the same index.
            */
            public get bindposes(): System.Array$1<UnityEngine.Matrix4x4>;
            public set bindposes(value: System.Array$1<UnityEngine.Matrix4x4>);
            /** Returns true if the Mesh is read/write enabled, or false if it is not.
            */
            public get isReadable(): boolean;
            /** Returns the number of vertices in the Mesh (Read Only).
            */
            public get vertexCount(): number;
            /** The number of sub-meshes inside the Mesh object.
            */
            public get subMeshCount(): number;
            public set subMeshCount(value: number);
            /** The bounding volume of the Mesh.
            */
            public get bounds(): UnityEngine.Bounds;
            public set bounds(value: UnityEngine.Bounds);
            /** Returns a copy of the vertex positions or assigns a new vertex positions array.
            */
            public get vertices(): System.Array$1<UnityEngine.Vector3>;
            public set vertices(value: System.Array$1<UnityEngine.Vector3>);
            /** The normals of the Mesh.
            */
            public get normals(): System.Array$1<UnityEngine.Vector3>;
            public set normals(value: System.Array$1<UnityEngine.Vector3>);
            /** The tangents of the Mesh.
            */
            public get tangents(): System.Array$1<UnityEngine.Vector4>;
            public set tangents(value: System.Array$1<UnityEngine.Vector4>);
            /** The base texture coordinates of the Mesh.
            */
            public get uv(): System.Array$1<UnityEngine.Vector2>;
            public set uv(value: System.Array$1<UnityEngine.Vector2>);
            /** The second texture coordinate set of the mesh, if present.
            */
            public get uv2(): System.Array$1<UnityEngine.Vector2>;
            public set uv2(value: System.Array$1<UnityEngine.Vector2>);
            /** The third texture coordinate set of the mesh, if present.
            */
            public get uv3(): System.Array$1<UnityEngine.Vector2>;
            public set uv3(value: System.Array$1<UnityEngine.Vector2>);
            /** The fourth texture coordinate set of the mesh, if present.
            */
            public get uv4(): System.Array$1<UnityEngine.Vector2>;
            public set uv4(value: System.Array$1<UnityEngine.Vector2>);
            /** The fifth texture coordinate set of the mesh, if present.
            */
            public get uv5(): System.Array$1<UnityEngine.Vector2>;
            public set uv5(value: System.Array$1<UnityEngine.Vector2>);
            /** The sixth texture coordinate set of the mesh, if present.
            */
            public get uv6(): System.Array$1<UnityEngine.Vector2>;
            public set uv6(value: System.Array$1<UnityEngine.Vector2>);
            /** The seventh texture coordinate set of the mesh, if present.
            */
            public get uv7(): System.Array$1<UnityEngine.Vector2>;
            public set uv7(value: System.Array$1<UnityEngine.Vector2>);
            /** The eighth texture coordinate set of the mesh, if present.
            */
            public get uv8(): System.Array$1<UnityEngine.Vector2>;
            public set uv8(value: System.Array$1<UnityEngine.Vector2>);
            /** Vertex colors of the Mesh.
            */
            public get colors(): System.Array$1<UnityEngine.Color>;
            public set colors(value: System.Array$1<UnityEngine.Color>);
            /** Vertex colors of the Mesh.
            */
            public get colors32(): System.Array$1<UnityEngine.Color32>;
            public set colors32(value: System.Array$1<UnityEngine.Color32>);
            /** Returns the number of vertex attributes that the mesh has. (Read Only)
            */
            public get vertexAttributeCount(): number;
            /** An array containing all triangles in the Mesh.
            */
            public get triangles(): System.Array$1<number>;
            public set triangles(value: System.Array$1<number>);
            /** The bone weights of each vertex.
            */
            public get boneWeights(): System.Array$1<UnityEngine.BoneWeight>;
            public set boneWeights(value: System.Array$1<UnityEngine.BoneWeight>);
            /** Sets the index buffer size and format.
            * @param indexCount Size of index buffer.
            * @param format Format of the indices.
            */
            public SetIndexBufferParams ($indexCount: number, $format: UnityEngine.Rendering.IndexFormat) : void
            /** Sets the vertex buffer size and layout.
            * @param vertexCount The number of vertices in the Mesh.
            * @param attributes Layout of the vertex data -- which attributes are present, their data types and so on.
            */
            public SetVertexBufferParams ($vertexCount: number, ...attributes: UnityEngine.Rendering.VertexAttributeDescriptor[]) : void
            /** Returns information about a vertex attribute based on its index.
            * @param index The vertex attribute index (0 to vertexAttributeCount-1).
            * @returns Information about the vertex attribute. 
            */
            public GetVertexAttribute ($index: number) : UnityEngine.Rendering.VertexAttributeDescriptor
            /** Checks if a specific vertex data attribute exists on this Mesh.
            * @param attr Vertex data attribute to check for.
            * @returns Returns true if the data attribute is present in the mesh. 
            */
            public HasVertexAttribute ($attr: UnityEngine.Rendering.VertexAttribute) : boolean
            /** Get dimension of a specific vertex data attribute on this Mesh.
            * @param attr Vertex data attribute to check for.
            * @returns Dimensionality of the data attribute, or zero if it is not present. 
            */
            public GetVertexAttributeDimension ($attr: UnityEngine.Rendering.VertexAttribute) : number
            /** Get format of a specific vertex data attribute on this Mesh.
            * @param attr Vertex data attribute to check for.
            * @returns Format of the data attribute. 
            */
            public GetVertexAttributeFormat ($attr: UnityEngine.Rendering.VertexAttribute) : UnityEngine.Rendering.VertexAttributeFormat
            /** Retrieves a native (underlying graphics API) pointer to the vertex buffer.
            * @param bufferIndex Which vertex buffer to get (some Meshes might have more than one). See vertexBufferCount.
            * @returns Pointer to the underlying graphics API vertex buffer. 
            */
            public GetNativeVertexBufferPtr ($index: number) : System.IntPtr
            public GetNativeIndexBufferPtr () : System.IntPtr
            public ClearBlendShapes () : void
            /** Returns name of BlendShape by given index.
            */
            public GetBlendShapeName ($shapeIndex: number) : string
            /** Returns index of BlendShape by given name.
            */
            public GetBlendShapeIndex ($blendShapeName: string) : number
            /** Returns the frame count for a blend shape.
            * @param shapeIndex The shape index to get frame count from.
            */
            public GetBlendShapeFrameCount ($shapeIndex: number) : number
            /** Returns the weight of a blend shape frame.
            * @param shapeIndex The shape index of the frame.
            * @param frameIndex The frame index to get the weight from.
            */
            public GetBlendShapeFrameWeight ($shapeIndex: number, $frameIndex: number) : number
            /** Retreives deltaVertices, deltaNormals and deltaTangents of a blend shape frame.
            * @param shapeIndex The shape index of the frame.
            * @param frameIndex The frame index to get the weight from.
            * @param deltaVertices Delta vertices output array for the frame being retreived.
            * @param deltaNormals Delta normals output array for the frame being retreived.
            * @param deltaTangents Delta tangents output array for the frame being retreived.
            */
            public GetBlendShapeFrameVertices ($shapeIndex: number, $frameIndex: number, $deltaVertices: System.Array$1<UnityEngine.Vector3>, $deltaNormals: System.Array$1<UnityEngine.Vector3>, $deltaTangents: System.Array$1<UnityEngine.Vector3>) : void
            /** Adds a new blend shape frame.
            * @param shapeName Name of the blend shape to add a frame to.
            * @param frameWeight Weight for the frame being added.
            * @param deltaVertices Delta vertices for the frame being added.
            * @param deltaNormals Delta normals for the frame being added.
            * @param deltaTangents Delta tangents for the frame being added.
            */
            public AddBlendShapeFrame ($shapeName: string, $frameWeight: number, $deltaVertices: System.Array$1<UnityEngine.Vector3>, $deltaNormals: System.Array$1<UnityEngine.Vector3>, $deltaTangents: System.Array$1<UnityEngine.Vector3>) : void
            public SetBoneWeights ($bonesPerVertex: Unity.Collections.NativeArray$1<number>, $weights: Unity.Collections.NativeArray$1<UnityEngine.BoneWeight1>) : void
            public GetAllBoneWeights () : Unity.Collections.NativeArray$1<UnityEngine.BoneWeight1>
            public GetBonesPerVertex () : Unity.Collections.NativeArray$1<number>
            /** Sets the information about a sub-mesh of the Mesh.
            * @param index Sub-mesh index. See subMeshCount. Out of range indices throw an exception.
            * @param desc Sub-mesh data.
            * @param flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetSubMesh ($index: number, $desc: UnityEngine.Rendering.SubMeshDescriptor, $flags?: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Get information about a sub-mesh of the Mesh.
            * @param index Sub-mesh index. See subMeshCount. Out of range indices throw an exception.
            * @returns Sub-mesh data. 
            */
            public GetSubMesh ($index: number) : UnityEngine.Rendering.SubMeshDescriptor
            public MarkModified () : void
            /** The UV distribution metric can be used to calculate the desired mipmap level based on the position of the camera.
            * @param uvSetIndex UV set index to return the UV distibution metric for. 0 for first.
            * @returns Average of triangle area / uv area. 
            */
            public GetUVDistributionMetric ($uvSetIndex: number) : number
            public GetVertices ($vertices: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public SetVertices ($inVertices: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public SetVertices ($inVertices: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number) : void
            /** Assigns a new vertex positions array.
            * @param inVertices Per-vertex positions.
            */
            public SetVertices ($inVertices: System.Array$1<UnityEngine.Vector3>) : void
            /** Sets the vertex positions of the Mesh, using a part of the input array.
            * @param inVertices Per-vertex positions.
            * @param start Index of the first element to take from the input array.
            * @param length Number of elements to take from the input array.
            */
            public SetVertices ($inVertices: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number) : void
            public GetNormals ($normals: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public SetNormals ($inNormals: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public SetNormals ($inNormals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number) : void
            /** Set the normals of the Mesh.
            * @param inNormals Per-vertex normals.
            */
            public SetNormals ($inNormals: System.Array$1<UnityEngine.Vector3>) : void
            /** Sets the vertex normals of the Mesh, using a part of the input array.
            * @param inNormals Per-vertex normals.
            * @param start Index of the first element to take from the input array.
            * @param length Number of elements to take from the input array.
            */
            public SetNormals ($inNormals: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number) : void
            public GetTangents ($tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public SetTangents ($inTangents: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public SetTangents ($inTangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $start: number, $length: number) : void
            /** Set the tangents of the Mesh.
            * @param inTangents Per-vertex tangents.
            */
            public SetTangents ($inTangents: System.Array$1<UnityEngine.Vector4>) : void
            /** Sets the tangents of the Mesh, using a part of the input array.
            * @param inTangents Per-vertex tangents.
            * @param start Index of the first element to take from the input array.
            * @param length Number of elements to take from the input array.
            */
            public SetTangents ($inTangents: System.Array$1<UnityEngine.Vector4>, $start: number, $length: number) : void
            public GetColors ($colors: System.Collections.Generic.List$1<UnityEngine.Color>) : void
            public SetColors ($inColors: System.Collections.Generic.List$1<UnityEngine.Color>) : void
            public SetColors ($inColors: System.Collections.Generic.List$1<UnityEngine.Color>, $start: number, $length: number) : void
            /** Set the per-vertex colors of the Mesh.
            * @param inColors Per-vertex colors.
            */
            public SetColors ($inColors: System.Array$1<UnityEngine.Color>) : void
            /** Sets the per-vertex colors of the Mesh, using a part of the input array.
            * @param inColors Per-vertex colors.
            * @param start Index of the first element to take from the input array.
            * @param length Number of elements to take from the input array.
            */
            public SetColors ($inColors: System.Array$1<UnityEngine.Color>, $start: number, $length: number) : void
            public GetColors ($colors: System.Collections.Generic.List$1<UnityEngine.Color32>) : void
            public SetColors ($inColors: System.Collections.Generic.List$1<UnityEngine.Color32>) : void
            public SetColors ($inColors: System.Collections.Generic.List$1<UnityEngine.Color32>, $start: number, $length: number) : void
            /** Set the per-vertex colors of the Mesh.
            * @param inColors Per-vertex colors.
            */
            public SetColors ($inColors: System.Array$1<UnityEngine.Color32>) : void
            /** Sets the per-vertex colors of the Mesh, using a part of the input array.
            * @param inColors Per-vertex colors.
            * @param start Index of the first element to take from the input array.
            * @param length Number of elements to take from the input array.
            */
            public SetColors ($inColors: System.Array$1<UnityEngine.Color32>, $start: number, $length: number) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector2>) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector2>, $start: number, $length: number) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector4>, $start: number, $length: number) : void
            /** Sets the UVs of the Mesh.
            * @param channel The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.
            * @param uvs UVs to set for the given index.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector2>) : void
            /** Sets the UVs of the Mesh.
            * @param channel The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.
            * @param uvs UVs to set for the given index.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector3>) : void
            /** Sets the UVs of the Mesh.
            * @param channel The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.
            * @param uvs UVs to set for the given index.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector4>) : void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param channel The UV channel, in [0..7] range.
            * @param uvs UVs to set for the given index.
            * @param start Index of the first element to take from the input array.
            * @param length Number of elements to take from the input array.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector2>, $start: number, $length: number) : void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param channel The UV channel, in [0..7] range.
            * @param uvs UVs to set for the given index.
            * @param start Index of the first element to take from the input array.
            * @param length Number of elements to take from the input array.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number) : void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param channel The UV channel, in [0..7] range.
            * @param uvs UVs to set for the given index.
            * @param start Index of the first element to take from the input array.
            * @param length Number of elements to take from the input array.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector4>, $start: number, $length: number) : void
            public GetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector2>) : void
            public GetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public GetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public GetVertexAttributes () : System.Array$1<UnityEngine.Rendering.VertexAttributeDescriptor>
            /** Get information about vertex attributes of a Mesh, without memory allocations.
            * @param attributes Collection of vertex attributes to receive the results.
            * @returns The number of vertex attributes returned in the attributes container. 
            */
            public GetVertexAttributes ($attributes: System.Array$1<UnityEngine.Rendering.VertexAttributeDescriptor>) : number
            public GetVertexAttributes ($attributes: System.Collections.Generic.List$1<UnityEngine.Rendering.VertexAttributeDescriptor>) : number
            /** Fetches the triangle list for the specified sub-mesh on this object.
            * @param triangles A list of vertex indices to populate.
            * @param submesh The sub-mesh index. See subMeshCount.
            * @param applyBaseVertex True (default value) will apply base vertex offset to returned indices.
            */
            public GetTriangles ($submesh: number) : System.Array$1<number>
            /** Fetches the triangle list for the specified sub-mesh on this object.
            * @param triangles A list of vertex indices to populate.
            * @param submesh The sub-mesh index. See subMeshCount.
            * @param applyBaseVertex True (default value) will apply base vertex offset to returned indices.
            */
            public GetTriangles ($submesh: number, $applyBaseVertex: boolean) : System.Array$1<number>
            public GetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number) : void
            public GetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $applyBaseVertex: boolean) : void
            public GetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $applyBaseVertex?: boolean) : void
            /** Fetches the index list for the specified sub-mesh.
            * @param submesh The sub-mesh index. See subMeshCount.
            * @param applyBaseVertex True (default value) will apply base vertex offset to returned indices.
            * @returns Array with face indices. 
            */
            public GetIndices ($submesh: number) : System.Array$1<number>
            /** Fetches the index list for the specified sub-mesh.
            * @param submesh The sub-mesh index. See subMeshCount.
            * @param applyBaseVertex True (default value) will apply base vertex offset to returned indices.
            * @returns Array with face indices. 
            */
            public GetIndices ($submesh: number, $applyBaseVertex: boolean) : System.Array$1<number>
            public GetIndices ($indices: System.Collections.Generic.List$1<number>, $submesh: number) : void
            public GetIndices ($indices: System.Collections.Generic.List$1<number>, $submesh: number, $applyBaseVertex: boolean) : void
            public GetIndices ($indices: System.Collections.Generic.List$1<number>, $submesh: number, $applyBaseVertex?: boolean) : void
            /** Gets the starting index location within the Mesh's index buffer, for the given sub-mesh.
            */
            public GetIndexStart ($submesh: number) : number
            /** Gets the index count of the given sub-mesh.
            */
            public GetIndexCount ($submesh: number) : number
            /** Gets the base vertex index of the given sub-mesh.
            * @param submesh The sub-mesh index. See subMeshCount.
            * @returns The offset applied to all vertex indices of this sub-mesh. 
            */
            public GetBaseVertex ($submesh: number) : number
            /** Sets the triangle list for the sub-mesh.
            * @param triangles The list of indices that define the triangles.
            * @param submesh The sub-mesh to modify.
            * @param calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles ($triangles: System.Array$1<number>, $submesh: number) : void
            /** Sets the triangle list for the sub-mesh.
            * @param triangles The list of indices that define the triangles.
            * @param submesh The sub-mesh to modify.
            * @param calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles ($triangles: System.Array$1<number>, $submesh: number, $calculateBounds: boolean) : void
            /** Sets the triangle list for the sub-mesh.
            * @param triangles The list of indices that define the triangles.
            * @param submesh The sub-mesh to modify.
            * @param calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles ($triangles: System.Array$1<number>, $submesh: number, $calculateBounds: boolean, $baseVertex: number) : void
            /** Sets the triangle list of the Mesh, using a part of the input array.
            * @param triangles The list of indices that define the triangles.
            * @param trianglesStart Index of the first element to take from the input array.
            * @param trianglesLength Number of elements to take from the input array.
            * @param submesh The sub-mesh to modify.
            * @param calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles ($triangles: System.Array$1<number>, $trianglesStart: number, $trianglesLength: number, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            /** Sets the triangle list for the sub-mesh.
            * @param triangles The list of indices that define the triangles.
            * @param submesh The sub-mesh to modify.
            * @param calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles ($triangles: System.Array$1<number>, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            public SetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number) : void
            public SetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $calculateBounds: boolean) : void
            public SetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $calculateBounds: boolean, $baseVertex: number) : void
            public SetTriangles ($triangles: System.Collections.Generic.List$1<number>, $trianglesStart: number, $trianglesLength: number, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            public SetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            /** Sets the index buffer for the sub-mesh.
            * @param indices The array of indices that define the mesh faces.
            * @param topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param submesh The sub-mesh to modify.
            * @param calculateBounds Calculate the bounding box of the Mesh after setting the indices. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices ($indices: System.Array$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number) : void
            /** Sets the index buffer for the sub-mesh.
            * @param indices The array of indices that define the mesh faces.
            * @param topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param submesh The sub-mesh to modify.
            * @param calculateBounds Calculate the bounding box of the Mesh after setting the indices. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices ($indices: System.Array$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds: boolean) : void
            /** Sets the index buffer for the sub-mesh.
            * @param indices The array of indices that define the mesh faces.
            * @param topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param submesh The sub-mesh to modify.
            * @param calculateBounds Calculate the bounding box of the Mesh after setting the indices. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices ($indices: System.Array$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds: boolean, $baseVertex: number) : void
            /** Sets the index buffer of a sub-mesh, using a part of the input array.
            * @param indices The array of indices that define the mesh faces.
            * @param indicesStart Index of the first element to take from the input array.
            * @param indicesLength Number of elements to take from the input array.
            * @param topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param submesh The sub-mesh to modify.
            * @param calculateBounds Calculate the bounding box of the Mesh after setting the indices. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices ($indices: System.Array$1<number>, $indicesStart: number, $indicesLength: number, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            /** Sets the index buffer for the sub-mesh.
            * @param indices The array of indices that define the mesh faces.
            * @param topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param submesh The sub-mesh to modify.
            * @param calculateBounds Calculate the bounding box of the Mesh after setting the indices. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices ($indices: System.Array$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            public SetIndices ($indices: System.Collections.Generic.List$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            public SetIndices ($indices: System.Collections.Generic.List$1<number>, $indicesStart: number, $indicesLength: number, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            public GetBindposes ($bindposes: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public GetBoneWeights ($boneWeights: System.Collections.Generic.List$1<UnityEngine.BoneWeight>) : void
            /** Clears all vertex data and all triangle indices.
            * @param keepVertexLayout True if the existing Mesh data layout should be preserved.
            */
            public Clear ($keepVertexLayout: boolean) : void
            /** Clears all vertex data and all triangle indices.
            * @param keepVertexLayout True if the existing Mesh data layout should be preserved.
            */
            public Clear () : void
            public RecalculateBounds () : void
            public RecalculateNormals () : void
            public RecalculateTangents () : void
            public MarkDynamic () : void
            /** Upload previously done Mesh modifications to the graphics API.
            * @param markNoLongerReadable Frees up system memory copy of mesh data when set to true.
            */
            public UploadMeshData ($markNoLongerReadable: boolean) : void
            public Optimize () : void
            public OptimizeIndexBuffers () : void
            public OptimizeReorderVertexBuffer () : void
            /** Gets the topology of a sub-mesh.
            */
            public GetTopology ($submesh: number) : UnityEngine.MeshTopology
            /** Combines several Meshes into this Mesh.
            * @param combine Descriptions of the Meshes to combine.
            * @param mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
            * @param useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
            */
            public CombineMeshes ($combine: System.Array$1<UnityEngine.CombineInstance>, $mergeSubMeshes: boolean, $useMatrices: boolean, $hasLightmapData: boolean) : void
            /** Combines several Meshes into this Mesh.
            * @param combine Descriptions of the Meshes to combine.
            * @param mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
            * @param useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
            */
            public CombineMeshes ($combine: System.Array$1<UnityEngine.CombineInstance>, $mergeSubMeshes: boolean, $useMatrices: boolean) : void
            /** Combines several Meshes into this Mesh.
            * @param combine Descriptions of the Meshes to combine.
            * @param mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
            * @param useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
            */
            public CombineMeshes ($combine: System.Array$1<UnityEngine.CombineInstance>, $mergeSubMeshes: boolean) : void
            /** Combines several Meshes into this Mesh.
            * @param combine Descriptions of the Meshes to combine.
            * @param mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
            * @param useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
            */
            public CombineMeshes ($combine: System.Array$1<UnityEngine.CombineInstance>) : void
            public constructor ()
        }
        /** The material class.
        */
        class Material extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The shader used by the material.
            */
            public get shader(): UnityEngine.Shader;
            public set shader(value: UnityEngine.Shader);
            /** The main material's color.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** The material's texture.
            */
            public get mainTexture(): UnityEngine.Texture;
            public set mainTexture(value: UnityEngine.Texture);
            /** The texture offset of the main texture.
            */
            public get mainTextureOffset(): UnityEngine.Vector2;
            public set mainTextureOffset(value: UnityEngine.Vector2);
            /** The texture scale of the main texture.
            */
            public get mainTextureScale(): UnityEngine.Vector2;
            public set mainTextureScale(value: UnityEngine.Vector2);
            /** Render queue of this material.
            */
            public get renderQueue(): number;
            public set renderQueue(value: number);
            /** Defines how the material should interact with lightmaps and lightprobes.
            */
            public get globalIlluminationFlags(): UnityEngine.MaterialGlobalIlluminationFlags;
            public set globalIlluminationFlags(value: UnityEngine.MaterialGlobalIlluminationFlags);
            /** Gets and sets whether the Double Sided Global Illumination setting is enabled for this material.
            */
            public get doubleSidedGI(): boolean;
            public set doubleSidedGI(value: boolean);
            /** Gets and sets whether GPU instancing is enabled for this material.
            */
            public get enableInstancing(): boolean;
            public set enableInstancing(value: boolean);
            /** How many passes are in this material (Read Only).
            */
            public get passCount(): number;
            /** Additional shader keywords set by this material.
            */
            public get shaderKeywords(): System.Array$1<string>;
            public set shaderKeywords(value: System.Array$1<string>);
            /** Checks if material's shader has a property of a given name.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public HasProperty ($nameID: number) : boolean
            /** Checks if material's shader has a property of a given name.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public HasProperty ($name: string) : boolean
            /** Sets a shader keyword that is enabled by this material.
            */
            public EnableKeyword ($keyword: string) : void
            /** Unset a shader keyword.
            */
            public DisableKeyword ($keyword: string) : void
            /** Is the shader keyword enabled on this material?
            */
            public IsKeywordEnabled ($keyword: string) : boolean
            /** Enables or disables a Shader pass on a per-Material level.
            * @param passName Shader pass name (case insensitive).
            * @param enabled Flag indicating whether this Shader pass should be enabled.
            */
            public SetShaderPassEnabled ($passName: string, $enabled: boolean) : void
            /** Checks whether a given Shader pass is enabled on this Material.
            * @param passName Shader pass name (case insensitive).
            * @returns True if the Shader pass is enabled. 
            */
            public GetShaderPassEnabled ($passName: string) : boolean
            /** Returns the name of the shader pass at index pass.
            */
            public GetPassName ($pass: number) : string
            /** Returns the index of the pass passName.
            */
            public FindPass ($passName: string) : number
            /** Sets an override tag/value on the material.
            * @param tag Name of the tag to set.
            * @param val Name of the value to set. Empty string to clear the override flag.
            */
            public SetOverrideTag ($tag: string, $val: string) : void
            /** Get the value of material's shader tag.
            */
            public GetTag ($tag: string, $searchFallbacks: boolean, $defaultValue: string) : string
            /** Get the value of material's shader tag.
            */
            public GetTag ($tag: string, $searchFallbacks: boolean) : string
            /** Interpolate properties between two materials.
            */
            public Lerp ($start: UnityEngine.Material, $end: UnityEngine.Material, $t: number) : void
            /** Activate the given pass for rendering.
            * @param pass Shader pass number to setup.
            * @returns If false is returned, no rendering should be done. 
            */
            public SetPass ($pass: number) : boolean
            /** Copy properties from other material into this material.
            */
            public CopyPropertiesFromMaterial ($mat: UnityEngine.Material) : void
            public ComputeCRC () : number
            public GetTexturePropertyNames () : System.Array$1<string>
            public GetTexturePropertyNameIDs () : System.Array$1<number>
            public GetTexturePropertyNames ($outNames: System.Collections.Generic.List$1<string>) : void
            public GetTexturePropertyNameIDs ($outNames: System.Collections.Generic.List$1<number>) : void
            /** Sets a named float value.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param value Float value to set.
            * @param name Property name, e.g. "_Glossiness".
            */
            public SetFloat ($name: string, $value: number) : void
            /** Sets a named float value.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param value Float value to set.
            * @param name Property name, e.g. "_Glossiness".
            */
            public SetFloat ($nameID: number, $value: number) : void
            /** Sets a named integer value.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param value Integer value to set.
            * @param name Property name, e.g. "_SrcBlend".
            */
            public SetInt ($name: string, $value: number) : void
            /** Sets a named integer value.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param value Integer value to set.
            * @param name Property name, e.g. "_SrcBlend".
            */
            public SetInt ($nameID: number, $value: number) : void
            /** Sets a named color value.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, e.g. "_Color".
            * @param value Color value to set.
            */
            public SetColor ($name: string, $value: UnityEngine.Color) : void
            /** Sets a named color value.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, e.g. "_Color".
            * @param value Color value to set.
            */
            public SetColor ($nameID: number, $value: UnityEngine.Color) : void
            /** Sets a named vector value.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, e.g. "_WaveAndDistance".
            * @param value Vector value to set.
            */
            public SetVector ($name: string, $value: UnityEngine.Vector4) : void
            /** Sets a named vector value.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, e.g. "_WaveAndDistance".
            * @param value Vector value to set.
            */
            public SetVector ($nameID: number, $value: UnityEngine.Vector4) : void
            /** Sets a named matrix for the shader.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, e.g. "_CubemapRotation".
            * @param value Matrix value to set.
            */
            public SetMatrix ($name: string, $value: UnityEngine.Matrix4x4) : void
            /** Sets a named matrix for the shader.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, e.g. "_CubemapRotation".
            * @param value Matrix value to set.
            */
            public SetMatrix ($nameID: number, $value: UnityEngine.Matrix4x4) : void
            /** Sets a named texture.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, e.g. "_MainTex".
            * @param value Texture to set.
            * @param element Optional parameter that specifies the type of data from the render texture to set.
            */
            public SetTexture ($name: string, $value: UnityEngine.Texture) : void
            /** Sets a named texture.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, e.g. "_MainTex".
            * @param value Texture to set.
            * @param element Optional parameter that specifies the type of data from the render texture to set.
            */
            public SetTexture ($nameID: number, $value: UnityEngine.Texture) : void
            /** Sets a named texture.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, e.g. "_MainTex".
            * @param value Texture to set.
            * @param element Optional parameter that specifies the type of data from the render texture to set.
            */
            public SetTexture ($name: string, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Sets a named texture.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, e.g. "_MainTex".
            * @param value Texture to set.
            * @param element Optional parameter that specifies the type of data from the render texture to set.
            */
            public SetTexture ($nameID: number, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Sets a named ComputeBuffer value.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name.
            * @param value The ComputeBuffer value to set.
            */
            public SetBuffer ($name: string, $value: UnityEngine.ComputeBuffer) : void
            /** Sets a named ComputeBuffer value.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name.
            * @param value The ComputeBuffer value to set.
            */
            public SetBuffer ($nameID: number, $value: UnityEngine.ComputeBuffer) : void
            /** Sets a ComputeBuffer as a named constant buffer for the material.
            * @param name The name of the constant buffer to override.
            * @param value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
            * @param offset Offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.MinConstantBufferAlignment, or 0 if that value is 0.
            * @param size The number of bytes to bind.
            * @param nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer ($name: string, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer as a named constant buffer for the material.
            * @param name The name of the constant buffer to override.
            * @param value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
            * @param offset Offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.MinConstantBufferAlignment, or 0 if that value is 0.
            * @param size The number of bytes to bind.
            * @param nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer ($nameID: number, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            public SetFloatArray ($name: string, $values: System.Collections.Generic.List$1<number>) : void
            public SetFloatArray ($nameID: number, $values: System.Collections.Generic.List$1<number>) : void
            /** Sets a float array property.
            * @param name Property name.
            * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
            * @param values Array of values to set.
            */
            public SetFloatArray ($name: string, $values: System.Array$1<number>) : void
            /** Sets a float array property.
            * @param name Property name.
            * @param nameID Property name ID. Use Shader.PropertyToID to get this ID.
            * @param values Array of values to set.
            */
            public SetFloatArray ($nameID: number, $values: System.Array$1<number>) : void
            public SetColorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Color>) : void
            public SetColorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Color>) : void
            /** Sets a color array property.
            * @param name Property name.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param values Array of values to set.
            */
            public SetColorArray ($name: string, $values: System.Array$1<UnityEngine.Color>) : void
            /** Sets a color array property.
            * @param name Property name.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param values Array of values to set.
            */
            public SetColorArray ($nameID: number, $values: System.Array$1<UnityEngine.Color>) : void
            public SetVectorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public SetVectorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** Sets a vector array property.
            * @param name Property name.
            * @param values Array of values to set.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetVectorArray ($name: string, $values: System.Array$1<UnityEngine.Vector4>) : void
            /** Sets a vector array property.
            * @param name Property name.
            * @param values Array of values to set.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetVectorArray ($nameID: number, $values: System.Array$1<UnityEngine.Vector4>) : void
            public SetMatrixArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public SetMatrixArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            /** Sets a matrix array property.
            * @param name Property name.
            * @param values Array of values to set.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetMatrixArray ($name: string, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Sets a matrix array property.
            * @param name Property name.
            * @param values Array of values to set.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetMatrixArray ($nameID: number, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Get a named float value.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetFloat ($name: string) : number
            /** Get a named float value.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetFloat ($nameID: number) : number
            /** Get a named integer value.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetInt ($name: string) : number
            /** Get a named integer value.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetInt ($nameID: number) : number
            /** Get a named color value.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetColor ($name: string) : UnityEngine.Color
            /** Get a named color value.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetColor ($nameID: number) : UnityEngine.Color
            /** Get a named vector value.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetVector ($name: string) : UnityEngine.Vector4
            /** Get a named vector value.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetVector ($nameID: number) : UnityEngine.Vector4
            /** Get a named matrix value from the shader.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetMatrix ($name: string) : UnityEngine.Matrix4x4
            /** Get a named matrix value from the shader.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetMatrix ($nameID: number) : UnityEngine.Matrix4x4
            /** Get a named texture.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetTexture ($name: string) : UnityEngine.Texture
            /** Get a named texture.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetTexture ($nameID: number) : UnityEngine.Texture
            /** Get a named float array.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetFloatArray ($name: string) : System.Array$1<number>
            /** Get a named float array.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetFloatArray ($nameID: number) : System.Array$1<number>
            /** Get a named color array.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetColorArray ($name: string) : System.Array$1<UnityEngine.Color>
            /** Get a named color array.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetColorArray ($nameID: number) : System.Array$1<UnityEngine.Color>
            /** Get a named vector array.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetVectorArray ($name: string) : System.Array$1<UnityEngine.Vector4>
            /** Get a named vector array.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetVectorArray ($nameID: number) : System.Array$1<UnityEngine.Vector4>
            /** Get a named matrix array.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetMatrixArray ($name: string) : System.Array$1<UnityEngine.Matrix4x4>
            /** Get a named matrix array.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetMatrixArray ($nameID: number) : System.Array$1<UnityEngine.Matrix4x4>
            public GetFloatArray ($name: string, $values: System.Collections.Generic.List$1<number>) : void
            public GetFloatArray ($nameID: number, $values: System.Collections.Generic.List$1<number>) : void
            public GetColorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Color>) : void
            public GetColorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Color>) : void
            public GetVectorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public GetVectorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public GetMatrixArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public GetMatrixArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            /** Sets the placement offset of texture propertyName.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, for example: "_MainTex".
            * @param value Texture placement offset.
            */
            public SetTextureOffset ($name: string, $value: UnityEngine.Vector2) : void
            /** Sets the placement offset of texture propertyName.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, for example: "_MainTex".
            * @param value Texture placement offset.
            */
            public SetTextureOffset ($nameID: number, $value: UnityEngine.Vector2) : void
            /** Sets the placement scale of texture propertyName.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, e.g. "_MainTex".
            * @param value Texture placement scale.
            */
            public SetTextureScale ($name: string, $value: UnityEngine.Vector2) : void
            /** Sets the placement scale of texture propertyName.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Property name, e.g. "_MainTex".
            * @param value Texture placement scale.
            */
            public SetTextureScale ($nameID: number, $value: UnityEngine.Vector2) : void
            /** Gets the placement offset of texture propertyName.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetTextureOffset ($name: string) : UnityEngine.Vector2
            /** Gets the placement offset of texture propertyName.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetTextureOffset ($nameID: number) : UnityEngine.Vector2
            /** Gets the placement scale of texture propertyName.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetTextureScale ($name: string) : UnityEngine.Vector2
            /** Gets the placement scale of texture propertyName.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetTextureScale ($nameID: number) : UnityEngine.Vector2
            public constructor ($shader: UnityEngine.Shader)
            public constructor ($source: UnityEngine.Material)
            public constructor ()
        }
        /** The material class.
        */
        interface Material {
            /** Iterates over all the Material properties with the MaterialProperty.PropFlags.Normal flag and checks that the textures referenced by these properties are imported as TextureImporterType.NormalMap.
            * @param material The target material.
            */
            PerformBumpMapCheck () : void;
        }
        /** Use this BeforeRenderOrderAttribute when you need to specify a custom callback order for Application.onBeforeRender.
        */
        class BeforeRenderOrderAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The order, lowest to highest, that the Application.onBeforeRender event recievers will be called in.
            */
            public get order(): number;
            public constructor ($order: number)
            public constructor ()
        }
        /** BillboardAsset describes how a billboard is rendered.
        */
        class BillboardAsset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Width of the billboard.
            */
            public get width(): number;
            public set width(value: number);
            /** Height of the billboard.
            */
            public get height(): number;
            public set height(value: number);
            /** Height of the billboard that is below ground.
            */
            public get bottom(): number;
            public set bottom(value: number);
            /** Number of pre-rendered images that can be switched when the billboard is viewed from different angles.
            */
            public get imageCount(): number;
            /** Number of vertices in the billboard mesh.
            */
            public get vertexCount(): number;
            /** Number of indices in the billboard mesh.
            */
            public get indexCount(): number;
            /** The material used for rendering.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public GetImageTexCoords ($imageTexCoords: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public GetImageTexCoords () : System.Array$1<UnityEngine.Vector4>
            public SetImageTexCoords ($imageTexCoords: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** Set the array of billboard image texture coordinate data.
            * @param imageTexCoords The array of data to set.
            */
            public SetImageTexCoords ($imageTexCoords: System.Array$1<UnityEngine.Vector4>) : void
            public GetVertices ($vertices: System.Collections.Generic.List$1<UnityEngine.Vector2>) : void
            public GetVertices () : System.Array$1<UnityEngine.Vector2>
            public SetVertices ($vertices: System.Collections.Generic.List$1<UnityEngine.Vector2>) : void
            /** Set the vertices of the billboard mesh.
            * @param vertices The array of data to set.
            */
            public SetVertices ($vertices: System.Array$1<UnityEngine.Vector2>) : void
            public GetIndices ($indices: System.Collections.Generic.List$1<number>) : void
            public GetIndices () : System.Array$1<number>
            public SetIndices ($indices: System.Collections.Generic.List$1<number>) : void
            /** Set the indices of the billboard mesh.
            * @param indices The array of data to set.
            */
            public SetIndices ($indices: System.Array$1<number>) : void
            public constructor ()
        }
        /** Renders a billboard from a BillboardAsset.
        */
        class BillboardRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** The BillboardAsset to render.
            */
            public get billboard(): UnityEngine.BillboardAsset;
            public set billboard(value: UnityEngine.BillboardAsset);
            public constructor ()
        }
        /** Provides access to a display / screen for rendering operations.
        */
        class Display extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The list of currently connected Displays. Contains at least one (main) display.
            */
            public static displays : System.Array$1<UnityEngine.Display>
            /** Horizontal resolution that the display is rendering at.
            */
            public get renderingWidth(): number;
            /** Vertical resolution that the display is rendering at.
            */
            public get renderingHeight(): number;
            /** Horizontal native display resolution.
            */
            public get systemWidth(): number;
            /** Vertical native display resolution.
            */
            public get systemHeight(): number;
            /** Color RenderBuffer.
            */
            public get colorBuffer(): UnityEngine.RenderBuffer;
            /** Depth RenderBuffer.
            */
            public get depthBuffer(): UnityEngine.RenderBuffer;
            /** Gets the state of the display and returns true if the display is active and false if otherwise.
            */
            public get active(): boolean;
            /** True when the back buffer requires an intermediate texture to render.
            */
            public get requiresBlitToBackbuffer(): boolean;
            /** True when doing a blit to the back buffer requires manual color space conversion.
            */
            public get requiresSrgbBlitToBackbuffer(): boolean;
            /** Main Display.
            */
            public static get main(): UnityEngine.Display;
            public Activate () : void
            /** This overloaded function available for Windows allows specifying desired Window Width, Height and Refresh Rate.
            * @param width Desired Width of the Window (for Windows only. On Linux and Mac uses Screen Width).
            * @param height Desired Height of the Window (for Windows only. On Linux and Mac uses Screen Height).
            * @param refreshRate Desired Refresh Rate.
            */
            public Activate ($width: number, $height: number, $refreshRate: number) : void
            /** Set rendering size and position on screen (Windows only).
            * @param width Change Window Width (Windows Only).
            * @param height Change Window Height (Windows Only).
            * @param x Change Window Position X (Windows Only).
            * @param y Change Window Position Y (Windows Only).
            */
            public SetParams ($width: number, $height: number, $x: number, $y: number) : void
            /** Sets rendering resolution for the display.
            * @param w Rendering width in pixels.
            * @param h Rendering height in pixels.
            */
            public SetRenderingResolution ($w: number, $h: number) : void
            /** Query relative mouse coordinates.
            * @param inputMouseCoordinates Mouse Input Position as Coordinates.
            */
            public static RelativeMouseAt ($inputMouseCoordinates: UnityEngine.Vector3) : UnityEngine.Vector3
            public static add_onDisplaysUpdated ($value: UnityEngine.Display.DisplaysUpdatedDelegate) : void
            public static remove_onDisplaysUpdated ($value: UnityEngine.Display.DisplaysUpdatedDelegate) : void
        }
        /** Platform agnostic fullscreen mode. Not all platforms support all modes.
        */
        enum FullScreenMode
        { ExclusiveFullScreen = 0, FullScreenWindow = 1, MaximizedWindow = 2, Windowed = 3 }
        /** Constants for special values of Screen.sleepTimeout.
        */
        class SleepTimeout extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Prevent screen dimming.
            */
            public static NeverSleep : number
            /** Set the sleep timeout to whatever the user has specified in the system settings.
            */
            public static SystemSetting : number
            public constructor ()
        }
        /** Access to display information.
        */
        class Screen extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The current width of the screen window in pixels (Read Only).
            */
            public static get width(): number;
            /** The current height of the screen window in pixels (Read Only).
            */
            public static get height(): number;
            /** The current DPI of the screen / device (Read Only).
            */
            public static get dpi(): number;
            /** The current screen resolution (Read Only).
            */
            public static get currentResolution(): UnityEngine.Resolution;
            /** All full-screen resolutions supported by the monitor (Read Only).
            */
            public static get resolutions(): System.Array$1<UnityEngine.Resolution>;
            /** Is the game running full-screen?
            */
            public static get fullScreen(): boolean;
            public static set fullScreen(value: boolean);
            /** Set this property to one of the values in FullScreenMode to change the display mode of your application.
            */
            public static get fullScreenMode(): UnityEngine.FullScreenMode;
            public static set fullScreenMode(value: UnityEngine.FullScreenMode);
            /** Returns the safe area of the screen in pixels (Read Only).
            */
            public static get safeArea(): UnityEngine.Rect;
            /** Returns a list of screen areas that are not functional for displaying content (Read Only).
            */
            public static get cutouts(): System.Array$1<UnityEngine.Rect>;
            /** Allow auto-rotation to portrait?
            */
            public static get autorotateToPortrait(): boolean;
            public static set autorotateToPortrait(value: boolean);
            /** Allow auto-rotation to portrait, upside down?
            */
            public static get autorotateToPortraitUpsideDown(): boolean;
            public static set autorotateToPortraitUpsideDown(value: boolean);
            /** Allow auto-rotation to landscape left?
            */
            public static get autorotateToLandscapeLeft(): boolean;
            public static set autorotateToLandscapeLeft(value: boolean);
            /** Allow auto-rotation to landscape right?
            */
            public static get autorotateToLandscapeRight(): boolean;
            public static set autorotateToLandscapeRight(value: boolean);
            /** Specifies logical orientation of the screen.
            */
            public static get orientation(): UnityEngine.ScreenOrientation;
            public static set orientation(value: UnityEngine.ScreenOrientation);
            /** A power saving setting, allowing the screen to dim some time after the last active user interaction.
            */
            public static get sleepTimeout(): number;
            public static set sleepTimeout(value: number);
            /** The current brightness of the screen.
            */
            public static get brightness(): number;
            public static set brightness(value: number);
            /** Switches the screen resolution.
            */
            public static SetResolution ($width: number, $height: number, $fullscreenMode: UnityEngine.FullScreenMode, $preferredRefreshRate: number) : void
            public static SetResolution ($width: number, $height: number, $fullscreenMode: UnityEngine.FullScreenMode) : void
            /** Switches the screen resolution.
            */
            public static SetResolution ($width: number, $height: number, $fullscreen: boolean, $preferredRefreshRate: number) : void
            /** Switches the screen resolution.
            */
            public static SetResolution ($width: number, $height: number, $fullscreen: boolean) : void
            public constructor ()
        }
        /** Describes screen orientation.
        */
        enum ScreenOrientation
        { Unknown = 0, Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, AutoRotation = 5, Landscape = 3 }
        /** Intended usage of the buffer.
        */
        enum ComputeBufferMode
        { Immutable = 0, Dynamic = 1, Circular = 2, StreamOut = 3, SubUpdates = 4 }
        /** Raw interface to Unity's drawing functions.
        */
        class Graphics extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the currently active color gamut.
            */
            public static get activeColorGamut(): UnityEngine.ColorGamut;
            /** Graphics Tier classification for current device.
            Changing this value affects any subsequently loaded shaders. Initially this value is auto-detected from the hardware in use.
            */
            public static get activeTier(): UnityEngine.Rendering.GraphicsTier;
            public static set activeTier(value: UnityEngine.Rendering.GraphicsTier);
            /** True when rendering over native UI is enabled in Player Settings (readonly).
            */
            public static get preserveFramebufferAlpha(): boolean;
            /** Currently active color buffer (Read Only).
            */
            public static get activeColorBuffer(): UnityEngine.RenderBuffer;
            /** Currently active depth/stencil buffer (Read Only).
            */
            public static get activeDepthBuffer(): UnityEngine.RenderBuffer;
            public static ClearRandomWriteTargets () : void
            /** Execute a command buffer.
            * @param buffer The buffer to execute.
            */
            public static ExecuteCommandBuffer ($buffer: UnityEngine.Rendering.CommandBuffer) : void
            /** Executes a command buffer on an async compute queue with the queue selected based on the ComputeQueueType parameter passed.
            * @param buffer The CommandBuffer to be executed.
            * @param queueType Describes the desired async compute queue the suuplied CommandBuffer should be executed on.
            */
            public static ExecuteCommandBufferAsync ($buffer: UnityEngine.Rendering.CommandBuffer, $queueType: UnityEngine.Rendering.ComputeQueueType) : void
            /** Sets current render target.
            * @param rt RenderTexture to set as active render target.
            * @param mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param face Cubemap face to render into (use Unknown if not a cubemap).
            * @param depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param colorBuffer Color buffer to render into.
            * @param depthBuffer Depth buffer to render into.
            * @param colorBuffers Color buffers to render into (for multiple render target effects).
            * @param setup Full render target setup information.
            */
            public static SetRenderTarget ($rt: UnityEngine.RenderTexture, $mipLevel: number, $face: UnityEngine.CubemapFace, $depthSlice: number) : void
            /** Sets current render target.
            * @param rt RenderTexture to set as active render target.
            * @param mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param face Cubemap face to render into (use Unknown if not a cubemap).
            * @param depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param colorBuffer Color buffer to render into.
            * @param depthBuffer Depth buffer to render into.
            * @param colorBuffers Color buffers to render into (for multiple render target effects).
            * @param setup Full render target setup information.
            */
            public static SetRenderTarget ($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer, $mipLevel: number, $face: UnityEngine.CubemapFace, $depthSlice: number) : void
            /** Sets current render target.
            * @param rt RenderTexture to set as active render target.
            * @param mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param face Cubemap face to render into (use Unknown if not a cubemap).
            * @param depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param colorBuffer Color buffer to render into.
            * @param depthBuffer Depth buffer to render into.
            * @param colorBuffers Color buffers to render into (for multiple render target effects).
            * @param setup Full render target setup information.
            */
            public static SetRenderTarget ($colorBuffers: System.Array$1<UnityEngine.RenderBuffer>, $depthBuffer: UnityEngine.RenderBuffer) : void
            /** Sets current render target.
            * @param rt RenderTexture to set as active render target.
            * @param mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param face Cubemap face to render into (use Unknown if not a cubemap).
            * @param depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param colorBuffer Color buffer to render into.
            * @param depthBuffer Depth buffer to render into.
            * @param colorBuffers Color buffers to render into (for multiple render target effects).
            * @param setup Full render target setup information.
            */
            public static SetRenderTarget ($setup: UnityEngine.RenderTargetSetup) : void
            /** Set random write target for level pixel shaders.
            * @param index Index of the random write target in the shader.
            * @param uav RenderTexture to set as write target.
            * @param preserveCounterValue Whether to leave the append/consume counter value unchanged.
            */
            public static SetRandomWriteTarget ($index: number, $uav: UnityEngine.RenderTexture) : void
            /** Set random write target for level pixel shaders.
            * @param index Index of the random write target in the shader.
            * @param uav RenderTexture to set as write target.
            * @param preserveCounterValue Whether to leave the append/consume counter value unchanged.
            */
            public static SetRandomWriteTarget ($index: number, $uav: UnityEngine.ComputeBuffer, $preserveCounterValue: boolean) : void
            /** Copy texture contents.
            * @param src Source texture.
            * @param dst Destination texture.
            * @param srcElement Source texture element (cubemap face, texture array layer or 3D texture depth slice).
            * @param srcMip Source texture mipmap level.
            * @param dstElement Destination texture element (cubemap face, texture array layer or 3D texture depth slice).
            * @param dstMip Destination texture mipmap level.
            * @param srcX X coordinate of source texture region to copy (left side is zero).
            * @param srcY Y coordinate of source texture region to copy (bottom is zero).
            * @param srcWidth Width of source texture region to copy.
            * @param srcHeight Height of source texture region to copy.
            * @param dstX X coordinate of where to copy region in destination texture (left side is zero).
            * @param dstY Y coordinate of where to copy region in destination texture (bottom is zero).
            */
            public static CopyTexture ($src: UnityEngine.Texture, $dst: UnityEngine.Texture) : void
            public static CopyTexture ($src: UnityEngine.Texture, $srcElement: number, $dst: UnityEngine.Texture, $dstElement: number) : void
            /** Copy texture contents.
            * @param src Source texture.
            * @param dst Destination texture.
            * @param srcElement Source texture element (cubemap face, texture array layer or 3D texture depth slice).
            * @param srcMip Source texture mipmap level.
            * @param dstElement Destination texture element (cubemap face, texture array layer or 3D texture depth slice).
            * @param dstMip Destination texture mipmap level.
            * @param srcX X coordinate of source texture region to copy (left side is zero).
            * @param srcY Y coordinate of source texture region to copy (bottom is zero).
            * @param srcWidth Width of source texture region to copy.
            * @param srcHeight Height of source texture region to copy.
            * @param dstX X coordinate of where to copy region in destination texture (left side is zero).
            * @param dstY Y coordinate of where to copy region in destination texture (bottom is zero).
            */
            public static CopyTexture ($src: UnityEngine.Texture, $srcElement: number, $srcMip: number, $dst: UnityEngine.Texture, $dstElement: number, $dstMip: number) : void
            /** Copy texture contents.
            * @param src Source texture.
            * @param dst Destination texture.
            * @param srcElement Source texture element (cubemap face, texture array layer or 3D texture depth slice).
            * @param srcMip Source texture mipmap level.
            * @param dstElement Destination texture element (cubemap face, texture array layer or 3D texture depth slice).
            * @param dstMip Destination texture mipmap level.
            * @param srcX X coordinate of source texture region to copy (left side is zero).
            * @param srcY Y coordinate of source texture region to copy (bottom is zero).
            * @param srcWidth Width of source texture region to copy.
            * @param srcHeight Height of source texture region to copy.
            * @param dstX X coordinate of where to copy region in destination texture (left side is zero).
            * @param dstY Y coordinate of where to copy region in destination texture (bottom is zero).
            */
            public static CopyTexture ($src: UnityEngine.Texture, $srcElement: number, $srcMip: number, $srcX: number, $srcY: number, $srcWidth: number, $srcHeight: number, $dst: UnityEngine.Texture, $dstElement: number, $dstMip: number, $dstX: number, $dstY: number) : void
            /** This function provides an efficient way to convert between textures of different formats and dimensions.
            The destination texture format should be uncompressed and correspond to a supported RenderTextureFormat.
            * @param src Source texture.
            * @param dst Destination texture.
            * @param srcElement Source element (e.g. cubemap face).  Set this to 0 for 2d source textures.
            * @param dstElement Destination element (e.g. cubemap face or texture array element).
            * @returns True if the call succeeded. 
            */
            public static ConvertTexture ($src: UnityEngine.Texture, $dst: UnityEngine.Texture) : boolean
            /** This function provides an efficient way to convert between textures of different formats and dimensions.
            The destination texture format should be uncompressed and correspond to a supported RenderTextureFormat.
            * @param src Source texture.
            * @param dst Destination texture.
            * @param srcElement Source element (e.g. cubemap face).  Set this to 0 for 2d source textures.
            * @param dstElement Destination element (e.g. cubemap face or texture array element).
            * @returns True if the call succeeded. 
            */
            public static ConvertTexture ($src: UnityEngine.Texture, $srcElement: number, $dst: UnityEngine.Texture, $dstElement: number) : boolean
            /** Shortcut for calling Graphics.CreateGraphicsFence with GraphicsFenceType.AsyncQueueSynchronization as the first parameter.
            * @param stage The synchronization stage. See Graphics.CreateGraphicsFence.
            * @returns Returns a new GraphicsFence. 
            */
            public static CreateAsyncGraphicsFence ($stage: UnityEngine.Rendering.SynchronisationStage) : UnityEngine.Rendering.GraphicsFence
            public static CreateAsyncGraphicsFence () : UnityEngine.Rendering.GraphicsFence
            public static CreateGraphicsFence ($fenceType: UnityEngine.Rendering.GraphicsFenceType, $stage: UnityEngine.Rendering.SynchronisationStageFlags) : UnityEngine.Rendering.GraphicsFence
            /** Instructs the GPU's processing of the graphics queue to wait until the given GraphicsFence is passed.
            * @param fence The GraphicsFence that the GPU will be instructed to wait upon before proceeding with its processing of the graphics queue.
            * @param stage On some platforms there is a significant gap between the vertex processing completing and the pixel processing begining for a given draw call. This parameter allows for requested wait to be before the next items vertex or pixel processing begins. If a compute shader dispatch is the next item to be submitted then this parameter is ignored.
            */
            public static WaitOnAsyncGraphicsFence ($fence: UnityEngine.Rendering.GraphicsFence) : void
            /** Instructs the GPU's processing of the graphics queue to wait until the given GraphicsFence is passed.
            * @param fence The GraphicsFence that the GPU will be instructed to wait upon before proceeding with its processing of the graphics queue.
            * @param stage On some platforms there is a significant gap between the vertex processing completing and the pixel processing begining for a given draw call. This parameter allows for requested wait to be before the next items vertex or pixel processing begins. If a compute shader dispatch is the next item to be submitted then this parameter is ignored.
            */
            public static WaitOnAsyncGraphicsFence ($fence: UnityEngine.Rendering.GraphicsFence, $stage: UnityEngine.Rendering.SynchronisationStage) : void
            /** Draw a texture in screen coordinates.
            * @param screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param texture Texture to draw.
            * @param sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param leftBorder Number of pixels from the left that are not affected by scale.
            * @param rightBorder Number of pixels from the right that are not affected by scale.
            * @param topBorder Number of pixels from the top that are not affected by scale.
            * @param bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $color: UnityEngine.Color, $mat: UnityEngine.Material, $pass: number) : void
            /** Draw a texture in screen coordinates.
            * @param screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param texture Texture to draw.
            * @param sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param leftBorder Number of pixels from the left that are not affected by scale.
            * @param rightBorder Number of pixels from the right that are not affected by scale.
            * @param topBorder Number of pixels from the top that are not affected by scale.
            * @param bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material, $pass: number) : void
            /** Draw a texture in screen coordinates.
            * @param screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param texture Texture to draw.
            * @param sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param leftBorder Number of pixels from the left that are not affected by scale.
            * @param rightBorder Number of pixels from the right that are not affected by scale.
            * @param topBorder Number of pixels from the top that are not affected by scale.
            * @param bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material, $pass: number) : void
            /** Draw a texture in screen coordinates.
            * @param screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param texture Texture to draw.
            * @param sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param leftBorder Number of pixels from the left that are not affected by scale.
            * @param rightBorder Number of pixels from the right that are not affected by scale.
            * @param topBorder Number of pixels from the top that are not affected by scale.
            * @param bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $mat: UnityEngine.Material, $pass: number) : void
            /** Draw a mesh immediately.
            * @param mesh The Mesh to draw.
            * @param position Position of the mesh.
            * @param rotation Rotation of the mesh.
            * @param matrix Transformation matrix of the mesh (combines position, rotation and other transformations). Note that the mesh will not be displayed correctly if matrix has negative scale.
            * @param materialIndex Subset of the mesh to draw.
            */
            public static DrawMeshNow ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $materialIndex: number) : void
            /** Draw a mesh immediately.
            * @param mesh The Mesh to draw.
            * @param position Position of the mesh.
            * @param rotation Rotation of the mesh.
            * @param matrix Transformation matrix of the mesh (combines position, rotation and other transformations). Note that the mesh will not be displayed correctly if matrix has negative scale.
            * @param materialIndex Subset of the mesh to draw.
            */
            public static DrawMeshNow ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $materialIndex: number) : void
            /** Draw a mesh immediately.
            * @param mesh The Mesh to draw.
            * @param position Position of the mesh.
            * @param rotation Rotation of the mesh.
            * @param matrix Transformation matrix of the mesh (combines position, rotation and other transformations). Note that the mesh will not be displayed correctly if matrix has negative scale.
            * @param materialIndex Subset of the mesh to draw.
            */
            public static DrawMeshNow ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            /** Draw a mesh immediately.
            * @param mesh The Mesh to draw.
            * @param position Position of the mesh.
            * @param rotation Rotation of the mesh.
            * @param matrix Transformation matrix of the mesh (combines position, rotation and other transformations). Note that the mesh will not be displayed correctly if matrix has negative scale.
            * @param materialIndex Subset of the mesh to draw.
            */
            public static DrawMeshNow ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4) : void
            /** Draw a mesh.
            * @param mesh The Mesh to draw.
            * @param position Position of the mesh.
            * @param rotation Rotation of the mesh.
            * @param matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param material Material to use.
            * @param layer  to use.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.
            * @param submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param castShadows Determines whether the mesh can cast shadows.
            * @param receiveShadows Determines whether the mesh can receive shadows.
            * @param useLightProbes Should the mesh use light probes?
            * @param probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean, $receiveShadows: boolean, $useLightProbes: boolean) : void
            /** Draw a mesh.
            * @param mesh The Mesh to draw.
            * @param position Position of the mesh.
            * @param rotation Rotation of the mesh.
            * @param matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param material Material to use.
            * @param layer  to use.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.
            * @param submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param castShadows Determines whether the mesh can cast shadows.
            * @param receiveShadows Determines whether the mesh can receive shadows.
            * @param useLightProbes Should the mesh use light probes?
            * @param probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform, $useLightProbes: boolean) : void
            /** Draw a mesh.
            * @param mesh The Mesh to draw.
            * @param position Position of the mesh.
            * @param rotation Rotation of the mesh.
            * @param matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param material Material to use.
            * @param layer  to use.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.
            * @param submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param castShadows Determines whether the mesh can cast shadows.
            * @param receiveShadows Determines whether the mesh can receive shadows.
            * @param useLightProbes Should the mesh use light probes?
            * @param probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean, $receiveShadows: boolean, $useLightProbes: boolean) : void
            /** Draw a mesh.
            * @param mesh The Mesh to draw.
            * @param position Position of the mesh.
            * @param rotation Rotation of the mesh.
            * @param matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param material Material to use.
            * @param layer  to use.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.
            * @param submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param castShadows Determines whether the mesh can cast shadows.
            * @param receiveShadows Determines whether the mesh can receive shadows.
            * @param useLightProbes Should the mesh use light probes?
            * @param probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) : void
            /** Draw the same mesh multiple times using GPU instancing.
            * @param mesh The Mesh to draw.
            * @param submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param material Material to use.
            * @param matrices The array of object transformation matrices.
            * @param count The number of instances to be drawn.
            * @param properties Additional material properties to apply. See MaterialPropertyBlock.
            * @param castShadows Should the meshes cast shadows?
            * @param receiveShadows Should the meshes receive shadows?
            * @param layer  to use.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given camera only.
            * @param lightProbeUsage LightProbeUsage for the instances.
            */
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) : void
            /** Draw the same mesh multiple times using GPU instancing.
            This is similar to Graphics.DrawMeshInstancedIndirect, except when the instance count is known from script, it can be supplied directly using this method, rather than via a ComputeBuffer.
            * @param mesh The Mesh to draw.
            * @param submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param material Material to use.
            * @param bounds The bounding volume surrounding the instances you intend to draw.
            * @param count The number of instances to be drawn.
            * @param properties Additional material properties to apply. See MaterialPropertyBlock.
            * @param castShadows Should the meshes cast shadows?
            * @param receiveShadows Should the meshes receive shadows?
            * @param layer  to use.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given camera only.
            * @param lightProbeUsage LightProbeUsage for the instances.
            */
            public static DrawMeshInstancedProcedural ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $count: number, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number, $camera?: UnityEngine.Camera, $lightProbeUsage?: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume?: UnityEngine.LightProbeProxyVolume) : void
            /** Draw the same mesh multiple times using GPU instancing.
            * @param mesh The Mesh to draw.
            * @param submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param material Material to use.
            * @param bounds The bounding volume surrounding the instances you intend to draw.
            * @param bufferWithArgs The GPU buffer containing the arguments for how many instances of this mesh to draw.
            * @param argsOffset The byte offset into the buffer, where the draw arguments start.
            * @param properties Additional material properties to apply. See MaterialPropertyBlock.
            * @param castShadows Determines whether the mesh can cast shadows.
            * @param receiveShadows Determines whether the mesh can receive shadows.
            * @param layer  to use.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given camera only.
            * @param lightProbeUsage LightProbeUsage for the instances.
            */
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) : void
            /** Draws procedural geometry on the GPU.
            * @param topology Topology of the procedural geometry.
            * @param vertexCount Vertex count to render.
            * @param instanceCount Instance count to render.
            */
            public static DrawProceduralNow ($topology: UnityEngine.MeshTopology, $vertexCount: number, $instanceCount?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param topology Topology of the procedural geometry.
            * @param indexCount Index count to render.
            * @param instanceCount Instance count to render.
            * @param indexBuffer Index buffer used to submit vertices to the GPU.
            */
            public static DrawProceduralNow ($topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $indexCount: number, $instanceCount?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param topology Topology of the procedural geometry.
            * @param bufferWithArgs Buffer with draw arguments.
            * @param argsOffset Byte offset where in the buffer the draw arguments are.
            */
            public static DrawProceduralIndirectNow ($topology: UnityEngine.MeshTopology, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param topology Topology of the procedural geometry.
            * @param indexBuffer Index buffer used to submit vertices to the GPU.
            * @param bufferWithArgs Buffer with draw arguments.
            * @param argsOffset Byte offset where in the buffer the draw arguments are.
            */
            public static DrawProceduralIndirectNow ($topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param material Material to use.
            * @param bounds The bounding volume surrounding the instances you intend to draw.
            * @param topology Topology of the procedural geometry.
            * @param instanceCount Instance count to render.
            * @param vertexCount Vertex count to render.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.
            * @param properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param castShadows Determines whether the mesh can cast shadows.
            * @param receiveShadows Determines whether the mesh can receive shadows.
            * @param layer  to use.
            */
            public static DrawProcedural ($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $vertexCount: number, $instanceCount?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param material Material to use.
            * @param bounds The bounding volume surrounding the instances you intend to draw.
            * @param topology Topology of the procedural geometry.
            * @param indexBuffer Index buffer used to submit vertices to the GPU.
            * @param instanceCount Instance count to render.
            * @param indexCount Index count to render.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.
            * @param properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param castShadows Determines whether the mesh can cast shadows.
            * @param receiveShadows Determines whether the mesh can receive shadows.
            * @param layer  to use.
            */
            public static DrawProcedural ($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $indexCount: number, $instanceCount?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param material Material to use.
            * @param bounds The bounding volume surrounding the instances you intend to draw.
            * @param topology Topology of the procedural geometry.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.
            * @param bufferWithArgs Buffer with draw arguments.
            * @param argsOffset Byte offset where in the buffer the draw arguments are.
            * @param properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param castShadows Determines whether the mesh can cast shadows.
            * @param receiveShadows Determines whether the mesh can receive shadows.
            * @param layer  to use.
            */
            public static DrawProceduralIndirect ($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param material Material to use.
            * @param bounds The bounding volume surrounding the instances you intend to draw.
            * @param topology Topology of the procedural geometry.
            * @param indexBuffer Index buffer used to submit vertices to the GPU.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.
            * @param bufferWithArgs Buffer with draw arguments.
            * @param argsOffset Byte offset where in the buffer the draw arguments are.
            * @param properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param castShadows Determines whether the mesh can cast shadows.
            * @param receiveShadows Determines whether the mesh can receive shadows.
            * @param layer  to use.
            */
            public static DrawProceduralIndirect ($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number) : void
            /** Copies source texture into destination render texture with a shader.
            * @param source Source texture.
            * @param dest The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.
            * @param mat Material to use. Material's shader could do some post-processing effect, for example.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            * @param offset Offset applied to the source texture coordinate.
            * @param scale Scale applied to the source texture coordinate.
            * @param sourceDepthSlice The texture array source slice to perform the blit from.
            * @param destDepthSlice The texture array destination slice to perform the blit to.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture) : void
            /** Copies source texture into destination render texture with a shader.
            * @param source Source texture.
            * @param dest The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.
            * @param mat Material to use. Material's shader could do some post-processing effect, for example.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            * @param offset Offset applied to the source texture coordinate.
            * @param scale Scale applied to the source texture coordinate.
            * @param sourceDepthSlice The texture array source slice to perform the blit from.
            * @param destDepthSlice The texture array destination slice to perform the blit to.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $sourceDepthSlice: number, $destDepthSlice: number) : void
            /** Copies source texture into destination render texture with a shader.
            * @param source Source texture.
            * @param dest The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.
            * @param mat Material to use. Material's shader could do some post-processing effect, for example.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            * @param offset Offset applied to the source texture coordinate.
            * @param scale Scale applied to the source texture coordinate.
            * @param sourceDepthSlice The texture array source slice to perform the blit from.
            * @param destDepthSlice The texture array destination slice to perform the blit to.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $scale: UnityEngine.Vector2, $offset: UnityEngine.Vector2) : void
            /** Copies source texture into destination render texture with a shader.
            * @param source Source texture.
            * @param dest The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.
            * @param mat Material to use. Material's shader could do some post-processing effect, for example.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            * @param offset Offset applied to the source texture coordinate.
            * @param scale Scale applied to the source texture coordinate.
            * @param sourceDepthSlice The texture array source slice to perform the blit from.
            * @param destDepthSlice The texture array destination slice to perform the blit to.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $scale: UnityEngine.Vector2, $offset: UnityEngine.Vector2, $sourceDepthSlice: number, $destDepthSlice: number) : void
            /** Copies source texture into destination render texture with a shader.
            * @param source Source texture.
            * @param dest The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.
            * @param mat Material to use. Material's shader could do some post-processing effect, for example.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            * @param offset Offset applied to the source texture coordinate.
            * @param scale Scale applied to the source texture coordinate.
            * @param sourceDepthSlice The texture array source slice to perform the blit from.
            * @param destDepthSlice The texture array destination slice to perform the blit to.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material, $pass: number) : void
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material, $pass: number, $destDepthSlice: number) : void
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material) : void
            /** Copies source texture into destination render texture with a shader.
            * @param source Source texture.
            * @param dest The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.
            * @param mat Material to use. Material's shader could do some post-processing effect, for example.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            * @param offset Offset applied to the source texture coordinate.
            * @param scale Scale applied to the source texture coordinate.
            * @param sourceDepthSlice The texture array source slice to perform the blit from.
            * @param destDepthSlice The texture array destination slice to perform the blit to.
            */
            public static Blit ($source: UnityEngine.Texture, $mat: UnityEngine.Material, $pass: number) : void
            /** Copies source texture into destination render texture with a shader.
            * @param source Source texture.
            * @param dest The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.
            * @param mat Material to use. Material's shader could do some post-processing effect, for example.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            * @param offset Offset applied to the source texture coordinate.
            * @param scale Scale applied to the source texture coordinate.
            * @param sourceDepthSlice The texture array source slice to perform the blit from.
            * @param destDepthSlice The texture array destination slice to perform the blit to.
            */
            public static Blit ($source: UnityEngine.Texture, $mat: UnityEngine.Material, $pass: number, $destDepthSlice: number) : void
            public static Blit ($source: UnityEngine.Texture, $mat: UnityEngine.Material) : void
            /** Copies source texture into destination, for multi-tap shader.
            * @param source Source texture.
            * @param dest Destination RenderTexture, or null to blit directly to screen.
            * @param mat Material to use for copying. Material's shader should do some post-processing effect.
            * @param offsets Variable number of filtering offsets. Offsets are given in pixels.
            * @param destDepthSlice The texture array destination slice to blit to.
            */
            public static BlitMultiTap ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material, ...offsets: UnityEngine.Vector2[]) : void
            /** Copies source texture into destination, for multi-tap shader.
            * @param source Source texture.
            * @param dest Destination RenderTexture, or null to blit directly to screen.
            * @param mat Material to use for copying. Material's shader should do some post-processing effect.
            * @param offsets Variable number of filtering offsets. Offsets are given in pixels.
            * @param destDepthSlice The texture array destination slice to blit to.
            */
            public static BlitMultiTap ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material, $destDepthSlice: number, ...offsets: UnityEngine.Vector2[]) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean, $receiveShadows: boolean) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean, $receiveShadows: boolean) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform) : void
            /** Draw a mesh.
            * @param mesh The Mesh to draw.
            * @param position Position of the mesh.
            * @param rotation Rotation of the mesh.
            * @param matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param material Material to use.
            * @param layer  to use.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.
            * @param submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param castShadows Determines whether the mesh can cast shadows.
            * @param receiveShadows Determines whether the mesh can receive shadows.
            * @param useLightProbes Should the mesh use light probes?
            * @param probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform, $useLightProbes: boolean) : void
            /** Draw a mesh.
            * @param mesh The Mesh to draw.
            * @param position Position of the mesh.
            * @param rotation Rotation of the mesh.
            * @param matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param material Material to use.
            * @param layer  to use.
            * @param camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.
            * @param submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param castShadows Determines whether the mesh can cast shadows.
            * @param receiveShadows Determines whether the mesh can receive shadows.
            * @param useLightProbes Should the mesh use light probes?
            * @param probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage) : void
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer) : void
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset: number) : void
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset: number, $properties: UnityEngine.MaterialPropertyBlock) : void
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode) : void
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean) : void
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number) : void
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera) : void
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage) : void
            /** Draw a texture in screen coordinates.
            * @param screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param texture Texture to draw.
            * @param sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param leftBorder Number of pixels from the left that are not affected by scale.
            * @param rightBorder Number of pixels from the right that are not affected by scale.
            * @param topBorder Number of pixels from the top that are not affected by scale.
            * @param bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $color: UnityEngine.Color, $mat: UnityEngine.Material) : void
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $color: UnityEngine.Color) : void
            /** Draw a texture in screen coordinates.
            * @param screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param texture Texture to draw.
            * @param sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param leftBorder Number of pixels from the left that are not affected by scale.
            * @param rightBorder Number of pixels from the right that are not affected by scale.
            * @param topBorder Number of pixels from the top that are not affected by scale.
            * @param bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material) : void
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number) : void
            /** Draw a texture in screen coordinates.
            * @param screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param texture Texture to draw.
            * @param sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param leftBorder Number of pixels from the left that are not affected by scale.
            * @param rightBorder Number of pixels from the right that are not affected by scale.
            * @param topBorder Number of pixels from the top that are not affected by scale.
            * @param bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material) : void
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number) : void
            /** Draw a texture in screen coordinates.
            * @param screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param texture Texture to draw.
            * @param sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param leftBorder Number of pixels from the left that are not affected by scale.
            * @param rightBorder Number of pixels from the right that are not affected by scale.
            * @param topBorder Number of pixels from the top that are not affected by scale.
            * @param bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $mat: UnityEngine.Material) : void
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture) : void
            public static SetRenderTarget ($rt: UnityEngine.RenderTexture) : void
            public static SetRenderTarget ($rt: UnityEngine.RenderTexture, $mipLevel: number) : void
            public static SetRenderTarget ($rt: UnityEngine.RenderTexture, $mipLevel: number, $face: UnityEngine.CubemapFace) : void
            public static SetRenderTarget ($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer) : void
            public static SetRenderTarget ($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer, $mipLevel: number) : void
            public static SetRenderTarget ($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer, $mipLevel: number, $face: UnityEngine.CubemapFace) : void
            public static SetRandomWriteTarget ($index: number, $uav: UnityEngine.ComputeBuffer) : void
            public constructor ()
        }
        /** Represents a color gamut.
        */
        enum ColorGamut
        { sRGB = 0, Rec709 = 1, Rec2020 = 2, DisplayP3 = 3, HDR10 = 4, DolbyHDR = 5 }
        /** Cubemap face.
        */
        enum CubemapFace
        { Unknown = -1, PositiveX = 0, NegativeX = 1, PositiveY = 2, NegativeY = 3, PositiveZ = 4, NegativeZ = 5 }
        /** Fully describes setup of RenderTarget.
        */
        class RenderTargetSetup extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Color Buffers to set.
            */
            public color : System.Array$1<UnityEngine.RenderBuffer>
            /** Depth Buffer to set.
            */
            public depth : UnityEngine.RenderBuffer
            /** Mip Level to render to.
            */
            public mipLevel : number
            /** Cubemap face to render to.
            */
            public cubemapFace : UnityEngine.CubemapFace
            /** Slice of a Texture3D or Texture2DArray to set as a render target.
            */
            public depthSlice : number
            /** Load Actions for Color Buffers. It will override any actions set on RenderBuffers themselves.
            */
            public colorLoad : System.Array$1<UnityEngine.Rendering.RenderBufferLoadAction>
            /** Store Actions for Color Buffers. It will override any actions set on RenderBuffers themselves.
            */
            public colorStore : System.Array$1<UnityEngine.Rendering.RenderBufferStoreAction>
            /** Load Action for Depth Buffer. It will override any actions set on RenderBuffer itself.
            */
            public depthLoad : UnityEngine.Rendering.RenderBufferLoadAction
            /** Store Actions for Depth Buffer. It will override any actions set on RenderBuffer itself.
            */
            public depthStore : UnityEngine.Rendering.RenderBufferStoreAction
            public constructor ($color: System.Array$1<UnityEngine.RenderBuffer>, $depth: UnityEngine.RenderBuffer, $mip: number, $face: UnityEngine.CubemapFace, $colorLoad: System.Array$1<UnityEngine.Rendering.RenderBufferLoadAction>, $colorStore: System.Array$1<UnityEngine.Rendering.RenderBufferStoreAction>, $depthLoad: UnityEngine.Rendering.RenderBufferLoadAction, $depthStore: UnityEngine.Rendering.RenderBufferStoreAction)
            public constructor ($color: UnityEngine.RenderBuffer, $depth: UnityEngine.RenderBuffer)
            public constructor ($color: UnityEngine.RenderBuffer, $depth: UnityEngine.RenderBuffer, $mipLevel: number)
            public constructor ($color: UnityEngine.RenderBuffer, $depth: UnityEngine.RenderBuffer, $mipLevel: number, $face: UnityEngine.CubemapFace)
            public constructor ($color: UnityEngine.RenderBuffer, $depth: UnityEngine.RenderBuffer, $mipLevel: number, $face: UnityEngine.CubemapFace, $depthSlice: number)
            public constructor ($color: System.Array$1<UnityEngine.RenderBuffer>, $depth: UnityEngine.RenderBuffer)
            public constructor ($color: System.Array$1<UnityEngine.RenderBuffer>, $depth: UnityEngine.RenderBuffer, $mipLevel: number)
            public constructor ($color: System.Array$1<UnityEngine.RenderBuffer>, $depth: UnityEngine.RenderBuffer, $mip: number, $face: UnityEngine.CubemapFace)
            public constructor ()
        }
        /** GPU data buffer, mostly for use with compute shaders.
        */
        class ComputeBuffer extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Number of elements in the buffer (Read Only).
            */
            public get count(): number;
            /** Size of one element in the buffer (Read Only).
            */
            public get stride(): number;
            public set name(value: string);
            public Dispose () : void
            public Release () : void
            public IsValid () : boolean
            /** Set the buffer with values from an array.
            * @param data Array of values to fill the buffer.
            */
            public SetData ($data: System.Array) : void
            /** Partial copy of data values from an array into the buffer.
            * @param data Array of values to fill the buffer.
            * @param managedBufferStartIndex The first element index in data to copy to the compute buffer.
            * @param computeBufferStartIndex The first element index in compute buffer to receive the data.
            * @param count The number of elements to copy.
            */
            public SetData ($data: System.Array, $managedBufferStartIndex: number, $computeBufferStartIndex: number, $count: number) : void
            /** Read data values from the buffer into an array. The array can only use <a href="https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types">blittable<a> types.
            * @param data An array to receive the data.
            */
            public GetData ($data: System.Array) : void
            /** Partial read of data values from the buffer into an array.
            * @param data An array to receive the data.
            * @param managedBufferStartIndex The first element index in data where retrieved elements are copied.
            * @param computeBufferStartIndex The first element index of the compute buffer from which elements are read.
            * @param count The number of elements to retrieve.
            */
            public GetData ($data: System.Array, $managedBufferStartIndex: number, $computeBufferStartIndex: number, $count: number) : void
            /** Sets counter value of append/consume buffer.
            * @param counterValue Value of the append/consume counter.
            */
            public SetCounterValue ($counterValue: number) : void
            /** Copy counter value of append/consume buffer into another buffer.
            * @param src Append/consume buffer to copy the counter from.
            * @param dst A buffer to copy the counter to.
            * @param dstOffsetBytes Target byte offset in dst.
            */
            public static CopyCount ($src: UnityEngine.ComputeBuffer, $dst: UnityEngine.ComputeBuffer, $dstOffsetBytes: number) : void
            public GetNativeBufferPtr () : System.IntPtr
            public constructor ($count: number, $stride: number)
            public constructor ($count: number, $stride: number, $type: UnityEngine.ComputeBufferType)
            public constructor ($count: number, $stride: number, $type: UnityEngine.ComputeBufferType, $usage: UnityEngine.ComputeBufferMode)
            public constructor ()
        }
        /** A block of material values to apply.
        */
        class MaterialPropertyBlock extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Is the material property block empty? (Read Only)
            */
            public get isEmpty(): boolean;
            public Clear () : void
            /** Set a float property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The float value to set.
            */
            public SetFloat ($name: string, $value: number) : void
            /** Set a float property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The float value to set.
            */
            public SetFloat ($nameID: number, $value: number) : void
            /** Adds a property to the block. If an int property with the given name already exists, the old value is replaced.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The int value to set.
            */
            public SetInt ($name: string, $value: number) : void
            /** Adds a property to the block. If an int property with the given name already exists, the old value is replaced.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The int value to set.
            */
            public SetInt ($nameID: number, $value: number) : void
            /** Set a vector property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The Vector4 value to set.
            */
            public SetVector ($name: string, $value: UnityEngine.Vector4) : void
            /** Set a vector property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The Vector4 value to set.
            */
            public SetVector ($nameID: number, $value: UnityEngine.Vector4) : void
            /** Set a color property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The Color value to set.
            */
            public SetColor ($name: string, $value: UnityEngine.Color) : void
            /** Set a color property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The Color value to set.
            */
            public SetColor ($nameID: number, $value: UnityEngine.Color) : void
            /** Set a matrix property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The matrix value to set.
            */
            public SetMatrix ($name: string, $value: UnityEngine.Matrix4x4) : void
            /** Set a matrix property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The matrix value to set.
            */
            public SetMatrix ($nameID: number, $value: UnityEngine.Matrix4x4) : void
            /** Set a ComputeBuffer property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The ComputeBuffer to set.
            */
            public SetBuffer ($name: string, $value: UnityEngine.ComputeBuffer) : void
            /** Set a ComputeBuffer property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The ComputeBuffer to set.
            */
            public SetBuffer ($nameID: number, $value: UnityEngine.ComputeBuffer) : void
            /** Set a texture property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The Texture to set.
            * @param element Optional parameter that specifies the type of data from the render texture to set.
            */
            public SetTexture ($name: string, $value: UnityEngine.Texture) : void
            /** Set a texture property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The Texture to set.
            * @param element Optional parameter that specifies the type of data from the render texture to set.
            */
            public SetTexture ($nameID: number, $value: UnityEngine.Texture) : void
            /** Set a texture property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The Texture to set.
            * @param element Optional parameter that specifies the type of data from the render texture to set.
            */
            public SetTexture ($name: string, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Set a texture property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param value The Texture to set.
            * @param element Optional parameter that specifies the type of data from the render texture to set.
            */
            public SetTexture ($nameID: number, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Sets a ComputeBuffer as a named constant buffer for the MaterialPropertyBlock.
            * @param name The name of the constant buffer to override.
            * @param value The ComputeBuffer to override the constant buffer values with.
            * @param offset Offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.MinConstantBufferAlignment, or 0 if that value is 0.
            * @param size The number of bytes to bind.
            * @param nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer ($name: string, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer as a named constant buffer for the MaterialPropertyBlock.
            * @param name The name of the constant buffer to override.
            * @param value The ComputeBuffer to override the constant buffer values with.
            * @param offset Offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.MinConstantBufferAlignment, or 0 if that value is 0.
            * @param size The number of bytes to bind.
            * @param nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer ($nameID: number, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            public SetFloatArray ($name: string, $values: System.Collections.Generic.List$1<number>) : void
            public SetFloatArray ($nameID: number, $values: System.Collections.Generic.List$1<number>) : void
            /** Set a float array property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param values The array to set.
            */
            public SetFloatArray ($name: string, $values: System.Array$1<number>) : void
            /** Set a float array property.
            * @param name The name of the property.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param values The array to set.
            */
            public SetFloatArray ($nameID: number, $values: System.Array$1<number>) : void
            public SetVectorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public SetVectorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** Set a vector array property.
            * @param nameID The name of the property.
            * @param values The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The array to set.
            */
            public SetVectorArray ($name: string, $values: System.Array$1<UnityEngine.Vector4>) : void
            /** Set a vector array property.
            * @param nameID The name of the property.
            * @param values The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The array to set.
            */
            public SetVectorArray ($nameID: number, $values: System.Array$1<UnityEngine.Vector4>) : void
            public SetMatrixArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public SetMatrixArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            /** Set a matrix array property.
            * @param name The name of the property.
            * @param values The name ID of the property retrieved by Shader.PropertyToID.
            * @param nameID The array to set.
            */
            public SetMatrixArray ($name: string, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Set a matrix array property.
            * @param name The name of the property.
            * @param values The name ID of the property retrieved by Shader.PropertyToID.
            * @param nameID The array to set.
            */
            public SetMatrixArray ($nameID: number, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Get a float from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetFloat ($name: string) : number
            /** Get a float from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetFloat ($nameID: number) : number
            /** Get an int from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetInt ($name: string) : number
            /** Get an int from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetInt ($nameID: number) : number
            /** Get a vector from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetVector ($name: string) : UnityEngine.Vector4
            /** Get a vector from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetVector ($nameID: number) : UnityEngine.Vector4
            /** Get a color from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetColor ($name: string) : UnityEngine.Color
            /** Get a color from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetColor ($nameID: number) : UnityEngine.Color
            /** Get a matrix from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetMatrix ($name: string) : UnityEngine.Matrix4x4
            /** Get a matrix from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetMatrix ($nameID: number) : UnityEngine.Matrix4x4
            /** Get a texture from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetTexture ($name: string) : UnityEngine.Texture
            /** Get a texture from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetTexture ($nameID: number) : UnityEngine.Texture
            /** Get a float array from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetFloatArray ($name: string) : System.Array$1<number>
            /** Get a float array from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetFloatArray ($nameID: number) : System.Array$1<number>
            /** Get a vector array from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetVectorArray ($name: string) : System.Array$1<UnityEngine.Vector4>
            /** Get a vector array from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetVectorArray ($nameID: number) : System.Array$1<UnityEngine.Vector4>
            /** Get a matrix array from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetMatrixArray ($name: string) : System.Array$1<UnityEngine.Matrix4x4>
            /** Get a matrix array from the property block.
            * @param nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param name The name of the property.
            */
            public GetMatrixArray ($nameID: number) : System.Array$1<UnityEngine.Matrix4x4>
            public GetFloatArray ($name: string, $values: System.Collections.Generic.List$1<number>) : void
            public GetFloatArray ($nameID: number, $values: System.Collections.Generic.List$1<number>) : void
            public GetVectorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public GetVectorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public GetMatrixArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public GetMatrixArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public CopySHCoefficientArraysFrom ($lightProbes: System.Collections.Generic.List$1<UnityEngine.Rendering.SphericalHarmonicsL2>) : void
            /** This function converts and copies the entire source array into 7 Vector4 property arrays named unity_SHAr, unity_SHAg, unity_SHAb, unity_SHBr, unity_SHBg, unity_SHBb and unity_SHC for use with instanced rendering.
            * @param lightProbes The array of SH values to copy from.
            */
            public CopySHCoefficientArraysFrom ($lightProbes: System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>) : void
            public CopySHCoefficientArraysFrom ($lightProbes: System.Collections.Generic.List$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $sourceStart: number, $destStart: number, $count: number) : void
            /** This function converts and copies the source array into 7 Vector4 property arrays named unity_SHAr, unity_SHAg, unity_SHAb, unity_SHBr, unity_SHBg, unity_SHBb and unity_SHC with the specified source and destination range for use with instanced rendering.
            * @param lightProbes The array of SH values to copy from.
            * @param sourceStart The index of the first element in the source array to copy from.
            * @param destStart The index of the first element in the destination MaterialPropertyBlock array to copy to.
            * @param count The number of elements to copy.
            */
            public CopySHCoefficientArraysFrom ($lightProbes: System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $sourceStart: number, $destStart: number, $count: number) : void
            public CopyProbeOcclusionArrayFrom ($occlusionProbes: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** This function copies the entire source array into a Vector4 property array named unity_ProbesOcclusion for use with instanced rendering.
            * @param occlusionProbes The array of probe occlusion values to copy from.
            */
            public CopyProbeOcclusionArrayFrom ($occlusionProbes: System.Array$1<UnityEngine.Vector4>) : void
            public CopyProbeOcclusionArrayFrom ($occlusionProbes: System.Collections.Generic.List$1<UnityEngine.Vector4>, $sourceStart: number, $destStart: number, $count: number) : void
            /** This function copies the source array into a Vector4 property array named unity_ProbesOcclusion with the specified source and destination range for use with instanced rendering.
            * @param occlusionProbes The array of probe occlusion values to copy from.
            * @param sourceStart The index of the first element in the source array to copy from.
            * @param destStart The index of the first element in the destination MaterialPropertyBlock array to copy to.
            * @param count The number of elements to copy.
            */
            public CopyProbeOcclusionArrayFrom ($occlusionProbes: System.Array$1<UnityEngine.Vector4>, $sourceStart: number, $destStart: number, $count: number) : void
            public constructor ()
        }
        /** The Light Probe Proxy Volume component offers the possibility to use higher resolution lighting for large non-static GameObjects.
        */
        class LightProbeProxyVolume extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Checks if Light Probe Proxy Volumes are supported.
            */
            public static get isFeatureSupported(): boolean;
            /** The world-space bounding box in which the 3D grid of interpolated Light Probes is generated.
            */
            public get boundsGlobal(): UnityEngine.Bounds;
            /** The size of the bounding box in which the 3D grid of interpolated Light Probes is generated.
            */
            public get sizeCustom(): UnityEngine.Vector3;
            public set sizeCustom(value: UnityEngine.Vector3);
            /** The local-space origin of the bounding box in which the 3D grid of interpolated Light Probes is generated.
            */
            public get originCustom(): UnityEngine.Vector3;
            public set originCustom(value: UnityEngine.Vector3);
            /** Interpolated Light Probe density.
            */
            public get probeDensity(): number;
            public set probeDensity(value: number);
            /** The 3D grid resolution on the z-axis.
            */
            public get gridResolutionX(): number;
            public set gridResolutionX(value: number);
            /** The 3D grid resolution on the y-axis.
            */
            public get gridResolutionY(): number;
            public set gridResolutionY(value: number);
            /** The 3D grid resolution on the z-axis.
            */
            public get gridResolutionZ(): number;
            public set gridResolutionZ(value: number);
            /** The bounding box mode for generating the 3D grid of interpolated Light Probes.
            */
            public get boundingBoxMode(): UnityEngine.LightProbeProxyVolume.BoundingBoxMode;
            public set boundingBoxMode(value: UnityEngine.LightProbeProxyVolume.BoundingBoxMode);
            /** The resolution mode for generating the grid of interpolated Light Probes.
            */
            public get resolutionMode(): UnityEngine.LightProbeProxyVolume.ResolutionMode;
            public set resolutionMode(value: UnityEngine.LightProbeProxyVolume.ResolutionMode);
            /** The mode in which the interpolated Light Probe positions are generated.
            */
            public get probePositionMode(): UnityEngine.LightProbeProxyVolume.ProbePositionMode;
            public set probePositionMode(value: UnityEngine.LightProbeProxyVolume.ProbePositionMode);
            /** Sets the way the Light Probe Proxy Volume refreshes.
            */
            public get refreshMode(): UnityEngine.LightProbeProxyVolume.RefreshMode;
            public set refreshMode(value: UnityEngine.LightProbeProxyVolume.RefreshMode);
            /** Determines how many Spherical Harmonics bands will be evaluated to compute the ambient color.
            */
            public get qualityMode(): UnityEngine.LightProbeProxyVolume.QualityMode;
            public set qualityMode(value: UnityEngine.LightProbeProxyVolume.QualityMode);
            public Update () : void
            public constructor ()
        }
        /** Topology of Mesh faces.
        */
        enum MeshTopology
        { Triangles = 0, Quads = 2, Lines = 3, LineStrip = 4, Points = 5 }
        /** GPU graphics data buffer, for working with data such as vertex and index buffers.
        */
        class GraphicsBuffer extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Number of elements in the buffer (Read Only).
            */
            public get count(): number;
            /** Size of one element in the buffer (Read Only).
            */
            public get stride(): number;
            public Dispose () : void
            public Release () : void
            public IsValid () : boolean
            /** Set the buffer with values from an array.
            * @param data Array of values to fill the buffer.
            */
            public SetData ($data: System.Array) : void
            /** Partial copy of data values from an array into the buffer.
            * @param data Array of values to fill the buffer.
            * @param managedBufferStartIndex The first element index in data to copy to the graphics buffer.
            * @param count The number of elements to copy.
            * @param graphicsBufferStartIndex The first element index in the graphics buffer to receive the data.
            */
            public SetData ($data: System.Array, $managedBufferStartIndex: number, $graphicsBufferStartIndex: number, $count: number) : void
            public GetNativeBufferPtr () : System.IntPtr
            public constructor ($target: UnityEngine.GraphicsBuffer.Target, $count: number, $stride: number)
            public constructor ()
        }
        /** Low-level graphics library.
        */
        class GL extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Mode for Begin: draw triangles.
            */
            public static TRIANGLES : number
            /** Mode for Begin: draw triangle strip.
            */
            public static TRIANGLE_STRIP : number
            /** Mode for Begin: draw quads.
            */
            public static QUADS : number
            /** Mode for Begin: draw lines.
            */
            public static LINES : number
            /** Mode for Begin: draw line strip.
            */
            public static LINE_STRIP : number
            /** Should rendering be done in wireframe?
            */
            public static get wireframe(): boolean;
            public static set wireframe(value: boolean);
            /** Controls whether Linear-to-sRGB color conversion is performed while rendering.
            */
            public static get sRGBWrite(): boolean;
            public static set sRGBWrite(value: boolean);
            /** Select whether to invert the backface culling (true) or not (false).
            */
            public static get invertCulling(): boolean;
            public static set invertCulling(value: boolean);
            /** Gets or sets the modelview matrix.
            */
            public static get modelview(): UnityEngine.Matrix4x4;
            public static set modelview(value: UnityEngine.Matrix4x4);
            /** Submit a vertex.
            */
            public static Vertex3 ($x: number, $y: number, $z: number) : void
            /** Submit a vertex.
            */
            public static Vertex ($v: UnityEngine.Vector3) : void
            /** Sets current texture coordinate (x,y,z) for all texture units.
            */
            public static TexCoord3 ($x: number, $y: number, $z: number) : void
            /** Sets current texture coordinate (v.x,v.y,v.z) for all texture units.
            */
            public static TexCoord ($v: UnityEngine.Vector3) : void
            /** Sets current texture coordinate (x,y) for all texture units.
            */
            public static TexCoord2 ($x: number, $y: number) : void
            /** Sets current texture coordinate (x,y,z) to the actual texture unit.
            */
            public static MultiTexCoord3 ($unit: number, $x: number, $y: number, $z: number) : void
            /** Sets current texture coordinate (v.x,v.y,v.z) to the actual texture unit.
            */
            public static MultiTexCoord ($unit: number, $v: UnityEngine.Vector3) : void
            /** Sets current texture coordinate (x,y) for the actual texture unit.
            */
            public static MultiTexCoord2 ($unit: number, $x: number, $y: number) : void
            /** Sets current vertex color.
            */
            public static Color ($c: UnityEngine.Color) : void
            public static Flush () : void
            public static RenderTargetBarrier () : void
            /** Sets the current model matrix to the one specified.
            */
            public static MultMatrix ($m: UnityEngine.Matrix4x4) : void
            public static PushMatrix () : void
            public static PopMatrix () : void
            public static LoadIdentity () : void
            public static LoadOrtho () : void
            public static LoadPixelMatrix () : void
            /** Load an arbitrary matrix to the current projection matrix.
            */
            public static LoadProjectionMatrix ($mat: UnityEngine.Matrix4x4) : void
            public static InvalidateState () : void
            /** Compute GPU projection matrix from camera's projection matrix.
            * @param proj Source projection matrix.
            * @param renderIntoTexture Will this projection be used for rendering into a RenderTexture?
            * @returns Adjusted projection matrix for the current graphics API. 
            */
            public static GetGPUProjectionMatrix ($proj: UnityEngine.Matrix4x4, $renderIntoTexture: boolean) : UnityEngine.Matrix4x4
            /** Setup a matrix for pixel-correct rendering.
            */
            public static LoadPixelMatrix ($left: number, $right: number, $bottom: number, $top: number) : void
            /** Send a user-defined event to a native code plugin.
            * @param eventID User defined id to send to the callback.
            * @param callback Native code callback to queue for Unity's renderer to invoke.
            */
            public static IssuePluginEvent ($callback: System.IntPtr, $eventID: number) : void
            /** Begin drawing 3D primitives.
            * @param mode Primitives to draw: can be TRIANGLES, TRIANGLE_STRIP, QUADS or LINES.
            */
            public static Begin ($mode: number) : void
            public static End () : void
            /** Clear the current render buffer.
            * @param clearDepth Should the depth buffer be cleared?
            * @param clearColor Should the color buffer be cleared?
            * @param backgroundColor The color to clear with, used only if clearColor is true.
            * @param depth The depth to clear the z-buffer with, used only if clearDepth is true. The valid
            range is from 0 (near plane) to 1 (far plane). The value is graphics API agnostic: the abstraction layer will convert
            the value to match the convention of the current graphics API.
            */
            public static Clear ($clearDepth: boolean, $clearColor: boolean, $backgroundColor: UnityEngine.Color, $depth: number) : void
            public static Clear ($clearDepth: boolean, $clearColor: boolean, $backgroundColor: UnityEngine.Color) : void
            /** Set the rendering viewport.
            */
            public static Viewport ($pixelRect: UnityEngine.Rect) : void
            /** Clear the current render buffer with camera's skybox.
            * @param clearDepth Should the depth buffer be cleared?
            * @param camera Camera to get projection parameters and skybox from.
            */
            public static ClearWithSkybox ($clearDepth: boolean, $camera: UnityEngine.Camera) : void
            public constructor ()
        }
        /** Scales render textures to support dynamic resolution if the target platform/graphics API supports it.
        */
        class ScalableBufferManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Width scale factor to control dynamic resolution.
            */
            public static get widthScaleFactor(): number;
            /** Height scale factor to control dynamic resolution.
            */
            public static get heightScaleFactor(): number;
            /** Function to resize all buffers marked as DynamicallyScalable.
            * @param widthScale New scale factor for the width the ScalableBufferManager will use to resize all render textures the user marked as DynamicallyScalable, has to be some value greater than 0.0 and less than or equal to 1.0.
            * @param heightScale New scale factor for the height the ScalableBufferManager will use to resize all render textures the user marked as DynamicallyScalable, has to be some value greater than 0.0 and less than or equal to 1.0.
            */
            public static ResizeBuffers ($widthScale: number, $heightScale: number) : void
        }
        /** Struct containing basic FrameTimings and accompanying relevant data.
        */
        class FrameTiming extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** This is the CPU clock time at the point Present was called for the current frame.
            */
            public cpuTimePresentCalled : bigint
            /** The CPU time for a given frame, in ms.
            */
            public cpuFrameTime : number
            /** This is the CPU clock time at the point GPU finished rendering the frame and interrupted the CPU.
            */
            public cpuTimeFrameComplete : bigint
            /** The GPU time for a given frame, in ms.
            */
            public gpuFrameTime : number
            /** This was the height scale factor of the Dynamic Resolution system(if used) for the given frame and the linked frame timings.
            */
            public heightScale : number
            /** This was the width scale factor of the Dynamic Resolution system(if used) for the given frame and the linked frame timings.
            */
            public widthScale : number
            /** This was the vsync mode for the given frame and the linked frame timings.
            */
            public syncInterval : number
        }
        /** The FrameTimingManager allows the user to capture and access FrameTiming data for multple frames.
        */
        class FrameTimingManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static CaptureFrameTimings () : void
            /** Allows the user to access the currently captured FrameTimings.
            * @param numFrames User supplies a desired number of frames they would like FrameTimings for. This should be equal to or less than the maximum FrameTimings the platform can capture.
            * @param timings An array of FrameTiming structs that is passed in by the user and will be filled with data as requested. It is the users job to make sure the array that is passed is large enough to hold the requested number of FrameTimings.
            * @returns Returns the number of FrameTimings it actually was able to get. This will always be equal to or less than the requested numFrames depending on availability of captured FrameTimings. 
            */
            public static GetLatestTimings ($numFrames: number, $timings: System.Array$1<UnityEngine.FrameTiming>) : number
            public static GetVSyncsPerSecond () : number
            public static GetGpuTimerFrequency () : bigint
            public static GetCpuTimerFrequency () : bigint
        }
        /** Data of a lightmap.
        */
        class LightmapData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Lightmap storing color of incoming light.
            */
            public get lightmapColor(): UnityEngine.Texture2D;
            public set lightmapColor(value: UnityEngine.Texture2D);
            /** Lightmap storing dominant direction of incoming light.
            */
            public get lightmapDir(): UnityEngine.Texture2D;
            public set lightmapDir(value: UnityEngine.Texture2D);
            /** Texture storing occlusion mask per light (ShadowMask, up to four lights).
            */
            public get shadowMask(): UnityEngine.Texture2D;
            public set shadowMask(value: UnityEngine.Texture2D);
            public constructor ()
        }
        /** Class for texture handling.
        */
        class Texture2D extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** The format of the pixel data in the texture (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            /** Gets a small Texture with all white pixels.
            */
            public static get whiteTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with all black pixels.
            */
            public static get blackTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with all red pixels.
            */
            public static get redTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with all gray pixels.
            */
            public static get grayTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with all gray pixels.
            */
            public static get linearGrayTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with pixels that represent surface normal vectors at a neutral position.
            */
            public static get normalTexture(): UnityEngine.Texture2D;
            /** Returns true if the Read/Write Enabled checkbox was checked when the texture was imported; otherwise returns false. For a dynamic Texture created from script, always returns true. For additional information, see TextureImporter.isReadable.
            */
            public get isReadable(): boolean;
            /** Determines whether mipmap streaming is enabled for this Texture.
            */
            public get streamingMipmaps(): boolean;
            /** Sets the relative priority for this Texture when reducing memory size to fit within the memory budget.
            */
            public get streamingMipmapsPriority(): number;
            /** The mipmap level to load.
            */
            public get requestedMipmapLevel(): number;
            public set requestedMipmapLevel(value: number);
            /** Restricts the mipmap streaming system to a minimum mip level for this Texture.
            */
            public get minimumMipmapLevel(): number;
            public set minimumMipmapLevel(value: number);
            /** The mipmap level calculated by the streaming system, which takes into account the streaming Cameras and the location of the objects containing this Texture. This is unaffected by requestedMipmapLevel or minimumMipmapLevel.
            */
            public get calculatedMipmapLevel(): number;
            /** The mipmap level that the streaming system would load before memory budgets are applied.
            */
            public get desiredMipmapLevel(): number;
            /** The mipmap level that the mipmap streaming system is in the process of loading.
            */
            public get loadingMipmapLevel(): number;
            /** The mipmap level that is currently loaded by the streaming system.
            */
            public get loadedMipmapLevel(): number;
            /** Indicates whether this texture was imported with TextureImporter.alphaIsTransparency enabled. This setting is available only in the Editor scripts. Note that changing this setting will have no effect; it must be enabled in TextureImporter instead.
            */
            public get alphaIsTransparency(): boolean;
            public set alphaIsTransparency(value: boolean);
            /** Compress texture into DXT format.
            */
            public Compress ($highQuality: boolean) : void
            public ClearRequestedMipmapLevel () : void
            public IsRequestedMipmapLevelLoaded () : boolean
            public ClearMinimumMipmapLevel () : void
            /** Updates Unity texture to use different native texture object.
            * @param nativeTex Native 2D texture object.
            */
            public UpdateExternalTexture ($nativeTex: System.IntPtr) : void
            public GetRawTextureData () : System.Array$1<number>
            /** Get a block of pixel colors.
            * @param x The x position of the pixel array to fetch.
            * @param y The y position of the pixel array to fetch.
            * @param blockWidth The width length of the pixel array to fetch.
            * @param blockHeight The height length of the pixel array to fetch.
            * @param miplevel The mipmap level to fetch the pixels. Defaults to zero, and is
            optional.
            * @returns The array of pixels in the texture that have been selected. 
            */
            public GetPixels ($x: number, $y: number, $blockWidth: number, $blockHeight: number, $miplevel: number) : System.Array$1<UnityEngine.Color>
            public GetPixels ($x: number, $y: number, $blockWidth: number, $blockHeight: number) : System.Array$1<UnityEngine.Color>
            /** Get a block of pixel colors in Color32 format.
            */
            public GetPixels32 ($miplevel: number) : System.Array$1<UnityEngine.Color32>
            public GetPixels32 () : System.Array$1<UnityEngine.Color32>
            /** Packs multiple Textures into a texture atlas.
            * @param textures Array of textures to pack into the atlas.
            * @param padding Padding in pixels between the packed textures.
            * @param maximumAtlasSize Maximum size of the resulting texture.
            * @param makeNoLongerReadable Should the texture be marked as no longer readable?
            * @returns An array of rectangles containing the UV coordinates in the atlas for each input texture, or null if packing fails. 
            */
            public PackTextures ($textures: System.Array$1<UnityEngine.Texture2D>, $padding: number, $maximumAtlasSize: number, $makeNoLongerReadable: boolean) : System.Array$1<UnityEngine.Rect>
            public PackTextures ($textures: System.Array$1<UnityEngine.Texture2D>, $padding: number, $maximumAtlasSize: number) : System.Array$1<UnityEngine.Rect>
            public PackTextures ($textures: System.Array$1<UnityEngine.Texture2D>, $padding: number) : System.Array$1<UnityEngine.Rect>
            /** Creates Unity Texture out of externally created native texture object.
            * @param nativeTex Native 2D texture object.
            * @param width Width of texture in pixels.
            * @param height Height of texture in pixels.
            * @param format Format of underlying texture object.
            * @param mipmap Does the texture have mipmaps?
            * @param linear Is texture using linear color space?
            */
            public static CreateExternalTexture ($width: number, $height: number, $format: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean, $nativeTex: System.IntPtr) : UnityEngine.Texture2D
            /** Sets pixel color at coordinates (x,y).
            */
            public SetPixel ($x: number, $y: number, $color: UnityEngine.Color) : void
            public SetPixel ($x: number, $y: number, $color: UnityEngine.Color, $mipLevel: number) : void
            /** Set a block of pixel colors.
            */
            public SetPixels ($x: number, $y: number, $blockWidth: number, $blockHeight: number, $colors: System.Array$1<UnityEngine.Color>, $miplevel: number) : void
            public SetPixels ($x: number, $y: number, $blockWidth: number, $blockHeight: number, $colors: System.Array$1<UnityEngine.Color>) : void
            /** Set a block of pixel colors.
            * @param colors The array of pixel colours to assign (a 2D image flattened to a 1D array).
            * @param miplevel The mip level of the texture to write to.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $miplevel: number) : void
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>) : void
            /** Returns pixel color at coordinates (x, y).
            */
            public GetPixel ($x: number, $y: number) : UnityEngine.Color
            public GetPixel ($x: number, $y: number, $mipLevel: number) : UnityEngine.Color
            /** Returns filtered pixel color at normalized coordinates (u, v).
            */
            public GetPixelBilinear ($u: number, $v: number) : UnityEngine.Color
            public GetPixelBilinear ($u: number, $v: number, $mipLevel: number) : UnityEngine.Color
            /** Fills texture pixels with raw preformatted data.
            * @param data Raw data array to initialize texture pixels with.
            * @param size Size of data in bytes.
            */
            public LoadRawTextureData ($data: System.IntPtr, $size: number) : void
            /** Fills texture pixels with raw preformatted data.
            * @param data Raw data array to initialize texture pixels with.
            * @param size Size of data in bytes.
            */
            public LoadRawTextureData ($data: System.Array$1<number>) : void
            /** Actually apply all previous SetPixel and SetPixels changes.
            * @param updateMipmaps When set to true, mipmap levels are recalculated.
            * @param makeNoLongerReadable When set to true, system memory copy of a texture is released.
            */
            public Apply ($updateMipmaps: boolean, $makeNoLongerReadable: boolean) : void
            public Apply ($updateMipmaps: boolean) : void
            public Apply () : void
            /** Resizes the texture.
            */
            public Resize ($width: number, $height: number) : boolean
            /** Resizes the texture.
            */
            public Resize ($width: number, $height: number, $format: UnityEngine.TextureFormat, $hasMipMap: boolean) : boolean
            /** Read pixels from screen into the saved texture data.
            * @param source Rectangular region of the view to read from. Pixels are read from current render target.
            * @param destX Horizontal pixel position in the texture to place the pixels that are read.
            * @param destY Vertical pixel position in the texture to place the pixels that are read.
            * @param recalculateMipMaps Should the texture's mipmaps be recalculated after reading?
            */
            public ReadPixels ($source: UnityEngine.Rect, $destX: number, $destY: number, $recalculateMipMaps: boolean) : void
            public ReadPixels ($source: UnityEngine.Rect, $destX: number, $destY: number) : void
            public static GenerateAtlas ($sizes: System.Array$1<UnityEngine.Vector2>, $padding: number, $atlasSize: number, $results: System.Collections.Generic.List$1<UnityEngine.Rect>) : boolean
            /** Set a block of pixel colors.
            */
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>, $miplevel: number) : void
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>) : void
            /** Set a block of pixel colors.
            */
            public SetPixels32 ($x: number, $y: number, $blockWidth: number, $blockHeight: number, $colors: System.Array$1<UnityEngine.Color32>, $miplevel: number) : void
            public SetPixels32 ($x: number, $y: number, $blockWidth: number, $blockHeight: number, $colors: System.Array$1<UnityEngine.Color32>) : void
            /** Get the pixel colors from the texture.
            * @param miplevel The mipmap level to fetch the pixels from. Defaults to zero.
            * @returns The array of all pixels in the mipmap level of the texture. 
            */
            public GetPixels ($miplevel: number) : System.Array$1<UnityEngine.Color>
            public GetPixels () : System.Array$1<UnityEngine.Color>
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor ($width: number, $height: number)
            public constructor ()
        }
        /** Class for texture handling.
        */
        interface Texture2D {
            /** Encodes the specified texture in TGA format.
            * @param tex The texture to encode.
            */
            EncodeToTGA () : System.Array$1<number>;
            /** Encodes this texture into PNG format.
            * @param tex The texture to convert.
            */
            EncodeToPNG () : System.Array$1<number>;
            /** Encodes this texture into JPG format.
            * @param tex Text texture to convert.
            * @param quality JPG quality to encode with, 1..100 (default 75).
            */
            EncodeToJPG ($quality: number) : System.Array$1<number>;
            /** Encodes this texture into JPG format.
            * @param tex Text texture to convert.
            * @param quality JPG quality to encode with, 1..100 (default 75).
            */
            EncodeToJPG () : System.Array$1<number>;
            EncodeToEXR ($flags: UnityEngine.Texture2D.EXRFlags) : System.Array$1<number>;
            EncodeToEXR () : System.Array$1<number>;
            /** Loads PNG/JPG image byte array into a texture.
            * @param data The byte array containing the image data to load.
            * @param markNonReadable Set to false by default, pass true to optionally mark the texture as non-readable.
            * @param tex The texture to load the image into.
            * @returns Returns true if the data can be loaded, false otherwise. 
            */
            LoadImage ($data: System.Array$1<number>, $markNonReadable: boolean) : boolean;
            LoadImage ($data: System.Array$1<number>) : boolean;
        }
        /** Stores lightmaps of the Scene.
        */
        class LightmapSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Lightmap array.
            */
            public static get lightmaps(): System.Array$1<UnityEngine.LightmapData>;
            public static set lightmaps(value: System.Array$1<UnityEngine.LightmapData>);
            /** NonDirectional or CombinedDirectional Specular lightmaps rendering mode.
            */
            public static get lightmapsMode(): UnityEngine.LightmapsMode;
            public static set lightmapsMode(value: UnityEngine.LightmapsMode);
            /** Holds all data needed by the light probes.
            */
            public static get lightProbes(): UnityEngine.LightProbes;
            public static set lightProbes(value: UnityEngine.LightProbes);
        }
        /** Lightmap (and lighting) configuration mode, controls how lightmaps interact with lighting and what kind of information they store.
        */
        enum LightmapsMode
        { NonDirectional = 0, CombinedDirectional = 1, SeparateDirectional = 2, Single = 0, Dual = 1, Directional = 2 }
        /** Stores light probes for the Scene.
        */
        class LightProbes extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Positions of the baked light probes (Read Only).
            */
            public get positions(): System.Array$1<UnityEngine.Vector3>;
            /** Coefficients of baked light probes.
            */
            public get bakedProbes(): System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>;
            public set bakedProbes(value: System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>);
            /** The number of light probes (Read Only).
            */
            public get count(): number;
            /** The number of cells space is divided into (Read Only).
            */
            public get cellCount(): number;
            public static Tetrahedralize () : void
            public static TetrahedralizeAsync () : void
            /** Returns an interpolated probe for the given position for both realtime and baked light probes combined.
            */
            public static GetInterpolatedProbe ($position: UnityEngine.Vector3, $renderer: UnityEngine.Renderer, $probe: $Ref<UnityEngine.Rendering.SphericalHarmonicsL2>) : void
            /** Calculate light probes and occlusion probes at the given world space positions.
            * @param positions The array of world space positions used to evaluate the probes.
            * @param lightProbes The array where the resulting light probes are written to.
            * @param occlusionProbes The array where the resulting occlusion probes are written to.
            */
            public static CalculateInterpolatedLightAndOcclusionProbes ($positions: System.Array$1<UnityEngine.Vector3>, $lightProbes: System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $occlusionProbes: System.Array$1<UnityEngine.Vector4>) : void
            public static CalculateInterpolatedLightAndOcclusionProbes ($positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $lightProbes: System.Collections.Generic.List$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $occlusionProbes: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
        }
        /** Single, dual, or directional lightmaps rendering mode, used only in GIWorkflowMode.Legacy
        */
        enum LightmapsModeLegacy
        { Single = 0, Dual = 1, Directional = 2 }
        /** Color space for player settings.
        */
        enum ColorSpace
        { Uninitialized = -1, Gamma = 0, Linear = 1 }
        /** The type for the number of bits to be used when an HDR display is active in each color channel of swap chain buffers. The bit count also defines the method Unity uses to render content to the display.
        */
        enum D3DHDRDisplayBitDepth
        { D3DHDRDisplayBitDepth10 = 0, D3DHDRDisplayBitDepth16 = 1 }
        /** The HDROutputSettings allows the user to modify and set the  data for multple frames.
        */
        class HDROutputSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Sets the base luminance of a white paper surface in nits or candela per square meter (cd/m2).
            * @param paperWhite The brightness level for basic white.
            */
            public static SetPaperWhiteInNits ($paperWhite: number) : void
        }
        /** Script interface for.
        */
        class QualitySettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The maximum number of pixel lights that should affect any object.
            */
            public static get pixelLightCount(): number;
            public static set pixelLightCount(value: number);
            /** Realtime Shadows type to be used.
            */
            public static get shadows(): UnityEngine.ShadowQuality;
            public static set shadows(value: UnityEngine.ShadowQuality);
            /** Directional light shadow projection.
            */
            public static get shadowProjection(): UnityEngine.ShadowProjection;
            public static set shadowProjection(value: UnityEngine.ShadowProjection);
            /** Number of cascades to use for directional light shadows.
            */
            public static get shadowCascades(): number;
            public static set shadowCascades(value: number);
            /** Shadow drawing distance.
            */
            public static get shadowDistance(): number;
            public static set shadowDistance(value: number);
            /** The default resolution of the shadow maps.
            */
            public static get shadowResolution(): UnityEngine.ShadowResolution;
            public static set shadowResolution(value: UnityEngine.ShadowResolution);
            /** The rendering mode of Shadowmask.
            */
            public static get shadowmaskMode(): UnityEngine.ShadowmaskMode;
            public static set shadowmaskMode(value: UnityEngine.ShadowmaskMode);
            /** Offset shadow frustum near plane.
            */
            public static get shadowNearPlaneOffset(): number;
            public static set shadowNearPlaneOffset(value: number);
            /** The normalized cascade distribution for a 2 cascade setup. The value defines the position of the cascade with respect to Zero.
            */
            public static get shadowCascade2Split(): number;
            public static set shadowCascade2Split(value: number);
            /** The normalized cascade start position for a 4 cascade setup. Each member of the vector defines the normalized position of the coresponding cascade with respect to Zero.
            */
            public static get shadowCascade4Split(): UnityEngine.Vector3;
            public static set shadowCascade4Split(value: UnityEngine.Vector3);
            /** Global multiplier for the LOD's switching distance.
            */
            public static get lodBias(): number;
            public static set lodBias(value: number);
            /** Global anisotropic filtering mode.
            */
            public static get anisotropicFiltering(): UnityEngine.AnisotropicFiltering;
            public static set anisotropicFiltering(value: UnityEngine.AnisotropicFiltering);
            /** A texture size limit applied to all textures.
            */
            public static get masterTextureLimit(): number;
            public static set masterTextureLimit(value: number);
            /** A maximum LOD level. All LOD groups.
            */
            public static get maximumLODLevel(): number;
            public static set maximumLODLevel(value: number);
            /** Budget for how many ray casts can be performed per frame for approximate collision testing.
            */
            public static get particleRaycastBudget(): number;
            public static set particleRaycastBudget(value: number);
            /** Should soft blending be used for particles?
            */
            public static get softParticles(): boolean;
            public static set softParticles(value: boolean);
            /** Use a two-pass shader for the vegetation in the terrain engine.
            */
            public static get softVegetation(): boolean;
            public static set softVegetation(value: boolean);
            /** The VSync Count.
            */
            public static get vSyncCount(): number;
            public static set vSyncCount(value: number);
            /** Set The AA Filtering option.
            */
            public static get antiAliasing(): number;
            public static set antiAliasing(value: number);
            /** Async texture upload provides timesliced async texture upload on the render thread with tight control over memory and timeslicing. There are no allocations except for the ones which driver has to do. To read data and upload texture data a ringbuffer whose size can be controlled is re-used.
            Use asyncUploadTimeSlice to set the time-slice in milliseconds for asynchronous texture uploads per
            frame. Minimum value is 1 and maximum is 33.
            */
            public static get asyncUploadTimeSlice(): number;
            public static set asyncUploadTimeSlice(value: number);
            /** Async texture upload provides timesliced async texture upload on the render thread with tight control over memory and timeslicing. There are no allocations except for the ones which driver has to do. To read data and upload texture data a ringbuffer whose size can be controlled is re-used.
            Use asyncUploadBufferSize to set the buffer size for asynchronous texture uploads. The size is in megabytes. Minimum value is 2 and maximum is 512. Although the buffer will resize automatically to fit the largest texture currently loading, it is recommended to set the value approximately to the size of biggest texture used in the Scene to avoid re-sizing of the buffer which can incur performance cost.
            */
            public static get asyncUploadBufferSize(): number;
            public static set asyncUploadBufferSize(value: number);
            /** This flag controls if the async upload pipeline's ring buffer remains allocated when there are no active loading operations.
            Set this to true, to make the ring buffer allocation persist after all upload operations have completed.
            If you have issues with excessive memory usage, you can set this to false. This means you reduce the runtime memory footprint, but memory fragmentation can occur.
            The default value is true.
            */
            public static get asyncUploadPersistentBuffer(): boolean;
            public static set asyncUploadPersistentBuffer(value: boolean);
            /** Enables realtime reflection probes.
            */
            public static get realtimeReflectionProbes(): boolean;
            public static set realtimeReflectionProbes(value: boolean);
            /** If enabled, billboards will face towards camera position rather than camera orientation.
            */
            public static get billboardsFaceCameraPosition(): boolean;
            public static set billboardsFaceCameraPosition(value: boolean);
            /** In resolution scaling mode, this factor is used to multiply with the target Fixed DPI specified to get the actual Fixed DPI to use for this quality setting.
            */
            public static get resolutionScalingFixedDPIFactor(): number;
            public static set resolutionScalingFixedDPIFactor(value: number);
            /** The RenderPipelineAsset for this quality level
            */
            public static get renderPipeline(): UnityEngine.Rendering.RenderPipelineAsset;
            public static set renderPipeline(value: UnityEngine.Rendering.RenderPipelineAsset);
            /** Skin weights.
            */
            public static get skinWeights(): UnityEngine.SkinWeights;
            public static set skinWeights(value: UnityEngine.SkinWeights);
            /** Enable automatic streaming of texture mipmap levels based on their distance from all active cameras.
            */
            public static get streamingMipmapsActive(): boolean;
            public static set streamingMipmapsActive(value: boolean);
            /** The total amount of memory to be used by streaming and non-streaming textures.
            */
            public static get streamingMipmapsMemoryBudget(): number;
            public static set streamingMipmapsMemoryBudget(value: number);
            /** Number of renderers used to process each frame during the calculation of desired mipmap levels for the associated textures.
            */
            public static get streamingMipmapsRenderersPerFrame(): number;
            public static set streamingMipmapsRenderersPerFrame(value: number);
            /** The maximum number of mipmap levels to discard for each texture.
            */
            public static get streamingMipmapsMaxLevelReduction(): number;
            public static set streamingMipmapsMaxLevelReduction(value: number);
            /** Process all enabled Cameras for texture streaming (rather than just those with StreamingController components).
            */
            public static get streamingMipmapsAddAllCameras(): boolean;
            public static set streamingMipmapsAddAllCameras(value: boolean);
            /** The maximum number of active texture file IO requests from the texture streaming system.
            */
            public static get streamingMipmapsMaxFileIORequests(): number;
            public static set streamingMipmapsMaxFileIORequests(value: number);
            /** Maximum number of frames queued up by graphics driver.
            */
            public static get maxQueuedFrames(): number;
            public static set maxQueuedFrames(value: number);
            /** The indexed list of available Quality Settings.
            */
            public static get names(): System.Array$1<string>;
            /** Desired color space (Read Only).
            */
            public static get desiredColorSpace(): UnityEngine.ColorSpace;
            /** Active color space (Read Only).
            */
            public static get activeColorSpace(): UnityEngine.ColorSpace;
            /** Increase the current quality level.
            * @param applyExpensiveChanges Should expensive changes be applied (Anti-aliasing etc).
            */
            public static IncreaseLevel ($applyExpensiveChanges: boolean) : void
            /** Decrease the current quality level.
            * @param applyExpensiveChanges Should expensive changes be applied (Anti-aliasing etc).
            */
            public static DecreaseLevel ($applyExpensiveChanges: boolean) : void
            public static SetQualityLevel ($index: number) : void
            public static IncreaseLevel () : void
            public static DecreaseLevel () : void
            /** Get the Render Pipeline Asset assigned at the specified quality level.
            * @param index Index of the quality level to check.
            * @returns Null if the quality level was not found or there is no assigned SRP Asset for this level, otherwise the SRP Asset assigned for this quality level. 
            */
            public static GetRenderPipelineAssetAt ($index: number) : UnityEngine.Rendering.RenderPipelineAsset
            public static GetQualityLevel () : number
            /** Sets a new graphics quality level.
            * @param index Quality index to set.
            * @param applyExpensiveChanges Should expensive changes be applied (Anti-aliasing etc).
            */
            public static SetQualityLevel ($index: number, $applyExpensiveChanges: boolean) : void
        }
        enum QualityLevel
        { Fastest = 0, Fast = 1, Simple = 2, Good = 3, Beautiful = 4, Fantastic = 5 }
        /** Determines which type of shadows should be used.
        */
        enum ShadowQuality
        { Disable = 0, HardOnly = 1, All = 2 }
        /** Shadow projection type for.
        */
        enum ShadowProjection
        { CloseFit = 0, StableFit = 1 }
        /** Default shadow resolution.
        */
        enum ShadowResolution
        { Low = 0, Medium = 1, High = 2, VeryHigh = 3 }
        /** The rendering mode of Shadowmask.
        */
        enum ShadowmaskMode
        { Shadowmask = 0, DistanceShadowmask = 1 }
        /** Anisotropic filtering mode.
        */
        enum AnisotropicFiltering
        { Disable = 0, Enable = 1, ForceEnable = 2 }
        enum BlendWeights
        { OneBone = 1, TwoBones = 2, FourBones = 4 }
        /** Skin weights.
        */
        enum SkinWeights
        { OneBone = 1, TwoBones = 2, FourBones = 4, Unlimited = 255 }
        /** Extension methods to the Renderer class, used only for the UpdateGIMaterials method used by the Global Illumination System.
        */
        class RendererExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Renderer.
            */
            public static UpdateGIMaterials ($renderer: UnityEngine.Renderer) : void
        }
        /** When using HDR rendering it can sometime be desirable to switch to LDR rendering during ImageEffect rendering.
        */
        class ImageEffectTransformsToLDR extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Any Image Effect with this attribute can be rendered into the Scene view camera.
        */
        class ImageEffectAllowedInSceneView extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Any Image Effect with this attribute will be rendered after opaque geometry but before transparent geometry.
        */
        class ImageEffectOpaque extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Any Image Effect with this attribute will be rendered after Dynamic Resolution stage.
        */
        class ImageEffectAfterScale extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Use this attribute when image effects are implemented using Command Buffers.
        */
        class ImageEffectUsesCommandBuffer extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Skinning bone weight of a vertex in the mesh.
        */
        class BoneWeight1 extends System.ValueType implements System.IEquatable$1<UnityEngine.BoneWeight1>
        {
            protected [__keep_incompatibility]: never;
            /** Skinning weight for bone.
            */
            public get weight(): number;
            public set weight(value: number);
            /** Index of bone.
            */
            public get boneIndex(): number;
            public set boneIndex(value: number);
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.BoneWeight1) : boolean
            public static op_Equality ($lhs: UnityEngine.BoneWeight1, $rhs: UnityEngine.BoneWeight1) : boolean
            public static op_Inequality ($lhs: UnityEngine.BoneWeight1, $rhs: UnityEngine.BoneWeight1) : boolean
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        /** Skinning bone weights of a vertex in the mesh.
        */
        class BoneWeight extends System.ValueType implements System.IEquatable$1<UnityEngine.BoneWeight>
        {
            protected [__keep_incompatibility]: never;
            /** Skinning weight for first bone.
            */
            public get weight0(): number;
            public set weight0(value: number);
            /** Skinning weight for second bone.
            */
            public get weight1(): number;
            public set weight1(value: number);
            /** Skinning weight for third bone.
            */
            public get weight2(): number;
            public set weight2(value: number);
            /** Skinning weight for fourth bone.
            */
            public get weight3(): number;
            public set weight3(value: number);
            /** Index of first bone.
            */
            public get boneIndex0(): number;
            public set boneIndex0(value: number);
            /** Index of second bone.
            */
            public get boneIndex1(): number;
            public set boneIndex1(value: number);
            /** Index of third bone.
            */
            public get boneIndex2(): number;
            public set boneIndex2(value: number);
            /** Index of fourth bone.
            */
            public get boneIndex3(): number;
            public set boneIndex3(value: number);
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.BoneWeight) : boolean
            public static op_Equality ($lhs: UnityEngine.BoneWeight, $rhs: UnityEngine.BoneWeight) : boolean
            public static op_Inequality ($lhs: UnityEngine.BoneWeight, $rhs: UnityEngine.BoneWeight) : boolean
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        /** Struct used to describe meshes to be combined using Mesh.CombineMeshes.
        */
        class CombineInstance extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Mesh to combine.
            */
            public get mesh(): UnityEngine.Mesh;
            public set mesh(value: UnityEngine.Mesh);
            /** Sub-Mesh index of the Mesh.
            */
            public get subMeshIndex(): number;
            public set subMeshIndex(value: number);
            /** Matrix to transform the Mesh with before combining.
            */
            public get transform(): UnityEngine.Matrix4x4;
            public set transform(value: UnityEngine.Matrix4x4);
            /** The baked lightmap UV scale and offset applied to the Mesh.
            */
            public get lightmapScaleOffset(): UnityEngine.Vector4;
            public set lightmapScaleOffset(value: UnityEngine.Vector4);
            /** The realtime lightmap UV scale and offset applied to the Mesh.
            */
            public get realtimeLightmapScaleOffset(): UnityEngine.Vector4;
            public set realtimeLightmapScaleOffset(value: UnityEngine.Vector4);
        }
        /** The type of motion vectors that should be generated.
        */
        enum MotionVectorGenerationMode
        { Camera = 0, Object = 1, ForceNoMotion = 2 }
        /** A script interface for a.
        */
        class Projector extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The near clipping plane distance.
            */
            public get nearClipPlane(): number;
            public set nearClipPlane(value: number);
            /** The far clipping plane distance.
            */
            public get farClipPlane(): number;
            public set farClipPlane(value: number);
            /** The field of view of the projection in degrees.
            */
            public get fieldOfView(): number;
            public set fieldOfView(value: number);
            /** The aspect ratio of the projection.
            */
            public get aspectRatio(): number;
            public set aspectRatio(value: number);
            /** Is the projection orthographic (true) or perspective (false)?
            */
            public get orthographic(): boolean;
            public set orthographic(value: boolean);
            /** Projection's half-size when in orthographic mode.
            */
            public get orthographicSize(): number;
            public set orthographicSize(value: number);
            /** Which object layers are ignored by the projector.
            */
            public get ignoreLayers(): number;
            public set ignoreLayers(value: number);
            /** The material that will be projected onto every object.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public constructor ()
        }
        enum TexGenMode
        { None = 0, SphereMap = 1, Object = 2, EyeLinear = 3, CubeReflect = 4, CubeNormal = 5 }
        /** The trail renderer is used to make trails behind objects in the Scene as they move about.
        */
        class TrailRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** How long does the trail take to fade out.
            */
            public get time(): number;
            public set time(value: number);
            /** The width of the trail at the spawning point.
            */
            public get startWidth(): number;
            public set startWidth(value: number);
            /** The width of the trail at the end of the trail.
            */
            public get endWidth(): number;
            public set endWidth(value: number);
            /** Set an overall multiplier that is applied to the TrailRenderer.widthCurve to get the final width of the trail.
            */
            public get widthMultiplier(): number;
            public set widthMultiplier(value: number);
            /** Does the GameObject of this Trail Renderer auto destruct?
            */
            public get autodestruct(): boolean;
            public set autodestruct(value: boolean);
            /** Creates trails when the GameObject moves.
            */
            public get emitting(): boolean;
            public set emitting(value: boolean);
            /** Set this to a value greater than 0, to get rounded corners between each segment of the trail.
            */
            public get numCornerVertices(): number;
            public set numCornerVertices(value: number);
            /** Set this to a value greater than 0, to get rounded corners on each end of the trail.
            */
            public get numCapVertices(): number;
            public set numCapVertices(value: number);
            /** Set the minimum distance the trail can travel before a new vertex is added to it.
            */
            public get minVertexDistance(): number;
            public set minVertexDistance(value: number);
            /** Set the color at the start of the trail.
            */
            public get startColor(): UnityEngine.Color;
            public set startColor(value: UnityEngine.Color);
            /** Set the color at the end of the trail.
            */
            public get endColor(): UnityEngine.Color;
            public set endColor(value: UnityEngine.Color);
            /** Get the number of line segments in the trail.
            */
            public get positionCount(): number;
            /** Apply a shadow bias to prevent self-shadowing artifacts. The specified value is the proportion of the trail width at each segment.
            */
            public get shadowBias(): number;
            public set shadowBias(value: number);
            /** Configures a trail to generate Normals and Tangents. With this data, Scene lighting can affect the trail via Normal Maps and the Unity Standard Shader, or your own custom-built Shaders.
            */
            public get generateLightingData(): boolean;
            public set generateLightingData(value: boolean);
            /** Choose whether the U coordinate of the trail texture is tiled or stretched.
            */
            public get textureMode(): UnityEngine.LineTextureMode;
            public set textureMode(value: UnityEngine.LineTextureMode);
            /** Select whether the trail will face the camera, or the orientation of the Transform Component.
            */
            public get alignment(): UnityEngine.LineAlignment;
            public set alignment(value: UnityEngine.LineAlignment);
            /** Set the curve describing the width of the trail at various points along its length.
            */
            public get widthCurve(): UnityEngine.AnimationCurve;
            public set widthCurve(value: UnityEngine.AnimationCurve);
            /** Set the color gradient describing the color of the trail at various points along its length.
            */
            public get colorGradient(): UnityEngine.Gradient;
            public set colorGradient(value: UnityEngine.Gradient);
            /** Set the position of a vertex in the trail.
            * @param index Which position to set.
            * @param position The new position.
            */
            public SetPosition ($index: number, $position: UnityEngine.Vector3) : void
            /** Get the position of a vertex in the trail.
            * @param index The index of the position to retrieve.
            * @returns The position at the specified index in the array. 
            */
            public GetPosition ($index: number) : UnityEngine.Vector3
            public Clear () : void
            /** Creates a snapshot of TrailRenderer and stores it in mesh.
            * @param mesh A static mesh that will receive the snapshot of the trail.
            * @param camera The camera used for determining which way camera-space trails will face.
            * @param useTransform Include the rotation and scale of the Transform in the baked mesh.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh, $useTransform?: boolean) : void
            /** Creates a snapshot of TrailRenderer and stores it in mesh.
            * @param mesh A static mesh that will receive the snapshot of the trail.
            * @param camera The camera used for determining which way camera-space trails will face.
            * @param useTransform Include the rotation and scale of the Transform in the baked mesh.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh, $camera: UnityEngine.Camera, $useTransform?: boolean) : void
            /** Get the positions of all vertices in the trail.
            * @param positions The array of positions to retrieve.
            * @returns How many positions were actually stored in the output array. 
            */
            public GetPositions ($positions: System.Array$1<UnityEngine.Vector3>) : number
            /** Sets the positions of all vertices in the trail.
            * @param positions The array of positions to set.
            */
            public SetPositions ($positions: System.Array$1<UnityEngine.Vector3>) : void
            /** Adds a position to the trail.
            * @param position The position to add to the trail.
            */
            public AddPosition ($position: UnityEngine.Vector3) : void
            /** Add an array of positions to the trail.
            * @param positions The positions to add to the trail.
            */
            public AddPositions ($positions: System.Array$1<UnityEngine.Vector3>) : void
            public constructor ()
        }
        /** Choose how textures are applied to Lines and Trails.
        */
        enum LineTextureMode
        { Stretch = 0, Tile = 1, DistributePerSegment = 2, RepeatPerSegment = 3 }
        /** Control the direction lines face, when using the LineRenderer or TrailRenderer.
        */
        enum LineAlignment
        { View = 0, Local = 1, TransformZ = 1 }
        /** Gradient used for animating colors.
        */
        class Gradient extends System.Object implements System.IEquatable$1<UnityEngine.Gradient>
        {
            protected [__keep_incompatibility]: never;
            /** All color keys defined in the gradient.
            */
            public get colorKeys(): System.Array$1<UnityEngine.GradientColorKey>;
            public set colorKeys(value: System.Array$1<UnityEngine.GradientColorKey>);
            /** All alpha keys defined in the gradient.
            */
            public get alphaKeys(): System.Array$1<UnityEngine.GradientAlphaKey>;
            public set alphaKeys(value: System.Array$1<UnityEngine.GradientAlphaKey>);
            /** Control how the gradient is evaluated.
            */
            public get mode(): UnityEngine.GradientMode;
            public set mode(value: UnityEngine.GradientMode);
            /** Calculate color at a given time.
            * @param time Time of the key (0 - 1).
            */
            public Evaluate ($time: number) : UnityEngine.Color
            /** Setup Gradient with an array of color keys and alpha keys.
            * @param colorKeys Color keys of the gradient (maximum 8 color keys).
            * @param alphaKeys Alpha keys of the gradient (maximum 8 alpha keys).
            */
            public SetKeys ($colorKeys: System.Array$1<UnityEngine.GradientColorKey>, $alphaKeys: System.Array$1<UnityEngine.GradientAlphaKey>) : void
            public Equals ($o: any) : boolean
            public Equals ($other: UnityEngine.Gradient) : boolean
            public constructor ()
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        /** The line renderer is used to draw free-floating lines in 3D space.
        */
        class LineRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** Set the width at the start of the line.
            */
            public get startWidth(): number;
            public set startWidth(value: number);
            /** Set the width at the end of the line.
            */
            public get endWidth(): number;
            public set endWidth(value: number);
            /** Set an overall multiplier that is applied to the LineRenderer.widthCurve to get the final width of the line.
            */
            public get widthMultiplier(): number;
            public set widthMultiplier(value: number);
            /** Set this to a value greater than 0, to get rounded corners between each segment of the line.
            */
            public get numCornerVertices(): number;
            public set numCornerVertices(value: number);
            /** Set this to a value greater than 0, to get rounded corners on each end of the line.
            */
            public get numCapVertices(): number;
            public set numCapVertices(value: number);
            /** If enabled, the lines are defined in world space.
            */
            public get useWorldSpace(): boolean;
            public set useWorldSpace(value: boolean);
            /** Connect the start and end positions of the line together to form a continuous loop.
            */
            public get loop(): boolean;
            public set loop(value: boolean);
            /** Set the color at the start of the line.
            */
            public get startColor(): UnityEngine.Color;
            public set startColor(value: UnityEngine.Color);
            /** Set the color at the end of the line.
            */
            public get endColor(): UnityEngine.Color;
            public set endColor(value: UnityEngine.Color);
            /** Set/get the number of vertices.
            */
            public get positionCount(): number;
            public set positionCount(value: number);
            /** Apply a shadow bias to prevent self-shadowing artifacts. The specified value is the proportion of the line width at each segment.
            */
            public get shadowBias(): number;
            public set shadowBias(value: number);
            /** Configures a line to generate Normals and Tangents. With this data, Scene lighting can affect the line via Normal Maps and the Unity Standard Shader, or your own custom-built Shaders.
            */
            public get generateLightingData(): boolean;
            public set generateLightingData(value: boolean);
            /** Choose whether the U coordinate of the line texture is tiled or stretched.
            */
            public get textureMode(): UnityEngine.LineTextureMode;
            public set textureMode(value: UnityEngine.LineTextureMode);
            /** Select whether the line will face the camera, or the orientation of the Transform Component.
            */
            public get alignment(): UnityEngine.LineAlignment;
            public set alignment(value: UnityEngine.LineAlignment);
            /** Set the curve describing the width of the line at various points along its length.
            */
            public get widthCurve(): UnityEngine.AnimationCurve;
            public set widthCurve(value: UnityEngine.AnimationCurve);
            /** Set the color gradient describing the color of the line at various points along its length.
            */
            public get colorGradient(): UnityEngine.Gradient;
            public set colorGradient(value: UnityEngine.Gradient);
            /** Set the position of a vertex in the line.
            * @param index Which position to set.
            * @param position The new position.
            */
            public SetPosition ($index: number, $position: UnityEngine.Vector3) : void
            /** Get the position of a vertex in the line.
            * @param index The index of the position to retrieve.
            * @returns The position at the specified index in the array. 
            */
            public GetPosition ($index: number) : UnityEngine.Vector3
            /** Generates a simplified version of the original line by removing points that fall within the specified tolerance.
            * @param tolerance This value is used to evaluate which points should be removed from the line. A higher value results in a simpler line (less points). A positive value close to zero results in a line with little to no reduction. A value of zero or less has no effect.
            */
            public Simplify ($tolerance: number) : void
            /** Creates a snapshot of LineRenderer and stores it in mesh.
            * @param mesh A static mesh that will receive the snapshot of the line.
            * @param camera The camera used for determining which way camera-space lines will face.
            * @param useTransform Include the rotation and scale of the Transform in the baked mesh.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh, $useTransform?: boolean) : void
            /** Creates a snapshot of LineRenderer and stores it in mesh.
            * @param mesh A static mesh that will receive the snapshot of the line.
            * @param camera The camera used for determining which way camera-space lines will face.
            * @param useTransform Include the rotation and scale of the Transform in the baked mesh.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh, $camera: UnityEngine.Camera, $useTransform?: boolean) : void
            /** Get the positions of all vertices in the line.
            * @param positions The array of positions to retrieve. The array passed should be of at least positionCount in size.
            * @returns How many positions were actually stored in the output array. 
            */
            public GetPositions ($positions: System.Array$1<UnityEngine.Vector3>) : number
            /** Set the positions of all vertices in the line.
            * @param positions The array of positions to set.
            */
            public SetPositions ($positions: System.Array$1<UnityEngine.Vector3>) : void
            public constructor ()
        }
        /** The Render Settings contain values for a range of visual elements in your Scene, like fog and ambient light.
        */
        class RenderSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Is fog enabled?
            */
            public static get fog(): boolean;
            public static set fog(value: boolean);
            /** The starting distance of linear fog.
            */
            public static get fogStartDistance(): number;
            public static set fogStartDistance(value: number);
            /** The ending distance of linear fog.
            */
            public static get fogEndDistance(): number;
            public static set fogEndDistance(value: number);
            /** Fog mode to use.
            */
            public static get fogMode(): UnityEngine.FogMode;
            public static set fogMode(value: UnityEngine.FogMode);
            /** The color of the fog.
            */
            public static get fogColor(): UnityEngine.Color;
            public static set fogColor(value: UnityEngine.Color);
            /** The density of the exponential fog.
            */
            public static get fogDensity(): number;
            public static set fogDensity(value: number);
            /** Ambient lighting mode.
            */
            public static get ambientMode(): UnityEngine.Rendering.AmbientMode;
            public static set ambientMode(value: UnityEngine.Rendering.AmbientMode);
            /** Ambient lighting coming from above.
            */
            public static get ambientSkyColor(): UnityEngine.Color;
            public static set ambientSkyColor(value: UnityEngine.Color);
            /** Ambient lighting coming from the sides.
            */
            public static get ambientEquatorColor(): UnityEngine.Color;
            public static set ambientEquatorColor(value: UnityEngine.Color);
            /** Ambient lighting coming from below.
            */
            public static get ambientGroundColor(): UnityEngine.Color;
            public static set ambientGroundColor(value: UnityEngine.Color);
            /** How much the light from the Ambient Source affects the Scene.
            */
            public static get ambientIntensity(): number;
            public static set ambientIntensity(value: number);
            /** Flat ambient lighting color.
            */
            public static get ambientLight(): UnityEngine.Color;
            public static set ambientLight(value: UnityEngine.Color);
            /** The color used for the sun shadows in the Subtractive lightmode.
            */
            public static get subtractiveShadowColor(): UnityEngine.Color;
            public static set subtractiveShadowColor(value: UnityEngine.Color);
            /** The global skybox to use.
            */
            public static get skybox(): UnityEngine.Material;
            public static set skybox(value: UnityEngine.Material);
            /** The light used by the procedural skybox.
            */
            public static get sun(): UnityEngine.Light;
            public static set sun(value: UnityEngine.Light);
            /** Custom or skybox ambient lighting data.
            */
            public static get ambientProbe(): UnityEngine.Rendering.SphericalHarmonicsL2;
            public static set ambientProbe(value: UnityEngine.Rendering.SphericalHarmonicsL2);
            /** Custom specular reflection cubemap.
            */
            public static get customReflection(): UnityEngine.Cubemap;
            public static set customReflection(value: UnityEngine.Cubemap);
            /** How much the skybox / custom cubemap reflection affects the Scene.
            */
            public static get reflectionIntensity(): number;
            public static set reflectionIntensity(value: number);
            /** The number of times a reflection includes other reflections.
            */
            public static get reflectionBounces(): number;
            public static set reflectionBounces(value: number);
            /** Default reflection mode.
            */
            public static get defaultReflectionMode(): UnityEngine.Rendering.DefaultReflectionMode;
            public static set defaultReflectionMode(value: UnityEngine.Rendering.DefaultReflectionMode);
            /** Cubemap resolution for default reflection.
            */
            public static get defaultReflectionResolution(): number;
            public static set defaultReflectionResolution(value: number);
            /** Size of the Light halos.
            */
            public static get haloStrength(): number;
            public static set haloStrength(value: number);
            /** The intensity of all flares in the Scene.
            */
            public static get flareStrength(): number;
            public static set flareStrength(value: number);
            /** The fade speed of all flares in the Scene.
            */
            public static get flareFadeSpeed(): number;
            public static set flareFadeSpeed(value: number);
        }
        /** Fog mode to use.
        */
        enum FogMode
        { Linear = 1, Exponential = 2, ExponentialSquared = 3 }
        /** Script interface for.
        */
        class Light extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The type of the light.
            */
            public get type(): UnityEngine.LightType;
            public set type(value: UnityEngine.LightType);
            /** This property describes the shape of the spot light. Only Scriptable Render Pipelines use this property; the built-in renderer does not support it.
            */
            public get shape(): UnityEngine.LightShape;
            public set shape(value: UnityEngine.LightShape);
            /** The angle of the light's spotlight cone in degrees.
            */
            public get spotAngle(): number;
            public set spotAngle(value: number);
            /** The angle of the light's spotlight inner cone in degrees.
            */
            public get innerSpotAngle(): number;
            public set innerSpotAngle(value: number);
            /** The color of the light.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** 
            The color temperature of the light.
            Correlated Color Temperature (abbreviated as CCT) is multiplied with the color filter when calculating the final color of a light source. The color temperature of the electromagnetic radiation emitted from an ideal black body is defined as its surface temperature in Kelvin. White is 6500K according to the D65 standard. Candle light is 1800K.
            If you want to use lightsUseCCT, lightsUseLinearIntensity has to be enabled to ensure physically correct output.
            See Also: GraphicsSettings.lightsUseLinearIntensity, GraphicsSettings.lightsUseCCT.
            */
            public get colorTemperature(): number;
            public set colorTemperature(value: number);
            /** Set to true to use the color temperature.
            */
            public get useColorTemperature(): boolean;
            public set useColorTemperature(value: boolean);
            /** The Intensity of a light is multiplied with the Light color.
            */
            public get intensity(): number;
            public set intensity(value: number);
            /** The multiplier that defines the strength of the bounce lighting.
            */
            public get bounceIntensity(): number;
            public set bounceIntensity(value: number);
            /** Set to true to override light bounding sphere for culling.
            */
            public get useBoundingSphereOverride(): boolean;
            public set useBoundingSphereOverride(value: boolean);
            /** Bounding sphere used to override the regular light bounding sphere during culling.
            */
            public get boundingSphereOverride(): UnityEngine.Vector4;
            public set boundingSphereOverride(value: UnityEngine.Vector4);
            /** The custom resolution of the shadow map.
            */
            public get shadowCustomResolution(): number;
            public set shadowCustomResolution(value: number);
            /** Shadow mapping constant bias.
            */
            public get shadowBias(): number;
            public set shadowBias(value: number);
            /** Shadow mapping normal-based bias.
            */
            public get shadowNormalBias(): number;
            public set shadowNormalBias(value: number);
            /** Near plane value to use for shadow frustums.
            */
            public get shadowNearPlane(): number;
            public set shadowNearPlane(value: number);
            /** Set to true to enable custom matrix for culling during shadows.
            */
            public get useShadowMatrixOverride(): boolean;
            public set useShadowMatrixOverride(value: boolean);
            /** Projection matrix used to override the regular light matrix during shadow culling.
            */
            public get shadowMatrixOverride(): UnityEngine.Matrix4x4;
            public set shadowMatrixOverride(value: UnityEngine.Matrix4x4);
            /** The range of the light.
            */
            public get range(): number;
            public set range(value: number);
            /** The to use for this light.
            */
            public get flare(): UnityEngine.Flare;
            public set flare(value: UnityEngine.Flare);
            /** This property describes the output of the last Global Illumination bake.
            */
            public get bakingOutput(): UnityEngine.LightBakingOutput;
            public set bakingOutput(value: UnityEngine.LightBakingOutput);
            /** This is used to light certain objects in the Scene selectively.
            */
            public get cullingMask(): number;
            public set cullingMask(value: number);
            /** Determines which rendering LayerMask this Light affects.
            */
            public get renderingLayerMask(): number;
            public set renderingLayerMask(value: number);
            /** Allows you to override the global Shadowmask Mode per light. Only use this with render pipelines that can handle per light Shadowmask modes. Incompatible with the legacy renderers.
            */
            public get lightShadowCasterMode(): UnityEngine.LightShadowCasterMode;
            public set lightShadowCasterMode(value: UnityEngine.LightShadowCasterMode);
            /** Controls the amount of artificial softening applied to the edges of shadows cast by the Point or Spot light.
            */
            public get shadowRadius(): number;
            public set shadowRadius(value: number);
            /** Controls the amount of artificial softening applied to the edges of shadows cast by directional lights.
            */
            public get shadowAngle(): number;
            public set shadowAngle(value: number);
            /** How this light casts shadows
            */
            public get shadows(): UnityEngine.LightShadows;
            public set shadows(value: UnityEngine.LightShadows);
            /** Strength of light's shadows.
            */
            public get shadowStrength(): number;
            public set shadowStrength(value: number);
            /** The resolution of the shadow map.
            */
            public get shadowResolution(): UnityEngine.Rendering.LightShadowResolution;
            public set shadowResolution(value: UnityEngine.Rendering.LightShadowResolution);
            /** Per-light, per-layer shadow culling distances.
            */
            public get layerShadowCullDistances(): System.Array$1<number>;
            public set layerShadowCullDistances(value: System.Array$1<number>);
            /** The size of a directional light's cookie.
            */
            public get cookieSize(): number;
            public set cookieSize(value: number);
            /** The cookie texture projected by the light.
            */
            public get cookie(): UnityEngine.Texture;
            public set cookie(value: UnityEngine.Texture);
            /** How to render the light.
            */
            public get renderMode(): UnityEngine.LightRenderMode;
            public set renderMode(value: UnityEngine.LightRenderMode);
            /** The size of the area light (Editor only).
            */
            public get areaSize(): UnityEngine.Vector2;
            public set areaSize(value: UnityEngine.Vector2);
            /** This property describes what part of a light's contribution can be baked (Editor only).
            */
            public get lightmapBakeType(): UnityEngine.LightmapBakeType;
            public set lightmapBakeType(value: UnityEngine.LightmapBakeType);
            /** Number of command buffers set up on this light (Read Only).
            */
            public get commandBufferCount(): number;
            public Reset () : void
            public SetLightDirty () : void
            /** Add a command buffer to be executed at a specified place.
            * @param evt When to execute the command buffer during rendering.
            * @param buffer The buffer to execute.
            * @param shadowPassMask A mask specifying which shadow passes to execute the buffer for.
            */
            public AddCommandBuffer ($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer) : void
            /** Add a command buffer to be executed at a specified place.
            * @param evt When to execute the command buffer during rendering.
            * @param buffer The buffer to execute.
            * @param shadowPassMask A mask specifying which shadow passes to execute the buffer for.
            */
            public AddCommandBuffer ($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer, $shadowPassMask: UnityEngine.Rendering.ShadowMapPass) : void
            /** Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.
            * @param evt The point during the graphics processing at which this command buffer should commence on the GPU.
            * @param buffer The buffer to execute.
            * @param queueType The desired async compute queue type to execute the buffer on.
            * @param shadowPassMask A mask specifying which shadow passes to execute the buffer for.
            */
            public AddCommandBufferAsync ($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer, $queueType: UnityEngine.Rendering.ComputeQueueType) : void
            /** Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.
            * @param evt The point during the graphics processing at which this command buffer should commence on the GPU.
            * @param buffer The buffer to execute.
            * @param queueType The desired async compute queue type to execute the buffer on.
            * @param shadowPassMask A mask specifying which shadow passes to execute the buffer for.
            */
            public AddCommandBufferAsync ($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer, $shadowPassMask: UnityEngine.Rendering.ShadowMapPass, $queueType: UnityEngine.Rendering.ComputeQueueType) : void
            /** Remove command buffer from execution at a specified place.
            * @param evt When to execute the command buffer during rendering.
            * @param buffer The buffer to execute.
            */
            public RemoveCommandBuffer ($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer) : void
            /** Remove command buffers from execution at a specified place.
            * @param evt When to execute the command buffer during rendering.
            */
            public RemoveCommandBuffers ($evt: UnityEngine.Rendering.LightEvent) : void
            public RemoveAllCommandBuffers () : void
            /** Get command buffers to be executed at a specified place.
            * @param evt When to execute the command buffer during rendering.
            * @returns Array of command buffers. 
            */
            public GetCommandBuffers ($evt: UnityEngine.Rendering.LightEvent) : System.Array$1<UnityEngine.Rendering.CommandBuffer>
            public static GetLights ($type: UnityEngine.LightType, $layer: number) : System.Array$1<UnityEngine.Light>
            public constructor ()
        }
        /** How the material interacts with lightmaps and lightprobes.
        */
        enum MaterialGlobalIlluminationFlags
        { None = 0, RealtimeEmissive = 1, BakedEmissive = 2, EmissiveIsBlack = 4, AnyEmissive = 3 }
        /** The portal for dynamically changing occlusion at runtime.
        */
        class OcclusionPortal extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Gets / sets the portal's open state.
            */
            public get open(): boolean;
            public set open(value: boolean);
            public constructor ()
        }
        /** OcclusionArea is an area in which occlusion culling is performed.
        */
        class OcclusionArea extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Center of the occlusion area relative to the transform.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** Size that the occlusion area will have.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            public constructor ()
        }
        /** A flare asset. Read more about flares in the.
        */
        class Flare extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Script interface for a.
        */
        class LensFlare extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The strength of the flare.
            */
            public get brightness(): number;
            public set brightness(value: number);
            /** The fade speed of the flare.
            */
            public get fadeSpeed(): number;
            public set fadeSpeed(value: number);
            /** The color of the flare.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** The to use.
            */
            public get flare(): UnityEngine.Flare;
            public set flare(value: UnityEngine.Flare);
            public constructor ()
        }
        /** Struct describing the result of a Global Illumination bake for a given light.
        */
        class LightBakingOutput extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** In case of a LightmapBakeType.Mixed light, contains the index of the light as seen from the occlusion probes point of view if any, otherwise -1.
            */
            public probeOcclusionLightIndex : number
            /** In case of a LightmapBakeType.Mixed light, contains the index of the occlusion mask channel to use if any, otherwise -1.
            */
            public occlusionMaskChannel : number
            /** This property describes what part of a light's contribution was baked.
            */
            public lightmapBakeType : UnityEngine.LightmapBakeType
            /** In case of a LightmapBakeType.Mixed light, describes what Mixed mode was used to bake the light, irrelevant otherwise.
            */
            public mixedLightingMode : UnityEngine.MixedLightingMode
            /** Is the light contribution already stored in lightmaps and/or lightprobes?
            */
            public isBaked : boolean
        }
        /** Enum describing what part of a light contribution can be baked.
        */
        enum LightmapBakeType
        { Realtime = 4, Baked = 2, Mixed = 1 }
        /** Enum describing what lighting mode to be used with Mixed lights.
        */
        enum MixedLightingMode
        { IndirectOnly = 0, Shadowmask = 2, Subtractive = 1 }
        /** Allows mixed lights to control shadow caster culling when Shadowmasks are present.
        */
        enum LightShadowCasterMode
        { Default = 0, NonLightmappedOnly = 1, Everything = 2 }
        /** The type of a Light.
        */
        enum LightType
        { Spot = 0, Directional = 1, Point = 2, Area = 3, Rectangle = 3, Disc = 4 }
        /** Describes the shape of a spot light.
        */
        enum LightShape
        { Cone = 0, Pyramid = 1, Box = 2 }
        /** Shadow casting options for a Light.
        */
        enum LightShadows
        { None = 0, Hard = 1, Soft = 2 }
        /** How the Light is rendered.
        */
        enum LightRenderMode
        { Auto = 0, ForcePixel = 1, ForceVertex = 2 }
        enum LightmappingMode
        { Realtime = 4, Baked = 2, Mixed = 1 }
        /** A script interface for the.
        */
        class Skybox extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The material used by the skybox.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public constructor ()
        }
        /** A class to access the Mesh of the.
        */
        class MeshFilter extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Returns the shared mesh of the mesh filter.
            */
            public get sharedMesh(): UnityEngine.Mesh;
            public set sharedMesh(value: UnityEngine.Mesh);
            /** Returns the instantiated Mesh assigned to the mesh filter.
            */
            public get mesh(): UnityEngine.Mesh;
            public set mesh(value: UnityEngine.Mesh);
            public constructor ()
        }
        /** ComputeBuffer type.
        */
        enum ComputeBufferType
        { Default = 0, Raw = 1, Append = 2, Counter = 4, Constant = 8, Structured = 16, DrawIndirect = 256, IndirectArguments = 256, GPUMemory = 512 }
        /** Determines if the object receives Global Illumination from its surroundings through either Lightmaps or LightProbes. Forced to LightProbes if Contribute GI is turned off.
        */
        enum ReceiveGI
        { Lightmaps = 1, LightProbes = 2 }
        /** The maximum number of bones affecting a single vertex.
        */
        enum SkinQuality
        { Auto = 0, Bone1 = 1, Bone2 = 2, Bone4 = 4 }
        /** Filtering mode for textures. Corresponds to the settings in a.
        */
        enum FilterMode
        { Point = 0, Bilinear = 1, Trilinear = 2 }
        /** Wrap mode for textures.
        */
        enum TextureWrapMode
        { Repeat = 0, Clamp = 1, Mirror = 2, MirrorOnce = 3 }
        /** NPOT Texture2D|textures support.
        */
        enum NPOTSupport
        { None = 0, Restricted = 1, Full = 2 }
        /** Format used when creating textures from scripts.
        */
        enum TextureFormat
        { Alpha8 = 1, ARGB4444 = 2, RGB24 = 3, RGBA32 = 4, ARGB32 = 5, RGB565 = 7, R16 = 9, DXT1 = 10, DXT5 = 12, RGBA4444 = 13, BGRA32 = 14, RHalf = 15, RGHalf = 16, RGBAHalf = 17, RFloat = 18, RGFloat = 19, RGBAFloat = 20, YUY2 = 21, RGB9e5Float = 22, BC4 = 26, BC5 = 27, BC6H = 24, BC7 = 25, DXT1Crunched = 28, DXT5Crunched = 29, PVRTC_RGB2 = 30, PVRTC_RGBA2 = 31, PVRTC_RGB4 = 32, PVRTC_RGBA4 = 33, ETC_RGB4 = 34, ATC_RGB4 = -127, ATC_RGBA8 = -127, EAC_R = 41, EAC_R_SIGNED = 42, EAC_RG = 43, EAC_RG_SIGNED = 44, ETC2_RGB = 45, ETC2_RGBA1 = 46, ETC2_RGBA8 = 47, ASTC_4x4 = 48, ASTC_5x5 = 49, ASTC_6x6 = 50, ASTC_8x8 = 51, ASTC_10x10 = 52, ASTC_12x12 = 53, ETC_RGB4_3DS = 60, ETC_RGBA8_3DS = 61, RG16 = 62, R8 = 63, ETC_RGB4Crunched = 64, ETC2_RGBA8Crunched = 65, ASTC_HDR_4x4 = 66, ASTC_HDR_5x5 = 67, ASTC_HDR_6x6 = 68, ASTC_HDR_8x8 = 69, ASTC_HDR_10x10 = 70, ASTC_HDR_12x12 = 71, ASTC_RGB_4x4 = 48, ASTC_RGB_5x5 = 49, ASTC_RGB_6x6 = 50, ASTC_RGB_8x8 = 51, ASTC_RGB_10x10 = 52, ASTC_RGB_12x12 = 53, ASTC_RGBA_4x4 = 54, ASTC_RGBA_5x5 = 55, ASTC_RGBA_6x6 = 56, ASTC_RGBA_8x8 = 57, ASTC_RGBA_10x10 = 58, ASTC_RGBA_12x12 = 59, PVRTC_2BPP_RGB = -127, PVRTC_2BPP_RGBA = -127, PVRTC_4BPP_RGB = -127, PVRTC_4BPP_RGBA = -127 }
        /** Format of a RenderTexture.
        */
        enum RenderTextureFormat
        { ARGB32 = 0, Depth = 1, ARGBHalf = 2, Shadowmap = 3, RGB565 = 4, ARGB4444 = 5, ARGB1555 = 6, Default = 7, ARGB2101010 = 8, DefaultHDR = 9, ARGB64 = 10, ARGBFloat = 11, RGFloat = 12, RGHalf = 13, RFloat = 14, RHalf = 15, R8 = 16, ARGBInt = 17, RGInt = 18, RInt = 19, BGRA32 = 20, RGB111110Float = 22, RG32 = 23, RGBAUShort = 24, RG16 = 25, BGRA10101010_XR = 26, BGR101010_XR = 27, R16 = 28 }
        /** This enum describes how the RenderTexture is used as a VR eye texture. Instead of using the values of this enum manually, use the value returned by XR.XRSettings.eyeTextureDesc|eyeTextureDesc or other VR functions returning a RenderTextureDescriptor.
        */
        enum VRTextureUsage
        { None = 0, OneEye = 1, TwoEyes = 2, DeviceSpecific = 3 }
        /** Set of flags that control the state of a newly-created RenderTexture.
        */
        enum RenderTextureCreationFlags
        { MipMap = 1, AutoGenerateMips = 2, SRGB = 4, EyeTexture = 8, EnableRandomWrite = 16, CreatedFromScript = 32, AllowVerticalFlip = 128, NoResolvedColorSurface = 256, DynamicallyScalable = 1024, BindMS = 2048 }
        /** Color space conversion mode of a RenderTexture.
        */
        enum RenderTextureReadWrite
        { Default = 0, Linear = 1, sRGB = 2 }
        /** Flags enumeration of the render texture memoryless modes.
        */
        enum RenderTextureMemoryless
        { None = 0, Color = 1, Depth = 2, MSAA = 4 }
        /** Specify the source of a Custom Render Texture initialization.
        */
        enum CustomRenderTextureInitializationSource
        { TextureAndColor = 0, Material = 1 }
        /** Frequency of update or initialization of a Custom Render Texture.
        */
        enum CustomRenderTextureUpdateMode
        { OnLoad = 0, Realtime = 1, OnDemand = 2 }
        /** Space in which coordinates are provided for Update Zones.
        */
        enum CustomRenderTextureUpdateZoneSpace
        { Normalized = 0, Pixel = 1 }
        /** The Skinned Mesh filter.
        */
        class SkinnedMeshRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** The maximum number of bones affecting a single vertex.
            */
            public get quality(): UnityEngine.SkinQuality;
            public set quality(value: UnityEngine.SkinQuality);
            /** If enabled, the Skinned Mesh will be updated when offscreen. If disabled, this also disables updating animations.
            */
            public get updateWhenOffscreen(): boolean;
            public set updateWhenOffscreen(value: boolean);
            /** Forces the Skinned Mesh to recalculate its matricies when rendered
            */
            public get forceMatrixRecalculationPerRender(): boolean;
            public set forceMatrixRecalculationPerRender(value: boolean);
            public get rootBone(): UnityEngine.Transform;
            public set rootBone(value: UnityEngine.Transform);
            /** The bones used to skin the mesh.
            */
            public get bones(): System.Array$1<UnityEngine.Transform>;
            public set bones(value: System.Array$1<UnityEngine.Transform>);
            /** The mesh used for skinning.
            */
            public get sharedMesh(): UnityEngine.Mesh;
            public set sharedMesh(value: UnityEngine.Mesh);
            /** Specifies whether skinned motion vectors should be used for this renderer.
            */
            public get skinnedMotionVectors(): boolean;
            public set skinnedMotionVectors(value: boolean);
            /** AABB of this Skinned Mesh in its local space.
            */
            public get localBounds(): UnityEngine.Bounds;
            public set localBounds(value: UnityEngine.Bounds);
            /** Returns the weight of a BlendShape for this Renderer.
            * @param index The index of the BlendShape whose weight you want to retrieve. Index must be smaller than the Mesh.blendShapeCount of the Mesh attached to this Renderer.
            * @returns The weight of the BlendShape. 
            */
            public GetBlendShapeWeight ($index: number) : number
            /** Sets the weight of a BlendShape for this Renderer.
            * @param index The index of the BlendShape to modify. Index must be smaller than the Mesh.blendShapeCount of the Mesh attached to this Renderer.
            * @param value The weight for this BlendShape.
            */
            public SetBlendShapeWeight ($index: number, $value: number) : void
            /** Creates a snapshot of SkinnedMeshRenderer and stores it in mesh.
            * @param mesh A static mesh that will receive the snapshot of the skinned mesh.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh) : void
            public constructor ()
        }
        /** Renders meshes inserted by the MeshFilter or TextMesh.
        */
        class MeshRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** Vertex attributes in this mesh will override or add attributes of the primary mesh in the MeshRenderer.
            */
            public get additionalVertexStreams(): UnityEngine.Mesh;
            public set additionalVertexStreams(value: UnityEngine.Mesh);
            /** Index of the first sub-mesh to use from the Mesh associated with this MeshRenderer (Read Only).
            */
            public get subMeshStartIndex(): number;
            /** Specifies the relative lightmap resolution of this object. (Editor only)
            */
            public get scaleInLightmap(): number;
            public set scaleInLightmap(value: number);
            /** Determines how the object will receive global illumination. (Editor only)
            */
            public get receiveGI(): UnityEngine.ReceiveGI;
            public set receiveGI(value: UnityEngine.ReceiveGI);
            /** When enabled, seams in baked lightmaps will get smoothed. (Editor only)
            */
            public get stitchLightmapSeams(): boolean;
            public set stitchLightmapSeams(value: boolean);
            public constructor ()
        }
        /** The LOD fade modes. Modes other than LODFadeMode.None will result in Unity calculating a blend factor for blending/interpolating between two neighbouring LODs and pass it to your shader.
        */
        enum LODFadeMode
        { None = 0, CrossFade = 1, SpeedTree = 2 }
        /** Structure for building a LOD for passing to the SetLODs function.
        */
        class LOD extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The screen relative height to use for the transition [0-1].
            */
            public screenRelativeTransitionHeight : number
            /** Width of the cross-fade transition zone (proportion to the current LOD's whole length) [0-1]. Only used if it's not animated.
            */
            public fadeTransitionWidth : number
            /** List of renderers for this LOD level.
            */
            public renderers : System.Array$1<UnityEngine.Renderer>
            public constructor ($screenRelativeTransitionHeight: number, $renderers: System.Array$1<UnityEngine.Renderer>)
            public constructor ()
        }
        /** LODGroup lets you group multiple Renderers into LOD levels.
        */
        class LODGroup extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** The local reference point against which the LOD distance is calculated.
            */
            public get localReferencePoint(): UnityEngine.Vector3;
            public set localReferencePoint(value: UnityEngine.Vector3);
            /** The size of the LOD object in local space.
            */
            public get size(): number;
            public set size(value: number);
            /** The number of LOD levels.
            */
            public get lodCount(): number;
            /** The LOD fade mode used.
            */
            public get fadeMode(): UnityEngine.LODFadeMode;
            public set fadeMode(value: UnityEngine.LODFadeMode);
            /** Specify if the cross-fading should be animated by time. The animation duration is specified globally as crossFadeAnimationDuration.
            */
            public get animateCrossFading(): boolean;
            public set animateCrossFading(value: boolean);
            /** Allows you to enable or disable the LODGroup.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The cross-fading animation duration in seconds. ArgumentException will be thrown if it is set to zero or a negative value.
            */
            public static get crossFadeAnimationDuration(): number;
            public static set crossFadeAnimationDuration(value: number);
            public RecalculateBounds () : void
            public GetLODs () : System.Array$1<UnityEngine.LOD>
            /** Set the LODs for the LOD group. This will remove any existing LODs configured on the LODGroup.
            * @param lods The LODs to use for this group.
            */
            public SetLODs ($lods: System.Array$1<UnityEngine.LOD>) : void
            /** * @param index The LOD level to use. Passing index < 0 will return to standard LOD processing.
            */
            public ForceLOD ($index: number) : void
            public constructor ()
        }
        /** Light Probe Group.
        */
        class LightProbeGroup extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Editor only function to access and modify probe positions.
            */
            public get probePositions(): System.Array$1<UnityEngine.Vector3>;
            public set probePositions(value: System.Array$1<UnityEngine.Vector3>);
            /** Removes ringing from probes if enabled.
            */
            public get dering(): boolean;
            public set dering(value: boolean);
            public constructor ()
        }
        /** A collection of common line functions.
        */
        class LineUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Simplify ($points: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tolerance: number, $pointsToKeep: System.Collections.Generic.List$1<number>) : void
            public static Simplify ($points: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tolerance: number, $simplifiedPoints: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public static Simplify ($points: System.Collections.Generic.List$1<UnityEngine.Vector2>, $tolerance: number, $pointsToKeep: System.Collections.Generic.List$1<number>) : void
            public static Simplify ($points: System.Collections.Generic.List$1<UnityEngine.Vector2>, $tolerance: number, $simplifiedPoints: System.Collections.Generic.List$1<UnityEngine.Vector2>) : void
            public constructor ()
        }
        /** Class for handling 3D Textures, Use this to create.
        */
        class Texture3D extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** The depth of the texture (Read Only).
            */
            public get depth(): number;
            /** The format of the pixel data in the texture (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            /** Returns true if this 3D texture is Read/Write Enabled; otherwise returns false. For dynamic textures created from script, always returns true.
            */
            public get isReadable(): boolean;
            /** Returns an array of pixel colors representing one mip level of the 3D texture.
            * @param miplevel The mipmap level to be accessed.
            * @returns The colors to get the array of pixels. 
            */
            public GetPixels ($miplevel: number) : System.Array$1<UnityEngine.Color>
            public GetPixels () : System.Array$1<UnityEngine.Color>
            /** Returns an array of pixel colors representing one mip level of the 3D texture.
            * @param miplevel The mipmap level to be accessed.
            * @returns The colors to get the array of pixels. 
            */
            public GetPixels32 ($miplevel: number) : System.Array$1<UnityEngine.Color32>
            public GetPixels32 () : System.Array$1<UnityEngine.Color32>
            /** Sets pixel colors of a 3D texture.
            * @param colors The colors to set the pixels to.
            * @param miplevel The mipmap level to be affected by the new colors.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $miplevel: number) : void
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>) : void
            /** Sets pixel colors of a 3D texture.
            * @param colors The colors to set the pixels to.
            * @param miplevel The mipmap level to be affected by the new colors.
            */
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>, $miplevel: number) : void
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>) : void
            /** Actually apply all previous SetPixels changes.
            * @param updateMipmaps When set to true, mipmap levels are recalculated.
            * @param makeNoLongerReadable When set to true, system memory copy of a texture is released.
            */
            public Apply ($updateMipmaps: boolean, $makeNoLongerReadable: boolean) : void
            public Apply ($updateMipmaps: boolean) : void
            public Apply () : void
            public SetPixel ($x: number, $y: number, $z: number, $color: UnityEngine.Color) : void
            /** Sets the pixel color that represents one mip level of the 3D texture at coordinates (x,y,z).
            * @param x X coordinate to access a pixel.
            * @param y Y coordinate to access a pixel.
            * @param z Z coordinate to access a pixel.
            * @param color The colors to set the pixels to.
            * @param mipLevel The mipmap level to be affected by the new colors.
            */
            public SetPixel ($x: number, $y: number, $z: number, $color: UnityEngine.Color, $mipLevel: number) : void
            public GetPixel ($x: number, $y: number, $z: number) : UnityEngine.Color
            /** Returns the pixel color that represents one mip level of the 3D texture at coordinates (x,y,z).
            * @param x X coordinate to access a pixel.
            * @param y Y coordinate to access a pixel.
            * @param z Z coordinate to access a pixel.
            * @param mipLevel The mipmap level to be accessed.
            * @returns The color of the pixel. 
            */
            public GetPixel ($x: number, $y: number, $z: number, $mipLevel: number) : UnityEngine.Color
            public GetPixelBilinear ($u: number, $v: number, $w: number) : UnityEngine.Color
            /** Returns the filtered pixel color that represents one mip level of the 3D texture at normalized coordinates (u,v,w).
            * @param u U normalized coordinate to access a pixel.
            * @param v V normalized coordinate to access a pixel.
            * @param w W normalized coordinate to access a pixel.
            * @param mipLevel The mipmap level to be accessed.
            * @returns The colors to return by bilinear filtering. 
            */
            public GetPixelBilinear ($u: number, $v: number, $w: number, $mipLevel: number) : UnityEngine.Color
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor ()
        }
        /** Class for handling 2D texture arrays.
        */
        class Texture2DArray extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** Read Only. This property is used as a parameter in some overloads of the CommandBuffer.Blit, Graphics.Blit, CommandBuffer.SetRenderTarget, and Graphics.SetRenderTarget methods to indicate that all texture array slices are bound. The value of this property is -1.
            */
            public static get allSlices(): number;
            /** Number of elements in a texture array (Read Only).
            */
            public get depth(): number;
            /** Texture format (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            /** Returns true if this texture array is Read/Write Enabled; otherwise returns false. For dynamic textures created from script, always returns true.
            */
            public get isReadable(): boolean;
            /** Returns pixel colors of a single array slice.
            * @param arrayElement Array slice to read pixels from.
            * @param miplevel Mipmap level to read pixels from.
            * @returns Array of pixel colors. 
            */
            public GetPixels ($arrayElement: number, $miplevel: number) : System.Array$1<UnityEngine.Color>
            public GetPixels ($arrayElement: number) : System.Array$1<UnityEngine.Color>
            /** Returns pixel colors of a single array slice.
            * @param arrayElement Array slice to read pixels from.
            * @param miplevel Mipmap level to read pixels from.
            * @returns Array of pixel colors in low precision (8 bits/channel) format. 
            */
            public GetPixels32 ($arrayElement: number, $miplevel: number) : System.Array$1<UnityEngine.Color32>
            public GetPixels32 ($arrayElement: number) : System.Array$1<UnityEngine.Color32>
            /** Set pixel colors for the whole mip level.
            * @param colors An array of pixel colors.
            * @param arrayElement The texture array element index.
            * @param miplevel The mip level.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $arrayElement: number, $miplevel: number) : void
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $arrayElement: number) : void
            /** Set pixel colors for the whole mip level.
            * @param colors An array of pixel colors.
            * @param arrayElement The texture array element index.
            * @param miplevel The mip level.
            */
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>, $arrayElement: number, $miplevel: number) : void
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>, $arrayElement: number) : void
            /** Actually apply all previous SetPixels changes.
            * @param updateMipmaps When set to true, mipmap levels are recalculated.
            * @param makeNoLongerReadable When set to true, system memory copy of a texture is released.
            */
            public Apply ($updateMipmaps: boolean, $makeNoLongerReadable: boolean) : void
            public Apply ($updateMipmaps: boolean) : void
            public Apply () : void
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor ()
        }
        /** Class for handling Cubemap arrays.
        */
        class CubemapArray extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** Number of cubemaps in the array (Read Only).
            */
            public get cubemapCount(): number;
            /** Texture format (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            public get isReadable(): boolean;
            /** Returns pixel colors of a single array slice/face.
            * @param face Cubemap face to read pixels from.
            * @param arrayElement Array slice to read pixels from.
            * @param miplevel Mipmap level to read pixels from.
            * @returns Array of pixel colors. 
            */
            public GetPixels ($face: UnityEngine.CubemapFace, $arrayElement: number, $miplevel: number) : System.Array$1<UnityEngine.Color>
            public GetPixels ($face: UnityEngine.CubemapFace, $arrayElement: number) : System.Array$1<UnityEngine.Color>
            /** Returns pixel colors of a single array slice/face.
            * @param face Cubemap face to read pixels from.
            * @param arrayElement Array slice to read pixels from.
            * @param miplevel Mipmap level to read pixels from.
            * @returns Array of pixel colors in low precision (8 bits/channel) format. 
            */
            public GetPixels32 ($face: UnityEngine.CubemapFace, $arrayElement: number, $miplevel: number) : System.Array$1<UnityEngine.Color32>
            public GetPixels32 ($face: UnityEngine.CubemapFace, $arrayElement: number) : System.Array$1<UnityEngine.Color32>
            /** Set pixel colors for a single array slice/face.
            * @param colors An array of pixel colors.
            * @param face Cubemap face to set pixels for.
            * @param arrayElement Array element index to set pixels for.
            * @param miplevel Mipmap level to set pixels for.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $face: UnityEngine.CubemapFace, $arrayElement: number, $miplevel: number) : void
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $face: UnityEngine.CubemapFace, $arrayElement: number) : void
            /** Set pixel colors for a single array slice/face.
            * @param colors An array of pixel colors in low precision (8 bits/channel) format.
            * @param face Cubemap face to set pixels for.
            * @param arrayElement Array element index to set pixels for.
            * @param miplevel Mipmap level to set pixels for.
            */
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>, $face: UnityEngine.CubemapFace, $arrayElement: number, $miplevel: number) : void
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>, $face: UnityEngine.CubemapFace, $arrayElement: number) : void
            /** Actually apply all previous SetPixels changes.
            * @param updateMipmaps When set to true, mipmap levels are recalculated.
            * @param makeNoLongerReadable When set to true, system memory copy of a texture is released.
            */
            public Apply ($updateMipmaps: boolean, $makeNoLongerReadable: boolean) : void
            public Apply ($updateMipmaps: boolean) : void
            public Apply () : void
            public constructor ($width: number, $cubemapCount: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $cubemapCount: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $cubemapCount: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor ($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean)
            public constructor ($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean)
            public constructor ($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor ()
        }
        /** Class for handling Sparse Textures.
        */
        class SparseTexture extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** Get sparse texture tile width (Read Only).
            */
            public get tileWidth(): number;
            /** Get sparse texture tile height (Read Only).
            */
            public get tileHeight(): number;
            /** Is the sparse texture actually created? (Read Only)
            */
            public get isCreated(): boolean;
            /** Update sparse texture tile with color values.
            * @param tileX Tile X coordinate.
            * @param tileY Tile Y coordinate.
            * @param miplevel Mipmap level of the texture.
            * @param data Tile color data.
            */
            public UpdateTile ($tileX: number, $tileY: number, $miplevel: number, $data: System.Array$1<UnityEngine.Color32>) : void
            /** Update sparse texture tile with raw pixel values.
            * @param tileX Tile X coordinate.
            * @param tileY Tile Y coordinate.
            * @param miplevel Mipmap level of the texture.
            * @param data Tile raw pixel data.
            */
            public UpdateTileRaw ($tileX: number, $tileY: number, $miplevel: number, $data: System.Array$1<number>) : void
            /** Unload sparse texture tile.
            * @param tileX Tile X coordinate.
            * @param tileY Tile Y coordinate.
            * @param miplevel Mipmap level of the texture.
            */
            public UnloadTile ($tileX: number, $tileY: number, $miplevel: number) : void
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean)
            public constructor ()
        }
        /** This struct contains all the information required to create a RenderTexture. It can be copied, cached, and reused to easily create RenderTextures that all share the same properties.
        */
        class RenderTextureDescriptor extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The width of the render texture in pixels.
            */
            public get width(): number;
            public set width(value: number);
            /** The height of the render texture in pixels.
            */
            public get height(): number;
            public set height(value: number);
            /** The multisample antialiasing level for the RenderTexture.
            See Also: RenderTexture.antiAliasing.
            */
            public get msaaSamples(): number;
            public set msaaSamples(value: number);
            /** Volume extent of a 3D render texture.
            */
            public get volumeDepth(): number;
            public set volumeDepth(value: number);
            /** User-defined mipmap count.
            */
            public get mipCount(): number;
            public set mipCount(value: number);
            /** The color format for the RenderTexture.
            */
            public get graphicsFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set graphicsFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            /** The format of the stencil data that is encapsulated in the render texture.
            Specifying this property will create a stencil element for the render texture and set its format.
            This allows for stencil data to be bound as a texture to all shader types for the platforms that support it.
            This property does not specify the format of the stencil buffer, which is constrained by the depth buffer format specified in RenderTexture.depth.
            At the moment, most platforms only support R8_UInt (DirectX11, DirectX12), while PS4 also supports R8_UNorm.
            */
            public get stencilFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set stencilFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            public get colorFormat(): UnityEngine.RenderTextureFormat;
            public set colorFormat(value: UnityEngine.RenderTextureFormat);
            /** This flag causes the render texture uses sRGB read/write conversions.
            */
            public get sRGB(): boolean;
            public set sRGB(value: boolean);
            /** The precision of the render texture's depth buffer in bits (0, 16, 24/32 are supported).
            See Also: RenderTexture.depth.
            */
            public get depthBufferBits(): number;
            public set depthBufferBits(value: number);
            /** Dimensionality (type) of the render texture.
            See Also: RenderTexture.dimension.
            */
            public get dimension(): UnityEngine.Rendering.TextureDimension;
            public set dimension(value: UnityEngine.Rendering.TextureDimension);
            /** Determines how the RenderTexture is sampled if it is used as a shadow map.
            See Also: ShadowSamplingMode for more details.
            */
            public get shadowSamplingMode(): UnityEngine.Rendering.ShadowSamplingMode;
            public set shadowSamplingMode(value: UnityEngine.Rendering.ShadowSamplingMode);
            /** If this RenderTexture is a VR eye texture used in stereoscopic rendering, this property decides what special rendering occurs, if any. Instead of setting this manually, use the value returned by XR.XRSettings.eyeTextureDesc|eyeTextureDesc or other VR functions returning a RenderTextureDescriptor.
            */
            public get vrUsage(): UnityEngine.VRTextureUsage;
            public set vrUsage(value: UnityEngine.VRTextureUsage);
            /** A set of RenderTextureCreationFlags that control how the texture is created.
            */
            public get flags(): UnityEngine.RenderTextureCreationFlags;
            /** The render texture memoryless mode property.
            */
            public get memoryless(): UnityEngine.RenderTextureMemoryless;
            public set memoryless(value: UnityEngine.RenderTextureMemoryless);
            /** Render texture has mipmaps when this flag is set.
            See Also: RenderTexture.useMipMap.
            */
            public get useMipMap(): boolean;
            public set useMipMap(value: boolean);
            /** Mipmap levels are generated automatically when this flag is set.
            */
            public get autoGenerateMips(): boolean;
            public set autoGenerateMips(value: boolean);
            /** Enable random access write into this render texture on Shader Model 5.0 level shaders.
            See Also: RenderTexture.enableRandomWrite.
            */
            public get enableRandomWrite(): boolean;
            public set enableRandomWrite(value: boolean);
            /** If true and msaaSamples is greater than 1, the render texture will not be resolved by default.  Use this if the render texture needs to be bound as a multisampled texture in a shader.
            */
            public get bindMS(): boolean;
            public set bindMS(value: boolean);
            /** Set to true to enable dynamic resolution scaling on this render texture.
            See Also: RenderTexture.useDynamicScale.
            */
            public get useDynamicScale(): boolean;
            public set useDynamicScale(value: boolean);
            public constructor ($width: number, $height: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.RenderTextureFormat)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.RenderTextureFormat, $depthBufferBits: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthBufferBits: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.RenderTextureFormat, $depthBufferBits: number, $mipCount: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthBufferBits: number, $mipCount: number)
            public constructor ()
        }
        /** Structure describing an Update Zone.
        */
        class CustomRenderTextureUpdateZone extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Position of the center of the Update Zone within the Custom Render Texture.
            */
            public updateZoneCenter : UnityEngine.Vector3
            /** Size of the Update Zone.
            */
            public updateZoneSize : UnityEngine.Vector3
            /** Rotation of the Update Zone.
            */
            public rotation : number
            /** Shader Pass used to update the Custom Render Texture for this Update Zone.
            */
            public passIndex : number
            /** If true, and if the texture is double buffered, a request is made to swap the buffers before the next update. Otherwise, the buffers will not be swapped.
            */
            public needSwap : boolean
        }
        /** Custom Render Textures are an extension to Render Textures, enabling you to render directly to the Texture using a Shader.
        */
        class CustomRenderTexture extends UnityEngine.RenderTexture
        {
            protected [__keep_incompatibility]: never;
            /** Material with which the content of the Custom Render Texture is updated.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            /** Material with which the Custom Render Texture is initialized. Initialization texture and color are ignored if this parameter is set.
            */
            public get initializationMaterial(): UnityEngine.Material;
            public set initializationMaterial(value: UnityEngine.Material);
            /** Texture with which the Custom Render Texture is initialized (multiplied by the initialization color). This parameter will be ignored if an initializationMaterial is set.
            */
            public get initializationTexture(): UnityEngine.Texture;
            public set initializationTexture(value: UnityEngine.Texture);
            /** Specify if the texture should be initialized with a Texture and a Color or a Material.
            */
            public get initializationSource(): UnityEngine.CustomRenderTextureInitializationSource;
            public set initializationSource(value: UnityEngine.CustomRenderTextureInitializationSource);
            /** Color with which the Custom Render Texture is initialized. This parameter will be ignored if an initializationMaterial is set.
            */
            public get initializationColor(): UnityEngine.Color;
            public set initializationColor(value: UnityEngine.Color);
            /** Specify how the texture should be updated.
            */
            public get updateMode(): UnityEngine.CustomRenderTextureUpdateMode;
            public set updateMode(value: UnityEngine.CustomRenderTextureUpdateMode);
            /** Specify how the texture should be initialized.
            */
            public get initializationMode(): UnityEngine.CustomRenderTextureUpdateMode;
            public set initializationMode(value: UnityEngine.CustomRenderTextureUpdateMode);
            /** Space in which the update zones are expressed (Normalized or Pixel space).
            */
            public get updateZoneSpace(): UnityEngine.CustomRenderTextureUpdateZoneSpace;
            public set updateZoneSpace(value: UnityEngine.CustomRenderTextureUpdateZoneSpace);
            /** Shader Pass used to update the Custom Render Texture.
            */
            public get shaderPass(): number;
            public set shaderPass(value: number);
            /** Bitfield that allows to enable or disable update on each of the cubemap faces. Order from least significant bit is +X, -X, +Y, -Y, +Z, -Z.
            */
            public get cubemapFaceMask(): number;
            public set cubemapFaceMask(value: number);
            /** If true, the Custom Render Texture is double buffered so that you can access it during its own update. otherwise the Custom Render Texture will be not be double buffered.
            */
            public get doubleBuffered(): boolean;
            public set doubleBuffered(value: boolean);
            /** If true, Update zones will wrap around the border of the Custom Render Texture. Otherwise, Update zones will be clamped at the border of the Custom Render Texture.
            */
            public get wrapUpdateZones(): boolean;
            public set wrapUpdateZones(value: boolean);
            /** Triggers the update of the Custom Render Texture.
            * @param count Number of upate pass to perform.
            */
            public Update ($count: number) : void
            public Update () : void
            public Initialize () : void
            public ClearUpdateZones () : void
            public GetUpdateZones ($updateZones: System.Collections.Generic.List$1<UnityEngine.CustomRenderTextureUpdateZone>) : void
            /** Setup the list of Update Zones for the Custom Render Texture.
            */
            public SetUpdateZones ($updateZones: System.Array$1<UnityEngine.CustomRenderTextureUpdateZone>) : void
            public constructor ($width: number, $height: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite)
            public constructor ($width: number, $height: number, $format: UnityEngine.RenderTextureFormat)
            public constructor ($width: number, $height: number)
            public constructor ($width: number, $height: number, $defaultFormat: UnityEngine.Experimental.Rendering.DefaultFormat)
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor ($desc: UnityEngine.RenderTextureDescriptor)
            public constructor ($textureToCopy: UnityEngine.RenderTexture)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat)
            public constructor ($width: number, $height: number, $depth: number)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat, $mipCount: number)
            public constructor ()
        }
        /** Describes options for displaying movie playback controls.
        */
        enum FullScreenMovieControlMode
        { Full = 0, Minimal = 1, CancelOnInput = 2, Hidden = 3 }
        /** Describes scaling modes for displaying movies.
        */
        enum FullScreenMovieScalingMode
        { None = 0, AspectFit = 1, AspectFill = 2, Fill = 3 }
        /** ActivityIndicator Style (Android Specific).
        */
        enum AndroidActivityIndicatorStyle
        { DontShow = -1, Large = 0, InversedLarge = 1, Small = 2, InversedSmall = 3 }
        /** Interface into functionality unique to handheld devices.
        */
        class Handheld extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Plays a full-screen movie.
            * @param path Filesystem path to the movie file.
            * @param bgColor Background color.
            * @param controlMode How the playback controls are to be displayed.
            * @param scalingMode How the movie is to be scaled to fit the screen.
            */
            public static PlayFullScreenMovie ($path: string, $bgColor: UnityEngine.Color, $controlMode: UnityEngine.FullScreenMovieControlMode, $scalingMode: UnityEngine.FullScreenMovieScalingMode) : boolean
            /** Plays a full-screen movie.
            * @param path Filesystem path to the movie file.
            * @param bgColor Background color.
            * @param controlMode How the playback controls are to be displayed.
            * @param scalingMode How the movie is to be scaled to fit the screen.
            */
            public static PlayFullScreenMovie ($path: string, $bgColor: UnityEngine.Color, $controlMode: UnityEngine.FullScreenMovieControlMode) : boolean
            /** Plays a full-screen movie.
            * @param path Filesystem path to the movie file.
            * @param bgColor Background color.
            * @param controlMode How the playback controls are to be displayed.
            * @param scalingMode How the movie is to be scaled to fit the screen.
            */
            public static PlayFullScreenMovie ($path: string, $bgColor: UnityEngine.Color) : boolean
            /** Plays a full-screen movie.
            * @param path Filesystem path to the movie file.
            * @param bgColor Background color.
            * @param controlMode How the playback controls are to be displayed.
            * @param scalingMode How the movie is to be scaled to fit the screen.
            */
            public static PlayFullScreenMovie ($path: string) : boolean
            public static Vibrate () : void
            public static SetActivityIndicatorStyle ($style: UnityEngine.iOS.ActivityIndicatorStyle) : void
            /** Sets the desired activity indicator style.
            */
            public static SetActivityIndicatorStyle ($style: UnityEngine.AndroidActivityIndicatorStyle) : void
            public static GetActivityIndicatorStyle () : number
            public static StartActivityIndicator () : void
            public static StopActivityIndicator () : void
            public static ClearShaderCache () : void
            public constructor ()
        }
        /** Utilities to compute hashes.
        */
        class HashUtilities extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Append inHash in outHash.
            * @param inHash Hash to append.
            * @param outHash Hash that will be updated.
            */
            public static AppendHash ($inHash: $Ref<UnityEngine.Hash128>, $outHash: $Ref<UnityEngine.Hash128>) : void
            /** Compute a Hash128 of a Matrix4x4.
            * @param value The Matrix4x4 to hash.
            * @param hash The computed hash.
            */
            public static QuantisedMatrixHash ($value: $Ref<UnityEngine.Matrix4x4>, $hash: $Ref<UnityEngine.Hash128>) : void
            /** Compute a Hash128 of a Vector3.
            * @param hash The Vector3 to hash.
            * @param value The computed hash.
            */
            public static QuantisedVectorHash ($value: $Ref<UnityEngine.Vector3>, $hash: $Ref<UnityEngine.Hash128>) : void
            /** Compute a 128 bit hash based on a value. the type of the value must be a value type.
            * @param value A reference to the value to hash.
            * @param hash A reference to the Hash128 to updated with the computed hash.
            */
            public static ComputeHash128 ($value: System.Array$1<number>, $hash: $Ref<UnityEngine.Hash128>) : void
        }
        /** Utilities to compute hashes with unsafe code.
        */
        class HashUnsafeUtilities extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Determines whether the mouse cursor is rendered using software rendering or, on supported platforms, hardware rendering.
        */
        enum CursorMode
        { Auto = 0, ForceSoftware = 1 }
        /** How the cursor should behave.
        */
        enum CursorLockMode
        { None = 0, Locked = 1, Confined = 2 }
        /** Cursor API for setting the cursor (mouse pointer).
        */
        class Cursor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Determines whether the hardware pointer is visible or not.
            */
            public static get visible(): boolean;
            public static set visible(value: boolean);
            /** Determines whether the hardware pointer is locked to the center of the view, constrained to the window, or not constrained at all.
            */
            public static get lockState(): UnityEngine.CursorLockMode;
            public static set lockState(value: UnityEngine.CursorLockMode);
            /** Specify a custom cursor that you wish to use as a cursor.
            * @param texture The texture to use for the cursor. To use a texture, you must first import it with `Read/Write`enabled. Alternatively, you can use the default cursor import setting. If you created your cursor texture from code, it must be in RGBA32 format, have alphaIsTransparency enabled, and have no mip chain. To use the default cursor, set the texture to `Null`.
            * @param hotspot The offset from the top left of the texture to use as the target point (must be within the bounds of the cursor).
            * @param cursorMode Allow this cursor to render as a hardware cursor on supported platforms, or force software cursor.
            */
            public static SetCursor ($texture: UnityEngine.Texture2D, $hotspot: UnityEngine.Vector2, $cursorMode: UnityEngine.CursorMode) : void
            public constructor ()
        }
        /** Key codes returned by Event.keyCode. These map directly to a physical key on the keyboard.
        */
        enum KeyCode
        { None = 0, Backspace = 8, Delete = 127, Tab = 9, Clear = 12, Return = 13, Pause = 19, Escape = 27, Space = 32, Keypad0 = 256, Keypad1 = 257, Keypad2 = 258, Keypad3 = 259, Keypad4 = 260, Keypad5 = 261, Keypad6 = 262, Keypad7 = 263, Keypad8 = 264, Keypad9 = 265, KeypadPeriod = 266, KeypadDivide = 267, KeypadMultiply = 268, KeypadMinus = 269, KeypadPlus = 270, KeypadEnter = 271, KeypadEquals = 272, UpArrow = 273, DownArrow = 274, RightArrow = 275, LeftArrow = 276, Insert = 277, Home = 278, End = 279, PageUp = 280, PageDown = 281, F1 = 282, F2 = 283, F3 = 284, F4 = 285, F5 = 286, F6 = 287, F7 = 288, F8 = 289, F9 = 290, F10 = 291, F11 = 292, F12 = 293, F13 = 294, F14 = 295, F15 = 296, Alpha0 = 48, Alpha1 = 49, Alpha2 = 50, Alpha3 = 51, Alpha4 = 52, Alpha5 = 53, Alpha6 = 54, Alpha7 = 55, Alpha8 = 56, Alpha9 = 57, Exclaim = 33, DoubleQuote = 34, Hash = 35, Dollar = 36, Percent = 37, Ampersand = 38, Quote = 39, LeftParen = 40, RightParen = 41, Asterisk = 42, Plus = 43, Comma = 44, Minus = 45, Period = 46, Slash = 47, Colon = 58, Semicolon = 59, Less = 60, Equals = 61, Greater = 62, Question = 63, At = 64, LeftBracket = 91, Backslash = 92, RightBracket = 93, Caret = 94, Underscore = 95, BackQuote = 96, A = 97, B = 98, C = 99, D = 100, E = 101, F = 102, G = 103, H = 104, I = 105, J = 106, K = 107, L = 108, M = 109, N = 110, O = 111, P = 112, Q = 113, R = 114, S = 115, T = 116, U = 117, V = 118, W = 119, X = 120, Y = 121, Z = 122, LeftCurlyBracket = 123, Pipe = 124, RightCurlyBracket = 125, Tilde = 126, Numlock = 300, CapsLock = 301, ScrollLock = 302, RightShift = 303, LeftShift = 304, RightControl = 305, LeftControl = 306, RightAlt = 307, LeftAlt = 308, LeftCommand = 310, LeftApple = 310, LeftWindows = 311, RightCommand = 309, RightApple = 309, RightWindows = 312, AltGr = 313, Help = 315, Print = 316, SysReq = 317, Break = 318, Menu = 319, Mouse0 = 323, Mouse1 = 324, Mouse2 = 325, Mouse3 = 326, Mouse4 = 327, Mouse5 = 328, Mouse6 = 329, JoystickButton0 = 330, JoystickButton1 = 331, JoystickButton2 = 332, JoystickButton3 = 333, JoystickButton4 = 334, JoystickButton5 = 335, JoystickButton6 = 336, JoystickButton7 = 337, JoystickButton8 = 338, JoystickButton9 = 339, JoystickButton10 = 340, JoystickButton11 = 341, JoystickButton12 = 342, JoystickButton13 = 343, JoystickButton14 = 344, JoystickButton15 = 345, JoystickButton16 = 346, JoystickButton17 = 347, JoystickButton18 = 348, JoystickButton19 = 349, Joystick1Button0 = 350, Joystick1Button1 = 351, Joystick1Button2 = 352, Joystick1Button3 = 353, Joystick1Button4 = 354, Joystick1Button5 = 355, Joystick1Button6 = 356, Joystick1Button7 = 357, Joystick1Button8 = 358, Joystick1Button9 = 359, Joystick1Button10 = 360, Joystick1Button11 = 361, Joystick1Button12 = 362, Joystick1Button13 = 363, Joystick1Button14 = 364, Joystick1Button15 = 365, Joystick1Button16 = 366, Joystick1Button17 = 367, Joystick1Button18 = 368, Joystick1Button19 = 369, Joystick2Button0 = 370, Joystick2Button1 = 371, Joystick2Button2 = 372, Joystick2Button3 = 373, Joystick2Button4 = 374, Joystick2Button5 = 375, Joystick2Button6 = 376, Joystick2Button7 = 377, Joystick2Button8 = 378, Joystick2Button9 = 379, Joystick2Button10 = 380, Joystick2Button11 = 381, Joystick2Button12 = 382, Joystick2Button13 = 383, Joystick2Button14 = 384, Joystick2Button15 = 385, Joystick2Button16 = 386, Joystick2Button17 = 387, Joystick2Button18 = 388, Joystick2Button19 = 389, Joystick3Button0 = 390, Joystick3Button1 = 391, Joystick3Button2 = 392, Joystick3Button3 = 393, Joystick3Button4 = 394, Joystick3Button5 = 395, Joystick3Button6 = 396, Joystick3Button7 = 397, Joystick3Button8 = 398, Joystick3Button9 = 399, Joystick3Button10 = 400, Joystick3Button11 = 401, Joystick3Button12 = 402, Joystick3Button13 = 403, Joystick3Button14 = 404, Joystick3Button15 = 405, Joystick3Button16 = 406, Joystick3Button17 = 407, Joystick3Button18 = 408, Joystick3Button19 = 409, Joystick4Button0 = 410, Joystick4Button1 = 411, Joystick4Button2 = 412, Joystick4Button3 = 413, Joystick4Button4 = 414, Joystick4Button5 = 415, Joystick4Button6 = 416, Joystick4Button7 = 417, Joystick4Button8 = 418, Joystick4Button9 = 419, Joystick4Button10 = 420, Joystick4Button11 = 421, Joystick4Button12 = 422, Joystick4Button13 = 423, Joystick4Button14 = 424, Joystick4Button15 = 425, Joystick4Button16 = 426, Joystick4Button17 = 427, Joystick4Button18 = 428, Joystick4Button19 = 429, Joystick5Button0 = 430, Joystick5Button1 = 431, Joystick5Button2 = 432, Joystick5Button3 = 433, Joystick5Button4 = 434, Joystick5Button5 = 435, Joystick5Button6 = 436, Joystick5Button7 = 437, Joystick5Button8 = 438, Joystick5Button9 = 439, Joystick5Button10 = 440, Joystick5Button11 = 441, Joystick5Button12 = 442, Joystick5Button13 = 443, Joystick5Button14 = 444, Joystick5Button15 = 445, Joystick5Button16 = 446, Joystick5Button17 = 447, Joystick5Button18 = 448, Joystick5Button19 = 449, Joystick6Button0 = 450, Joystick6Button1 = 451, Joystick6Button2 = 452, Joystick6Button3 = 453, Joystick6Button4 = 454, Joystick6Button5 = 455, Joystick6Button6 = 456, Joystick6Button7 = 457, Joystick6Button8 = 458, Joystick6Button9 = 459, Joystick6Button10 = 460, Joystick6Button11 = 461, Joystick6Button12 = 462, Joystick6Button13 = 463, Joystick6Button14 = 464, Joystick6Button15 = 465, Joystick6Button16 = 466, Joystick6Button17 = 467, Joystick6Button18 = 468, Joystick6Button19 = 469, Joystick7Button0 = 470, Joystick7Button1 = 471, Joystick7Button2 = 472, Joystick7Button3 = 473, Joystick7Button4 = 474, Joystick7Button5 = 475, Joystick7Button6 = 476, Joystick7Button7 = 477, Joystick7Button8 = 478, Joystick7Button9 = 479, Joystick7Button10 = 480, Joystick7Button11 = 481, Joystick7Button12 = 482, Joystick7Button13 = 483, Joystick7Button14 = 484, Joystick7Button15 = 485, Joystick7Button16 = 486, Joystick7Button17 = 487, Joystick7Button18 = 488, Joystick7Button19 = 489, Joystick8Button0 = 490, Joystick8Button1 = 491, Joystick8Button2 = 492, Joystick8Button3 = 493, Joystick8Button4 = 494, Joystick8Button5 = 495, Joystick8Button6 = 496, Joystick8Button7 = 497, Joystick8Button8 = 498, Joystick8Button9 = 499, Joystick8Button10 = 500, Joystick8Button11 = 501, Joystick8Button12 = 502, Joystick8Button13 = 503, Joystick8Button14 = 504, Joystick8Button15 = 505, Joystick8Button16 = 506, Joystick8Button17 = 507, Joystick8Button18 = 508, Joystick8Button19 = 509 }
        /** Initializes a new instance of the Logger.
        */
        class Logger extends System.Object implements UnityEngine.ILogHandler, UnityEngine.ILogger
        {
            protected [__keep_incompatibility]: never;
            /** Set  Logger.ILogHandler.
            */
            public get logHandler(): UnityEngine.ILogHandler;
            public set logHandler(value: UnityEngine.ILogHandler);
            /** To runtime toggle debug logging [ON/OFF].
            */
            public get logEnabled(): boolean;
            public set logEnabled(value: boolean);
            /** To selective enable debug log message.
            */
            public get filterLogType(): UnityEngine.LogType;
            public set filterLogType(value: UnityEngine.LogType);
            /** Check logging is enabled based on the LogType.
            * @param logType The type of the log message.
            * @returns Retrun true in case logs of LogType will be logged otherwise returns false. 
            */
            public IsLogTypeAllowed ($logType: UnityEngine.LogType) : boolean
            /** Logs message to the Unity Console using default logger.
            * @param logType The type of the log message.
            * @param tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public Log ($logType: UnityEngine.LogType, $message: any) : void
            /** Logs message to the Unity Console using default logger.
            * @param logType The type of the log message.
            * @param tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public Log ($logType: UnityEngine.LogType, $message: any, $context: UnityEngine.Object) : void
            /** Logs message to the Unity Console using default logger.
            * @param logType The type of the log message.
            * @param tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public Log ($logType: UnityEngine.LogType, $tag: string, $message: any) : void
            /** Logs message to the Unity Console using default logger.
            * @param logType The type of the log message.
            * @param tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public Log ($logType: UnityEngine.LogType, $tag: string, $message: any, $context: UnityEngine.Object) : void
            /** Logs message to the Unity Console using default logger.
            * @param logType The type of the log message.
            * @param tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public Log ($message: any) : void
            /** Logs message to the Unity Console using default logger.
            * @param logType The type of the log message.
            * @param tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public Log ($tag: string, $message: any) : void
            /** Logs message to the Unity Console using default logger.
            * @param logType The type of the log message.
            * @param tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public Log ($tag: string, $message: any, $context: UnityEngine.Object) : void
            /** A variant of Logger.Log that logs an warning message.
            * @param tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public LogWarning ($tag: string, $message: any) : void
            /** A variant of Logger.Log that logs an warning message.
            * @param tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public LogWarning ($tag: string, $message: any, $context: UnityEngine.Object) : void
            /** A variant of Logger.Log that logs an error message.
            * @param tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public LogError ($tag: string, $message: any) : void
            /** A variant of Logger.Log that logs an error message.
            * @param tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param message String or object to be converted to string representation for display.
            * @param context Object to which the message applies.
            */
            public LogError ($tag: string, $message: any, $context: UnityEngine.Object) : void
            /** Logs a formatted message.
            * @param logType The type of the log message.
            * @param context Object to which the message applies.
            * @param format A composite format string.
            * @param args Format arguments.
            */
            public LogFormat ($logType: UnityEngine.LogType, $format: string, ...args: any[]) : void
            /** A variant of Logger.Log that logs an exception message.
            * @param exception Runtime Exception.
            * @param context Object to which the message applies.
            */
            public LogException ($exception: System.Exception) : void
            /** Logs a formatted message.
            * @param logType The type of the log message.
            * @param context Object to which the message applies.
            * @param format A composite format string.
            * @param args Format arguments.
            */
            public LogFormat ($logType: UnityEngine.LogType, $context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** A variant of Logger.Log that logs an exception message.
            * @param exception Runtime Exception.
            * @param context Object to which the message applies.
            */
            public LogException ($exception: System.Exception, $context: UnityEngine.Object) : void
            public constructor ($logHandler: UnityEngine.ILogHandler)
            public constructor ()
        }
        /** A collection of common color functions.
        */
        class ColorUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Attempts to convert a html color string.
            * @param htmlString Case insensitive html string to be converted into a color.
            * @param color The converted color.
            * @returns True if the string was successfully converted else false. 
            */
            public static TryParseHtmlString ($htmlString: string, $color: $Ref<UnityEngine.Color>) : boolean
            /** Returns the color as a hexadecimal string in the format "RRGGBB".
            * @param color The color to be converted.
            * @returns Hexadecimal string representing the color. 
            */
            public static ToHtmlStringRGB ($color: UnityEngine.Color) : string
            /** Returns the color as a hexadecimal string in the format "RRGGBBAA".
            * @param color The color to be converted.
            * @returns Hexadecimal string representing the color. 
            */
            public static ToHtmlStringRGBA ($color: UnityEngine.Color) : string
            public constructor ()
        }
        /** Color key used by Gradient.
        */
        class GradientColorKey extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Color of key.
            */
            public color : UnityEngine.Color
            /** Time of the key (0 - 1).
            */
            public time : number
            public constructor ($col: UnityEngine.Color, $time: number)
            public constructor ()
        }
        /** Alpha key used by Gradient.
        */
        class GradientAlphaKey extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Alpha channel of key.
            */
            public alpha : number
            /** Time of the key (0 - 1).
            */
            public time : number
            public constructor ($alpha: number, $time: number)
            public constructor ()
        }
        /** Select how gradients will be evaluated.
        */
        enum GradientMode
        { Blend = 0, Fixed = 1 }
        /** This struct contains the view space coordinates of the near projection plane.
        */
        class FrustumPlanes extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Position in view space of the left side of the near projection plane.
            */
            public left : number
            /** Position in view space of the right side of the near projection plane.
            */
            public right : number
            /** Position in view space of the bottom side of the near projection plane.
            */
            public bottom : number
            /** Position in view space of the top side of the near projection plane.
            */
            public top : number
            /** Z distance from the origin of view space to the near projection plane.
            */
            public zNear : number
            /** Z distance from the origin of view space to the far projection plane.
            */
            public zFar : number
        }
        /** A collection of common math functions.
        */
        class Mathf extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The well-known 3.14159265358979... value (Read Only).
            */
            public static PI : number
            /** A representation of positive infinity (Read Only).
            */
            public static Infinity : number
            /** A representation of negative infinity (Read Only).
            */
            public static NegativeInfinity : number
            /** Degrees-to-radians conversion constant (Read Only).
            */
            public static Deg2Rad : number
            /** Radians-to-degrees conversion constant (Read Only).
            */
            public static Rad2Deg : number
            /** A tiny floating point value (Read Only).
            */
            public static Epsilon : number
            /** Returns the closest power of two value.
            */
            public static ClosestPowerOfTwo ($value: number) : number
            /** Returns true if the value is power of two.
            */
            public static IsPowerOfTwo ($value: number) : boolean
            /** Returns the next power of two that is equal to, or greater than, the argument.
            */
            public static NextPowerOfTwo ($value: number) : number
            /** Converts the given value from gamma (sRGB) to linear color space.
            */
            public static GammaToLinearSpace ($value: number) : number
            /** Converts the given value from linear to gamma (sRGB) color space.
            */
            public static LinearToGammaSpace ($value: number) : number
            /** Convert a color temperature in Kelvin to RGB color.
            * @param kelvin Temperature in Kelvin. Range 1000 to 40000 Kelvin.
            * @returns Correlated Color Temperature as floating point RGB color. 
            */
            public static CorrelatedColorTemperatureToRGB ($kelvin: number) : UnityEngine.Color
            public static FloatToHalf ($val: number) : number
            public static HalfToFloat ($val: number) : number
            /** Generate 2D Perlin noise.
            * @param x X-coordinate of sample point.
            * @param y Y-coordinate of sample point.
            * @returns Value between 0.0 and 1.0. (Return value might be slightly below 0.0 or beyond 1.0.) 
            */
            public static PerlinNoise ($x: number, $y: number) : number
            /** Returns the sine of angle f.
            * @param f The input angle, in radians.
            * @returns The return value between -1 and +1. 
            */
            public static Sin ($f: number) : number
            /** Returns the cosine of angle f.
            * @param f The input angle, in radians.
            * @returns The return value between -1 and 1. 
            */
            public static Cos ($f: number) : number
            /** Returns the tangent of angle f in radians.
            */
            public static Tan ($f: number) : number
            /** Returns the arc-sine of f - the angle in radians whose sine is f.
            */
            public static Asin ($f: number) : number
            /** Returns the arc-cosine of f - the angle in radians whose cosine is f.
            */
            public static Acos ($f: number) : number
            /** Returns the arc-tangent of f - the angle in radians whose tangent is f.
            */
            public static Atan ($f: number) : number
            /** Returns the angle in radians whose Tan is y/x.
            */
            public static Atan2 ($y: number, $x: number) : number
            /** Returns square root of f.
            */
            public static Sqrt ($f: number) : number
            /** Returns the absolute value of f.
            */
            public static Abs ($f: number) : number
            /** Returns the absolute value of value.
            */
            public static Abs ($value: number) : number
            /** Returns the smallest of two or more values.
            */
            public static Min ($a: number, $b: number) : number
            /** Returns the smallest of two or more values.
            */
            public static Min (...values: number[]) : number
            /** Returns largest of two or more values.
            */
            public static Max ($a: number, $b: number) : number
            /** Returns largest of two or more values.
            */
            public static Max (...values: number[]) : number
            /** Returns f raised to power p.
            */
            public static Pow ($f: number, $p: number) : number
            /** Returns e raised to the specified power.
            */
            public static Exp ($power: number) : number
            /** Returns the logarithm of a specified number in a specified base.
            */
            public static Log ($f: number, $p: number) : number
            /** Returns the natural (base e) logarithm of a specified number.
            */
            public static Log ($f: number) : number
            /** Returns the base 10 logarithm of a specified number.
            */
            public static Log10 ($f: number) : number
            /** Returns the smallest integer greater to or equal to f.
            */
            public static Ceil ($f: number) : number
            /** Returns the largest integer smaller than or equal to f.
            */
            public static Floor ($f: number) : number
            /** Returns f rounded to the nearest integer.
            */
            public static Round ($f: number) : number
            /** Returns the smallest integer greater to or equal to f.
            */
            public static CeilToInt ($f: number) : number
            /** Returns the largest integer smaller to or equal to f.
            */
            public static FloorToInt ($f: number) : number
            /** Returns f rounded to the nearest integer.
            */
            public static RoundToInt ($f: number) : number
            /** Returns the sign of f.
            */
            public static Sign ($f: number) : number
            /** Clamps the given value between the given minimum float and maximum float values.  Returns the given value if it is within the min and max range.
            * @param value The floating point value to restrict inside the range defined by the min and max values.
            * @param min The minimum floating point value to compare against.
            * @param max The maximum floating point value to compare against.
            * @returns The float result between the min and max values. 
            */
            public static Clamp ($value: number, $min: number, $max: number) : number
            /** Clamps value between 0 and 1 and returns value.
            */
            public static Clamp01 ($value: number) : number
            /** Linearly interpolates between a and b by t.
            * @param a The start value.
            * @param b The end value.
            * @param t The interpolation value between the two floats.
            * @returns The interpolated float result between the two float values. 
            */
            public static Lerp ($a: number, $b: number, $t: number) : number
            /** Linearly interpolates between a and b by t with no limit to t.
            * @param a The start value.
            * @param b The end value.
            * @param t The interpolation between the two floats.
            * @returns The float value as a result from the linear interpolation. 
            */
            public static LerpUnclamped ($a: number, $b: number, $t: number) : number
            /** Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.
            */
            public static LerpAngle ($a: number, $b: number, $t: number) : number
            /** Moves a value current towards target.
            * @param current The current value.
            * @param target The value to move towards.
            * @param maxDelta The maximum change that should be applied to the value.
            */
            public static MoveTowards ($current: number, $target: number, $maxDelta: number) : number
            /** Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.
            */
            public static MoveTowardsAngle ($current: number, $target: number, $maxDelta: number) : number
            /** Interpolates between min and max with smoothing at the limits.
            */
            public static SmoothStep ($from: number, $to: number, $t: number) : number
            public static Gamma ($value: number, $absmax: number, $gamma: number) : number
            /** Compares two floating point values and returns true if they are similar.
            */
            public static Approximately ($a: number, $b: number) : boolean
            /** Gradually changes a value towards a desired goal over time.
            * @param current The current position.
            * @param target The position we are trying to reach.
            * @param currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param maxSpeed Optionally allows you to clamp the maximum speed.
            * @param deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number, $maxSpeed: number) : number
            /** Gradually changes a value towards a desired goal over time.
            * @param current The current position.
            * @param target The position we are trying to reach.
            * @param currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param maxSpeed Optionally allows you to clamp the maximum speed.
            * @param deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number) : number
            /** Gradually changes a value towards a desired goal over time.
            * @param current The current position.
            * @param target The position we are trying to reach.
            * @param currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param maxSpeed Optionally allows you to clamp the maximum speed.
            * @param deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number, $maxSpeed: number, $deltaTime: number) : number
            /** Gradually changes an angle given in degrees towards a desired goal angle over time.
            * @param current The current position.
            * @param target The position we are trying to reach.
            * @param currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param maxSpeed Optionally allows you to clamp the maximum speed.
            * @param deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDampAngle ($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number, $maxSpeed: number) : number
            /** Gradually changes an angle given in degrees towards a desired goal angle over time.
            * @param current The current position.
            * @param target The position we are trying to reach.
            * @param currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param maxSpeed Optionally allows you to clamp the maximum speed.
            * @param deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDampAngle ($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number) : number
            /** Gradually changes an angle given in degrees towards a desired goal angle over time.
            * @param current The current position.
            * @param target The position we are trying to reach.
            * @param currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param maxSpeed Optionally allows you to clamp the maximum speed.
            * @param deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDampAngle ($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number, $maxSpeed: number, $deltaTime: number) : number
            /** Loops the value t, so that it is never larger than length and never smaller than 0.
            */
            public static Repeat ($t: number, $length: number) : number
            /** PingPongs the value t, so that it is never larger than length and never smaller than 0.
            */
            public static PingPong ($t: number, $length: number) : number
            /** Calculates the linear parameter t that produces the interpolant value within the range [a, b].
            * @param a Start value.
            * @param b End value.
            * @param value Value between start and end.
            * @returns Percentage of value between start and end. 
            */
            public static InverseLerp ($a: number, $b: number, $value: number) : number
            /** Calculates the shortest difference between two given angles given in degrees.
            */
            public static DeltaAngle ($current: number, $target: number) : number
        }
        /** Option for who will receive an RPC, used by NetworkView.RPC.
        */
        enum RPCMode
        {  }
        /** The various test results the connection tester may return with.
        */
        enum ConnectionTesterStatus
        {  }
        /** Possible status messages returned by Network.Connect and in MonoBehaviour.OnFailedToConnect|OnFailedToConnect in case the error was not immediate.
        */
        enum NetworkConnectionError
        {  }
        /** The reason a disconnect event occured, like in MonoBehaviour.OnDisconnectedFromServer|OnDisconnectedFromServer.
        */
        enum NetworkDisconnection
        {  }
        /** Describes status messages from the master server as returned in MonoBehaviour.OnMasterServerEvent|OnMasterServerEvent.
        */
        enum MasterServerEvent
        {  }
        /** Different types of synchronization for the NetworkView component.
        */
        enum NetworkStateSynchronization
        {  }
        /** Describes the status of the network interface peer type as returned by Network.peerType.
        */
        enum NetworkPeerType
        {  }
        /** Describes different levels of log information the network layer supports.
        */
        enum NetworkLogLevel
        {  }
        /** The NetworkPlayer is a data structure with which you can locate another player over the network.
        */
        class NetworkPlayer extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** The NetworkViewID is a unique identifier for a network view instance in a multiplayer game.
        */
        class NetworkViewID extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** The network view is the binding material of multiplayer games.
        */
        class NetworkView extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** The network class is at the heart of the network implementation and provides the core functions.
        */
        class Network extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** This is the data structure for holding individual host information.
        */
        class HostData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** The BitStream class represents seralized variables, packed into a stream.
        */
        class BitStream extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Attribute for setting up RPC functions.
        */
        class RPC extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** The Master Server is used to make matchmaking between servers and clients easy.
        */
        class MasterServer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** This data structure contains information on a message just received from the network.
        */
        class NetworkMessageInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** Ping any given IP address (given in dot notation).
        */
        class Ping extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Has the ping function completed?
            */
            public get isDone(): boolean;
            /** This property contains the ping time result after isDone returns true.
            */
            public get time(): number;
            /** The IP target of the ping.
            */
            public get ip(): string;
            public DestroyPing () : void
            public constructor ($address: string)
            public constructor ()
        }
        /** An exception thrown by the PlayerPrefs class in a  web player build.
        */
        class PlayerPrefsException extends System.Exception implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($error: string)
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        /** Stores and accesses player preferences between game sessions.
        */
        class PlayerPrefs extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Sets the value of the preference identified by key.
            */
            public static SetInt ($key: string, $value: number) : void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetInt ($key: string, $defaultValue: number) : number
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetInt ($key: string) : number
            /** Sets the value of the preference identified by key.
            */
            public static SetFloat ($key: string, $value: number) : void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetFloat ($key: string, $defaultValue: number) : number
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetFloat ($key: string) : number
            /** Sets the value of the preference identified by key.
            */
            public static SetString ($key: string, $value: string) : void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetString ($key: string, $defaultValue: string) : string
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetString ($key: string) : string
            /** Returns true if key exists in the preferences.
            */
            public static HasKey ($key: string) : boolean
            /** Removes key and its corresponding value from the preferences.
            */
            public static DeleteKey ($key: string) : void
            public static DeleteAll () : void
            public static Save () : void
            public constructor ()
        }
        /** Base class to derive custom property attributes from. Use this to create custom attributes for script variables.
        */
        class PropertyAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Optional field to specify the order that multiple DecorationDrawers should be drawn in.
            */
            public get order(): number;
            public set order(value: number);
        }
        /** Use this attribute to add a context menu to a field that calls a  named method.
        */
        class ContextMenuItemAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The name of the context menu item.
            */
            public name : string
            /** The name of the function that should be called.
            */
            public function : string
            public constructor ($name: string, $function: string)
            public constructor ()
        }
        /** Use this attribute on enum value declarations to change the display name shown in the Inspector.
        */
        class InspectorNameAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Name to display in the Inspector.
            */
            public displayName : string
            public constructor ($displayName: string)
            public constructor ()
        }
        /** Specify a tooltip for a field in the Inspector window.
        */
        class TooltipAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The tooltip text.
            */
            public tooltip : string
            public constructor ($tooltip: string)
            public constructor ()
        }
        /** Use this PropertyAttribute to add some spacing in the Inspector.
        */
        class SpaceAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The spacing in pixels.
            */
            public height : number
            public constructor ()
            public constructor ($height: number)
        }
        /** Use this PropertyAttribute to add a header above some fields in the Inspector.
        */
        class HeaderAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The header text.
            */
            public header : string
            public constructor ($header: string)
            public constructor ()
        }
        /** Attribute used to make a float or int variable in a script be restricted to a specific range.
        */
        class RangeAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public min : number
            public max : number
            public constructor ($min: number, $max: number)
            public constructor ()
        }
        /** Attribute used to make a float or int variable in a script be restricted to a specific minimum value.
        */
        class MinAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The minimum allowed value.
            */
            public min : number
            public constructor ($min: number)
            public constructor ()
        }
        /** Attribute to make a string be edited with a multi-line textfield.
        */
        class MultilineAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public lines : number
            public constructor ()
            public constructor ($lines: number)
        }
        /** Attribute to make a string be edited with a height-flexible and scrollable text area.
        */
        class TextAreaAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The minimum amount of lines the text area will use.
            */
            public minLines : number
            /** The maximum amount of lines the text area can show before it starts using a scrollbar.
            */
            public maxLines : number
            public constructor ()
            public constructor ($minLines: number, $maxLines: number)
        }
        /** Attribute used to configure the usage of the ColorField and Color Picker for a color.
        */
        class ColorUsageAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** If false then the alpha bar is hidden in the ColorField and the alpha value is not shown in the Color Picker.
            */
            public showAlpha : boolean
            /** If set to true the Color is treated as a HDR color.
            */
            public hdr : boolean
            public constructor ($showAlpha: boolean)
            public constructor ($showAlpha: boolean, $hdr: boolean)
            public constructor ()
        }
        /** Attribute used to configure the usage of the GradientField and Gradient Editor for a gradient.
        */
        class GradientUsageAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** If set to true the Gradient uses HDR colors.
            */
            public hdr : boolean
            public constructor ($hdr: boolean)
            public constructor ()
        }
        /** Attribute used to make a float, int, or string variable in a script be delayed.
        */
        class DelayedAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Class for generating random data.
        */
        class Random extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Gets/Sets the full internal state of the random number generator.
            */
            public static get state(): UnityEngine.Random.State;
            public static set state(value: UnityEngine.Random.State);
            /** Returns a random number between 0.0 [inclusive] and 1.0 [inclusive] (Read Only).
            */
            public static get value(): number;
            /** Returns a random point inside a sphere with radius 1 (Read Only).
            */
            public static get insideUnitSphere(): UnityEngine.Vector3;
            /** Returns a random point inside a circle with radius 1 (Read Only).
            */
            public static get insideUnitCircle(): UnityEngine.Vector2;
            /** Returns a random point on the surface of a sphere with radius 1 (Read Only).
            */
            public static get onUnitSphere(): UnityEngine.Vector3;
            /** Returns a random rotation (Read Only).
            */
            public static get rotation(): UnityEngine.Quaternion;
            /** Returns a random rotation with uniform distribution (Read Only).
            */
            public static get rotationUniform(): UnityEngine.Quaternion;
            /** Initializes the random number generator state with a seed.
            * @param seed Seed used to initialize the random number generator.
            */
            public static InitState ($seed: number) : void
            /** Return a random float number between min [inclusive] and max [inclusive] (Read Only).
            */
            public static Range ($min: number, $max: number) : number
            public static ColorHSV () : UnityEngine.Color
            /** Generates a random color from HSV and alpha ranges.
            * @param hueMin Minimum hue [0..1].
            * @param hueMax Maximum hue [0..1].
            * @param saturationMin Minimum saturation [0..1].
            * @param saturationMax Maximum saturation[0..1].
            * @param valueMin Minimum value [0..1].
            * @param valueMax Maximum value [0..1].
            * @param alphaMin Minimum alpha [0..1].
            * @param alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the input ranges. 
            */
            public static ColorHSV ($hueMin: number, $hueMax: number) : UnityEngine.Color
            /** Generates a random color from HSV and alpha ranges.
            * @param hueMin Minimum hue [0..1].
            * @param hueMax Maximum hue [0..1].
            * @param saturationMin Minimum saturation [0..1].
            * @param saturationMax Maximum saturation[0..1].
            * @param valueMin Minimum value [0..1].
            * @param valueMax Maximum value [0..1].
            * @param alphaMin Minimum alpha [0..1].
            * @param alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the input ranges. 
            */
            public static ColorHSV ($hueMin: number, $hueMax: number, $saturationMin: number, $saturationMax: number) : UnityEngine.Color
            /** Generates a random color from HSV and alpha ranges.
            * @param hueMin Minimum hue [0..1].
            * @param hueMax Maximum hue [0..1].
            * @param saturationMin Minimum saturation [0..1].
            * @param saturationMax Maximum saturation[0..1].
            * @param valueMin Minimum value [0..1].
            * @param valueMax Maximum value [0..1].
            * @param alphaMin Minimum alpha [0..1].
            * @param alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the input ranges. 
            */
            public static ColorHSV ($hueMin: number, $hueMax: number, $saturationMin: number, $saturationMax: number, $valueMin: number, $valueMax: number) : UnityEngine.Color
            /** Generates a random color from HSV and alpha ranges.
            * @param hueMin Minimum hue [0..1].
            * @param hueMax Maximum hue [0..1].
            * @param saturationMin Minimum saturation [0..1].
            * @param saturationMax Maximum saturation[0..1].
            * @param valueMin Minimum value [0..1].
            * @param valueMax Maximum value [0..1].
            * @param alphaMin Minimum alpha [0..1].
            * @param alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the input ranges. 
            */
            public static ColorHSV ($hueMin: number, $hueMax: number, $saturationMin: number, $saturationMax: number, $valueMin: number, $valueMax: number, $alphaMin: number, $alphaMax: number) : UnityEngine.Color
            public constructor ()
        }
        /** Asynchronous load request from the Resources bundle.
        */
        class ResourceRequest extends UnityEngine.AsyncOperation
        {
            protected [__keep_incompatibility]: never;
            /** Asset object being loaded (Read Only).
            */
            public get asset(): UnityEngine.Object;
            public constructor ()
        }
        /** The Resources class allows you to find and access Objects including assets.
        */
        class Resources extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns a list of all objects of Type type.
            */
            public static FindObjectsOfTypeAll ($type: System.Type) : System.Array$1<UnityEngine.Object>
            /** Loads an asset stored at path in a Resources folder.
            * @param path Path to the target resource to load. When using an empty string (i.e., ""), the function loads the entire contents of the Resources folder.
            * @param systemTypeInstance Type filter for objects returned.
            * @returns The requested asset returned as an Object. 
            */
            public static Load ($path: string) : UnityEngine.Object
            /** Loads an asset stored at path in a Resources folder.
            * @param path Path to the target resource to load. When using an empty string (i.e., ""), the function loads the entire contents of the Resources folder.
            * @param systemTypeInstance Type filter for objects returned.
            * @returns The requested asset returned as an Object. 
            */
            public static Load ($path: string, $systemTypeInstance: System.Type) : UnityEngine.Object
            /** Asynchronously loads an asset stored at path in a Resources folder.
            * @param path Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.
            */
            public static LoadAsync ($path: string) : UnityEngine.ResourceRequest
            /** Asynchronously loads an asset stored at path in a Resources folder.
            * @param path Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.
            * @param systemTypeInstance Type filter for objects returned.
            */
            public static LoadAsync ($path: string, $type: System.Type) : UnityEngine.ResourceRequest
            /** Loads all assets in a folder or file at path in a Resources folder.
            * @param path Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.
            * @param systemTypeInstance Type filter for objects returned.
            */
            public static LoadAll ($path: string, $systemTypeInstance: System.Type) : System.Array$1<UnityEngine.Object>
            /** Loads all assets in a folder or file at path in a Resources folder.
            * @param path Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.
            */
            public static LoadAll ($path: string) : System.Array$1<UnityEngine.Object>
            public static GetBuiltinResource ($type: System.Type, $path: string) : UnityEngine.Object
            /** Unloads assetToUnload from memory.
            */
            public static UnloadAsset ($assetToUnload: UnityEngine.Object) : void
            public static UnloadUnusedAssets () : UnityEngine.AsyncOperation
            public constructor ()
        }
        /** Prevents MonoBehaviour of same type (or subtype) to be added more than once to a GameObject.
        */
        class DisallowMultipleComponent extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** The RequireComponent attribute automatically adds required components as dependencies.
        */
        class RequireComponent extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public m_Type0 : System.Type
            public m_Type1 : System.Type
            public m_Type2 : System.Type
            public constructor ($requiredComponent: System.Type)
            public constructor ($requiredComponent: System.Type, $requiredComponent2: System.Type)
            public constructor ($requiredComponent: System.Type, $requiredComponent2: System.Type, $requiredComponent3: System.Type)
            public constructor ()
        }
        /** The AddComponentMenu attribute allows you to place a script anywhere in the "Component" menu, instead of just the "Component->Scripts" menu.
        */
        class AddComponentMenu extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get componentMenu(): string;
            /** The order of the component in the component menu (lower is higher to the top).
            */
            public get componentOrder(): number;
            public constructor ($menuName: string)
            public constructor ($menuName: string, $order: number)
            public constructor ()
        }
        /** Mark a ScriptableObject-derived type to be automatically listed in the Assets/Create submenu, so that instances of the type can be easily created and stored in the project as ".asset" files.
        */
        class CreateAssetMenuAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The display name for this type shown in the Assets/Create menu.
            */
            public get menuName(): string;
            public set menuName(value: string);
            /** The default file name used by newly created instances of this type.
            */
            public get fileName(): string;
            public set fileName(value: string);
            /** The position of the menu item within the Assets/Create menu.
            */
            public get order(): number;
            public set order(value: number);
            public constructor ()
        }
        /** The ContextMenu attribute allows you to add commands to the context menu.
        */
        class ContextMenu extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public menuItem : string
            public validate : boolean
            public priority : number
            public constructor ($itemName: string)
            public constructor ($itemName: string, $isValidateFunction: boolean)
            public constructor ($itemName: string, $isValidateFunction: boolean, $priority: number)
            public constructor ()
        }
        /** Makes all instances of a script execute in Edit Mode.
        */
        class ExecuteInEditMode extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Makes instances of a script always execute, both as part of Play Mode and when editing.
        */
        class ExecuteAlways extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Makes a variable not show up in the inspector but be serialized.
        */
        class HideInInspector extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Provide a custom documentation URL for a class.
        */
        class HelpURLAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The documentation URL specified for this class.
            */
            public get URL(): string;
            public constructor ($url: string)
            public constructor ()
        }
        class DefaultExecutionOrder extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get order(): number;
            public constructor ($order: number)
            public constructor ()
        }
        /** Assembly level attribute. Any classes in an assembly with this attribute will be considered to be Editor Classes.
        */
        class AssemblyIsEditorAssembly extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Add this attribute to a class to prevent creating a Preset from the instances of the class.
        */
        class ExcludeFromPresetAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** MonoBehaviour.StartCoroutine returns a Coroutine. Instances of this class are only used to reference these coroutines, and do not hold any exposed properties or functions.
        */
        class Coroutine extends UnityEngine.YieldInstruction
        {
            protected [__keep_incompatibility]: never;
        }
        /** Base class for custom yield instructions to suspend coroutines.
        */
        class CustomYieldInstruction extends System.Object implements System.Collections.IEnumerator
        {
            protected [__keep_incompatibility]: never;
            /** Indicates if coroutine should be kept suspended.
            */
            public get keepWaiting(): boolean;
            public get Current(): any;
            public MoveNext () : boolean
            public Reset () : void
        }
        /** Add this attribute to a class to prevent the class and its inherited classes from being created with ObjectFactory methods.
        */
        class ExcludeFromObjectFactoryAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Specifies Layers to use in a Physics.Raycast.
        */
        class LayerMask extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Converts a layer mask value to an integer value.
            */
            public get value(): number;
            public set value(value: number);
            public static op_Implicit ($mask: UnityEngine.LayerMask) : number
            public static op_Implicit ($intVal: number) : UnityEngine.LayerMask
            /** Given a layer number, returns the name of the layer as defined in either a Builtin or a User Layer in the.
            */
            public static LayerToName ($layer: number) : string
            /** Given a layer name, returns the layer index as defined by either a Builtin or a User Layer in the.
            */
            public static NameToLayer ($layerName: string) : number
            /** Given a set of layer names as defined by either a Builtin or a User Layer in the, returns the equivalent layer mask for all of them.
            * @param layerNames List of layer names to convert to a layer mask.
            * @returns The layer mask created from the layerNames. 
            */
            public static GetMask (...layerNames: string[]) : number
        }
        /** MonoBehaviour is the base class from which every Unity script derives.
        */
        class MonoBehaviour extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Disabling this lets you skip the GUI layout phase.
            */
            public get useGUILayout(): boolean;
            public set useGUILayout(value: boolean);
            /** Allow a specific instance of a MonoBehaviour to run in edit mode (only available in the editor).
            */
            public get runInEditMode(): boolean;
            public set runInEditMode(value: boolean);
            public IsInvoking () : boolean
            public CancelInvoke () : void
            /** Invokes the method methodName in time seconds.
            */
            public Invoke ($methodName: string, $time: number) : void
            /** Invokes the method methodName in time seconds, then repeatedly every repeatRate seconds.
            */
            public InvokeRepeating ($methodName: string, $time: number, $repeatRate: number) : void
            /** Cancels all Invoke calls with name methodName on this behaviour.
            */
            public CancelInvoke ($methodName: string) : void
            /** Is any invoke on methodName pending?
            */
            public IsInvoking ($methodName: string) : boolean
            /** Starts a coroutine named methodName.
            */
            public StartCoroutine ($methodName: string) : UnityEngine.Coroutine
            /** Starts a coroutine named methodName.
            */
            public StartCoroutine ($methodName: string, $value: any) : UnityEngine.Coroutine
            /** Starts a Coroutine.
            */
            public StartCoroutine ($routine: System.Collections.IEnumerator) : UnityEngine.Coroutine
            /** Stops the first coroutine named methodName, or the coroutine stored in routine running on this behaviour.
            * @param methodName Name of coroutine.
            * @param routine Name of the function in code, including coroutines.
            */
            public StopCoroutine ($routine: System.Collections.IEnumerator) : void
            /** Stops the first coroutine named methodName, or the coroutine stored in routine running on this behaviour.
            * @param methodName Name of coroutine.
            * @param routine Name of the function in code, including coroutines.
            */
            public StopCoroutine ($routine: UnityEngine.Coroutine) : void
            /** Stops the first coroutine named methodName, or the coroutine stored in routine running on this behaviour.
            * @param methodName Name of coroutine.
            * @param routine Name of the function in code, including coroutines.
            */
            public StopCoroutine ($methodName: string) : void
            public StopAllCoroutines () : void
            /** Logs message to the Unity Console (identical to Debug.Log).
            */
            public static print ($message: any) : void
            public constructor ()
        }
        /** Describes an integer range.
        */
        class RangeInt extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The starting index of the range, where 0 is the first position, 1 is the second, 2 is the third, and so on.
            */
            public start : number
            /** The length of the range.
            */
            public length : number
            /** The end index of the range (not inclusive).
            */
            public get end(): number;
            public constructor ($start: number, $length: number)
            public constructor ()
        }
        /** Set RuntimeInitializeOnLoadMethod type.
        */
        enum RuntimeInitializeLoadType
        { AfterSceneLoad = 0, BeforeSceneLoad = 1, AfterAssembliesLoaded = 2, BeforeSplashScreen = 3, SubsystemRegistration = 4 }
        /** Allow a runtime class method to be initialized when a game is loaded at runtime
        without action from the user.
        */
        class RuntimeInitializeOnLoadMethodAttribute extends UnityEngine.Scripting.PreserveAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Set RuntimeInitializeOnLoadMethod type.
            */
            public get loadType(): UnityEngine.RuntimeInitializeLoadType;
            public constructor ()
            public constructor ($loadType: UnityEngine.RuntimeInitializeLoadType)
        }
        /** Add this attribute to a script class to mark its GameObject as a selection base object for Scene View picking.
        */
        class SelectionBaseAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class StackTraceUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static ExtractStackTrace () : string
            public static ExtractStringFromException ($exception: any) : string
        }
        class UnityException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class MissingComponentException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class UnassignedReferenceException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class MissingReferenceException extends System.SystemException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        /** Text file assets.
        */
        class TextAsset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The text contents of the .txt file as a string. (Read Only)
            */
            public get text(): string;
            /** The raw bytes of the text asset. (Read Only)
            */
            public get bytes(): System.Array$1<number>;
            public constructor ()
            public constructor ($text: string)
        }
        /** Declares an assembly to be compatible (API wise) with a specific Unity API. Used by internal tools to avoid processing the assembly in order to decide whether assemblies may be using old Unity API.
        */
        class UnityAPICompatibilityVersionAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Version of Unity API.
            */
            public get version(): string;
            public constructor ($version: string, $checkOnlyUnityVersion: boolean)
            public constructor ($version: string, $configurationAssembliesHashes: System.Array$1<string>)
            public constructor ()
        }
        /** Bit mask that controls object destruction, saving and visibility in inspectors.
        */
        enum HideFlags
        { None = 0, HideInHierarchy = 1, HideInInspector = 2, DontSaveInEditor = 4, NotEditable = 8, DontSaveInBuild = 16, DontUnloadUnusedAsset = 32, DontSave = 52, HideAndDontSave = 61 }
        /** Waits until the end of the frame after Unity has rendererd every Camera and GUI, just before displaying the frame on screen.
        */
        class WaitForEndOfFrame extends UnityEngine.YieldInstruction
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Waits until next fixed frame rate update function. See Also: MonoBehaviour.FixedUpdate.
        */
        class WaitForFixedUpdate extends UnityEngine.YieldInstruction
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Suspends the coroutine execution for the given amount of seconds using scaled time.
        */
        class WaitForSeconds extends UnityEngine.YieldInstruction
        {
            protected [__keep_incompatibility]: never;
            public constructor ($seconds: number)
            public constructor ()
        }
        /** Suspends the coroutine execution for the given amount of seconds using unscaled time.
        */
        class WaitForSecondsRealtime extends UnityEngine.CustomYieldInstruction implements System.Collections.IEnumerator
        {
            protected [__keep_incompatibility]: never;
            /** The given amount of seconds that the yield instruction will wait for.
            */
            public get waitTime(): number;
            public set waitTime(value: number);
            public get keepWaiting(): boolean;
            public constructor ($time: number)
            public constructor ()
        }
        /** Suspends the coroutine execution until the supplied delegate evaluates to true.
        */
        class WaitUntil extends UnityEngine.CustomYieldInstruction implements System.Collections.IEnumerator
        {
            protected [__keep_incompatibility]: never;
            public get keepWaiting(): boolean;
            public constructor ($predicate: System.Func$1<boolean>)
            public constructor ()
        }
        /** Suspends the coroutine execution until the supplied delegate evaluates to false.
        */
        class WaitWhile extends UnityEngine.CustomYieldInstruction implements System.Collections.IEnumerator
        {
            protected [__keep_incompatibility]: never;
            public get keepWaiting(): boolean;
            public constructor ($predicate: System.Func$1<boolean>)
            public constructor ()
        }
        /** Webplayer security related class. Not supported from 5.4.0 onwards.
        */
        class Security extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class Types extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class SerializePrivateVariables extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Force Unity to serialize a private field.
        */
        class SerializeField extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Instruct Unity to serialize a field as a reference.
        */
        class SerializeReference extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Prefer ScriptableObject derived type to use binary serialization regardless of project's asset serialization mode.
        */
        class PreferBinarySerialization extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        interface ISerializationCallbackReceiver
        {
            OnBeforeSerialize () : void
            OnAfterDeserialize () : void
        }
        /** ShaderVariantCollection records which shader variants are actually used in each shader.
        */
        class ShaderVariantCollection extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Number of shaders in this collection (Read Only).
            */
            public get shaderCount(): number;
            /** Number of total varians in this collection (Read Only).
            */
            public get variantCount(): number;
            /** Is this ShaderVariantCollection already warmed up? (Read Only)
            */
            public get isWarmedUp(): boolean;
            public Clear () : void
            public WarmUp () : void
            public Add ($variant: UnityEngine.ShaderVariantCollection.ShaderVariant) : boolean
            public Remove ($variant: UnityEngine.ShaderVariantCollection.ShaderVariant) : boolean
            public Contains ($variant: UnityEngine.ShaderVariantCollection.ShaderVariant) : boolean
            public constructor ()
        }
        /** Compute Shader asset.
        */
        class ComputeShader extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Find ComputeShader kernel index.
            * @param name Name of kernel function.
            * @returns The Kernel index, or logs a "FindKernel failed" error message if the kernel is not found. 
            */
            public FindKernel ($name: string) : number
            /** Checks whether a shader contains a given kernel.
            * @param name The name of the kernel to look for.
            * @returns True if the kernel is found, false otherwise. 
            */
            public HasKernel ($name: string) : boolean
            /** Set a float parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param val Value to set.
            */
            public SetFloat ($nameID: number, $val: number) : void
            /** Set an integer parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param val Value to set.
            */
            public SetInt ($nameID: number, $val: number) : void
            /** Set a vector parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param val Value to set.
            */
            public SetVector ($nameID: number, $val: UnityEngine.Vector4) : void
            /** Set a Matrix parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param val Value to set.
            */
            public SetMatrix ($nameID: number, $val: UnityEngine.Matrix4x4) : void
            /** Set a vector array parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param values Value to set.
            */
            public SetVectorArray ($nameID: number, $values: System.Array$1<UnityEngine.Vector4>) : void
            /** Set a Matrix array parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param values Value to set.
            */
            public SetMatrixArray ($nameID: number, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Set a texture parameter.
            * @param kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Name of the buffer variable in shader code.
            * @param texture Texture to set.
            * @param mipLevel Optional mipmap level of the read-write texture.
            * @param element Optional sub element that specifies the type of data from the render texture to set.
            */
            public SetTexture ($kernelIndex: number, $nameID: number, $texture: UnityEngine.Texture, $mipLevel: number) : void
            /** Set a texture parameter from a global texture property.
            * @param kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Name of the buffer variable in shader code.
            * @param globalTextureName Global texture property to assign to shader.
            * @param globalTextureNameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetTextureFromGlobal ($kernelIndex: number, $nameID: number, $globalTextureNameID: number) : void
            /** Sets an input or output compute buffer.
            * @param kernelIndex For which kernel the buffer is being set. See FindKernel.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Name of the buffer variable in shader code.
            * @param buffer Buffer to set.
            */
            public SetBuffer ($kernelIndex: number, $nameID: number, $buffer: UnityEngine.ComputeBuffer) : void
            /** Get kernel thread group sizes.
            * @param kernelIndex Which kernel to query. A single compute shader asset can have multiple kernel entry points.
            * @param x Thread group size in the X dimension.
            * @param y Thread group size in the Y dimension.
            * @param z Thread group size in the Z dimension.
            */
            public GetKernelThreadGroupSizes ($kernelIndex: number, $x: $Ref<number>, $y: $Ref<number>, $z: $Ref<number>) : void
            /** Execute a compute shader.
            * @param kernelIndex Which kernel to execute. A single compute shader asset can have multiple kernel entry points.
            * @param threadGroupsX Number of work groups in the X dimension.
            * @param threadGroupsY Number of work groups in the Y dimension.
            * @param threadGroupsZ Number of work groups in the Z dimension.
            */
            public Dispatch ($kernelIndex: number, $threadGroupsX: number, $threadGroupsY: number, $threadGroupsZ: number) : void
            /** Set a float parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param val Value to set.
            */
            public SetFloat ($name: string, $val: number) : void
            /** Set an integer parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param val Value to set.
            */
            public SetInt ($name: string, $val: number) : void
            /** Set a vector parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param val Value to set.
            */
            public SetVector ($name: string, $val: UnityEngine.Vector4) : void
            /** Set a Matrix parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param val Value to set.
            */
            public SetMatrix ($name: string, $val: UnityEngine.Matrix4x4) : void
            /** Set a vector array parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param values Value to set.
            */
            public SetVectorArray ($name: string, $values: System.Array$1<UnityEngine.Vector4>) : void
            /** Set a Matrix array parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param values Value to set.
            */
            public SetMatrixArray ($name: string, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Set multiple consecutive float parameters at once.
            * @param name Array variable name in the shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param values Value array to set.
            */
            public SetFloats ($name: string, ...values: number[]) : void
            /** Set multiple consecutive float parameters at once.
            * @param name Array variable name in the shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param values Value array to set.
            */
            public SetFloats ($nameID: number, ...values: number[]) : void
            /** Set multiple consecutive integer parameters at once.
            * @param name Array variable name in the shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param values Value array to set.
            */
            public SetInts ($name: string, ...values: number[]) : void
            /** Set multiple consecutive integer parameters at once.
            * @param name Array variable name in the shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param values Value array to set.
            */
            public SetInts ($nameID: number, ...values: number[]) : void
            /** Set a bool parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param val Value to set.
            */
            public SetBool ($name: string, $val: boolean) : void
            /** Set a bool parameter.
            * @param name Variable name in shader code.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param val Value to set.
            */
            public SetBool ($nameID: number, $val: boolean) : void
            /** Set a texture parameter.
            * @param kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Name of the buffer variable in shader code.
            * @param texture Texture to set.
            * @param mipLevel Optional mipmap level of the read-write texture.
            * @param element Optional sub element that specifies the type of data from the render texture to set.
            */
            public SetTexture ($kernelIndex: number, $nameID: number, $texture: UnityEngine.Texture) : void
            /** Set a texture parameter.
            * @param kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Name of the buffer variable in shader code.
            * @param texture Texture to set.
            * @param mipLevel Optional mipmap level of the read-write texture.
            * @param element Optional sub element that specifies the type of data from the render texture to set.
            */
            public SetTexture ($kernelIndex: number, $name: string, $texture: UnityEngine.Texture) : void
            /** Set a texture parameter.
            * @param kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Name of the buffer variable in shader code.
            * @param texture Texture to set.
            * @param mipLevel Optional mipmap level of the read-write texture.
            * @param element Optional sub element that specifies the type of data from the render texture to set.
            */
            public SetTexture ($kernelIndex: number, $name: string, $texture: UnityEngine.Texture, $mipLevel: number) : void
            /** Set a texture parameter.
            * @param kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Name of the buffer variable in shader code.
            * @param texture Texture to set.
            * @param mipLevel Optional mipmap level of the read-write texture.
            * @param element Optional sub element that specifies the type of data from the render texture to set.
            */
            public SetTexture ($kernelIndex: number, $nameID: number, $texture: UnityEngine.RenderTexture, $mipLevel: number, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Set a texture parameter.
            * @param kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Name of the buffer variable in shader code.
            * @param texture Texture to set.
            * @param mipLevel Optional mipmap level of the read-write texture.
            * @param element Optional sub element that specifies the type of data from the render texture to set.
            */
            public SetTexture ($kernelIndex: number, $name: string, $texture: UnityEngine.RenderTexture, $mipLevel: number, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Set a texture parameter from a global texture property.
            * @param kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Name of the buffer variable in shader code.
            * @param globalTextureName Global texture property to assign to shader.
            * @param globalTextureNameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetTextureFromGlobal ($kernelIndex: number, $name: string, $globalTextureName: string) : void
            /** Sets an input or output compute buffer.
            * @param kernelIndex For which kernel the buffer is being set. See FindKernel.
            * @param nameID Property name ID, use Shader.PropertyToID to get it.
            * @param name Name of the buffer variable in shader code.
            * @param buffer Buffer to set.
            */
            public SetBuffer ($kernelIndex: number, $name: string, $buffer: UnityEngine.ComputeBuffer) : void
            /** Execute a compute shader.
            * @param kernelIndex Which kernel to execute. A single compute shader asset can have multiple kernel entry points.
            * @param argsBuffer Buffer with dispatch arguments.
            * @param argsOffset The byte offset into the buffer, where the draw arguments start.
            */
            public DispatchIndirect ($kernelIndex: number, $argsBuffer: UnityEngine.ComputeBuffer, $argsOffset: number) : void
            public DispatchIndirect ($kernelIndex: number, $argsBuffer: UnityEngine.ComputeBuffer) : void
        }
        /** Defines the axes that can be snapped.
        */
        enum SnapAxis
        { None = 0, X = 1, Y = 2, Z = 4, All = 7 }
        /** Snap values to rounded increments.
        */
        class Snapping extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Rounds value to the closest multiple of snap.
            * @param val The value to round.
            * @param snap The increment to round to.
            * @returns The rounded value. 
            */
            public static Snap ($val: number, $snap: number) : number
            /** Rounds value to the closest multiple of snap.
            * @param val The value to round.
            * @param snap The increment to round to.
            * @returns The rounded value. 
            */
            public static Snap ($val: UnityEngine.Vector2, $snap: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Rounds value to the closest multiple of snap.
            * @param val The value to round.
            * @param snap The increment to round to.
            * @param axis Restrict snapping to the components on these axes.
            * @returns The rounded value. 
            */
            public static Snap ($val: UnityEngine.Vector3, $snap: UnityEngine.Vector3, $axis?: UnityEngine.SnapAxis) : UnityEngine.Vector3
        }
        /** StaticBatchingUtility can prepare your objects to take advantage of Unity's static batching.
        */
        class StaticBatchingUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** StaticBatchingUtility.Combine prepares all children of the staticBatchRoot for static batching.
            * @param staticBatchRoot The GameObject that should become the root of the combined batch.
            */
            public static Combine ($staticBatchRoot: UnityEngine.GameObject) : void
            /** StaticBatchingUtility.Combine prepares all GameObjects contained in gos for static batching. staticBatchRoot is treated as their parent.
            * @param gos The GameObjects to prepare for static batching.
            * @param staticBatchRoot The GameObject that should become the root of the combined batch.
            */
            public static Combine ($gos: System.Array$1<UnityEngine.GameObject>, $staticBatchRoot: UnityEngine.GameObject) : void
            public constructor ()
        }
        /** Enumeration for SystemInfo.batteryStatus which represents the current status of the device's battery.
        */
        enum BatteryStatus
        { Unknown = 0, Charging = 1, Discharging = 2, NotCharging = 3, Full = 4 }
        /** Enumeration for SystemInfo.operatingSystemFamily.
        */
        enum OperatingSystemFamily
        { Other = 0, MacOSX = 1, Windows = 2, Linux = 3 }
        /** Enumeration for SystemInfo.deviceType, denotes a coarse grouping of kinds of devices.
        */
        enum DeviceType
        { Unknown = 0, Handheld = 1, Console = 2, Desktop = 3 }
        /** Access system and hardware information.
        */
        class SystemInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Value returned by SystemInfo string properties which are not supported on the current platform.
            */
            public static unsupportedIdentifier : string
            /** The current battery level (Read Only).
            */
            public static get batteryLevel(): number;
            /** Returns the current status of the device's battery (Read Only).
            */
            public static get batteryStatus(): UnityEngine.BatteryStatus;
            /** Operating system name with version (Read Only).
            */
            public static get operatingSystem(): string;
            /** Returns the operating system family the game is running on (Read Only).
            */
            public static get operatingSystemFamily(): UnityEngine.OperatingSystemFamily;
            /** Processor name (Read Only).
            */
            public static get processorType(): string;
            /** Processor frequency in MHz (Read Only).
            */
            public static get processorFrequency(): number;
            /** Number of processors present (Read Only).
            */
            public static get processorCount(): number;
            /** Amount of system memory present (Read Only).
            */
            public static get systemMemorySize(): number;
            /** A unique device identifier. It is guaranteed to be unique for every device (Read Only).
            */
            public static get deviceUniqueIdentifier(): string;
            /** The user defined name of the device (Read Only).
            */
            public static get deviceName(): string;
            /** The model of the device (Read Only).
            */
            public static get deviceModel(): string;
            /** Is an accelerometer available on the device?
            */
            public static get supportsAccelerometer(): boolean;
            /** Is a gyroscope available on the device?
            */
            public static get supportsGyroscope(): boolean;
            /** Is the device capable of reporting its location?
            */
            public static get supportsLocationService(): boolean;
            /** Is the device capable of providing the user haptic feedback by vibration?
            */
            public static get supportsVibration(): boolean;
            /** Is there an Audio device available for playback? (Read Only)
            */
            public static get supportsAudio(): boolean;
            /** Returns the kind of device the application is running on (Read Only).
            */
            public static get deviceType(): UnityEngine.DeviceType;
            /** Amount of video memory present (Read Only).
            */
            public static get graphicsMemorySize(): number;
            /** The name of the graphics device (Read Only).
            */
            public static get graphicsDeviceName(): string;
            /** The vendor of the graphics device (Read Only).
            */
            public static get graphicsDeviceVendor(): string;
            /** The identifier code of the graphics device (Read Only).
            */
            public static get graphicsDeviceID(): number;
            /** The identifier code of the graphics device vendor (Read Only).
            */
            public static get graphicsDeviceVendorID(): number;
            /** The graphics API type used by the graphics device (Read Only).
            */
            public static get graphicsDeviceType(): UnityEngine.Rendering.GraphicsDeviceType;
            /** Returns true if the texture UV coordinate convention for this platform has Y starting at the top of the image.
            */
            public static get graphicsUVStartsAtTop(): boolean;
            /** The graphics API type and driver version used by the graphics device (Read Only).
            */
            public static get graphicsDeviceVersion(): string;
            /** Graphics device shader capability level (Read Only).
            */
            public static get graphicsShaderLevel(): number;
            /** Is graphics device using multi-threaded rendering (Read Only)?
            */
            public static get graphicsMultiThreaded(): boolean;
            /** Application's actual rendering threading mode (Read Only).
            */
            public static get renderingThreadingMode(): UnityEngine.Rendering.RenderingThreadingMode;
            /** True if the GPU supports hidden surface removal.
            */
            public static get hasHiddenSurfaceRemovalOnGPU(): boolean;
            /** Returns true when the GPU has native support for indexing uniform arrays in fragment shaders without restrictions.
            */
            public static get hasDynamicUniformArrayIndexingInFragmentShaders(): boolean;
            /** Are built-in shadows supported? (Read Only)
            */
            public static get supportsShadows(): boolean;
            /** Is sampling raw depth from shadowmaps supported? (Read Only)
            */
            public static get supportsRawShadowDepthSampling(): boolean;
            /** Whether motion vectors are supported on this platform.
            */
            public static get supportsMotionVectors(): boolean;
            /** Are 3D (volume) textures supported? (Read Only)
            */
            public static get supports3DTextures(): boolean;
            /** Are 2D Array textures supported? (Read Only)
            */
            public static get supports2DArrayTextures(): boolean;
            /** Are 3D (volume) RenderTextures supported? (Read Only)
            */
            public static get supports3DRenderTextures(): boolean;
            /** Are Cubemap Array textures supported? (Read Only)
            */
            public static get supportsCubemapArrayTextures(): boolean;
            /** Support for various Graphics.CopyTexture cases (Read Only).
            */
            public static get copyTextureSupport(): UnityEngine.Rendering.CopyTextureSupport;
            /** Are compute shaders supported? (Read Only)
            */
            public static get supportsComputeShaders(): boolean;
            /** Are geometry shaders supported? (Read Only)
            */
            public static get supportsGeometryShaders(): boolean;
            /** Are tessellation shaders supported? (Read Only)
            */
            public static get supportsTessellationShaders(): boolean;
            /** Is GPU draw call instancing supported? (Read Only)
            */
            public static get supportsInstancing(): boolean;
            /** Does the hardware support quad topology? (Read Only)
            */
            public static get supportsHardwareQuadTopology(): boolean;
            /** Are 32-bit index buffers supported? (Read Only)
            */
            public static get supports32bitsIndexBuffer(): boolean;
            /** Are sparse textures supported? (Read Only)
            */
            public static get supportsSparseTextures(): boolean;
            /** How many simultaneous render targets (MRTs) are supported? (Read Only)
            */
            public static get supportedRenderTargetCount(): number;
            /** Returns true when the platform supports different blend modes when rendering to multiple render targets, or false otherwise.
            */
            public static get supportsSeparatedRenderTargetsBlend(): boolean;
            /** The maximum number of random write targets (UAV) that Unity supports simultaneously. (Read Only)
            */
            public static get supportedRandomWriteTargetCount(): number;
            /** Are multisampled textures supported? (Read Only)
            */
            public static get supportsMultisampledTextures(): number;
            /** Returns true if multisampled textures are resolved automatically
            */
            public static get supportsMultisampleAutoResolve(): boolean;
            /** Returns true if the 'Mirror Once' texture wrap mode is supported. (Read Only)
            */
            public static get supportsTextureWrapMirrorOnce(): number;
            /** This property is true if the current platform uses a reversed depth buffer (where values range from 1 at the near plane and 0 at far plane), and false if the depth buffer is normal (0 is near, 1 is far). (Read Only)
            */
            public static get usesReversedZBuffer(): boolean;
            /** What NPOT (non-power of two size) texture support does the GPU provide? (Read Only)
            */
            public static get npotSupport(): UnityEngine.NPOTSupport;
            /** Maximum texture size (Read Only).
            */
            public static get maxTextureSize(): number;
            /** Maximum Cubemap texture size (Read Only).
            */
            public static get maxCubemapSize(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a vertex shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsVertex(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a fragment shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsFragment(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a geometry shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsGeometry(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a domain shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsDomain(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a hull shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsHull(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a compute shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsCompute(): number;
            /** The largest total number of invocations in a single local work group that can be dispatched to a compute shader (Read Only).
            */
            public static get maxComputeWorkGroupSize(): number;
            /** The maximum number of work groups that a compute shader can use in X dimension (Read Only).
            */
            public static get maxComputeWorkGroupSizeX(): number;
            /** The maximum number of work groups that a compute shader can use in Y dimension (Read Only).
            */
            public static get maxComputeWorkGroupSizeY(): number;
            /** The maximum number of work groups that a compute shader can use in Z dimension (Read Only).
            */
            public static get maxComputeWorkGroupSizeZ(): number;
            /** Returns true when the platform supports asynchronous compute queues and false if otherwise.
            */
            public static get supportsAsyncCompute(): boolean;
            /** Returns true when the platform supports GraphicsFences, and false if otherwise.
            */
            public static get supportsGraphicsFence(): boolean;
            /** Returns true if asynchronous readback of GPU data is available for this device and false otherwise.
            */
            public static get supportsAsyncGPUReadback(): boolean;
            /** Checks if ray tracing is supported by the current configuration.
            */
            public static get supportsRayTracing(): boolean;
            /** Does the current renderer support binding constant buffers directly? (Read Only)
            */
            public static get supportsSetConstantBuffer(): boolean;
            /** Minimum buffer offset (in bytes) when binding a constant buffer using Shader.SetConstantBuffer or Material.SetConstantBuffer.
            */
            public static get minConstantBufferOffsetAlignment(): boolean;
            /** Returns true if the GPU supports partial mipmap chains (Read Only).
            */
            public static get hasMipMaxLevel(): boolean;
            /** Is streaming of texture mip maps supported? (Read Only)
            */
            public static get supportsMipStreaming(): boolean;
            /** True if the Graphics API takes RenderBufferLoadAction and RenderBufferStoreAction into account, false if otherwise.
            */
            public static get usesLoadStoreActions(): boolean;
            /** Is render texture format supported?
            * @param format The format to look up.
            * @returns True if the format is supported. 
            */
            public static SupportsRenderTextureFormat ($format: UnityEngine.RenderTextureFormat) : boolean
            /** Is blending supported on render texture format?
            * @param format The format to look up.
            * @returns True if blending is supported on the given format. 
            */
            public static SupportsBlendingOnRenderTextureFormat ($format: UnityEngine.RenderTextureFormat) : boolean
            /** Is texture format supported on this device?
            * @param format The TextureFormat format to look up.
            * @returns True if the format is supported. 
            */
            public static SupportsTextureFormat ($format: UnityEngine.TextureFormat) : boolean
            /** Indicates whether the given combination of a vertex attribute format and dimension is supported on this device.
            * @param format The VertexAttributeFormat format to look up.
            * @param dimension The dimension of vertex data to check for.
            * @returns True if the format with the given dimension is supported. 
            */
            public static SupportsVertexAttributeFormat ($format: UnityEngine.Rendering.VertexAttributeFormat, $dimension: number) : boolean
            public static IsFormatSupported ($format: UnityEngine.Experimental.Rendering.GraphicsFormat, $usage: UnityEngine.Experimental.Rendering.FormatUsage) : boolean
            public static GetCompatibleFormat ($format: UnityEngine.Experimental.Rendering.GraphicsFormat, $usage: UnityEngine.Experimental.Rendering.FormatUsage) : UnityEngine.Experimental.Rendering.GraphicsFormat
            /** Returns the platform-specific GraphicsFormat that is associated with the DefaultFormat.
            * @param format The DefaultFormat format to look up.
            */
            public static GetGraphicsFormat ($format: UnityEngine.Experimental.Rendering.DefaultFormat) : UnityEngine.Experimental.Rendering.GraphicsFormat
            public constructor ()
        }
        /** The interface to get time information from Unity.
        */
        class Time extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The time at the beginning of this frame (Read Only). This is the time in seconds since the start of the game.
            */
            public static get time(): number;
            /** The time this frame has started (Read Only). This is the time in seconds since the last level has been loaded.
            */
            public static get timeSinceLevelLoad(): number;
            /** The completion time in seconds since the last frame (Read Only).
            */
            public static get deltaTime(): number;
            /** The time the latest MonoBehaviour.FixedUpdate has started (Read Only). This is the time in seconds since the start of the game.
            */
            public static get fixedTime(): number;
            /** The timeScale-independant time for this frame (Read Only). This is the time in seconds since the start of the game.
            */
            public static get unscaledTime(): number;
            /** The TimeScale-independant time the latest MonoBehaviour.FixedUpdate has started (Read Only). This is the time in seconds since the start of the game.
            */
            public static get fixedUnscaledTime(): number;
            /** The timeScale-independent interval in seconds from the last frame to the current one (Read Only).
            */
            public static get unscaledDeltaTime(): number;
            /** The timeScale-independent interval in seconds from the last fixed frame to the current one (Read Only).
            */
            public static get fixedUnscaledDeltaTime(): number;
            /** The interval in seconds at which physics and other fixed frame rate updates (like MonoBehaviour's MonoBehaviour.FixedUpdate) are performed.
            */
            public static get fixedDeltaTime(): number;
            public static set fixedDeltaTime(value: number);
            /** The maximum time a frame can take. Physics and other fixed frame rate updates (like MonoBehaviour's MonoBehaviour.FixedUpdate) will be performed only for this duration of time per frame.
            */
            public static get maximumDeltaTime(): number;
            public static set maximumDeltaTime(value: number);
            /** A smoothed out Time.deltaTime (Read Only).
            */
            public static get smoothDeltaTime(): number;
            /** The maximum time a frame can spend on particle updates. If the frame takes longer than this, then updates are split into multiple smaller updates.
            */
            public static get maximumParticleDeltaTime(): number;
            public static set maximumParticleDeltaTime(value: number);
            /** The scale at which time passes. This can be used for slow motion effects.
            */
            public static get timeScale(): number;
            public static set timeScale(value: number);
            /** The total number of frames that have passed (Read Only).
            */
            public static get frameCount(): number;
            public static get renderedFrameCount(): number;
            /** The real time in seconds since the game started (Read Only).
            */
            public static get realtimeSinceStartup(): number;
            /** Slows game playback time to allow screenshots to be saved between frames.
            */
            public static get captureDeltaTime(): number;
            public static set captureDeltaTime(value: number);
            /** The reciprocal of Time.captureDeltaTime.
            */
            public static get captureFramerate(): number;
            public static set captureFramerate(value: number);
            /** Returns true if called inside a fixed time step callback (like MonoBehaviour's MonoBehaviour.FixedUpdate), otherwise returns false.
            */
            public static get inFixedTimeStep(): boolean;
            public constructor ()
        }
        /** Interface for on-screen keyboards. Only native iPhone, Android, and Windows Store Apps are supported.
        */
        class TouchScreenKeyboard extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Is touch screen keyboard supported.
            */
            public static get isSupported(): boolean;
            /** Checks if the text within an input field can be selected and modified while TouchScreenKeyboard is open.
            * @returns Returns true when you are able to select and modify the input field, returns false otherwise. 
            */
            public static get isInPlaceEditingAllowed(): boolean;
            /** Returns the text displayed by the input field of the keyboard.
            */
            public get text(): string;
            public set text(value: string);
            /** Will text input field above the keyboard be hidden when the keyboard is on screen?
            */
            public static get hideInput(): boolean;
            public static set hideInput(value: boolean);
            /** Is the keyboard visible or sliding into the position on the screen?
            */
            public get active(): boolean;
            public set active(value: boolean);
            /** Returns the status of the on-screen keyboard. (Read Only)
            */
            public get status(): UnityEngine.TouchScreenKeyboard.Status;
            /** How many characters the keyboard input field is limited to. 0 = infinite.
            */
            public get characterLimit(): number;
            public set characterLimit(value: number);
            /** Specifies whether the TouchScreenKeyboard supports the selection property. (Read Only)
            */
            public get canGetSelection(): boolean;
            /** Specifies whether the TouchScreenKeyboard supports the selection property. (Read Only)
            */
            public get canSetSelection(): boolean;
            /** Gets or sets the character range of the selected text within the string currently being edited.
            */
            public get selection(): UnityEngine.RangeInt;
            public set selection(value: UnityEngine.RangeInt);
            /** Returns the TouchScreenKeyboardType of the keyboard.
            */
            public get type(): UnityEngine.TouchScreenKeyboardType;
            /** Specified on which display the on-screen keyboard will appear.
            */
            public get targetDisplay(): number;
            public set targetDisplay(value: number);
            /** Returns portion of the screen which is covered by the keyboard.
            */
            public static get area(): UnityEngine.Rect;
            /** Returns true whenever any keyboard is completely visible on the screen.
            */
            public static get visible(): boolean;
            /** Opens the native keyboard provided by OS on the screen.
            * @param text Text to edit.
            * @param keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param autocorrection Is autocorrection applied?
            * @param multiline Can more than one line of text be entered?
            * @param secure Is the text masked (for passwords, etc)?
            * @param alert Is the keyboard opened in alert mode?
            * @param textPlaceholder Text to be used if no other text is present.
            * @param characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean, $alert: boolean, $textPlaceholder: string, $characterLimit: number) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param text Text to edit.
            * @param keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param autocorrection Is autocorrection applied?
            * @param multiline Can more than one line of text be entered?
            * @param secure Is the text masked (for passwords, etc)?
            * @param alert Is the keyboard opened in alert mode?
            * @param textPlaceholder Text to be used if no other text is present.
            * @param characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean, $alert: boolean, $textPlaceholder: string) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param text Text to edit.
            * @param keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param autocorrection Is autocorrection applied?
            * @param multiline Can more than one line of text be entered?
            * @param secure Is the text masked (for passwords, etc)?
            * @param alert Is the keyboard opened in alert mode?
            * @param textPlaceholder Text to be used if no other text is present.
            * @param characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean, $alert: boolean) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param text Text to edit.
            * @param keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param autocorrection Is autocorrection applied?
            * @param multiline Can more than one line of text be entered?
            * @param secure Is the text masked (for passwords, etc)?
            * @param alert Is the keyboard opened in alert mode?
            * @param textPlaceholder Text to be used if no other text is present.
            * @param characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param text Text to edit.
            * @param keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param autocorrection Is autocorrection applied?
            * @param multiline Can more than one line of text be entered?
            * @param secure Is the text masked (for passwords, etc)?
            * @param alert Is the keyboard opened in alert mode?
            * @param textPlaceholder Text to be used if no other text is present.
            * @param characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param text Text to edit.
            * @param keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param autocorrection Is autocorrection applied?
            * @param multiline Can more than one line of text be entered?
            * @param secure Is the text masked (for passwords, etc)?
            * @param alert Is the keyboard opened in alert mode?
            * @param textPlaceholder Text to be used if no other text is present.
            * @param characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param text Text to edit.
            * @param keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param autocorrection Is autocorrection applied?
            * @param multiline Can more than one line of text be entered?
            * @param secure Is the text masked (for passwords, etc)?
            * @param alert Is the keyboard opened in alert mode?
            * @param textPlaceholder Text to be used if no other text is present.
            * @param characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param text Text to edit.
            * @param keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param autocorrection Is autocorrection applied?
            * @param multiline Can more than one line of text be entered?
            * @param secure Is the text masked (for passwords, etc)?
            * @param alert Is the keyboard opened in alert mode?
            * @param textPlaceholder Text to be used if no other text is present.
            * @param characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string) : UnityEngine.TouchScreenKeyboard
            public constructor ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean, $alert: boolean, $textPlaceholder: string, $characterLimit: number)
            public constructor ()
        }
        /** Enumeration of the different types of supported touchscreen keyboards.
        */
        enum TouchScreenKeyboardType
        { Default = 0, ASCIICapable = 1, NumbersAndPunctuation = 2, URL = 3, NumberPad = 4, PhonePad = 5, NamePhonePad = 6, EmailAddress = 7, NintendoNetworkAccount = 8, Social = 9, Search = 10, DecimalPad = 11 }
        class UnityEventQueueSystem extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GenerateEventIdForPayload ($eventPayloadName: string) : string
            public static GetGlobalEventQueue () : System.IntPtr
            public constructor ()
        }
        /** Representation of a Position, and a Rotation in 3D Space
        */
        class Pose extends System.ValueType implements System.IEquatable$1<UnityEngine.Pose>
        {
            protected [__keep_incompatibility]: never;
            /** The position component of the pose.
            */
            public position : UnityEngine.Vector3
            /** The rotation component of the pose.
            */
            public rotation : UnityEngine.Quaternion
            /** Returns the forward vector of the pose.
            */
            public get forward(): UnityEngine.Vector3;
            /** Returns the right vector of the pose.
            */
            public get right(): UnityEngine.Vector3;
            /** Returns the up vector of the pose.
            */
            public get up(): UnityEngine.Vector3;
            /** Shorthand for pose which represents zero position, and an identity rotation.
            */
            public static get identity(): UnityEngine.Pose;
            public ToString () : string
            public ToString ($format: string) : string
            /** Transforms the current pose into the local space of the provided pose.
            */
            public GetTransformedBy ($lhs: UnityEngine.Pose) : UnityEngine.Pose
            /** Transforms the current pose into the local space of the provided pose.
            */
            public GetTransformedBy ($lhs: UnityEngine.Transform) : UnityEngine.Pose
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.Pose) : boolean
            public static op_Equality ($a: UnityEngine.Pose, $b: UnityEngine.Pose) : boolean
            public static op_Inequality ($a: UnityEngine.Pose, $b: UnityEngine.Pose) : boolean
            public constructor ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion)
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        enum iPhoneScreenOrientation
        { Unknown = 0, Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, AutoRotation = 5, Landscape = 6 }
        enum iPhoneNetworkReachability
        { NotReachable = 0, ReachableViaCarrierDataNetwork = 1, ReachableViaWiFiNetwork = 2 }
        enum iPhoneGeneration
        { Unknown = 0, iPhone = 1, iPhone3G = 2, iPhone3GS = 3, iPodTouch1Gen = 4, iPodTouch2Gen = 5, iPodTouch3Gen = 6, iPad1Gen = 7, iPhone4 = 8, iPodTouch4Gen = 9, iPad2Gen = 10, iPhone4S = 11, iPad3Gen = 12, iPhone5 = 13, iPodTouch5Gen = 14, iPadMini1Gen = 15, iPad4Gen = 16, iPhone5C = 17, iPhone5S = 18, iPhoneUnknown = 19, iPadUnknown = 20, iPodTouchUnknown = 21 }
        class iPhoneSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        enum iPhoneTouchPhase
        { Began = 0, Moved = 1, Stationary = 2, Ended = 3, Canceled = 4 }
        class iPhoneTouch extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get fingerId(): number;
            public get position(): UnityEngine.Vector2;
            public get deltaPosition(): UnityEngine.Vector2;
            public get deltaTime(): number;
            public get tapCount(): number;
            public get phase(): UnityEngine.iPhoneTouchPhase;
        }
        enum iPhoneMovieControlMode
        { Full = 0, Minimal = 1, CancelOnTouch = 2, Hidden = 3, VolumeOnly = 4 }
        enum iPhoneMovieScalingMode
        { None = 0, AspectFit = 1, AspectFill = 2, Fill = 3 }
        class iPhoneUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        enum iPhoneKeyboardType
        { Default = 0, ASCIICapable = 1, NumbersAndPunctuation = 2, URL = 3, NumberPad = 4, PhonePad = 5, NamePhonePad = 6, EmailAddress = 7 }
        class iPhoneKeyboard extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get text(): string;
            public set text(value: string);
            public static get hideInput(): boolean;
            public static set hideInput(value: boolean);
            public get active(): boolean;
            public set active(value: boolean);
            public get done(): boolean;
            public static get area(): UnityEngine.Rect;
            public static get visible(): boolean;
            public constructor ()
        }
        class iPhoneAccelerationEvent extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get acceleration(): UnityEngine.Vector3;
            public get deltaTime(): number;
        }
        enum iPhoneOrientation
        { Unknown = 0, Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, FaceUp = 5, FaceDown = 6 }
        class iPhoneInput extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get accelerationEvents(): System.Array$1<UnityEngine.iPhoneAccelerationEvent>;
            public static get touches(): System.Array$1<UnityEngine.iPhoneTouch>;
            public static get touchCount(): number;
            public static get multiTouchEnabled(): boolean;
            public static set multiTouchEnabled(value: boolean);
            public static get accelerationEventCount(): number;
            public static get acceleration(): UnityEngine.Vector3;
            public static GetTouch ($index: number) : UnityEngine.iPhoneTouch
            public static GetAccelerationEvent ($index: number) : UnityEngine.iPhoneAccelerationEvent
            public constructor ()
        }
        class iPhone extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get generation(): UnityEngine.iPhoneGeneration;
            public static get vendorIdentifier(): string;
            public static get advertisingIdentifier(): string;
            public static get advertisingTrackingEnabled(): boolean;
            public static SetNoBackupFlag ($path: string) : void
            public static ResetNoBackupFlag ($path: string) : void
            public constructor ()
        }
        enum iOSActivityIndicatorStyle
        { DontShow = 0, WhiteLarge = 1, White = 2, Gray = 3 }
        enum CalendarIdentifier
        { GregorianCalendar = 0, BuddhistCalendar = 1, ChineseCalendar = 2, HebrewCalendar = 3, IslamicCalendar = 4, IslamicCivilCalendar = 5, JapaneseCalendar = 6, RepublicOfChinaCalendar = 7, PersianCalendar = 8, IndianCalendar = 9, ISO8601Calendar = 10 }
        enum CalendarUnit
        { Era = 0, Year = 1, Month = 2, Day = 3, Hour = 4, Minute = 5, Second = 6, Week = 7, Weekday = 8, WeekdayOrdinal = 9, Quarter = 10 }
        class LocalNotification extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get fireDate(): Date;
            public set fireDate(value: Date);
            public get timeZone(): string;
            public set timeZone(value: string);
            public get repeatInterval(): UnityEngine.CalendarUnit;
            public set repeatInterval(value: UnityEngine.CalendarUnit);
            public get repeatCalendar(): UnityEngine.CalendarIdentifier;
            public set repeatCalendar(value: UnityEngine.CalendarIdentifier);
            public get alertBody(): string;
            public set alertBody(value: string);
            public get alertAction(): string;
            public set alertAction(value: string);
            public get hasAction(): boolean;
            public set hasAction(value: boolean);
            public get alertLaunchImage(): string;
            public set alertLaunchImage(value: string);
            public get applicationIconBadgeNumber(): number;
            public set applicationIconBadgeNumber(value: number);
            public get soundName(): string;
            public set soundName(value: string);
            public static get defaultSoundName(): string;
            public get userInfo(): System.Collections.IDictionary;
            public set userInfo(value: System.Collections.IDictionary);
            public constructor ()
        }
        class RemoteNotification extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get alertBody(): string;
            public get hasAction(): boolean;
            public get applicationIconBadgeNumber(): number;
            public get soundName(): string;
            public get userInfo(): System.Collections.IDictionary;
            public constructor ()
        }
        enum RemoteNotificationType
        { None = 0, Badge = 1, Sound = 2, Alert = 3 }
        class NotificationServices extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class ADBannerView extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get loaded(): boolean;
            public get visible(): boolean;
            public set visible(value: boolean);
            public get layout(): UnityEngine.ADBannerView.Layout;
            public set layout(value: UnityEngine.ADBannerView.Layout);
            public get position(): UnityEngine.Vector2;
            public set position(value: UnityEngine.Vector2);
            public get size(): UnityEngine.Vector2;
            public static add_onBannerWasClicked ($value: UnityEngine.ADBannerView.BannerWasClickedDelegate) : void
            public static remove_onBannerWasClicked ($value: UnityEngine.ADBannerView.BannerWasClickedDelegate) : void
            public static add_onBannerWasLoaded ($value: UnityEngine.ADBannerView.BannerWasLoadedDelegate) : void
            public static remove_onBannerWasLoaded ($value: UnityEngine.ADBannerView.BannerWasLoadedDelegate) : void
            public static IsAvailable ($type: UnityEngine.ADBannerView.Type) : boolean
            public constructor ($type: UnityEngine.ADBannerView.Type, $layout: UnityEngine.ADBannerView.Layout)
            public constructor ()
        }
        class ADInterstitialAd extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get isAvailable(): boolean;
            public get loaded(): boolean;
            public static add_onInterstitialWasLoaded ($value: UnityEngine.ADInterstitialAd.InterstitialWasLoadedDelegate) : void
            public static remove_onInterstitialWasLoaded ($value: UnityEngine.ADInterstitialAd.InterstitialWasLoadedDelegate) : void
            public Show () : void
            public ReloadAd () : void
            public constructor ($autoReload: boolean)
            public constructor ()
        }
        /** An enumeration of transform properties that can be driven on a RectTransform by an object.
        */
        enum DrivenTransformProperties
        { None = 0, All = -1, AnchoredPositionX = 2, AnchoredPositionY = 4, AnchoredPositionZ = 8, Rotation = 16, ScaleX = 32, ScaleY = 64, ScaleZ = 128, AnchorMinX = 256, AnchorMinY = 512, AnchorMaxX = 1024, AnchorMaxY = 2048, SizeDeltaX = 4096, SizeDeltaY = 8192, PivotX = 16384, PivotY = 32768, AnchoredPosition = 6, AnchoredPosition3D = 14, Scale = 224, AnchorMin = 768, AnchorMax = 3072, Anchors = 3840, SizeDelta = 12288, Pivot = 49152 }
        /** A component can be designed to drive a RectTransform. The DrivenRectTransformTracker struct is used to specify which RectTransforms it is driving.
        */
        class DrivenRectTransformTracker extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public static StopRecordingUndo () : void
            public static StartRecordingUndo () : void
            /** Add a RectTransform to be driven.
            * @param driver The object to drive properties.
            * @param rectTransform The RectTransform to be driven.
            * @param drivenProperties The properties to be driven.
            */
            public Add ($driver: UnityEngine.Object, $rectTransform: UnityEngine.RectTransform, $drivenProperties: UnityEngine.DrivenTransformProperties) : void
            public Clear () : void
        }
        /** Position, size, anchor and pivot information for a rectangle.
        */
        class RectTransform extends UnityEngine.Transform implements System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
            /** The calculated rectangle in the local space of the Transform.
            */
            public get rect(): UnityEngine.Rect;
            /** The normalized position in the parent RectTransform that the lower left corner is anchored to.
            */
            public get anchorMin(): UnityEngine.Vector2;
            public set anchorMin(value: UnityEngine.Vector2);
            /** The normalized position in the parent RectTransform that the upper right corner is anchored to.
            */
            public get anchorMax(): UnityEngine.Vector2;
            public set anchorMax(value: UnityEngine.Vector2);
            /** The position of the pivot of this RectTransform relative to the anchor reference point.
            */
            public get anchoredPosition(): UnityEngine.Vector2;
            public set anchoredPosition(value: UnityEngine.Vector2);
            /** The size of this RectTransform relative to the distances between the anchors.
            */
            public get sizeDelta(): UnityEngine.Vector2;
            public set sizeDelta(value: UnityEngine.Vector2);
            /** The normalized position in this RectTransform that it rotates around.
            */
            public get pivot(): UnityEngine.Vector2;
            public set pivot(value: UnityEngine.Vector2);
            /** The 3D position of the pivot of this RectTransform relative to the anchor reference point.
            */
            public get anchoredPosition3D(): UnityEngine.Vector3;
            public set anchoredPosition3D(value: UnityEngine.Vector3);
            /** The offset of the lower left corner of the rectangle relative to the lower left anchor.
            */
            public get offsetMin(): UnityEngine.Vector2;
            public set offsetMin(value: UnityEngine.Vector2);
            /** The offset of the upper right corner of the rectangle relative to the upper right anchor.
            */
            public get offsetMax(): UnityEngine.Vector2;
            public set offsetMax(value: UnityEngine.Vector2);
            public static add_reapplyDrivenProperties ($value: UnityEngine.RectTransform.ReapplyDrivenProperties) : void
            public static remove_reapplyDrivenProperties ($value: UnityEngine.RectTransform.ReapplyDrivenProperties) : void
            public ForceUpdateRectTransforms () : void
            /** Get the corners of the calculated rectangle in the local space of its Transform.
            * @param fourCornersArray The array that corners are filled into.
            */
            public GetLocalCorners ($fourCornersArray: System.Array$1<UnityEngine.Vector3>) : void
            /** Get the corners of the calculated rectangle in world space.
            * @param fourCornersArray The array that corners are filled into.
            */
            public GetWorldCorners ($fourCornersArray: System.Array$1<UnityEngine.Vector3>) : void
            public SetInsetAndSizeFromParentEdge ($edge: UnityEngine.RectTransform.Edge, $inset: number, $size: number) : void
            public SetSizeWithCurrentAnchors ($axis: UnityEngine.RectTransform.Axis, $size: number) : void
            public constructor ()
        }
        /** SpriteRenderer draw mode.
        */
        enum SpriteDrawMode
        { Simple = 0, Sliced = 1, Tiled = 2 }
        /** Tiling mode for SpriteRenderer.tileMode.
        */
        enum SpriteTileMode
        { Continuous = 0, Adaptive = 1 }
        /** This enum controls the mode under which the sprite will interact with the masking system.
        */
        enum SpriteMaskInteraction
        { None = 0, VisibleInsideMask = 1, VisibleOutsideMask = 2 }
        /** Renders a Sprite for 2D graphics.
        */
        class SpriteRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** The Sprite to render.
            */
            public get sprite(): UnityEngine.Sprite;
            public set sprite(value: UnityEngine.Sprite);
            /** The current draw mode of the Sprite Renderer.
            */
            public get drawMode(): UnityEngine.SpriteDrawMode;
            public set drawMode(value: UnityEngine.SpriteDrawMode);
            /** Property to set/get the size to render when the SpriteRenderer.drawMode is set to SpriteDrawMode.Sliced.
            */
            public get size(): UnityEngine.Vector2;
            public set size(value: UnityEngine.Vector2);
            /** The current threshold for Sprite Renderer tiling.
            */
            public get adaptiveModeThreshold(): number;
            public set adaptiveModeThreshold(value: number);
            /** The current tile mode of the Sprite Renderer.
            */
            public get tileMode(): UnityEngine.SpriteTileMode;
            public set tileMode(value: UnityEngine.SpriteTileMode);
            /** Rendering color for the Sprite graphic.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** Specifies how the sprite interacts with the masks.
            */
            public get maskInteraction(): UnityEngine.SpriteMaskInteraction;
            public set maskInteraction(value: UnityEngine.SpriteMaskInteraction);
            /** Flips the sprite on the X axis.
            */
            public get flipX(): boolean;
            public set flipX(value: boolean);
            /** Flips the sprite on the Y axis.
            */
            public get flipY(): boolean;
            public set flipY(value: boolean);
            /** Determines the position of the Sprite used for sorting the SpriteRenderer.
            */
            public get spriteSortPoint(): UnityEngine.SpriteSortPoint;
            public set spriteSortPoint(value: UnityEngine.SpriteSortPoint);
            public constructor ()
        }
        /** Represents a Sprite object for use in 2D gameplay.
        */
        class Sprite extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Bounds of the Sprite, specified by its center and extents in world space units.
            */
            public get bounds(): UnityEngine.Bounds;
            /** Location of the Sprite on the original Texture, specified in pixels.
            */
            public get rect(): UnityEngine.Rect;
            /** Returns the border sizes of the sprite.
            */
            public get border(): UnityEngine.Vector4;
            /** Get the reference to the used texture. If packed this will point to the atlas, if not packed will point to the source sprite.
            */
            public get texture(): UnityEngine.Texture2D;
            /** The number of pixels in the sprite that correspond to one unit in world space. (Read Only)
            */
            public get pixelsPerUnit(): number;
            /** The Variant scale of texture used by the Sprite. This is useful to check when a Variant SpriteAtlas is being used by Sprites.
            */
            public get spriteAtlasTextureScale(): number;
            /** Returns the texture that contains the alpha channel from the source texture. Unity generates this texture under the hood for sprites that have alpha in the source, and need to be compressed using techniques like ETC1.
            Returns NULL if there is no associated alpha texture for the source sprite. This is the case if the sprite has not been setup to use ETC1 compression.
            */
            public get associatedAlphaSplitTexture(): UnityEngine.Texture2D;
            /** Location of the Sprite's center point in the Rect on the original Texture, specified in pixels.
            */
            public get pivot(): UnityEngine.Vector2;
            /** Returns true if this Sprite is packed in an atlas.
            */
            public get packed(): boolean;
            /** If Sprite is packed (see Sprite.packed), returns its SpritePackingMode.
            */
            public get packingMode(): UnityEngine.SpritePackingMode;
            /** If Sprite is packed (see Sprite.packed), returns its SpritePackingRotation.
            */
            public get packingRotation(): UnityEngine.SpritePackingRotation;
            /** Get the rectangle this sprite uses on its texture. Raises an exception if this sprite is tightly packed in an atlas.
            */
            public get textureRect(): UnityEngine.Rect;
            /** Gets the offset of the rectangle this sprite uses on its texture to the original sprite bounds. If sprite mesh type is FullRect, offset is zero.
            */
            public get textureRectOffset(): UnityEngine.Vector2;
            /** Returns a copy of the array containing sprite mesh vertex positions.
            */
            public get vertices(): System.Array$1<UnityEngine.Vector2>;
            /** Returns a copy of the array containing sprite mesh triangles.
            */
            public get triangles(): System.Array$1<number>;
            /** The base texture coordinates of the sprite mesh.
            */
            public get uv(): System.Array$1<UnityEngine.Vector2>;
            public GetPhysicsShapeCount () : number
            /** The number of points in the selected physics shape for the Sprite.
            * @param shapeIdx The index of the physics shape to retrieve the number of points from.
            * @returns The number of points in the selected physics shape for the Sprite. 
            */
            public GetPhysicsShapePointCount ($shapeIdx: number) : number
            public GetPhysicsShape ($shapeIdx: number, $physicsShape: System.Collections.Generic.List$1<UnityEngine.Vector2>) : number
            public OverridePhysicsShape ($physicsShapes: System.Collections.Generic.IList$1<System.Array$1<UnityEngine.Vector2>>) : void
            /** Sets up new Sprite geometry.
            * @param vertices Array of vertex positions in Sprite Rect space.
            * @param triangles Array of sprite mesh triangle indices.
            */
            public OverrideGeometry ($vertices: System.Array$1<UnityEngine.Vector2>, $triangles: System.Array$1<number>) : void
            /** Create a new Sprite object.
            * @param texture Texture from which to obtain the sprite graphic.
            * @param rect Rectangular section of the texture to use for the sprite.
            * @param pivot Sprite's pivot point relative to its graphic rectangle.
            * @param pixelsPerUnit The number of pixels in the sprite that correspond to one unit in world space.
            * @param extrude Amount by which the sprite mesh should be expanded outwards.
            * @param meshType Controls the type of mesh generated for the sprite.
            * @param border The border sizes of the sprite (X=left, Y=bottom, Z=right, W=top).
            * @param generateFallbackPhysicsShape Generates a default physics shape for the sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number, $meshType: UnityEngine.SpriteMeshType, $border: UnityEngine.Vector4, $generateFallbackPhysicsShape: boolean) : UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param texture Texture from which to obtain the sprite graphic.
            * @param rect Rectangular section of the texture to use for the sprite.
            * @param pivot Sprite's pivot point relative to its graphic rectangle.
            * @param pixelsPerUnit The number of pixels in the sprite that correspond to one unit in world space.
            * @param extrude Amount by which the sprite mesh should be expanded outwards.
            * @param meshType Controls the type of mesh generated for the sprite.
            * @param border The border sizes of the sprite (X=left, Y=bottom, Z=right, W=top).
            * @param generateFallbackPhysicsShape Generates a default physics shape for the sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number, $meshType: UnityEngine.SpriteMeshType, $border: UnityEngine.Vector4) : UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param texture Texture from which to obtain the sprite graphic.
            * @param rect Rectangular section of the texture to use for the sprite.
            * @param pivot Sprite's pivot point relative to its graphic rectangle.
            * @param pixelsPerUnit The number of pixels in the sprite that correspond to one unit in world space.
            * @param extrude Amount by which the sprite mesh should be expanded outwards.
            * @param meshType Controls the type of mesh generated for the sprite.
            * @param border The border sizes of the sprite (X=left, Y=bottom, Z=right, W=top).
            * @param generateFallbackPhysicsShape Generates a default physics shape for the sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number, $meshType: UnityEngine.SpriteMeshType) : UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param texture Texture from which to obtain the sprite graphic.
            * @param rect Rectangular section of the texture to use for the sprite.
            * @param pivot Sprite's pivot point relative to its graphic rectangle.
            * @param pixelsPerUnit The number of pixels in the sprite that correspond to one unit in world space.
            * @param extrude Amount by which the sprite mesh should be expanded outwards.
            * @param meshType Controls the type of mesh generated for the sprite.
            * @param border The border sizes of the sprite (X=left, Y=bottom, Z=right, W=top).
            * @param generateFallbackPhysicsShape Generates a default physics shape for the sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number) : UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param texture Texture from which to obtain the sprite graphic.
            * @param rect Rectangular section of the texture to use for the sprite.
            * @param pivot Sprite's pivot point relative to its graphic rectangle.
            * @param pixelsPerUnit The number of pixels in the sprite that correspond to one unit in world space.
            * @param extrude Amount by which the sprite mesh should be expanded outwards.
            * @param meshType Controls the type of mesh generated for the sprite.
            * @param border The border sizes of the sprite (X=left, Y=bottom, Z=right, W=top).
            * @param generateFallbackPhysicsShape Generates a default physics shape for the sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number) : UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param texture Texture from which to obtain the sprite graphic.
            * @param rect Rectangular section of the texture to use for the sprite.
            * @param pivot Sprite's pivot point relative to its graphic rectangle.
            * @param pixelsPerUnit The number of pixels in the sprite that correspond to one unit in world space.
            * @param extrude Amount by which the sprite mesh should be expanded outwards.
            * @param meshType Controls the type of mesh generated for the sprite.
            * @param border The border sizes of the sprite (X=left, Y=bottom, Z=right, W=top).
            * @param generateFallbackPhysicsShape Generates a default physics shape for the sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2) : UnityEngine.Sprite
        }
        /** Determines the position of the Sprite used for sorting the Renderer.
        */
        enum SpriteSortPoint
        { Center = 0, Pivot = 1 }
        /** Defines the type of mesh generated for a sprite.
        */
        enum SpriteMeshType
        { FullRect = 0, Tight = 1 }
        /** How a Sprite's graphic rectangle is aligned with its pivot point.
        */
        enum SpriteAlignment
        { Center = 0, TopLeft = 1, TopCenter = 2, TopRight = 3, LeftCenter = 4, RightCenter = 5, BottomLeft = 6, BottomCenter = 7, BottomRight = 8, Custom = 9 }
        /** Sprite packing modes for the Sprite Packer.
        */
        enum SpritePackingMode
        { Tight = 0, Rectangle = 1 }
        /** Sprite rotation modes for the Sprite Packer.
        */
        enum SpritePackingRotation
        { None = 0, FlipHorizontal = 1, FlipVertical = 2, Rotate180 = 3, Any = 15 }
        /** Encapsulates a Texture2D and its shader property name to give Sprite-based renderers access to a secondary texture, in addition to the main Sprite texture.
        */
        class SecondarySpriteTexture extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The shader property name of the secondary Sprite texture. Use this name to identify and sample the texture in the shader.
            */
            public name : string
            /** The texture to be used as a secondary Sprite texture.
            */
            public texture : UnityEngine.Texture2D
        }
        /** Generic access to the Social API.
        */
        class Social extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** This is the currently active social platform. 
            */
            public static get Active(): UnityEngine.SocialPlatforms.ISocialPlatform;
            public static set Active(value: UnityEngine.SocialPlatforms.ISocialPlatform);
            /** The local user (potentially not logged in).
            */
            public static get localUser(): UnityEngine.SocialPlatforms.ILocalUser;
            public static LoadUsers ($userIDs: System.Array$1<string>, $callback: System.Action$1<System.Array$1<UnityEngine.SocialPlatforms.IUserProfile>>) : void
            public static ReportProgress ($achievementID: string, $progress: number, $callback: System.Action$1<boolean>) : void
            public static LoadAchievementDescriptions ($callback: System.Action$1<System.Array$1<UnityEngine.SocialPlatforms.IAchievementDescription>>) : void
            public static LoadAchievements ($callback: System.Action$1<System.Array$1<UnityEngine.SocialPlatforms.IAchievement>>) : void
            public static ReportScore ($score: bigint, $board: string, $callback: System.Action$1<boolean>) : void
            public static LoadScores ($leaderboardID: string, $callback: System.Action$1<System.Array$1<UnityEngine.SocialPlatforms.IScore>>) : void
            public static CreateLeaderboard () : UnityEngine.SocialPlatforms.ILeaderboard
            public static CreateAchievement () : UnityEngine.SocialPlatforms.IAchievement
            public static ShowAchievementsUI () : void
            public static ShowLeaderboardUI () : void
        }
        /** An abstract class that defines a grid layout.
        */
        class GridLayout extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The size of each cell in the layout.
            */
            public get cellSize(): UnityEngine.Vector3;
            /** The size of the gap between each cell in the layout.
            */
            public get cellGap(): UnityEngine.Vector3;
            /** The layout of the cells.
            */
            public get cellLayout(): UnityEngine.GridLayout.CellLayout;
            /** The cell swizzle for the layout.
            */
            public get cellSwizzle(): UnityEngine.GridLayout.CellSwizzle;
            /** Returns the local bounds for a cell at the location.
            * @param cellPosition Location of the cell.
            * @returns Local bounds of cell at the location. 
            */
            public GetBoundsLocal ($cellPosition: UnityEngine.Vector3Int) : UnityEngine.Bounds
            /** Returns the local bounds for the groups of cells at the location.
            * @param origin Origin of the group of cells.
            * @param size Size of the group of cells.
            * @returns Local bounds of the group of cells at the location. 
            */
            public GetBoundsLocal ($origin: UnityEngine.Vector3, $size: UnityEngine.Vector3) : UnityEngine.Bounds
            /** Converts a cell position to local position space.
            * @param cellPosition Cell position to convert.
            * @returns Local position of the cell position. 
            */
            public CellToLocal ($cellPosition: UnityEngine.Vector3Int) : UnityEngine.Vector3
            /** Converts a local position to cell position.
            * @param localPosition Local Position to convert.
            * @returns Cell position of the local position. 
            */
            public LocalToCell ($localPosition: UnityEngine.Vector3) : UnityEngine.Vector3Int
            /** Converts an interpolated cell position in floats to local position space.
            * @param cellPosition Interpolated cell position to convert.
            * @returns Local position of the cell position. 
            */
            public CellToLocalInterpolated ($cellPosition: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Converts a local position to cell position.
            * @param localPosition Local Position to convert.
            * @returns Interpolated cell position of the local position. 
            */
            public LocalToCellInterpolated ($localPosition: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Converts a cell position to world position space.
            * @param cellPosition Cell position to convert.
            * @returns World position of the cell position. 
            */
            public CellToWorld ($cellPosition: UnityEngine.Vector3Int) : UnityEngine.Vector3
            /** Converts a world position to cell position.
            * @param worldPosition World Position to convert.
            * @returns Cell position of the world position. 
            */
            public WorldToCell ($worldPosition: UnityEngine.Vector3) : UnityEngine.Vector3Int
            /** Converts a local position to world position.
            * @param localPosition Local Position to convert.
            * @returns World position of the local position. 
            */
            public LocalToWorld ($localPosition: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Converts a world position to local position.
            * @param worldPosition World Position to convert.
            * @returns Local position of the world position. 
            */
            public WorldToLocal ($worldPosition: UnityEngine.Vector3) : UnityEngine.Vector3
            public GetLayoutCellCenter () : UnityEngine.Vector3
            public constructor ()
        }
        /** Grid is the base class for plotting a layout of uniformly spaced points and lines.
        */
        class Grid extends UnityEngine.GridLayout
        {
            protected [__keep_incompatibility]: never;
            /** The size of each cell in the Grid.
            */
            public get cellSize(): UnityEngine.Vector3;
            public set cellSize(value: UnityEngine.Vector3);
            /** The size of the gap between each cell in the Grid.
            */
            public get cellGap(): UnityEngine.Vector3;
            public set cellGap(value: UnityEngine.Vector3);
            /** The layout of the cells in the Grid.
            */
            public get cellLayout(): UnityEngine.GridLayout.CellLayout;
            public set cellLayout(value: UnityEngine.GridLayout.CellLayout);
            /** The cell swizzle for the Grid.
            */
            public get cellSwizzle(): UnityEngine.GridLayout.CellSwizzle;
            public set cellSwizzle(value: UnityEngine.GridLayout.CellSwizzle);
            /** Get the logical center coordinate of a grid cell in local space.
            * @param position Grid cell position.
            * @returns Center of the cell transformed into local space coordinates. 
            */
            public GetCellCenterLocal ($position: UnityEngine.Vector3Int) : UnityEngine.Vector3
            /** Get the logical center coordinate of a grid cell in world space.
            * @param position Grid cell position.
            * @returns Center of the cell transformed into world space coordinates. 
            */
            public GetCellCenterWorld ($position: UnityEngine.Vector3Int) : UnityEngine.Vector3
            public static Swizzle ($swizzle: UnityEngine.GridLayout.CellSwizzle, $position: UnityEngine.Vector3) : UnityEngine.Vector3
            public static InverseSwizzle ($swizzle: UnityEngine.GridLayout.CellSwizzle, $position: UnityEngine.Vector3) : UnityEngine.Vector3
            public constructor ()
        }
        /** A UnityGUI event.
        */
        class Event extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get rawType(): UnityEngine.EventType;
            /** The mouse position.
            */
            public get mousePosition(): UnityEngine.Vector2;
            public set mousePosition(value: UnityEngine.Vector2);
            /** The relative movement of the mouse compared to last event.
            */
            public get delta(): UnityEngine.Vector2;
            public set delta(value: UnityEngine.Vector2);
            /** The type of pointer that created this event (for example, mouse, touch screen, pen).
            */
            public get pointerType(): UnityEngine.PointerType;
            public set pointerType(value: UnityEngine.PointerType);
            /** Which mouse button was pressed.
            */
            public get button(): number;
            public set button(value: number);
            /** Which modifier keys are held down.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            public set modifiers(value: UnityEngine.EventModifiers);
            /** How hard stylus pressure is applied.
            */
            public get pressure(): number;
            public set pressure(value: number);
            /** How many consecutive mouse clicks have we received.
            */
            public get clickCount(): number;
            public set clickCount(value: number);
            /** The character typed.
            */
            public get character(): number;
            public set character(value: number);
            /** The raw key code for keyboard events.
            */
            public get keyCode(): UnityEngine.KeyCode;
            public set keyCode(value: UnityEngine.KeyCode);
            /** Index of display that the event belongs to.
            */
            public get displayIndex(): number;
            public set displayIndex(value: number);
            /** The type of event.
            */
            public get type(): UnityEngine.EventType;
            public set type(value: UnityEngine.EventType);
            /** The name of an ExecuteCommand or ValidateCommand Event.
            */
            public get commandName(): string;
            public set commandName(value: string);
            /** Is Shift held down? (Read Only)
            */
            public get shift(): boolean;
            public set shift(value: boolean);
            /** Is Control key held down? (Read Only)
            */
            public get control(): boolean;
            public set control(value: boolean);
            /** Is Alt/Option key held down? (Read Only)
            */
            public get alt(): boolean;
            public set alt(value: boolean);
            /** Is Command/Windows key held down? (Read Only)
            */
            public get command(): boolean;
            public set command(value: boolean);
            /** Is Caps Lock on? (Read Only)
            */
            public get capsLock(): boolean;
            public set capsLock(value: boolean);
            /** Is the current keypress on the numeric keyboard? (Read Only)
            */
            public get numeric(): boolean;
            public set numeric(value: boolean);
            /** Is the current keypress a function key? (Read Only)
            */
            public get functionKey(): boolean;
            /** The current event that's being processed right now.
            */
            public static get current(): UnityEngine.Event;
            public static set current(value: UnityEngine.Event);
            /** Is this event a keyboard event? (Read Only)
            */
            public get isKey(): boolean;
            /** Is this event a mouse event? (Read Only)
            */
            public get isMouse(): boolean;
            public get isScrollWheel(): boolean;
            /** Get a filtered event type for a given control ID.
            * @param controlID The ID of the control you are querying from.
            */
            public GetTypeForControl ($controlID: number) : UnityEngine.EventType
            /** Get the next queued [Event] from the event system.
            * @param outEvent Next Event.
            */
            public static PopEvent ($outEvent: UnityEngine.Event) : boolean
            public static GetEventCount () : number
            /** Create a keyboard event.
            */
            public static KeyboardEvent ($key: string) : UnityEngine.Event
            public Use () : void
            public constructor ()
            public constructor ($displayIndex: number)
            public constructor ($other: UnityEngine.Event)
        }
        /** Types of UnityGUI input and processing events.
        */
        enum EventType
        { MouseDown = 0, MouseUp = 1, MouseMove = 2, MouseDrag = 3, KeyDown = 4, KeyUp = 5, ScrollWheel = 6, Repaint = 7, Layout = 8, DragUpdated = 9, DragPerform = 10, DragExited = 15, Ignore = 11, Used = 12, ValidateCommand = 13, ExecuteCommand = 14, ContextClick = 16, MouseEnterWindow = 20, MouseLeaveWindow = 21, mouseDown = 0, mouseUp = 1, mouseMove = 2, mouseDrag = 3, keyDown = 4, keyUp = 5, scrollWheel = 6, repaint = 7, layout = 8, dragUpdated = 9, dragPerform = 10, ignore = 11, used = 12 }
        /** Pointer types.
        */
        enum PointerType
        { Mouse = 0, Touch = 1, Pen = 2 }
        /** Types of modifier key that can be active during a keystroke event.
        */
        enum EventModifiers
        { None = 0, Shift = 1, Control = 2, Alt = 4, Command = 8, Numeric = 16, CapsLock = 32, FunctionKey = 64 }
        /** The GUI class is the interface for Unity's GUI with manual positioning.
        */
        class GUI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Global tinting color for the GUI.
            */
            public static get color(): UnityEngine.Color;
            public static set color(value: UnityEngine.Color);
            /** Global tinting color for all background elements rendered by the GUI.
            */
            public static get backgroundColor(): UnityEngine.Color;
            public static set backgroundColor(value: UnityEngine.Color);
            /** Tinting color for all text rendered by the GUI.
            */
            public static get contentColor(): UnityEngine.Color;
            public static set contentColor(value: UnityEngine.Color);
            /** Returns true if any controls changed the value of the input data.
            */
            public static get changed(): boolean;
            public static set changed(value: boolean);
            /** Is the GUI enabled?
            */
            public static get enabled(): boolean;
            public static set enabled(value: boolean);
            /** The sorting depth of the currently executing GUI behaviour.
            */
            public static get depth(): number;
            public static set depth(value: number);
            /** The global skin to use.
            */
            public static get skin(): UnityEngine.GUISkin;
            public static set skin(value: UnityEngine.GUISkin);
            /** The GUI transform matrix.
            */
            public static get matrix(): UnityEngine.Matrix4x4;
            public static set matrix(value: UnityEngine.Matrix4x4);
            /** The tooltip of the control the mouse is currently over, or which has keyboard focus. (Read Only).
            */
            public static get tooltip(): string;
            public static set tooltip(value: string);
            /** Set the name of the next control.
            */
            public static SetNextControlName ($name: string) : void
            public static GetNameOfFocusedControl () : string
            /** Move keyboard focus to a named control.
            * @param name Name set using SetNextControlName.
            */
            public static FocusControl ($name: string) : void
            /** Make a window draggable.
            * @param position The part of the window that can be dragged. This is clipped to the actual window.
            */
            public static DragWindow ($position: UnityEngine.Rect) : void
            /** Bring a specific window to front of the floating windows.
            * @param windowID The identifier used when you created the window in the Window call.
            */
            public static BringWindowToFront ($windowID: number) : void
            /** Bring a specific window to back of the floating windows.
            * @param windowID The identifier used when you created the window in the Window call.
            */
            public static BringWindowToBack ($windowID: number) : void
            /** Make a window become the active window.
            * @param windowID The identifier used when you created the window in the Window call.
            */
            public static FocusWindow ($windowID: number) : void
            public static UnfocusWindow () : void
            /** Make a text or texture label on screen.
            * @param position Rectangle on the screen to use for the label.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Rect, $text: string) : void
            /** Make a text or texture label on screen.
            * @param position Rectangle on the screen to use for the label.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Make a text or texture label on screen.
            * @param position Rectangle on the screen to use for the label.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : void
            /** Make a text or texture label on screen.
            * @param position Rectangle on the screen to use for the label.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Make a text or texture label on screen.
            * @param position Rectangle on the screen to use for the label.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : void
            /** Make a text or texture label on screen.
            * @param position Rectangle on the screen to use for the label.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            /** Draw a texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            */
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Draw a texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            */
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode) : void
            /** Draw a texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            */
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean) : void
            /** Draw a texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            */
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean, $imageAspect: number) : void
            /** Draws a border with rounded corners within a rectangle. The texture is used to pattern the border.  Note that this method only works on shader model 2.5 and above.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            * @param color A tint color to apply on the texture.
            * @param borderWidth The width of the border. If 0, the full texture is drawn.
            * @param borderWidths The width of the borders (left, top, right and bottom). If Vector4.zero, the full texture is drawn.
            * @param borderRadius The radius for rounded corners. If 0, corners will not be rounded.
            * @param borderRadiuses The radiuses for rounded corners (top-left, top-right, bottom-right and bottom-left). If Vector4.zero, corners will not be rounded.
            */
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean, $imageAspect: number, $color: UnityEngine.Color, $borderWidth: number, $borderRadius: number) : void
            /** Draws a border with rounded corners within a rectangle. The texture is used to pattern the border.  Note that this method only works on shader model 2.5 and above.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            * @param color A tint color to apply on the texture.
            * @param borderWidth The width of the border. If 0, the full texture is drawn.
            * @param borderWidths The width of the borders (left, top, right and bottom). If Vector4.zero, the full texture is drawn.
            * @param borderRadius The radius for rounded corners. If 0, corners will not be rounded.
            * @param borderRadiuses The radiuses for rounded corners (top-left, top-right, bottom-right and bottom-left). If Vector4.zero, corners will not be rounded.
            */
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean, $imageAspect: number, $color: UnityEngine.Color, $borderWidths: UnityEngine.Vector4, $borderRadius: number) : void
            public static DrawTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean, $imageAspect: number, $color: UnityEngine.Color, $borderWidths: UnityEngine.Vector4, $borderRadiuses: UnityEngine.Vector4) : void
            /** Draw a texture within a rectangle with the given texture coordinates.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param texCoords How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param alphaBlend Whether to alpha blend the image on to the display (the default). If false, the picture is drawn on to the display.
            */
            public static DrawTextureWithTexCoords ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $texCoords: UnityEngine.Rect) : void
            /** Draw a texture within a rectangle with the given texture coordinates.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param texCoords How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param alphaBlend Whether to alpha blend the image on to the display (the default). If false, the picture is drawn on to the display.
            */
            public static DrawTextureWithTexCoords ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $texCoords: UnityEngine.Rect, $alphaBlend: boolean) : void
            /** Create a Box on the GUI Layer.
            * @param position Rectangle on the screen to use for the box.
            * @param text Text to display on the box.
            * @param image Texture to display on the box.
            * @param content Text, image and tooltip for this box.
            * @param style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box ($position: UnityEngine.Rect, $text: string) : void
            /** Create a Box on the GUI Layer.
            * @param position Rectangle on the screen to use for the box.
            * @param text Text to display on the box.
            * @param image Texture to display on the box.
            * @param content Text, image and tooltip for this box.
            * @param style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Create a Box on the GUI Layer.
            * @param position Rectangle on the screen to use for the box.
            * @param text Text to display on the box.
            * @param image Texture to display on the box.
            * @param content Text, image and tooltip for this box.
            * @param style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : void
            /** Create a Box on the GUI Layer.
            * @param position Rectangle on the screen to use for the box.
            * @param text Text to display on the box.
            * @param image Texture to display on the box.
            * @param content Text, image and tooltip for this box.
            * @param style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Create a Box on the GUI Layer.
            * @param position Rectangle on the screen to use for the box.
            * @param text Text to display on the box.
            * @param image Texture to display on the box.
            * @param content Text, image and tooltip for this box.
            * @param style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : void
            /** Create a Box on the GUI Layer.
            * @param position Rectangle on the screen to use for the box.
            * @param text Text to display on the box.
            * @param image Texture to display on the box.
            * @param content Text, image and tooltip for this box.
            * @param style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param position Rectangle on the screen to use for the button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button ($position: UnityEngine.Rect, $text: string) : boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param position Rectangle on the screen to use for the button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param position Rectangle on the screen to use for the button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param position Rectangle on the screen to use for the button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param position Rectangle on the screen to use for the button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param position Rectangle on the screen to use for the button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : boolean
            /** Make a button that is active as long as the user holds it down.
            * @param position Rectangle on the screen to use for the button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton ($position: UnityEngine.Rect, $text: string) : boolean
            /** Make a button that is active as long as the user holds it down.
            * @param position Rectangle on the screen to use for the button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : boolean
            /** Make a button that is active as long as the user holds it down.
            * @param position Rectangle on the screen to use for the button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : boolean
            /** Make a button that is active as long as the user holds it down.
            * @param position Rectangle on the screen to use for the button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : boolean
            /** Make a button that is active as long as the user holds it down.
            * @param position Rectangle on the screen to use for the button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : boolean
            /** Make a button that is active as long as the user holds it down.
            * @param position Rectangle on the screen to use for the button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : boolean
            /** Make a single-line text field where the user can edit a string.
            * @param position Rectangle on the screen to use for the text field.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextField ($position: UnityEngine.Rect, $text: string) : string
            /** Make a single-line text field where the user can edit a string.
            * @param position Rectangle on the screen to use for the text field.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextField ($position: UnityEngine.Rect, $text: string, $maxLength: number) : string
            /** Make a single-line text field where the user can edit a string.
            * @param position Rectangle on the screen to use for the text field.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextField ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : string
            /** Make a single-line text field where the user can edit a string.
            * @param position Rectangle on the screen to use for the text field.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextField ($position: UnityEngine.Rect, $text: string, $maxLength: number, $style: UnityEngine.GUIStyle) : string
            /** Make a text field where the user can enter a password.
            * @param position Rectangle on the screen to use for the text field.
            * @param password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maskChar Character to mask the password with.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $password: string, $maskChar: number) : string
            /** Make a text field where the user can enter a password.
            * @param position Rectangle on the screen to use for the text field.
            * @param password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maskChar Character to mask the password with.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $password: string, $maskChar: number, $maxLength: number) : string
            /** Make a text field where the user can enter a password.
            * @param position Rectangle on the screen to use for the text field.
            * @param password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maskChar Character to mask the password with.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $password: string, $maskChar: number, $style: UnityEngine.GUIStyle) : string
            /** Make a text field where the user can enter a password.
            * @param position Rectangle on the screen to use for the text field.
            * @param password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maskChar Character to mask the password with.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $password: string, $maskChar: number, $maxLength: number, $style: UnityEngine.GUIStyle) : string
            /** Make a Multi-line text area where the user can edit a string.
            * @param position Rectangle on the screen to use for the text field.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextArea ($position: UnityEngine.Rect, $text: string) : string
            /** Make a Multi-line text area where the user can edit a string.
            * @param position Rectangle on the screen to use for the text field.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextArea ($position: UnityEngine.Rect, $text: string, $maxLength: number) : string
            /** Make a Multi-line text area where the user can edit a string.
            * @param position Rectangle on the screen to use for the text field.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextArea ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : string
            /** Make a Multi-line text area where the user can edit a string.
            * @param position Rectangle on the screen to use for the text field.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextArea ($position: UnityEngine.Rect, $text: string, $maxLength: number, $style: UnityEngine.GUIStyle) : string
            /** Make an on/off toggle button.
            * @param position Rectangle on the screen to use for the button.
            * @param value Is this button on or off?
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $text: string) : boolean
            /** Make an on/off toggle button.
            * @param position Rectangle on the screen to use for the button.
            * @param value Is this button on or off?
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $image: UnityEngine.Texture) : boolean
            /** Make an on/off toggle button.
            * @param position Rectangle on the screen to use for the button.
            * @param value Is this button on or off?
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $content: UnityEngine.GUIContent) : boolean
            /** Make an on/off toggle button.
            * @param position Rectangle on the screen to use for the button.
            * @param value Is this button on or off?
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $text: string, $style: UnityEngine.GUIStyle) : boolean
            /** Make an on/off toggle button.
            * @param position Rectangle on the screen to use for the button.
            * @param value Is this button on or off?
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : boolean
            /** Make an on/off toggle button.
            * @param position Rectangle on the screen to use for the button.
            * @param value Is this button on or off?
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : boolean
            public static Toggle ($position: UnityEngine.Rect, $id: number, $value: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : boolean
            /** Make a toolbar.
            * @param position Rectangle on the screen to use for the toolbar.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the toolbar buttons.
            * @param images An array of textures on the toolbar buttons.
            * @param contents An array of text, image and tooltips for the toolbar buttons.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $texts: System.Array$1<string>) : number
            /** Make a toolbar.
            * @param position Rectangle on the screen to use for the toolbar.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the toolbar buttons.
            * @param images An array of textures on the toolbar buttons.
            * @param contents An array of text, image and tooltips for the toolbar buttons.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $images: System.Array$1<UnityEngine.Texture>) : number
            /** Make a toolbar.
            * @param position Rectangle on the screen to use for the toolbar.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the toolbar buttons.
            * @param images An array of textures on the toolbar buttons.
            * @param contents An array of text, image and tooltips for the toolbar buttons.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $contents: System.Array$1<UnityEngine.GUIContent>) : number
            /** Make a toolbar.
            * @param position Rectangle on the screen to use for the toolbar.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the toolbar buttons.
            * @param images An array of textures on the toolbar buttons.
            * @param contents An array of text, image and tooltips for the toolbar buttons.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $texts: System.Array$1<string>, $style: UnityEngine.GUIStyle) : number
            /** Make a toolbar.
            * @param position Rectangle on the screen to use for the toolbar.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the toolbar buttons.
            * @param images An array of textures on the toolbar buttons.
            * @param contents An array of text, image and tooltips for the toolbar buttons.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $images: System.Array$1<UnityEngine.Texture>, $style: UnityEngine.GUIStyle) : number
            /** Make a toolbar.
            * @param position Rectangle on the screen to use for the toolbar.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the toolbar buttons.
            * @param images An array of textures on the toolbar buttons.
            * @param contents An array of text, image and tooltips for the toolbar buttons.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle) : number
            public static Toolbar ($position: UnityEngine.Rect, $selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize) : number
            /** Make a grid of buttons.
            * @param position Rectangle on the screen to use for the grid.
            * @param selected The index of the selected grid button.
            * @param texts An array of strings to show on the grid buttons.
            * @param images An array of textures on the grid buttons.
            * @param contents An array of text, image and tooltips for the grid button.
            * @param xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($position: UnityEngine.Rect, $selected: number, $texts: System.Array$1<string>, $xCount: number) : number
            /** Make a grid of buttons.
            * @param position Rectangle on the screen to use for the grid.
            * @param selected The index of the selected grid button.
            * @param texts An array of strings to show on the grid buttons.
            * @param images An array of textures on the grid buttons.
            * @param contents An array of text, image and tooltips for the grid button.
            * @param xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($position: UnityEngine.Rect, $selected: number, $images: System.Array$1<UnityEngine.Texture>, $xCount: number) : number
            /** Make a grid of buttons.
            * @param position Rectangle on the screen to use for the grid.
            * @param selected The index of the selected grid button.
            * @param texts An array of strings to show on the grid buttons.
            * @param images An array of textures on the grid buttons.
            * @param contents An array of text, image and tooltips for the grid button.
            * @param xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($position: UnityEngine.Rect, $selected: number, $content: System.Array$1<UnityEngine.GUIContent>, $xCount: number) : number
            /** Make a grid of buttons.
            * @param position Rectangle on the screen to use for the grid.
            * @param selected The index of the selected grid button.
            * @param texts An array of strings to show on the grid buttons.
            * @param images An array of textures on the grid buttons.
            * @param contents An array of text, image and tooltips for the grid button.
            * @param xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($position: UnityEngine.Rect, $selected: number, $texts: System.Array$1<string>, $xCount: number, $style: UnityEngine.GUIStyle) : number
            /** Make a grid of buttons.
            * @param position Rectangle on the screen to use for the grid.
            * @param selected The index of the selected grid button.
            * @param texts An array of strings to show on the grid buttons.
            * @param images An array of textures on the grid buttons.
            * @param contents An array of text, image and tooltips for the grid button.
            * @param xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($position: UnityEngine.Rect, $selected: number, $images: System.Array$1<UnityEngine.Texture>, $xCount: number, $style: UnityEngine.GUIStyle) : number
            /** Make a grid of buttons.
            * @param position Rectangle on the screen to use for the grid.
            * @param selected The index of the selected grid button.
            * @param texts An array of strings to show on the grid buttons.
            * @param images An array of textures on the grid buttons.
            * @param contents An array of text, image and tooltips for the grid button.
            * @param xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($position: UnityEngine.Rect, $selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $xCount: number, $style: UnityEngine.GUIStyle) : number
            /** A horizontal slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @returns The value that has been set by the user. 
            */
            public static HorizontalSlider ($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number) : number
            /** A horizontal slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @returns The value that has been set by the user. 
            */
            public static HorizontalSlider ($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle) : number
            public static HorizontalSlider ($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, $thumbExtent: UnityEngine.GUIStyle) : number
            /** A vertical slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param topValue The value at the top end of the slider.
            * @param bottomValue The value at the bottom end of the slider.
            * @param slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @returns The value that has been set by the user. 
            */
            public static VerticalSlider ($position: UnityEngine.Rect, $value: number, $topValue: number, $bottomValue: number) : number
            /** A vertical slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param topValue The value at the top end of the slider.
            * @param bottomValue The value at the bottom end of the slider.
            * @param slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @returns The value that has been set by the user. 
            */
            public static VerticalSlider ($position: UnityEngine.Rect, $value: number, $topValue: number, $bottomValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle) : number
            public static VerticalSlider ($position: UnityEngine.Rect, $value: number, $topValue: number, $bottomValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, $thumbExtent: UnityEngine.GUIStyle) : number
            public static Slider ($position: UnityEngine.Rect, $value: number, $size: number, $start: number, $end: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, $horiz: boolean, $id: number, $thumbExtent?: UnityEngine.GUIStyle) : number
            /** Make a horizontal scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.
            * @param position Rectangle on the screen to use for the scrollbar.
            * @param value The position between min and max.
            * @param size How much can we see?
            * @param leftValue The value at the left end of the scrollbar.
            * @param rightValue The value at the right end of the scrollbar.
            * @param style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static HorizontalScrollbar ($position: UnityEngine.Rect, $value: number, $size: number, $leftValue: number, $rightValue: number) : number
            /** Make a horizontal scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.
            * @param position Rectangle on the screen to use for the scrollbar.
            * @param value The position between min and max.
            * @param size How much can we see?
            * @param leftValue The value at the left end of the scrollbar.
            * @param rightValue The value at the right end of the scrollbar.
            * @param style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static HorizontalScrollbar ($position: UnityEngine.Rect, $value: number, $size: number, $leftValue: number, $rightValue: number, $style: UnityEngine.GUIStyle) : number
            /** Make a vertical scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.
            * @param position Rectangle on the screen to use for the scrollbar.
            * @param value The position between min and max.
            * @param size How much can we see?
            * @param topValue The value at the top of the scrollbar.
            * @param bottomValue The value at the bottom of the scrollbar.
            * @param style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static VerticalScrollbar ($position: UnityEngine.Rect, $value: number, $size: number, $topValue: number, $bottomValue: number) : number
            /** Make a vertical scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.
            * @param position Rectangle on the screen to use for the scrollbar.
            * @param value The position between min and max.
            * @param size How much can we see?
            * @param topValue The value at the top of the scrollbar.
            * @param bottomValue The value at the bottom of the scrollbar.
            * @param style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static VerticalScrollbar ($position: UnityEngine.Rect, $value: number, $size: number, $topValue: number, $bottomValue: number, $style: UnityEngine.GUIStyle) : number
            public static BeginClip ($position: UnityEngine.Rect, $scrollOffset: UnityEngine.Vector2, $renderOffset: UnityEngine.Vector2, $resetOffset: boolean) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param position Rectangle on the screen to use for the group.
            * @param text Text to display on the group.
            * @param image Texture to display on the group.
            * @param content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param position Rectangle on the screen to use for the group.
            * @param text Text to display on the group.
            * @param image Texture to display on the group.
            * @param content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $text: string) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param position Rectangle on the screen to use for the group.
            * @param text Text to display on the group.
            * @param image Texture to display on the group.
            * @param content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param position Rectangle on the screen to use for the group.
            * @param text Text to display on the group.
            * @param image Texture to display on the group.
            * @param content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param position Rectangle on the screen to use for the group.
            * @param text Text to display on the group.
            * @param image Texture to display on the group.
            * @param content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $style: UnityEngine.GUIStyle) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param position Rectangle on the screen to use for the group.
            * @param text Text to display on the group.
            * @param image Texture to display on the group.
            * @param content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param position Rectangle on the screen to use for the group.
            * @param text Text to display on the group.
            * @param image Texture to display on the group.
            * @param content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param position Rectangle on the screen to use for the group.
            * @param text Text to display on the group.
            * @param image Texture to display on the group.
            * @param content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param style The style to use for the background.
            */
            public static BeginGroup ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            public static EndGroup () : void
            public static BeginClip ($position: UnityEngine.Rect) : void
            public static EndClip () : void
            /** Begin a scrolling view inside your GUI.
            * @param position Rectangle on the screen to use for the ScrollView.
            * @param scrollPosition The pixel distance that the view is scrolled in the X and Y directions.
            * @param viewRect The rectangle used inside the scrollview.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @param alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when viewRect is wider than position.
            * @param alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when viewRect is taller than position.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect) : UnityEngine.Vector2
            /** Begin a scrolling view inside your GUI.
            * @param position Rectangle on the screen to use for the ScrollView.
            * @param scrollPosition The pixel distance that the view is scrolled in the X and Y directions.
            * @param viewRect The rectangle used inside the scrollview.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @param alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when viewRect is wider than position.
            * @param alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when viewRect is taller than position.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean) : UnityEngine.Vector2
            /** Begin a scrolling view inside your GUI.
            * @param position Rectangle on the screen to use for the ScrollView.
            * @param scrollPosition The pixel distance that the view is scrolled in the X and Y directions.
            * @param viewRect The rectangle used inside the scrollview.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @param alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when viewRect is wider than position.
            * @param alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when viewRect is taller than position.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle) : UnityEngine.Vector2
            /** Begin a scrolling view inside your GUI.
            * @param position Rectangle on the screen to use for the ScrollView.
            * @param scrollPosition The pixel distance that the view is scrolled in the X and Y directions.
            * @param viewRect The rectangle used inside the scrollview.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @param alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when viewRect is wider than position.
            * @param alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when viewRect is taller than position.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle) : UnityEngine.Vector2
            public static EndScrollView () : void
            /** Ends a scrollview started with a call to BeginScrollView.
            */
            public static EndScrollView ($handleScrollWheel: boolean) : void
            /** Scrolls all enclosing scrollviews so they try to make position visible.
            */
            public static ScrollTo ($position: UnityEngine.Rect) : void
            public static ScrollTowards ($position: UnityEngine.Rect, $maxDelta: number) : boolean
            public static Window ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string) : UnityEngine.Rect
            public static Window ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture) : UnityEngine.Rect
            public static Window ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent) : UnityEngine.Rect
            public static Window ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            public static Window ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            public static Window ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $title: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            public static ModalWindow ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string) : UnityEngine.Rect
            public static ModalWindow ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture) : UnityEngine.Rect
            public static ModalWindow ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent) : UnityEngine.Rect
            public static ModalWindow ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            public static ModalWindow ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            public static ModalWindow ($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            public static DragWindow () : void
            public constructor ()
        }
        /** Defines how GUI looks and behaves.
        */
        class GUISkin extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** The default font to use for all styles.
            */
            public get font(): UnityEngine.Font;
            public set font(value: UnityEngine.Font);
            /** Style used by default for GUI.Box controls.
            */
            public get box(): UnityEngine.GUIStyle;
            public set box(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.Label controls.
            */
            public get label(): UnityEngine.GUIStyle;
            public set label(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.TextField controls.
            */
            public get textField(): UnityEngine.GUIStyle;
            public set textField(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.TextArea controls.
            */
            public get textArea(): UnityEngine.GUIStyle;
            public set textArea(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.Button controls.
            */
            public get button(): UnityEngine.GUIStyle;
            public set button(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.Toggle controls.
            */
            public get toggle(): UnityEngine.GUIStyle;
            public set toggle(value: UnityEngine.GUIStyle);
            /** Style used by default for Window controls (See Also: GUI.Window).
            */
            public get window(): UnityEngine.GUIStyle;
            public set window(value: UnityEngine.GUIStyle);
            /** Style used by default for the background part of GUI.HorizontalSlider controls.
            */
            public get horizontalSlider(): UnityEngine.GUIStyle;
            public set horizontalSlider(value: UnityEngine.GUIStyle);
            /** Style used by default for the thumb that is dragged in GUI.HorizontalSlider controls.
            */
            public get horizontalSliderThumb(): UnityEngine.GUIStyle;
            public set horizontalSliderThumb(value: UnityEngine.GUIStyle);
            /** Style used by default for the background part of GUI.VerticalSlider controls.
            */
            public get verticalSlider(): UnityEngine.GUIStyle;
            public set verticalSlider(value: UnityEngine.GUIStyle);
            /** Style used by default for the thumb that is dragged in GUI.VerticalSlider controls.
            */
            public get verticalSliderThumb(): UnityEngine.GUIStyle;
            public set verticalSliderThumb(value: UnityEngine.GUIStyle);
            /** Style used by default for the background part of GUI.HorizontalScrollbar controls.
            */
            public get horizontalScrollbar(): UnityEngine.GUIStyle;
            public set horizontalScrollbar(value: UnityEngine.GUIStyle);
            /** Style used by default for the thumb that is dragged in GUI.HorizontalScrollbar controls.
            */
            public get horizontalScrollbarThumb(): UnityEngine.GUIStyle;
            public set horizontalScrollbarThumb(value: UnityEngine.GUIStyle);
            /** Style used by default for the left button on GUI.HorizontalScrollbar controls.
            */
            public get horizontalScrollbarLeftButton(): UnityEngine.GUIStyle;
            public set horizontalScrollbarLeftButton(value: UnityEngine.GUIStyle);
            /** Style used by default for the right button on GUI.HorizontalScrollbar controls.
            */
            public get horizontalScrollbarRightButton(): UnityEngine.GUIStyle;
            public set horizontalScrollbarRightButton(value: UnityEngine.GUIStyle);
            /** Style used by default for the background part of GUI.VerticalScrollbar controls.
            */
            public get verticalScrollbar(): UnityEngine.GUIStyle;
            public set verticalScrollbar(value: UnityEngine.GUIStyle);
            /** Style used by default for the thumb that is dragged in GUI.VerticalScrollbar controls.
            */
            public get verticalScrollbarThumb(): UnityEngine.GUIStyle;
            public set verticalScrollbarThumb(value: UnityEngine.GUIStyle);
            /** Style used by default for the up button on GUI.VerticalScrollbar controls.
            */
            public get verticalScrollbarUpButton(): UnityEngine.GUIStyle;
            public set verticalScrollbarUpButton(value: UnityEngine.GUIStyle);
            /** Style used by default for the down button on GUI.VerticalScrollbar controls.
            */
            public get verticalScrollbarDownButton(): UnityEngine.GUIStyle;
            public set verticalScrollbarDownButton(value: UnityEngine.GUIStyle);
            /** Style used by default for the background of ScrollView controls (see GUI.BeginScrollView).
            */
            public get scrollView(): UnityEngine.GUIStyle;
            public set scrollView(value: UnityEngine.GUIStyle);
            /** Array of GUI styles for specific needs.
            */
            public get customStyles(): System.Array$1<UnityEngine.GUIStyle>;
            public set customStyles(value: System.Array$1<UnityEngine.GUIStyle>);
            /** Generic settings for how controls should behave with this skin.
            */
            public get settings(): UnityEngine.GUISettings;
            /** Get a named GUIStyle.
            */
            public GetStyle ($styleName: string) : UnityEngine.GUIStyle
            /** Try to search for a GUIStyle. This functions returns NULL and does not give an error.
            */
            public FindStyle ($styleName: string) : UnityEngine.GUIStyle
            public GetEnumerator () : System.Collections.IEnumerator
            public constructor ()
        }
        /** The contents of a GUI element.
        */
        class GUIContent extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Shorthand for empty content.
            */
            public static none : UnityEngine.GUIContent
            /** The text contained.
            */
            public get text(): string;
            public set text(value: string);
            /** The icon image contained.
            */
            public get image(): UnityEngine.Texture;
            public set image(value: UnityEngine.Texture);
            /** The tooltip of this element.
            */
            public get tooltip(): string;
            public set tooltip(value: string);
            public constructor ()
            public constructor ($text: string)
            public constructor ($image: UnityEngine.Texture)
            public constructor ($text: string, $image: UnityEngine.Texture)
            public constructor ($text: string, $tooltip: string)
            public constructor ($image: UnityEngine.Texture, $tooltip: string)
            public constructor ($text: string, $image: UnityEngine.Texture, $tooltip: string)
            public constructor ($src: UnityEngine.GUIContent)
        }
        /** Styling information for GUI elements.
        */
        class GUIStyle extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The font to use for rendering. If null, the default font for the current GUISkin is used instead.
            */
            public get font(): UnityEngine.Font;
            public set font(value: UnityEngine.Font);
            /** How image and text of the GUIContent is combined.
            */
            public get imagePosition(): UnityEngine.ImagePosition;
            public set imagePosition(value: UnityEngine.ImagePosition);
            /** Text alignment.
            */
            public get alignment(): UnityEngine.TextAnchor;
            public set alignment(value: UnityEngine.TextAnchor);
            /** Should the text be wordwrapped?
            */
            public get wordWrap(): boolean;
            public set wordWrap(value: boolean);
            /** What to do when the contents to be rendered is too large to fit within the area given.
            */
            public get clipping(): UnityEngine.TextClipping;
            public set clipping(value: UnityEngine.TextClipping);
            /** Pixel offset to apply to the content of this GUIstyle.
            */
            public get contentOffset(): UnityEngine.Vector2;
            public set contentOffset(value: UnityEngine.Vector2);
            /** If non-0, any GUI elements rendered with this style will have the width specified here.
            */
            public get fixedWidth(): number;
            public set fixedWidth(value: number);
            /** If non-0, any GUI elements rendered with this style will have the height specified here.
            */
            public get fixedHeight(): number;
            public set fixedHeight(value: number);
            /** Can GUI elements of this style be stretched horizontally for better layouting?
            */
            public get stretchWidth(): boolean;
            public set stretchWidth(value: boolean);
            /** Can GUI elements of this style be stretched vertically for better layout?
            */
            public get stretchHeight(): boolean;
            public set stretchHeight(value: boolean);
            /** The font size to use (for dynamic fonts).
            */
            public get fontSize(): number;
            public set fontSize(value: number);
            /** The font style to use (for dynamic fonts).
            */
            public get fontStyle(): UnityEngine.FontStyle;
            public set fontStyle(value: UnityEngine.FontStyle);
            /** Enable HTML-style tags for Text Formatting Markup.
            */
            public get richText(): boolean;
            public set richText(value: boolean);
            /** The name of this GUIStyle. Used for getting them based on name.
            */
            public get name(): string;
            public set name(value: string);
            /** Rendering settings for when the component is displayed normally.
            */
            public get normal(): UnityEngine.GUIStyleState;
            public set normal(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the mouse is hovering over the control.
            */
            public get hover(): UnityEngine.GUIStyleState;
            public set hover(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the control is pressed down.
            */
            public get active(): UnityEngine.GUIStyleState;
            public set active(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the control is turned on.
            */
            public get onNormal(): UnityEngine.GUIStyleState;
            public set onNormal(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the control is turned on and the mouse is hovering it.
            */
            public get onHover(): UnityEngine.GUIStyleState;
            public set onHover(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the element is turned on and pressed down.
            */
            public get onActive(): UnityEngine.GUIStyleState;
            public set onActive(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the element has keyboard focus.
            */
            public get focused(): UnityEngine.GUIStyleState;
            public set focused(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the element has keyboard and is turned on.
            */
            public get onFocused(): UnityEngine.GUIStyleState;
            public set onFocused(value: UnityEngine.GUIStyleState);
            /** The borders of all background images.
            */
            public get border(): UnityEngine.RectOffset;
            public set border(value: UnityEngine.RectOffset);
            /** The margins between elements rendered in this style and any other GUI elements.
            */
            public get margin(): UnityEngine.RectOffset;
            public set margin(value: UnityEngine.RectOffset);
            /** Space from the edge of GUIStyle to the start of the contents.
            */
            public get padding(): UnityEngine.RectOffset;
            public set padding(value: UnityEngine.RectOffset);
            /** Extra space to be added to the background image.
            */
            public get overflow(): UnityEngine.RectOffset;
            public set overflow(value: UnityEngine.RectOffset);
            /** The height of one line of text with this style, measured in pixels. (Read Only)
            */
            public get lineHeight(): number;
            /** Shortcut for an empty GUIStyle.
            */
            public static get none(): UnityEngine.GUIStyle;
            public get isHeightDependantOnWidth(): boolean;
            /** Draw this GUIStyle on to the screen, internal version.
            */
            public Draw ($position: UnityEngine.Rect, $isHover: boolean, $isActive: boolean, $on: boolean, $hasKeyboardFocus: boolean) : void
            /** Draw the GUIStyle with a text string inside.
            */
            public Draw ($position: UnityEngine.Rect, $text: string, $isHover: boolean, $isActive: boolean, $on: boolean, $hasKeyboardFocus: boolean) : void
            /** Draw the GUIStyle with an image inside. If the image is too large to fit within the content area of the style it is scaled down.
            */
            public Draw ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $isHover: boolean, $isActive: boolean, $on: boolean, $hasKeyboardFocus: boolean) : void
            /** Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.
            */
            public Draw ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $isHover: boolean, $isActive: boolean, $on: boolean, $hasKeyboardFocus: boolean) : void
            /** Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.
            */
            public Draw ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number) : void
            /** Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.
            */
            public Draw ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number, $on: boolean) : void
            public Draw ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number, $on: boolean, $hover: boolean) : void
            /** Draw this GUIStyle with selected content.
            */
            public DrawCursor ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number, $character: number) : void
            /** Draw this GUIStyle with selected content.
            */
            public DrawWithTextSelection ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number, $firstSelectedCharacter: number, $lastSelectedCharacter: number) : void
            public static op_Implicit ($str: string) : UnityEngine.GUIStyle
            /** Get the pixel position of a given string index.
            */
            public GetCursorPixelPosition ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $cursorStringIndex: number) : UnityEngine.Vector2
            /** Get the cursor position (indexing into contents.text) when the user clicked at cursorPixelPosition.
            */
            public GetCursorStringIndex ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $cursorPixelPosition: UnityEngine.Vector2) : number
            /** Calculate the size of some content if it is rendered with this style.
            */
            public CalcSize ($content: UnityEngine.GUIContent) : UnityEngine.Vector2
            /** Calculate the size of an element formatted with this style, and a given space to content.
            */
            public CalcScreenSize ($contentSize: UnityEngine.Vector2) : UnityEngine.Vector2
            /** How tall this element will be when rendered with content and a specific width.
            */
            public CalcHeight ($content: UnityEngine.GUIContent, $width: number) : number
            /** Calculate the minimum and maximum widths for this style rendered with content.
            */
            public CalcMinMaxWidth ($content: UnityEngine.GUIContent, $minWidth: $Ref<number>, $maxWidth: $Ref<number>) : void
            public constructor ()
            public constructor ($other: UnityEngine.GUIStyle)
        }
        /** Scaling mode to draw textures with.
        */
        enum ScaleMode
        { StretchToFill = 0, ScaleAndCrop = 1, ScaleToFit = 2 }
        /** Base class for images & text strings displayed in a GUI.
        */
        class GUIElement extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Used by GUIUtility.GetControlID to inform the IMGUI system if a given control can get keyboard focus. This allows the IMGUI system to give focus appropriately when a user presses tab for cycling between controls.
        */
        enum FocusType
        { Native = 0, Keyboard = 1, Passive = 2 }
        class GUILayer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** The GUILayout class is the interface for Unity gui with automatic layout.
        */
        class GUILayout extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Make an auto-layout label.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label ($image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout label.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label ($text: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout label.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label ($content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout label.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout label.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout label.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout box.
            * @param text Text to display on the box.
            * @param image Texture to display on the box.
            * @param content Text, image and tooltip for this box.
            * @param style The style to use. If left out, the box style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box ($image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout box.
            * @param text Text to display on the box.
            * @param image Texture to display on the box.
            * @param content Text, image and tooltip for this box.
            * @param style The style to use. If left out, the box style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box ($text: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout box.
            * @param text Text to display on the box.
            * @param image Texture to display on the box.
            * @param content Text, image and tooltip for this box.
            * @param style The style to use. If left out, the box style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box ($content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout box.
            * @param text Text to display on the box.
            * @param image Texture to display on the box.
            * @param content Text, image and tooltip for this box.
            * @param style The style to use. If left out, the box style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout box.
            * @param text Text to display on the box.
            * @param image Texture to display on the box.
            * @param content Text, image and tooltip for this box.
            * @param style The style to use. If left out, the box style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an auto-layout box.
            * @param text Text to display on the box.
            * @param image Texture to display on the box.
            * @param content Text, image and tooltip for this box.
            * @param style The style to use. If left out, the box style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a single press button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button ($image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a single press button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button ($text: string, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a single press button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button ($content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a single press button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a single press button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a single press button.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton ($image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton ($text: string, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton ($content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a single-line text field where the user can edit a string.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextField ($text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a single-line text field where the user can edit a string.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextField ($text: string, $maxLength: number, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a single-line text field where the user can edit a string.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextField ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a single-line text field where the user can edit a string.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextField ($text: string, $maxLength: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maskChar Character to mask the password with.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($password: string, $maskChar: number, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maskChar Character to mask the password with.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($password: string, $maskChar: number, $maxLength: number, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maskChar Character to mask the password with.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($password: string, $maskChar: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maskChar Character to mask the password with.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField ($password: string, $maskChar: number, $maxLength: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a multi-line text field where the user can edit a string.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&amp;lt;br&amp;gt;
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextArea ($text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a multi-line text field where the user can edit a string.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&amp;lt;br&amp;gt;
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextArea ($text: string, $maxLength: number, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a multi-line text field where the user can edit a string.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&amp;lt;br&amp;gt;
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextArea ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a multi-line text field where the user can edit a string.
            * @param text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param style The style to use. If left out, the textField style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&amp;lt;br&amp;gt;
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextArea ($text: string, $maxLength: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make an on/off toggle button.
            * @param value Is the button on or off?
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle ($value: boolean, $image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make an on/off toggle button.
            * @param value Is the button on or off?
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle ($value: boolean, $text: string, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make an on/off toggle button.
            * @param value Is the button on or off?
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle ($value: boolean, $content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make an on/off toggle button.
            * @param value Is the button on or off?
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle ($value: boolean, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make an on/off toggle button.
            * @param value Is the button on or off?
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle ($value: boolean, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make an on/off toggle button.
            * @param value Is the button on or off?
            * @param text Text to display on the button.
            * @param image Texture to display on the button.
            * @param content Text, image and tooltip for this button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle ($value: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toolbar.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the buttons.
            * @param images An array of textures on the buttons.
            * @param contents An array of text, image and tooltips for the button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($selected: number, $texts: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a toolbar.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the buttons.
            * @param images An array of textures on the buttons.
            * @param contents An array of text, image and tooltips for the button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($selected: number, $images: System.Array$1<UnityEngine.Texture>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a toolbar.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the buttons.
            * @param images An array of textures on the buttons.
            * @param contents An array of text, image and tooltips for the button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a toolbar.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the buttons.
            * @param images An array of textures on the buttons.
            * @param contents An array of text, image and tooltips for the button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($selected: number, $texts: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a toolbar.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the buttons.
            * @param images An array of textures on the buttons.
            * @param contents An array of text, image and tooltips for the button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($selected: number, $images: System.Array$1<UnityEngine.Texture>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            public static Toolbar ($selected: number, $texts: System.Array$1<string>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]) : number
            public static Toolbar ($selected: number, $images: System.Array$1<UnityEngine.Texture>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a toolbar.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the buttons.
            * @param images An array of textures on the buttons.
            * @param contents An array of text, image and tooltips for the button.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar ($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            public static Toolbar ($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]) : number
            public static Toolbar ($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $enabled: System.Array$1<boolean>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            public static Toolbar ($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $enabled: System.Array$1<boolean>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a Selection Grid.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the buttons.
            * @param images An array of textures on the buttons.
            * @param contents An array of text, image and tooltips for the button.
            * @param xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($selected: number, $texts: System.Array$1<string>, $xCount: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a Selection Grid.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the buttons.
            * @param images An array of textures on the buttons.
            * @param contents An array of text, image and tooltips for the button.
            * @param xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($selected: number, $images: System.Array$1<UnityEngine.Texture>, $xCount: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a Selection Grid.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the buttons.
            * @param images An array of textures on the buttons.
            * @param contents An array of text, image and tooltips for the button.
            * @param xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($selected: number, $content: System.Array$1<UnityEngine.GUIContent>, $xCount: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a Selection Grid.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the buttons.
            * @param images An array of textures on the buttons.
            * @param contents An array of text, image and tooltips for the button.
            * @param xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($selected: number, $texts: System.Array$1<string>, $xCount: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a Selection Grid.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the buttons.
            * @param images An array of textures on the buttons.
            * @param contents An array of text, image and tooltips for the button.
            * @param xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($selected: number, $images: System.Array$1<UnityEngine.Texture>, $xCount: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a Selection Grid.
            * @param selected The index of the selected button.
            * @param texts An array of strings to show on the buttons.
            * @param images An array of textures on the buttons.
            * @param contents An array of text, image and tooltips for the button.
            * @param xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param style The style to use. If left out, the button style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid ($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $xCount: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** A horizontal slider the user can drag to change a value between a min and a max.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The value that has been set by the user. 
            */
            public static HorizontalSlider ($value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** A horizontal slider the user can drag to change a value between a min and a max.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The value that has been set by the user. 
            */
            public static HorizontalSlider ($value: number, $leftValue: number, $rightValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** A vertical slider the user can drag to change a value between a min and a max.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param topValue The value at the top end of the slider.
            * @param bottomValue The value at the bottom end of the slider.
            * @param slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The value that has been set by the user. 
            */
            public static VerticalSlider ($value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** A vertical slider the user can drag to change a value between a min and a max.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param topValue The value at the top end of the slider.
            * @param bottomValue The value at the bottom end of the slider.
            * @param slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The value that has been set by the user. 
            */
            public static VerticalSlider ($value: number, $leftValue: number, $rightValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a horizontal scrollbar.
            * @param value The position between min and max.
            * @param size How much can we see?
            * @param leftValue The value at the left end of the scrollbar.
            * @param rightValue The value at the right end of the scrollbar.
            * @param style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static HorizontalScrollbar ($value: number, $size: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a horizontal scrollbar.
            * @param value The position between min and max.
            * @param size How much can we see?
            * @param leftValue The value at the left end of the scrollbar.
            * @param rightValue The value at the right end of the scrollbar.
            * @param style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static HorizontalScrollbar ($value: number, $size: number, $leftValue: number, $rightValue: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a vertical scrollbar.
            * @param value The position between min and max.
            * @param size How much can we see?
            * @param topValue The value at the top end of the scrollbar.
            * @param bottomValue The value at the bottom end of the scrollbar.
            * @param style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static VerticalScrollbar ($value: number, $size: number, $topValue: number, $bottomValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a vertical scrollbar.
            * @param value The position between min and max.
            * @param size How much can we see?
            * @param topValue The value at the top end of the scrollbar.
            * @param bottomValue The value at the bottom end of the scrollbar.
            * @param style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static VerticalScrollbar ($value: number, $size: number, $topValue: number, $bottomValue: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Insert a space in the current layout group.
            */
            public static Space ($pixels: number) : void
            public static FlexibleSpace () : void
            /** Begin a Horizontal control group.
            * @param text Text to display on group.
            * @param image Texture to display on group.
            * @param content Text, image, and tooltip for this group.
            * @param style The style to use for background image and padding values. If left out, the background is transparent.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal (...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a Horizontal control group.
            * @param text Text to display on group.
            * @param image Texture to display on group.
            * @param content Text, image, and tooltip for this group.
            * @param style The style to use for background image and padding values. If left out, the background is transparent.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal ($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a Horizontal control group.
            * @param text Text to display on group.
            * @param image Texture to display on group.
            * @param content Text, image, and tooltip for this group.
            * @param style The style to use for background image and padding values. If left out, the background is transparent.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a Horizontal control group.
            * @param text Text to display on group.
            * @param image Texture to display on group.
            * @param content Text, image, and tooltip for this group.
            * @param style The style to use for background image and padding values. If left out, the background is transparent.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a Horizontal control group.
            * @param text Text to display on group.
            * @param image Texture to display on group.
            * @param content Text, image, and tooltip for this group.
            * @param style The style to use for background image and padding values. If left out, the background is transparent.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            public static EndHorizontal () : void
            /** Begin a vertical control group.
            * @param text Text to display on group.
            * @param image Texture to display on group.
            * @param content Text, image, and tooltip for this group.
            * @param style The style to use for background image and padding values. If left out, the background is transparent.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical (...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a vertical control group.
            * @param text Text to display on group.
            * @param image Texture to display on group.
            * @param content Text, image, and tooltip for this group.
            * @param style The style to use for background image and padding values. If left out, the background is transparent.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical ($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a vertical control group.
            * @param text Text to display on group.
            * @param image Texture to display on group.
            * @param content Text, image, and tooltip for this group.
            * @param style The style to use for background image and padding values. If left out, the background is transparent.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a vertical control group.
            * @param text Text to display on group.
            * @param image Texture to display on group.
            * @param content Text, image, and tooltip for this group.
            * @param style The style to use for background image and padding values. If left out, the background is transparent.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical ($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Begin a vertical control group.
            * @param text Text to display on group.
            * @param image Texture to display on group.
            * @param content Text, image, and tooltip for this group.
            * @param style The style to use for background image and padding values. If left out, the background is transparent.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            public static EndVertical () : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param text Optional text to display in the area.
            * @param image Optional texture to display in the area.
            * @param content Optional text, image and tooltip top display for this area.
            * @param style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param text Optional text to display in the area.
            * @param image Optional texture to display in the area.
            * @param content Optional text, image and tooltip top display for this area.
            * @param style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $text: string) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param text Optional text to display in the area.
            * @param image Optional texture to display in the area.
            * @param content Optional text, image and tooltip top display for this area.
            * @param style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param text Optional text to display in the area.
            * @param image Optional texture to display in the area.
            * @param content Optional text, image and tooltip top display for this area.
            * @param style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $content: UnityEngine.GUIContent) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param text Optional text to display in the area.
            * @param image Optional texture to display in the area.
            * @param content Optional text, image and tooltip top display for this area.
            * @param style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $style: UnityEngine.GUIStyle) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param text Optional text to display in the area.
            * @param image Optional texture to display in the area.
            * @param content Optional text, image and tooltip top display for this area.
            * @param style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param text Optional text to display in the area.
            * @param image Optional texture to display in the area.
            * @param content Optional text, image and tooltip top display for this area.
            * @param style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle) : void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param text Optional text to display in the area.
            * @param image Optional texture to display in the area.
            * @param content Optional text, image and tooltip top display for this area.
            * @param style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea ($screenRect: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            public static EndArea () : void
            /** Begin an automatically laid out scrollview.
            * @param scrollPosition The position to use display.
            * @param alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param scrollPosition The position to use display.
            * @param alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param scrollPosition The position to use display.
            * @param alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param scrollPosition The position to use display.
            * @param alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $style: UnityEngine.GUIStyle) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param scrollPosition The position to use display.
            * @param alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param scrollPosition The position to use display.
            * @param alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param scrollPosition The position to use display.
            * @param alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, $background: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            public static EndScrollView () : void
            public static Window ($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static Window ($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static Window ($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static Window ($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static Window ($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static Window ($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Option passed to a control to give it an absolute width.
            */
            public static Width ($width: number) : UnityEngine.GUILayoutOption
            /** Option passed to a control to specify a minimum width.
            */
            public static MinWidth ($minWidth: number) : UnityEngine.GUILayoutOption
            /** Option passed to a control to specify a maximum width.
            */
            public static MaxWidth ($maxWidth: number) : UnityEngine.GUILayoutOption
            /** Option passed to a control to give it an absolute height.
            */
            public static Height ($height: number) : UnityEngine.GUILayoutOption
            /** Option passed to a control to specify a minimum height.
            */
            public static MinHeight ($minHeight: number) : UnityEngine.GUILayoutOption
            /** Option passed to a control to specify a maximum height.
            */
            public static MaxHeight ($maxHeight: number) : UnityEngine.GUILayoutOption
            /** Option passed to a control to allow or disallow horizontal expansion.
            */
            public static ExpandWidth ($expand: boolean) : UnityEngine.GUILayoutOption
            /** Option passed to a control to allow or disallow vertical expansion.
            */
            public static ExpandHeight ($expand: boolean) : UnityEngine.GUILayoutOption
            public constructor ()
        }
        /** Class internally used to pass layout options into GUILayout functions. You don't use these directly, but construct them with the layouting functions in the GUILayout class.
        */
        class GUILayoutOption extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Utility functions for implementing and extending the GUILayout class.
        */
        class GUILayoutUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Reserve layout space for a rectangle for displaying some contents with a specific style.
            * @param content The content to make room for displaying.
            * @param style The GUIStyle to layout for.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle that is large enough to contain content when rendered in style. 
            */
            public static GetRect ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Reserve layout space for a rectangle for displaying some contents with a specific style.
            * @param content The content to make room for displaying.
            * @param style The GUIStyle to layout for.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle that is large enough to contain content when rendered in style. 
            */
            public static GetRect ($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a fixed content area.
            * @param width The width of the area you want.
            * @param height The height of the area you want.
            * @param style An optional GUIStyle to layout for. If specified, the style's padding value will be added to your sizes & its margin value will be used for spacing.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rectanlge to put your control in. 
            */
            public static GetRect ($width: number, $height: number) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a fixed content area.
            * @param width The width of the area you want.
            * @param height The height of the area you want.
            * @param style An optional GUIStyle to layout for. If specified, the style's padding value will be added to your sizes & its margin value will be used for spacing.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rectanlge to put your control in. 
            */
            public static GetRect ($width: number, $height: number, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a fixed content area.
            * @param width The width of the area you want.
            * @param height The height of the area you want.
            * @param style An optional GUIStyle to layout for. If specified, the style's padding value will be added to your sizes & its margin value will be used for spacing.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rectanlge to put your control in. 
            */
            public static GetRect ($width: number, $height: number, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a fixed content area.
            * @param width The width of the area you want.
            * @param height The height of the area you want.
            * @param style An optional GUIStyle to layout for. If specified, the style's padding value will be added to your sizes & its margin value will be used for spacing.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rectanlge to put your control in. 
            */
            public static GetRect ($width: number, $height: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Reserve layout space for a flexible rect.
            * @param minWidth The minimum width of the area passed back.
            * @param maxWidth The maximum width of the area passed back.
            * @param minHeight The minimum width of the area passed back.
            * @param maxHeight The maximum width of the area passed back.
            * @param style An optional style. If specified, the style's padding value will be added to the sizes requested & the style's margin values will be used for spacing.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle with size between minWidth & maxWidth on both axes. 
            */
            public static GetRect ($minWidth: number, $maxWidth: number, $minHeight: number, $maxHeight: number) : UnityEngine.Rect
            /** Reserve layout space for a flexible rect.
            * @param minWidth The minimum width of the area passed back.
            * @param maxWidth The maximum width of the area passed back.
            * @param minHeight The minimum width of the area passed back.
            * @param maxHeight The maximum width of the area passed back.
            * @param style An optional style. If specified, the style's padding value will be added to the sizes requested & the style's margin values will be used for spacing.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle with size between minWidth & maxWidth on both axes. 
            */
            public static GetRect ($minWidth: number, $maxWidth: number, $minHeight: number, $maxHeight: number, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Reserve layout space for a flexible rect.
            * @param minWidth The minimum width of the area passed back.
            * @param maxWidth The maximum width of the area passed back.
            * @param minHeight The minimum width of the area passed back.
            * @param maxHeight The maximum width of the area passed back.
            * @param style An optional style. If specified, the style's padding value will be added to the sizes requested & the style's margin values will be used for spacing.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle with size between minWidth & maxWidth on both axes. 
            */
            public static GetRect ($minWidth: number, $maxWidth: number, $minHeight: number, $maxHeight: number, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Reserve layout space for a flexible rect.
            * @param minWidth The minimum width of the area passed back.
            * @param maxWidth The maximum width of the area passed back.
            * @param minHeight The minimum width of the area passed back.
            * @param maxHeight The maximum width of the area passed back.
            * @param style An optional style. If specified, the style's padding value will be added to the sizes requested & the style's margin values will be used for spacing.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle with size between minWidth & maxWidth on both axes. 
            */
            public static GetRect ($minWidth: number, $maxWidth: number, $minHeight: number, $maxHeight: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static GetLastRect () : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a specific aspect ratio.
            * @param aspect The aspect ratio of the element (width / height).
            * @param style An optional style. If specified, the style's padding value will be added to the sizes of the returned rectangle & the style's margin values will be used for spacing.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rect for the control. 
            */
            public static GetAspectRect ($aspect: number) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a specific aspect ratio.
            * @param aspect The aspect ratio of the element (width / height).
            * @param style An optional style. If specified, the style's padding value will be added to the sizes of the returned rectangle & the style's margin values will be used for spacing.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rect for the control. 
            */
            public static GetAspectRect ($aspect: number, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a specific aspect ratio.
            * @param aspect The aspect ratio of the element (width / height).
            * @param style An optional style. If specified, the style's padding value will be added to the sizes of the returned rectangle & the style's margin values will be used for spacing.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rect for the control. 
            */
            public static GetAspectRect ($aspect: number, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Reserve layout space for a rectangle with a specific aspect ratio.
            * @param aspect The aspect ratio of the element (width / height).
            * @param style An optional style. If specified, the style's padding value will be added to the sizes of the returned rectangle & the style's margin values will be used for spacing.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rect for the control. 
            */
            public static GetAspectRect ($aspect: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public constructor ()
        }
        /** General settings for how the GUI behaves.
        */
        class GUISettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Should double-clicking select words in text fields.
            */
            public get doubleClickSelectsWord(): boolean;
            public set doubleClickSelectsWord(value: boolean);
            /** Should triple-clicking select whole text in text fields.
            */
            public get tripleClickSelectsLine(): boolean;
            public set tripleClickSelectsLine(value: boolean);
            /** The color of the cursor in text fields.
            */
            public get cursorColor(): UnityEngine.Color;
            public set cursorColor(value: UnityEngine.Color);
            /** The speed of text field cursor flashes.
            */
            public get cursorFlashSpeed(): number;
            public set cursorFlashSpeed(value: number);
            /** The color of the selection rect in text fields.
            */
            public get selectionColor(): UnityEngine.Color;
            public set selectionColor(value: UnityEngine.Color);
            public constructor ()
        }
        /** Script interface for.
        */
        class Font extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The material used for the font display.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public get fontNames(): System.Array$1<string>;
            public set fontNames(value: System.Array$1<string>);
            /** Is the font a dynamic font.
            */
            public get dynamic(): boolean;
            /** The ascent of the font.
            */
            public get ascent(): number;
            /** The default size of the font.
            */
            public get fontSize(): number;
            /** Access an array of all characters contained in the font texture.
            */
            public get characterInfo(): System.Array$1<UnityEngine.CharacterInfo>;
            public set characterInfo(value: System.Array$1<UnityEngine.CharacterInfo>);
            /** The line height of the font.
            */
            public get lineHeight(): number;
            public static add_textureRebuilt ($value: System.Action$1<UnityEngine.Font>) : void
            public static remove_textureRebuilt ($value: System.Action$1<UnityEngine.Font>) : void
            /** Creates a Font object which lets you render a font installed on the user machine.
            * @param fontname The name of the OS font to use for this font object.
            * @param size The default character size of the generated font.
            * @param fontnames Am array of names of OS fonts to use for this font object. When rendering characters using this font object, the first font which is installed on the machine, which contains the requested character will be used.
            * @returns The generate Font object. 
            */
            public static CreateDynamicFontFromOSFont ($fontname: string, $size: number) : UnityEngine.Font
            /** Creates a Font object which lets you render a font installed on the user machine.
            * @param fontname The name of the OS font to use for this font object.
            * @param size The default character size of the generated font.
            * @param fontnames Am array of names of OS fonts to use for this font object. When rendering characters using this font object, the first font which is installed on the machine, which contains the requested character will be used.
            * @returns The generate Font object. 
            */
            public static CreateDynamicFontFromOSFont ($fontnames: System.Array$1<string>, $size: number) : UnityEngine.Font
            /** Returns the maximum number of verts that the text generator may return for a given string.
            * @param str Input string.
            */
            public static GetMaxVertsForString ($str: string) : number
            /** Does this font have a specific character?
            * @param c The character to check for.
            * @returns Whether or not the font has the character specified. 
            */
            public HasCharacter ($c: number) : boolean
            public static GetOSInstalledFontNames () : System.Array$1<string>
            public static GetPathsToOSFonts () : System.Array$1<string>
            /** Get rendering info for a specific character.
            * @param ch The character you need rendering information for.
            * @param info Returns the CharacterInfo struct with the rendering information for the character (if available).
            * @param size The size of the character (default value of zero will use font default size).
            * @param style The style of the character.
            */
            public GetCharacterInfo ($ch: number, $info: $Ref<UnityEngine.CharacterInfo>, $size: number, $style: UnityEngine.FontStyle) : boolean
            /** Get rendering info for a specific character.
            * @param ch The character you need rendering information for.
            * @param info Returns the CharacterInfo struct with the rendering information for the character (if available).
            * @param size The size of the character (default value of zero will use font default size).
            * @param style The style of the character.
            */
            public GetCharacterInfo ($ch: number, $info: $Ref<UnityEngine.CharacterInfo>, $size: number) : boolean
            /** Get rendering info for a specific character.
            * @param ch The character you need rendering information for.
            * @param info Returns the CharacterInfo struct with the rendering information for the character (if available).
            * @param size The size of the character (default value of zero will use font default size).
            * @param style The style of the character.
            */
            public GetCharacterInfo ($ch: number, $info: $Ref<UnityEngine.CharacterInfo>) : boolean
            /** Request characters to be added to the font texture (dynamic fonts only).
            * @param characters The characters which are needed to be in the font texture.
            * @param size The size of the requested characters (the default value of zero will use the font's default size).
            * @param style The style of the requested characters.
            */
            public RequestCharactersInTexture ($characters: string, $size: number, $style: UnityEngine.FontStyle) : void
            public RequestCharactersInTexture ($characters: string, $size: number) : void
            public RequestCharactersInTexture ($characters: string) : void
            public constructor ()
            public constructor ($name: string)
        }
        /** Specialized values for the given states used by GUIStyle objects.
        */
        class GUIStyleState extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The background image used by GUI elements in this given state.
            */
            public get background(): UnityEngine.Texture2D;
            public set background(value: UnityEngine.Texture2D);
            /** The text color used by GUI elements in this state.
            */
            public get textColor(): UnityEngine.Color;
            public set textColor(value: UnityEngine.Color);
            /** Background images used by this state when on a high-resolution screen. It should either be left empty, or contain a single image that is exactly twice the resolution of background. This is only used by the editor. The field is not copied to player data, and is not accessible from player code.
            */
            public get scaledBackgrounds(): System.Array$1<UnityEngine.Texture2D>;
            public set scaledBackgrounds(value: System.Array$1<UnityEngine.Texture2D>);
            public constructor ()
        }
        /** How image and text is placed inside GUIStyle.
        */
        enum ImagePosition
        { ImageLeft = 0, ImageAbove = 1, ImageOnly = 2, TextOnly = 3 }
        /** Where the anchor of the text is placed.
        */
        enum TextAnchor
        { UpperLeft = 0, UpperCenter = 1, UpperRight = 2, MiddleLeft = 3, MiddleCenter = 4, MiddleRight = 5, LowerLeft = 6, LowerCenter = 7, LowerRight = 8 }
        /** Different methods for how the GUI system handles text being too large to fit the rectangle allocated.
        */
        enum TextClipping
        { Overflow = 0, Clip = 1 }
        /** Font Style applied to GUI Texts, Text Meshes or GUIStyles.
        */
        enum FontStyle
        { Normal = 0, Bold = 1, Italic = 2, BoldAndItalic = 3 }
        /** Allows to control for which display the OnGUI is called.
        */
        class GUITargetAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($displayIndex: number)
            public constructor ($displayIndex: number, $displayIndex1: number)
            public constructor ($displayIndex: number, $displayIndex1: number, ...displayIndexList: number[])
        }
        class GUITexture extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Utility class for making new GUI controls.
        */
        class GUIUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A global property, which is true if a ModalWindow is being displayed, false otherwise.
            */
            public static get hasModalWindow(): boolean;
            /** Get access to the system-wide clipboard.
            */
            public static get systemCopyBuffer(): string;
            public static set systemCopyBuffer(value: string);
            /** The controlID of the current hot control.
            */
            public static get hotControl(): number;
            public static set hotControl(value: number);
            /** The controlID of the control that has keyboard focus.
            */
            public static get keyboardControl(): number;
            public static set keyboardControl(value: number);
            /** Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.
            */
            public static GetControlID ($hint: number, $focusType: UnityEngine.FocusType, $rect: UnityEngine.Rect) : number
            /** Align a local space rectangle to the pixel grid.
            * @param local The local space rectangle that needs to be processed.
            * @param widthInPixels Width, in pixel units, of the axis-aligned bounding box that encompasses the aligned points.
            * @param heightInPixels Height, in pixel units, of the axis-aligned bounding box that encompasses the aligned points.
            * @returns The aligned rectangle in local space. 
            */
            public static AlignRectToDevice ($rect: UnityEngine.Rect, $widthInPixels: $Ref<number>, $heightInPixels: $Ref<number>) : UnityEngine.Rect
            /** Get a unique ID for a control.
            */
            public static GetControlID ($focus: UnityEngine.FocusType) : number
            /** Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.
            */
            public static GetControlID ($contents: UnityEngine.GUIContent, $focus: UnityEngine.FocusType) : number
            /** Get a unique ID for a control.
            */
            public static GetControlID ($focus: UnityEngine.FocusType, $position: UnityEngine.Rect) : number
            /** Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.
            */
            public static GetControlID ($contents: UnityEngine.GUIContent, $focus: UnityEngine.FocusType, $position: UnityEngine.Rect) : number
            /** Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.
            */
            public static GetControlID ($hint: number, $focus: UnityEngine.FocusType) : number
            /** Get a state object from a controlID.
            */
            public static GetStateObject ($t: System.Type, $controlID: number) : any
            /** Get an existing state object from a controlID.
            */
            public static QueryStateObject ($t: System.Type, $controlID: number) : any
            public static ExitGUI () : void
            /** Convert a point from GUI position to screen space.
            */
            public static GUIToScreenPoint ($guiPoint: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Convert a rect from GUI position to screen space.
            */
            public static GUIToScreenRect ($guiRect: UnityEngine.Rect) : UnityEngine.Rect
            /** Convert a point from screen space to GUI position.
            */
            public static ScreenToGUIPoint ($screenPoint: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Convert a rect from screen space to GUI position.
            */
            public static ScreenToGUIRect ($screenRect: UnityEngine.Rect) : UnityEngine.Rect
            /** Helper function to rotate the GUI around a point.
            */
            public static RotateAroundPivot ($angle: number, $pivotPoint: UnityEngine.Vector2) : void
            /** Helper function to scale the GUI around a point.
            */
            public static ScaleAroundPivot ($scale: UnityEngine.Vector2, $pivotPoint: UnityEngine.Vector2) : void
            /** Align a local space rectangle to the pixel grid.
            * @param local The local space rectangle that needs to be processed.
            * @param widthInPixels Width, in pixel units, of the axis-aligned bounding box that encompasses the aligned points.
            * @param heightInPixels Height, in pixel units, of the axis-aligned bounding box that encompasses the aligned points.
            * @returns The aligned rectangle in local space. 
            */
            public static AlignRectToDevice ($rect: UnityEngine.Rect) : UnityEngine.Rect
            public constructor ()
        }
        /** An exception that will prevent all subsequent immediate mode GUI functions from evaluating for the remainder of the GUI loop.
        */
        class ExitGUIException extends System.Exception implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class TextEditor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public keyboardOnScreen : UnityEngine.TouchScreenKeyboard
            public controlID : number
            public style : UnityEngine.GUIStyle
            public multiline : boolean
            public hasHorizontalCursorPos : boolean
            public isPasswordField : boolean
            public scrollOffset : UnityEngine.Vector2
            public graphicalCursorPos : UnityEngine.Vector2
            public graphicalSelectCursorPos : UnityEngine.Vector2
            public get text(): string;
            public set text(value: string);
            public get position(): UnityEngine.Rect;
            public set position(value: UnityEngine.Rect);
            public get cursorIndex(): number;
            public set cursorIndex(value: number);
            public get selectIndex(): number;
            public set selectIndex(value: number);
            public get doubleClickSnapping(): UnityEngine.TextEditor.DblClickSnapping;
            public set doubleClickSnapping(value: UnityEngine.TextEditor.DblClickSnapping);
            public get altCursorPosition(): number;
            public set altCursorPosition(value: number);
            public get hasSelection(): boolean;
            public get SelectedText(): string;
            public OnFocus () : void
            public OnLostFocus () : void
            public HandleKeyEvent ($e: UnityEngine.Event) : boolean
            public DeleteLineBack () : boolean
            public DeleteWordBack () : boolean
            public DeleteWordForward () : boolean
            public Delete () : boolean
            public CanPaste () : boolean
            public Backspace () : boolean
            public SelectAll () : void
            public SelectNone () : void
            public DeleteSelection () : boolean
            public ReplaceSelection ($replace: string) : void
            public Insert ($c: number) : void
            public MoveSelectionToAltCursor () : void
            public MoveRight () : void
            public MoveLeft () : void
            public MoveUp () : void
            public MoveDown () : void
            public MoveLineStart () : void
            public MoveLineEnd () : void
            public MoveGraphicalLineStart () : void
            public MoveGraphicalLineEnd () : void
            public MoveTextStart () : void
            public MoveTextEnd () : void
            public MoveParagraphForward () : void
            public MoveParagraphBackward () : void
            public MoveCursorToPosition ($cursorPosition: UnityEngine.Vector2) : void
            public MoveAltCursorToPosition ($cursorPosition: UnityEngine.Vector2) : void
            public IsOverSelection ($cursorPosition: UnityEngine.Vector2) : boolean
            public SelectToPosition ($cursorPosition: UnityEngine.Vector2) : void
            public SelectLeft () : void
            public SelectRight () : void
            public SelectUp () : void
            public SelectDown () : void
            public SelectTextEnd () : void
            public SelectTextStart () : void
            public MouseDragSelectsWholeWords ($on: boolean) : void
            public DblClickSnap ($snapping: UnityEngine.TextEditor.DblClickSnapping) : void
            public MoveWordRight () : void
            public MoveToStartOfNextWord () : void
            public MoveToEndOfPreviousWord () : void
            public SelectToStartOfNextWord () : void
            public SelectToEndOfPreviousWord () : void
            public FindStartOfNextWord ($p: number) : number
            public MoveWordLeft () : void
            public SelectWordRight () : void
            public SelectWordLeft () : void
            public ExpandSelectGraphicalLineStart () : void
            public ExpandSelectGraphicalLineEnd () : void
            public SelectGraphicalLineStart () : void
            public SelectGraphicalLineEnd () : void
            public SelectParagraphForward () : void
            public SelectParagraphBackward () : void
            public SelectCurrentWord () : void
            public SelectCurrentParagraph () : void
            public UpdateScrollOffsetIfNeeded ($evt: UnityEngine.Event) : void
            public DrawCursor ($newText: string) : void
            public SaveBackup () : void
            public Undo () : void
            public Cut () : boolean
            public Copy () : void
            public Paste () : boolean
            public DetectFocusChange () : void
            public constructor ()
        }
        /** This class provides utility and extension methods to convert image data from or to PNG, EXR, TGA, and JPEG formats.
        */
        class ImageConversion extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Encodes the specified texture in TGA format.
            * @param tex The texture to encode.
            */
            public static EncodeToTGA ($tex: UnityEngine.Texture2D) : System.Array$1<number>
            /** Encodes this texture into PNG format.
            * @param tex The texture to convert.
            */
            public static EncodeToPNG ($tex: UnityEngine.Texture2D) : System.Array$1<number>
            /** Encodes this texture into JPG format.
            * @param tex Text texture to convert.
            * @param quality JPG quality to encode with, 1..100 (default 75).
            */
            public static EncodeToJPG ($tex: UnityEngine.Texture2D, $quality: number) : System.Array$1<number>
            /** Encodes this texture into JPG format.
            * @param tex Text texture to convert.
            * @param quality JPG quality to encode with, 1..100 (default 75).
            */
            public static EncodeToJPG ($tex: UnityEngine.Texture2D) : System.Array$1<number>
            public static EncodeToEXR ($tex: UnityEngine.Texture2D, $flags: UnityEngine.Texture2D.EXRFlags) : System.Array$1<number>
            public static EncodeToEXR ($tex: UnityEngine.Texture2D) : System.Array$1<number>
            /** Loads PNG/JPG image byte array into a texture.
            * @param data The byte array containing the image data to load.
            * @param markNonReadable Set to false by default, pass true to optionally mark the texture as non-readable.
            * @param tex The texture to load the image into.
            * @returns Returns true if the data can be loaded, false otherwise. 
            */
            public static LoadImage ($tex: UnityEngine.Texture2D, $data: System.Array$1<number>, $markNonReadable: boolean) : boolean
            public static LoadImage ($tex: UnityEngine.Texture2D, $data: System.Array$1<number>) : boolean
            public static EncodeArrayToTGA ($array: System.Array, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $width: number, $height: number, $rowBytes?: number) : System.Array$1<number>
            public static EncodeArrayToPNG ($array: System.Array, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $width: number, $height: number, $rowBytes?: number) : System.Array$1<number>
            public static EncodeArrayToJPG ($array: System.Array, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $width: number, $height: number, $rowBytes?: number, $quality?: number) : System.Array$1<number>
            public static EncodeArrayToEXR ($array: System.Array, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $width: number, $height: number, $rowBytes?: number, $flags?: UnityEngine.Texture2D.EXRFlags) : System.Array$1<number>
        }
        /** AndroidInput provides support for off-screen touch input, such as a touchpad.
        */
        class AndroidInput extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Number of secondary touches. Guaranteed not to change throughout the frame. (Read Only).
            */
            public static get touchCountSecondary(): number;
            /** Property indicating whether the system provides secondary touch input.
            */
            public static get secondaryTouchEnabled(): boolean;
            /** Property indicating the width of the secondary touchpad.
            */
            public static get secondaryTouchWidth(): number;
            /** Property indicating the height of the secondary touchpad.
            */
            public static get secondaryTouchHeight(): number;
            /** Returns object representing status of a specific touch on a secondary touchpad (Does not allocate temporary variables).
            */
            public static GetSecondaryTouch ($index: number) : UnityEngine.Touch
        }
        /** Structure describing the status of a finger touching the screen.
        */
        class Touch extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The unique index for the touch.
            */
            public get fingerId(): number;
            public set fingerId(value: number);
            /** The position of the touch in pixel coordinates.
            */
            public get position(): UnityEngine.Vector2;
            public set position(value: UnityEngine.Vector2);
            /** The raw position used for the touch.
            */
            public get rawPosition(): UnityEngine.Vector2;
            public set rawPosition(value: UnityEngine.Vector2);
            /** The position delta since last change.
            */
            public get deltaPosition(): UnityEngine.Vector2;
            public set deltaPosition(value: UnityEngine.Vector2);
            /** Amount of time that has passed since the last recorded change in Touch values.
            */
            public get deltaTime(): number;
            public set deltaTime(value: number);
            /** Number of taps.
            */
            public get tapCount(): number;
            public set tapCount(value: number);
            /** Describes the phase of the touch.
            */
            public get phase(): UnityEngine.TouchPhase;
            public set phase(value: UnityEngine.TouchPhase);
            /** The current amount of pressure being applied to a touch.  1.0f is considered to be the pressure of an average touch.  If Input.touchPressureSupported returns false, the value of this property will always be 1.0f.
            */
            public get pressure(): number;
            public set pressure(value: number);
            /** The maximum possible pressure value for a platform.  If Input.touchPressureSupported returns false, the value of this property will always be 1.0f.
            */
            public get maximumPossiblePressure(): number;
            public set maximumPossiblePressure(value: number);
            /** A value that indicates whether a touch was of Direct, Indirect (or remote), or Stylus type.
            */
            public get type(): UnityEngine.TouchType;
            public set type(value: UnityEngine.TouchType);
            /** Value of 0 radians indicates that the stylus is parallel to the surface, pi/2 indicates that it is perpendicular.
            */
            public get altitudeAngle(): number;
            public set altitudeAngle(value: number);
            /** Value of 0 radians indicates that the stylus is pointed along the x-axis of the device.
            */
            public get azimuthAngle(): number;
            public set azimuthAngle(value: number);
            /** An estimated value of the radius of a touch.  Add radiusVariance to get the maximum touch size, subtract it to get the minimum touch size.
            */
            public get radius(): number;
            public set radius(value: number);
            /** This value determines the accuracy of the touch radius. Add this value to the radius to get the maximum touch size, subtract it to get the minimum touch size.
            */
            public get radiusVariance(): number;
            public set radiusVariance(value: number);
        }
        /** Describes phase of a finger touch.
        */
        enum TouchPhase
        { Began = 0, Moved = 1, Stationary = 2, Ended = 3, Canceled = 4 }
        /** Controls IME input.
        */
        enum IMECompositionMode
        { Auto = 0, On = 1, Off = 2 }
        /** Describes whether a touch is direct, indirect (or remote), or from a stylus.
        */
        enum TouchType
        { Direct = 0, Indirect = 1, Stylus = 2 }
        /** Describes physical orientation of the device as determined by the OS.
        */
        enum DeviceOrientation
        { Unknown = 0, Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, FaceUp = 5, FaceDown = 6 }
        /** Structure describing acceleration status of the device.
        */
        class AccelerationEvent extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Value of acceleration.
            */
            public get acceleration(): UnityEngine.Vector3;
            /** Amount of time passed since last accelerometer measurement.
            */
            public get deltaTime(): number;
        }
        /** Interface into the Gyroscope.
        */
        class Gyroscope extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns rotation rate as measured by the device's gyroscope.
            */
            public get rotationRate(): UnityEngine.Vector3;
            /** Returns unbiased rotation rate as measured by the device's gyroscope.
            */
            public get rotationRateUnbiased(): UnityEngine.Vector3;
            /** Returns the gravity acceleration vector expressed in the device's reference frame.
            */
            public get gravity(): UnityEngine.Vector3;
            /** Returns the acceleration that the user is giving to the device.
            */
            public get userAcceleration(): UnityEngine.Vector3;
            /** Returns the attitude (ie, orientation in space) of the device.
            */
            public get attitude(): UnityEngine.Quaternion;
            /** Sets or retrieves the enabled status of this gyroscope.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** Sets or retrieves gyroscope interval in seconds.
            */
            public get updateInterval(): number;
            public set updateInterval(value: number);
        }
        /** Structure describing device location.
        */
        class LocationInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Geographical device location latitude.
            */
            public get latitude(): number;
            /** Geographical device location latitude.
            */
            public get longitude(): number;
            /** Geographical device location altitude.
            */
            public get altitude(): number;
            /** Horizontal accuracy of the location.
            */
            public get horizontalAccuracy(): number;
            /** Vertical accuracy of the location.
            */
            public get verticalAccuracy(): number;
            /** Timestamp (in seconds since 1970) when location was last time updated.
            */
            public get timestamp(): number;
        }
        /** Describes location service status.
        */
        enum LocationServiceStatus
        { Stopped = 0, Initializing = 1, Running = 2, Failed = 3 }
        /** Interface into location functionality.
        */
        class LocationService extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Specifies whether location service is enabled in user settings.
            */
            public get isEnabledByUser(): boolean;
            /** Returns location service status.
            */
            public get status(): UnityEngine.LocationServiceStatus;
            /** Last measured device geographical location.
            */
            public get lastData(): UnityEngine.LocationInfo;
            /** Starts location service updates.  Last location coordinates could be.
            */
            public Start ($desiredAccuracyInMeters: number, $updateDistanceInMeters: number) : void
            /** Starts location service updates.  Last location coordinates could be.
            */
            public Start ($desiredAccuracyInMeters: number) : void
            public Start () : void
            public Stop () : void
            public constructor ()
        }
        /** Interface into compass functionality.
        */
        class Compass extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The heading in degrees relative to the magnetic North Pole. (Read Only)
            */
            public get magneticHeading(): number;
            /** The heading in degrees relative to the geographic North Pole. (Read Only)
            */
            public get trueHeading(): number;
            /** Accuracy of heading reading in degrees.
            */
            public get headingAccuracy(): number;
            /** The raw geomagnetic data measured in microteslas. (Read Only)
            */
            public get rawVector(): UnityEngine.Vector3;
            /** Timestamp (in seconds since 1970) when the heading was last time updated. (Read Only)
            */
            public get timestamp(): number;
            /** Used to enable or disable compass. Note, that if you want Input.compass.trueHeading property to contain a valid value, you must also enable location updates by calling Input.location.Start().
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            public constructor ()
        }
        /** Interface into the Input system.
        */
        class Input extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Enables/Disables mouse simulation with touches. By default this option is enabled.
            */
            public static get simulateMouseWithTouches(): boolean;
            public static set simulateMouseWithTouches(value: boolean);
            /** Is any key or mouse button currently held down? (Read Only)
            */
            public static get anyKey(): boolean;
            /** Returns true the first frame the user hits any key or mouse button. (Read Only)
            */
            public static get anyKeyDown(): boolean;
            /** Returns the keyboard input entered this frame. (Read Only)
            */
            public static get inputString(): string;
            /** The current mouse position in pixel coordinates. (Read Only)
            */
            public static get mousePosition(): UnityEngine.Vector3;
            /** The current mouse scroll delta. (Read Only)
            */
            public static get mouseScrollDelta(): UnityEngine.Vector2;
            /** Controls enabling and disabling of IME input composition.
            */
            public static get imeCompositionMode(): UnityEngine.IMECompositionMode;
            public static set imeCompositionMode(value: UnityEngine.IMECompositionMode);
            /** The current IME composition string being typed by the user.
            */
            public static get compositionString(): string;
            /** Does the user have an IME keyboard input source selected?
            */
            public static get imeIsSelected(): boolean;
            /** The current text input position used by IMEs to open windows.
            */
            public static get compositionCursorPos(): UnityEngine.Vector2;
            public static set compositionCursorPos(value: UnityEngine.Vector2);
            /** Indicates if a mouse device is detected.
            */
            public static get mousePresent(): boolean;
            /** Number of touches. Guaranteed not to change throughout the frame. (Read Only)
            */
            public static get touchCount(): number;
            /** Bool value which let's users check if touch pressure is supported.
            */
            public static get touchPressureSupported(): boolean;
            /** Returns true when Stylus Touch is supported by a device or platform.
            */
            public static get stylusTouchSupported(): boolean;
            /** Returns whether the device on which application is currently running supports touch input.
            */
            public static get touchSupported(): boolean;
            /** Property indicating whether the system handles multiple touches.
            */
            public static get multiTouchEnabled(): boolean;
            public static set multiTouchEnabled(value: boolean);
            /** Device physical orientation as reported by OS. (Read Only)
            */
            public static get deviceOrientation(): UnityEngine.DeviceOrientation;
            /** Last measured linear acceleration of a device in three-dimensional space. (Read Only)
            */
            public static get acceleration(): UnityEngine.Vector3;
            /** This property controls if input sensors should be compensated for screen orientation.
            */
            public static get compensateSensors(): boolean;
            public static set compensateSensors(value: boolean);
            /** Number of acceleration measurements which occurred during last frame.
            */
            public static get accelerationEventCount(): number;
            /** Should  Back button quit the application?
            Only usable on Android, Windows Phone or Windows Tablets.
            */
            public static get backButtonLeavesApp(): boolean;
            public static set backButtonLeavesApp(value: boolean);
            /** Property for accessing device location (handheld devices only). (Read Only)
            */
            public static get location(): UnityEngine.LocationService;
            /** Property for accessing compass (handheld devices only). (Read Only)
            */
            public static get compass(): UnityEngine.Compass;
            /** Returns default gyroscope.
            */
            public static get gyro(): UnityEngine.Gyroscope;
            /** Returns list of objects representing status of all touches during last frame. (Read Only) (Allocates temporary variables).
            */
            public static get touches(): System.Array$1<UnityEngine.Touch>;
            /** Returns list of acceleration measurements which occurred during the last frame. (Read Only) (Allocates temporary variables).
            */
            public static get accelerationEvents(): System.Array$1<UnityEngine.AccelerationEvent>;
            /** Returns the value of the virtual axis identified by axisName.
            */
            public static GetAxis ($axisName: string) : number
            /** Returns the value of the virtual axis identified by axisName with no smoothing filtering applied.
            */
            public static GetAxisRaw ($axisName: string) : number
            /** Returns true while the virtual button identified by buttonName is held down.
            * @param buttonName The name of the button such as Jump.
            * @returns True when an axis has been pressed and not released. 
            */
            public static GetButton ($buttonName: string) : boolean
            /** Returns true during the frame the user pressed down the virtual button identified by buttonName.
            */
            public static GetButtonDown ($buttonName: string) : boolean
            /** Returns true the first frame the user releases the virtual button identified by buttonName.
            */
            public static GetButtonUp ($buttonName: string) : boolean
            /** Returns whether the given mouse button is held down.
            */
            public static GetMouseButton ($button: number) : boolean
            /** Returns true during the frame the user pressed the given mouse button.
            */
            public static GetMouseButtonDown ($button: number) : boolean
            /** Returns true during the frame the user releases the given mouse button.
            */
            public static GetMouseButtonUp ($button: number) : boolean
            public static ResetInputAxes () : void
            /** Determine whether a particular joystick model has been preconfigured by Unity. (Linux-only).
            * @param joystickName The name of the joystick to check (returned by Input.GetJoystickNames).
            * @returns True if the joystick layout has been preconfigured; false otherwise. 
            */
            public static IsJoystickPreconfigured ($joystickName: string) : boolean
            public static GetJoystickNames () : System.Array$1<string>
            /** Call Input.GetTouch to obtain a Touch struct.
            * @param index The touch input on the device screen.
            * @returns Touch details in the struct. 
            */
            public static GetTouch ($index: number) : UnityEngine.Touch
            /** Returns specific acceleration measurement which occurred during last frame. (Does not allocate temporary variables).
            */
            public static GetAccelerationEvent ($index: number) : UnityEngine.AccelerationEvent
            /** Returns true while the user holds down the key identified by the key KeyCode enum parameter.
            */
            public static GetKey ($key: UnityEngine.KeyCode) : boolean
            /** Returns true while the user holds down the key identified by name.
            */
            public static GetKey ($name: string) : boolean
            /** Returns true during the frame the user releases the key identified by the key KeyCode enum parameter.
            */
            public static GetKeyUp ($key: UnityEngine.KeyCode) : boolean
            /** Returns true during the frame the user releases the key identified by name.
            */
            public static GetKeyUp ($name: string) : boolean
            /** Returns true during the frame the user starts pressing down the key identified by the key KeyCode enum parameter.
            */
            public static GetKeyDown ($key: UnityEngine.KeyCode) : boolean
            /** Returns true during the frame the user starts pressing down the key identified by name.
            */
            public static GetKeyDown ($name: string) : boolean
            public constructor ()
        }
        /** Utility functions for working with JSON data.
        */
        class JsonUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Generate a JSON representation of the public fields of an object.
            * @param obj The object to convert to JSON form.
            * @param prettyPrint If true, format the output for readability. If false, format the output for minimum size. Default is false.
            * @returns The object's data in JSON format. 
            */
            public static ToJson ($obj: any) : string
            /** Generate a JSON representation of the public fields of an object.
            * @param obj The object to convert to JSON form.
            * @param prettyPrint If true, format the output for readability. If false, format the output for minimum size. Default is false.
            * @returns The object's data in JSON format. 
            */
            public static ToJson ($obj: any, $prettyPrint: boolean) : string
            /** Create an object from its JSON representation.
            * @param json The JSON representation of the object.
            * @param type The type of object represented by the Json.
            * @returns An instance of the object. 
            */
            public static FromJson ($json: string, $type: System.Type) : any
            /** Overwrite data in an object by reading from its JSON representation.
            * @param json The JSON representation of the object.
            * @param objectToOverwrite The object that should be overwritten.
            */
            public static FromJsonOverwrite ($json: string, $objectToOverwrite: any) : void
        }
        /** An asset to represent a table of localized strings for one specific locale.
        */
        class LocalizationAsset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** ISO Code used to identify the locale. ex: en-uk, zh-hans, ja
            */
            public get localeIsoCode(): string;
            public set localeIsoCode(value: string);
            /** Is this asset used to localize UI components of the Unity Editor
            */
            public get isEditorAsset(): boolean;
            public set isEditorAsset(value: boolean);
            /** Set the localized string for the specified key
            * @param original Original string acting as key.
            * @param localized Localized string matching the original in the LocalizationAsset locale
            */
            public SetLocalizedString ($original: string, $localized: string) : void
            /** Get the localized string for the specified key.
            * @param original Original string acting as key.
            * @returns Localized string matching the original in the LocalizationAsset locale 
            */
            public GetLocalizedString ($original: string) : string
            public constructor ()
        }
        /** The mode in which particles are emitted.
        */
        enum ParticleSystemEmissionType
        { Time = 0, Distance = 1 }
        /** Script interface for ParticleSystem. Unity's powerful and versatile particle system implementation.
        */
        class ParticleSystem extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Determines whether the Particle System is playing.
            */
            public get isPlaying(): boolean;
            /** Determines whether the Particle System is emitting particles. A Particle System may stop emitting when its emission module has finished, it has been paused or if the system has been stopped using ParticleSystem.Stop|Stop with the ParticleSystemStopBehavior.StopEmitting|StopEmitting flag. Resume emitting by calling ParticleSystem.Play|Play.
            */
            public get isEmitting(): boolean;
            /** Determines whether the Particle System is stopped.
            */
            public get isStopped(): boolean;
            /** Determines whether the Particle System is paused.
            */
            public get isPaused(): boolean;
            /** The current number of particles (Read Only).
            */
            public get particleCount(): number;
            /** Playback position in seconds.
            */
            public get time(): number;
            public set time(value: number);
            /** Override the random seed used for the Particle System emission.
            */
            public get randomSeed(): number;
            public set randomSeed(value: number);
            /** Controls whether the Particle System uses an automatically-generated random number to seed the random number generator.
            */
            public get useAutoRandomSeed(): boolean;
            public set useAutoRandomSeed(value: boolean);
            /** Does this system support Procedural Simulation?
            */
            public get proceduralSimulationSupported(): boolean;
            /** Access the main Particle System settings.
            */
            public get main(): UnityEngine.ParticleSystem.MainModule;
            /** Script interface for the EmissionModule of a Particle System.
            */
            public get emission(): UnityEngine.ParticleSystem.EmissionModule;
            /** Script interface for the ShapeModule of a Particle System. 
            */
            public get shape(): UnityEngine.ParticleSystem.ShapeModule;
            /** Script interface for the VelocityOverLifetimeModule of a Particle System.
            */
            public get velocityOverLifetime(): UnityEngine.ParticleSystem.VelocityOverLifetimeModule;
            /** Script interface for the LimitVelocityOverLifetimeModule of a Particle System. .
            */
            public get limitVelocityOverLifetime(): UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule;
            /** Script interface for the InheritVelocityModule of a Particle System.
            */
            public get inheritVelocity(): UnityEngine.ParticleSystem.InheritVelocityModule;
            /** Script interface for the ForceOverLifetimeModule of a Particle System.
            */
            public get forceOverLifetime(): UnityEngine.ParticleSystem.ForceOverLifetimeModule;
            /** Script interface for the ColorOverLifetimeModule of a Particle System.
            */
            public get colorOverLifetime(): UnityEngine.ParticleSystem.ColorOverLifetimeModule;
            /** Script interface for the ColorByLifetimeModule of a Particle System.
            */
            public get colorBySpeed(): UnityEngine.ParticleSystem.ColorBySpeedModule;
            /** Script interface for the SizeOverLifetimeModule of a Particle System. 
            */
            public get sizeOverLifetime(): UnityEngine.ParticleSystem.SizeOverLifetimeModule;
            /** Script interface for the SizeBySpeedModule of a Particle System.
            */
            public get sizeBySpeed(): UnityEngine.ParticleSystem.SizeBySpeedModule;
            /** Script interface for the RotationOverLifetimeModule of a Particle System.
            */
            public get rotationOverLifetime(): UnityEngine.ParticleSystem.RotationOverLifetimeModule;
            /** Script interface for the RotationBySpeedModule of a Particle System.
            */
            public get rotationBySpeed(): UnityEngine.ParticleSystem.RotationBySpeedModule;
            /** Script interface for the ExternalForcesModule of a Particle System.
            */
            public get externalForces(): UnityEngine.ParticleSystem.ExternalForcesModule;
            /** Script interface for the NoiseModule of a Particle System.
            */
            public get noise(): UnityEngine.ParticleSystem.NoiseModule;
            /** Script interface for the CollisionModule of a Particle System.
            */
            public get collision(): UnityEngine.ParticleSystem.CollisionModule;
            /** Script interface for the TriggerModule of a Particle System.
            */
            public get trigger(): UnityEngine.ParticleSystem.TriggerModule;
            /** Script interface for the SubEmittersModule of a Particle System.
            */
            public get subEmitters(): UnityEngine.ParticleSystem.SubEmittersModule;
            /** Script interface for the TextureSheetAnimationModule of a Particle System.
            */
            public get textureSheetAnimation(): UnityEngine.ParticleSystem.TextureSheetAnimationModule;
            /** Script interface for the LightsModule of a Particle System.
            */
            public get lights(): UnityEngine.ParticleSystem.LightsModule;
            /** Script interface for the TrailsModule of a Particle System.
            */
            public get trails(): UnityEngine.ParticleSystem.TrailModule;
            /** Script interface for the CustomDataModule of a Particle System.
            */
            public get customData(): UnityEngine.ParticleSystem.CustomDataModule;
            public SetParticles ($particles: System.Array$1<UnityEngine.ParticleSystem.Particle>, $size: number, $offset: number) : void
            public SetParticles ($particles: System.Array$1<UnityEngine.ParticleSystem.Particle>, $size: number) : void
            public SetParticles ($particles: System.Array$1<UnityEngine.ParticleSystem.Particle>) : void
            public SetParticles ($particles: Unity.Collections.NativeArray$1<UnityEngine.ParticleSystem.Particle>, $size: number, $offset: number) : void
            public SetParticles ($particles: Unity.Collections.NativeArray$1<UnityEngine.ParticleSystem.Particle>, $size: number) : void
            public SetParticles ($particles: Unity.Collections.NativeArray$1<UnityEngine.ParticleSystem.Particle>) : void
            public GetParticles ($particles: System.Array$1<UnityEngine.ParticleSystem.Particle>, $size: number, $offset: number) : number
            public GetParticles ($particles: System.Array$1<UnityEngine.ParticleSystem.Particle>, $size: number) : number
            public GetParticles ($particles: System.Array$1<UnityEngine.ParticleSystem.Particle>) : number
            public GetParticles ($particles: Unity.Collections.NativeArray$1<UnityEngine.ParticleSystem.Particle>, $size: number, $offset: number) : number
            public GetParticles ($particles: Unity.Collections.NativeArray$1<UnityEngine.ParticleSystem.Particle>, $size: number) : number
            public GetParticles ($particles: Unity.Collections.NativeArray$1<UnityEngine.ParticleSystem.Particle>) : number
            public SetCustomParticleData ($customData: System.Collections.Generic.List$1<UnityEngine.Vector4>, $streamIndex: UnityEngine.ParticleSystemCustomData) : void
            public GetCustomParticleData ($customData: System.Collections.Generic.List$1<UnityEngine.Vector4>, $streamIndex: UnityEngine.ParticleSystemCustomData) : number
            public GetPlaybackState () : UnityEngine.ParticleSystem.PlaybackState
            public SetPlaybackState ($playbackState: UnityEngine.ParticleSystem.PlaybackState) : void
            public GetTrails () : UnityEngine.ParticleSystem.Trails
            public SetTrails ($trailData: UnityEngine.ParticleSystem.Trails) : void
            /** Fast-forwards the Particle System by simulating particles over the given period of time, then pauses it.
            * @param t Time period in seconds to advance the ParticleSystem simulation by. If restart is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If restart is false, the ParticleSystem simulation will be advanced in time from its current state by this value.
            * @param withChildren Fast-forward all child Particle Systems as well.
            * @param restart Restart and start from the beginning.
            * @param fixedTimeStep Only update the system at fixed intervals, based on the value in "Fixed Time" in the Time options.
            */
            public Simulate ($t: number, $withChildren: boolean, $restart: boolean, $fixedTimeStep: boolean) : void
            /** Fast-forwards the Particle System by simulating particles over the given period of time, then pauses it.
            * @param t Time period in seconds to advance the ParticleSystem simulation by. If restart is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If restart is false, the ParticleSystem simulation will be advanced in time from its current state by this value.
            * @param withChildren Fast-forward all child Particle Systems as well.
            * @param restart Restart and start from the beginning.
            * @param fixedTimeStep Only update the system at fixed intervals, based on the value in "Fixed Time" in the Time options.
            */
            public Simulate ($t: number, $withChildren: boolean, $restart: boolean) : void
            /** Fast-forwards the Particle System by simulating particles over the given period of time, then pauses it.
            * @param t Time period in seconds to advance the ParticleSystem simulation by. If restart is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If restart is false, the ParticleSystem simulation will be advanced in time from its current state by this value.
            * @param withChildren Fast-forward all child Particle Systems as well.
            * @param restart Restart and start from the beginning.
            * @param fixedTimeStep Only update the system at fixed intervals, based on the value in "Fixed Time" in the Time options.
            */
            public Simulate ($t: number, $withChildren: boolean) : void
            /** Fast-forwards the Particle System by simulating particles over the given period of time, then pauses it.
            * @param t Time period in seconds to advance the ParticleSystem simulation by. If restart is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If restart is false, the ParticleSystem simulation will be advanced in time from its current state by this value.
            * @param withChildren Fast-forward all child Particle Systems as well.
            * @param restart Restart and start from the beginning.
            * @param fixedTimeStep Only update the system at fixed intervals, based on the value in "Fixed Time" in the Time options.
            */
            public Simulate ($t: number) : void
            /** Starts the Particle System.
            * @param withChildren Play all child Particle Systems as well.
            */
            public Play ($withChildren: boolean) : void
            public Play () : void
            /** Pauses the system so no new particles are emitted and the existing particles are not updated.
            * @param withChildren Pause all child Particle Systems as well.
            */
            public Pause ($withChildren: boolean) : void
            public Pause () : void
            /** Stops playing the Particle System using the supplied stop behaviour.
            * @param withChildren Stop all child Particle Systems as well.
            * @param stopBehavior Stop emitting or stop emitting and clear the system.
            */
            public Stop ($withChildren: boolean, $stopBehavior: UnityEngine.ParticleSystemStopBehavior) : void
            /** Stops playing the Particle System using the supplied stop behaviour.
            * @param withChildren Stop all child Particle Systems as well.
            * @param stopBehavior Stop emitting or stop emitting and clear the system.
            */
            public Stop ($withChildren: boolean) : void
            public Stop () : void
            /** Remove all particles in the Particle System.
            * @param withChildren Clear all child Particle Systems as well.
            */
            public Clear ($withChildren: boolean) : void
            public Clear () : void
            /** Does the Particle System contain any live particles, or will it produce more?
            * @param withChildren Check all child Particle Systems as well.
            * @returns True if the Particle System contains live particles or is still creating new particles. False if the Particle System has stopped emitting particles and all particles are dead. 
            */
            public IsAlive ($withChildren: boolean) : boolean
            public IsAlive () : boolean
            /** Emit count particles immediately.
            * @param count Number of particles to emit.
            */
            public Emit ($count: number) : void
            public Emit ($emitParams: UnityEngine.ParticleSystem.EmitParams, $count: number) : void
            /** Triggers the specified sub emitter on all particles of the Particle System.
            * @param subEmitterIndex Index of the sub emitter to trigger.
            */
            public TriggerSubEmitter ($subEmitterIndex: number) : void
            public TriggerSubEmitter ($subEmitterIndex: number, $particle: $Ref<UnityEngine.ParticleSystem.Particle>) : void
            public TriggerSubEmitter ($subEmitterIndex: number, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>) : void
            public static ResetPreMappedBufferMemory () : void
            public constructor ()
        }
        /** Script interface for ParticleSystem. Unity's powerful and versatile particle system implementation.
        */
        interface ParticleSystem {
            /** Safe array size for use with ParticleSystem.GetCollisionEvents.
            */
            GetSafeCollisionEventSize () : number;
            GetCollisionEvents ($go: UnityEngine.GameObject, $collisionEvents: System.Collections.Generic.List$1<UnityEngine.ParticleCollisionEvent>) : number;
            /** Safe array size for use with ParticleSystem.GetTriggerParticles.
            * @param ps Particle system.
            * @param type Type of trigger to return size for.
            * @returns Number of particles with this trigger event type. 
            */
            GetSafeTriggerParticlesSize ($type: UnityEngine.ParticleSystemTriggerEventType) : number;
            GetTriggerParticles ($type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>) : number;
            SetTriggerParticles ($type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>, $offset: number, $count: number) : void;
            SetTriggerParticles ($type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>) : void;
        }
        /** The space to simulate particles in.
        */
        enum ParticleSystemSimulationSpace
        { Local = 0, World = 1, Custom = 2 }
        /** Control how particle systems apply transform scale.
        */
        enum ParticleSystemScalingMode
        { Hierarchy = 0, Local = 1, Shape = 2 }
        /** Which stream of custom particle data to set.
        */
        enum ParticleSystemCustomData
        { Custom1 = 0, Custom2 = 1 }
        /** The behavior to apply when calling ParticleSystem.Stop|Stop.
        */
        enum ParticleSystemStopBehavior
        { StopEmittingAndClear = 0, StopEmitting = 1 }
        /** Method extension for Physics in Particle System.
        */
        class ParticlePhysicsExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Safe array size for use with ParticleSystem.GetCollisionEvents.
            */
            public static GetSafeCollisionEventSize ($ps: UnityEngine.ParticleSystem) : number
            public static GetCollisionEvents ($ps: UnityEngine.ParticleSystem, $go: UnityEngine.GameObject, $collisionEvents: System.Collections.Generic.List$1<UnityEngine.ParticleCollisionEvent>) : number
            /** Safe array size for use with ParticleSystem.GetTriggerParticles.
            * @param ps Particle system.
            * @param type Type of trigger to return size for.
            * @returns Number of particles with this trigger event type. 
            */
            public static GetSafeTriggerParticlesSize ($ps: UnityEngine.ParticleSystem, $type: UnityEngine.ParticleSystemTriggerEventType) : number
            public static GetTriggerParticles ($ps: UnityEngine.ParticleSystem, $type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>) : number
            public static SetTriggerParticles ($ps: UnityEngine.ParticleSystem, $type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>, $offset: number, $count: number) : void
            public static SetTriggerParticles ($ps: UnityEngine.ParticleSystem, $type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>) : void
        }
        /** Information about a particle collision.
        */
        class ParticleCollisionEvent extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Intersection point of the collision in world coordinates.
            */
            public get intersection(): UnityEngine.Vector3;
            /** Geometry normal at the intersection point of the collision.
            */
            public get normal(): UnityEngine.Vector3;
            /** Incident velocity at the intersection point of the collision.
            */
            public get velocity(): UnityEngine.Vector3;
            /** The Collider or Collider2D for the GameObject struck by the particles.
            */
            public get colliderComponent(): UnityEngine.Component;
        }
        /** The different types of particle triggers.
        */
        enum ParticleSystemTriggerEventType
        { Inside = 0, Outside = 1, Enter = 2, Exit = 3 }
        /** The rendering mode for particle systems.
        */
        enum ParticleSystemRenderMode
        { Billboard = 0, Stretch = 1, HorizontalBillboard = 2, VerticalBillboard = 3, Mesh = 4, None = 5 }
        /** The sorting mode for particle systems.
        */
        enum ParticleSystemSortMode
        { None = 0, Distance = 1, OldestInFront = 2, YoungestInFront = 3 }
        /** Quality of world collisions. Medium and low quality are approximate and may leak particles.
        */
        enum ParticleSystemCollisionQuality
        { High = 0, Medium = 1, Low = 2 }
        /** How particles are aligned when rendered.
        */
        enum ParticleSystemRenderSpace
        { View = 0, World = 1, Local = 2, Facing = 3, Velocity = 4 }
        /** The particle curve mode.
        */
        enum ParticleSystemCurveMode
        { Constant = 0, Curve = 1, TwoCurves = 2, TwoConstants = 3 }
        /** The particle gradient mode.
        */
        enum ParticleSystemGradientMode
        { Color = 0, Gradient = 1, TwoColors = 2, TwoGradients = 3, RandomColor = 4 }
        /** The emission shape.
        */
        enum ParticleSystemShapeType
        { Sphere = 0, SphereShell = 1, Hemisphere = 2, HemisphereShell = 3, Cone = 4, Box = 5, Mesh = 6, ConeShell = 7, ConeVolume = 8, ConeVolumeShell = 9, Circle = 10, CircleEdge = 11, SingleSidedEdge = 12, MeshRenderer = 13, SkinnedMeshRenderer = 14, BoxShell = 15, BoxEdge = 16, Donut = 17, Rectangle = 18, Sprite = 19, SpriteRenderer = 20 }
        /** The mesh emission type.
        */
        enum ParticleSystemMeshShapeType
        { Vertex = 0, Edge = 1, Triangle = 2 }
        /** The texture channel.
        */
        enum ParticleSystemShapeTextureChannel
        { Red = 0, Green = 1, Blue = 2, Alpha = 3 }
        /** The animation mode.
        */
        enum ParticleSystemAnimationMode
        { Grid = 0, Sprites = 1 }
        /** Control how animation frames are selected.
        */
        enum ParticleSystemAnimationTimeMode
        { Lifetime = 0, Speed = 1, FPS = 2 }
        /** The animation type.
        */
        enum ParticleSystemAnimationType
        { WholeSheet = 0, SingleRow = 1 }
        /** The mode used for selecting rows of an animation in the Texture Sheet Animation Module.
        */
        enum ParticleSystemAnimationRowMode
        { Custom = 0, Random = 1, MeshIndex = 2 }
        /** The type of collisions to use for a given Particle System.
        */
        enum ParticleSystemCollisionType
        { Planes = 0, World = 1 }
        /** Whether to use 2D or 3D colliders for particle collisions.
        */
        enum ParticleSystemCollisionMode
        { Collision3D = 0, Collision2D = 1 }
        /** What action to perform when the particle trigger module passes a test.
        */
        enum ParticleSystemOverlapAction
        { Ignore = 0, Kill = 1, Callback = 2 }
        /** The action to perform when the Particle System stops.
        */
        enum ParticleSystemStopAction
        { None = 0, Disable = 1, Destroy = 2, Callback = 3 }
        /** The action to perform when the Particle System is offscreen.
        */
        enum ParticleSystemCullingMode
        { Automatic = 0, PauseAndCatchup = 1, Pause = 2, AlwaysSimulate = 3 }
        /** Control how a Particle System calculates its velocity.
        */
        enum ParticleSystemEmitterVelocityMode
        { Transform = 0, Rigidbody = 1 }
        /** How to apply emitter velocity to particles.
        */
        enum ParticleSystemInheritVelocityMode
        { Initial = 0, Current = 1 }
        /** All possible Particle System vertex shader inputs.
        */
        enum ParticleSystemVertexStream
        { Position = 0, Normal = 1, Tangent = 2, Color = 3, UV = 4, UV2 = 5, UV3 = 6, UV4 = 7, AnimBlend = 8, AnimFrame = 9, Center = 10, VertexID = 11, SizeX = 12, SizeXY = 13, SizeXYZ = 14, Rotation = 15, Rotation3D = 16, RotationSpeed = 17, RotationSpeed3D = 18, Velocity = 19, Speed = 20, AgePercent = 21, InvStartLifetime = 22, StableRandomX = 23, StableRandomXY = 24, StableRandomXYZ = 25, StableRandomXYZW = 26, VaryingRandomX = 27, VaryingRandomXY = 28, VaryingRandomXYZ = 29, VaryingRandomXYZW = 30, Custom1X = 31, Custom1XY = 32, Custom1XYZ = 33, Custom1XYZW = 34, Custom2X = 35, Custom2XY = 36, Custom2XYZ = 37, Custom2XYZW = 38, NoiseSumX = 39, NoiseSumXY = 40, NoiseSumXYZ = 41, NoiseImpulseX = 42, NoiseImpulseXY = 43, NoiseImpulseXYZ = 44, MeshIndex = 45 }
        /** Which mode CustomDataModule uses to generate its data.
        */
        enum ParticleSystemCustomDataMode
        { Disabled = 0, Vector = 1, Color = 2 }
        /** The quality of the generated noise.
        */
        enum ParticleSystemNoiseQuality
        { Low = 0, Medium = 1, High = 2 }
        /** The events that cause new particles to be spawned.
        */
        enum ParticleSystemSubEmitterType
        { Birth = 0, Collision = 1, Death = 2, Trigger = 3, Manual = 4 }
        /** The properties of sub-emitter particles.
        */
        enum ParticleSystemSubEmitterProperties
        { InheritNothing = 0, InheritEverything = 31, InheritColor = 1, InheritSize = 2, InheritRotation = 4, InheritLifetime = 8, InheritDuration = 16 }
        /** Choose how Particle Trails are generated.
        */
        enum ParticleSystemTrailMode
        { PerParticle = 0, Ribbon = 1 }
        /** Choose how textures are applied to Particle Trails.
        */
        enum ParticleSystemTrailTextureMode
        { Stretch = 0, Tile = 1, DistributePerSegment = 2, RepeatPerSegment = 3 }
        /** The mode used to generate new points in a shape.
        */
        enum ParticleSystemShapeMultiModeValue
        { Random = 0, Loop = 1, PingPong = 2, BurstSpread = 3 }
        /** Control how particles are removed from the Particle System.
        */
        enum ParticleSystemRingBufferMode
        { Disabled = 0, PauseUntilReplaced = 1, LoopUntilReplaced = 2 }
        /** The particle GameObject filtering mode that specifies which objects are used by specific Particle System modules.
        */
        enum ParticleSystemGameObjectFilter
        { LayerMask = 0, List = 1, LayerMaskAndList = 2 }
        /** The type of shape used for influencing particles in the Force Field Component.
        */
        enum ParticleSystemForceFieldShape
        { Sphere = 0, Hemisphere = 1, Cylinder = 2, Box = 3 }
        /** All possible Particle System vertex shader inputs.
        */
        enum ParticleSystemVertexStreams
        { Position = 1, Normal = 2, Tangent = 4, Color = 8, UV = 16, UV2BlendAndFrame = 32, CenterAndVertexID = 64, Size = 128, Rotation = 256, Velocity = 512, Lifetime = 1024, Custom1 = 2048, Custom2 = 4096, Random = 8192, None = 0, All = 2147483647 }
        /** Use this class to render particles on to the screen.
        */
        class ParticleSystemRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** Control the direction that particles face.
            */
            public get alignment(): UnityEngine.ParticleSystemRenderSpace;
            public set alignment(value: UnityEngine.ParticleSystemRenderSpace);
            /** Specifies how the system draws particles.
            */
            public get renderMode(): UnityEngine.ParticleSystemRenderMode;
            public set renderMode(value: UnityEngine.ParticleSystemRenderMode);
            /** Specifies how to sort particles within a system.
            */
            public get sortMode(): UnityEngine.ParticleSystemSortMode;
            public set sortMode(value: UnityEngine.ParticleSystemSortMode);
            /** How much are the particles stretched in their direction of motion.
            */
            public get lengthScale(): number;
            public set lengthScale(value: number);
            /** Specifies how much particles stretch depending on their velocity.
            */
            public get velocityScale(): number;
            public set velocityScale(value: number);
            /** How much do the particles stretch depending on the Camera's speed.
            */
            public get cameraVelocityScale(): number;
            public set cameraVelocityScale(value: number);
            /** Specifies how much a billboard particle orients its normals towards the Camera.
            */
            public get normalDirection(): number;
            public set normalDirection(value: number);
            /** Apply a shadow bias to prevent self-shadowing artifacts. The specified value is the proportion of the particle size.
            */
            public get shadowBias(): number;
            public set shadowBias(value: number);
            /** Biases Particle System sorting amongst other transparencies.
            */
            public get sortingFudge(): number;
            public set sortingFudge(value: number);
            /** Clamp the minimum particle size.
            */
            public get minParticleSize(): number;
            public set minParticleSize(value: number);
            /** Clamp the maximum particle size.
            */
            public get maxParticleSize(): number;
            public set maxParticleSize(value: number);
            /** Modify the pivot point used for rotating particles.
            */
            public get pivot(): UnityEngine.Vector3;
            public set pivot(value: UnityEngine.Vector3);
            /** Flip a percentage of the particles, along each axis.
            */
            public get flip(): UnityEngine.Vector3;
            public set flip(value: UnityEngine.Vector3);
            /** Specifies how the Particle System Renderer interacts with SpriteMask.
            */
            public get maskInteraction(): UnityEngine.SpriteMaskInteraction;
            public set maskInteraction(value: UnityEngine.SpriteMaskInteraction);
            /** Set the Material that the TrailModule uses to attach trails to particles.
            */
            public get trailMaterial(): UnityEngine.Material;
            public set trailMaterial(value: UnityEngine.Material);
            /** Enables GPU Instancing on platforms that support it.
            */
            public get enableGPUInstancing(): boolean;
            public set enableGPUInstancing(value: boolean);
            /** Allow billboard particles to roll around their z-axis.
            */
            public get allowRoll(): boolean;
            public set allowRoll(value: boolean);
            /** The Mesh that the particle uses instead of a billboarded Texture.
            */
            public get mesh(): UnityEngine.Mesh;
            public set mesh(value: UnityEngine.Mesh);
            /** The number of Meshes the system uses for particle rendering.
            */
            public get meshCount(): number;
            /** The number of currently active custom vertex streams.
            */
            public get activeVertexStreamsCount(): number;
            /** Determines whether the Particle System can be rendered using GPU Instancing.
            */
            public get supportsMeshInstancing(): boolean;
            /** Get the array of Meshes to be used as particles.
            * @param meshes This array is populated with the list of Meshes being used for particle rendering.
            * @returns The number of Meshes actually written to the destination array. 
            */
            public GetMeshes ($meshes: System.Array$1<UnityEngine.Mesh>) : number
            /** Set an array of Meshes to use as particles when the ParticleSystemRenderer.renderMode is set to ParticleSystemRenderMode.Mesh.
            * @param meshes Array of Meshes to use.
            * @param size Number of elements from the Mesh array to apply.
            */
            public SetMeshes ($meshes: System.Array$1<UnityEngine.Mesh>, $size: number) : void
            /** Set an array of Meshes to use as particles when the ParticleSystemRenderer.renderMode is set to ParticleSystemRenderMode.Mesh.
            * @param meshes Array of Meshes to use.
            * @param size Number of elements from the Mesh array to apply.
            */
            public SetMeshes ($meshes: System.Array$1<UnityEngine.Mesh>) : void
            /** Creates a snapshot of ParticleSystemRenderer and stores it in mesh.
            * @param mesh A static Mesh to receive the snapshot of the particles.
            * @param camera The Camera used to determine which way camera-space particles face.
            * @param useTransform Specifies whether to include the rotation and scale of the Transform in the baked Mesh.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh, $useTransform?: boolean) : void
            /** Creates a snapshot of ParticleSystemRenderer and stores it in mesh.
            * @param mesh A static Mesh to receive the snapshot of the particles.
            * @param camera The Camera used to determine which way camera-space particles face.
            * @param useTransform Specifies whether to include the rotation and scale of the Transform in the baked Mesh.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh, $camera: UnityEngine.Camera, $useTransform?: boolean) : void
            /** Creates a snapshot of ParticleSystem Trails and stores them in mesh.
            * @param mesh A static Mesh to receive the snapshot of the particle trails.
            * @param camera The Camera used to determine which way camera-space trails face.
            * @param useTransform Specifies whether to include the rotation and scale of the Transform in the baked Mesh.
            */
            public BakeTrailsMesh ($mesh: UnityEngine.Mesh, $useTransform?: boolean) : void
            /** Creates a snapshot of ParticleSystem Trails and stores them in mesh.
            * @param mesh A static Mesh to receive the snapshot of the particle trails.
            * @param camera The Camera used to determine which way camera-space trails face.
            * @param useTransform Specifies whether to include the rotation and scale of the Transform in the baked Mesh.
            */
            public BakeTrailsMesh ($mesh: UnityEngine.Mesh, $camera: UnityEngine.Camera, $useTransform?: boolean) : void
            public SetActiveVertexStreams ($streams: System.Collections.Generic.List$1<UnityEngine.ParticleSystemVertexStream>) : void
            public GetActiveVertexStreams ($streams: System.Collections.Generic.List$1<UnityEngine.ParticleSystemVertexStream>) : void
            public constructor ()
        }
        /** Script interface for Particle System Force Fields.
        */
        class ParticleSystemForceField extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Selects the type of shape used for influencing particles.
            */
            public get shape(): UnityEngine.ParticleSystemForceFieldShape;
            public set shape(value: UnityEngine.ParticleSystemForceFieldShape);
            /** Setting a value greater than 0 creates a hollow Force Field shape. This will cause particles to not be affected by the Force Field when closer to the center of the volume than the startRange property.
            */
            public get startRange(): number;
            public set startRange(value: number);
            /** Determines the size of the shape used for influencing particles.
            */
            public get endRange(): number;
            public set endRange(value: number);
            /** Describes the length of the Cylinder when using the Cylinder Force Field shape to influence particles.
            */
            public get length(): number;
            public set length(value: number);
            /** When using the gravity force, set this value between 0 and 1 to control the focal point of the gravity effect.
            */
            public get gravityFocus(): number;
            public set gravityFocus(value: number);
            /** Apply randomness to the Force Field axis that particles will travel around.
            */
            public get rotationRandomness(): UnityEngine.Vector2;
            public set rotationRandomness(value: UnityEngine.Vector2);
            /** When using Drag, the drag strength will be multiplied by the size of the particles if this toggle is enabled.
            */
            public get multiplyDragByParticleSize(): boolean;
            public set multiplyDragByParticleSize(value: boolean);
            /** When using Drag, the drag strength will be multiplied by the speed of the particles if this toggle is enabled.
            */
            public get multiplyDragByParticleVelocity(): boolean;
            public set multiplyDragByParticleVelocity(value: boolean);
            /** Apply forces to particles within the volume of the Force Field, by using a 3D texture containing vector field data.
            */
            public get vectorField(): UnityEngine.Texture3D;
            public set vectorField(value: UnityEngine.Texture3D);
            /** Apply a linear force along the local X axis to particles within the volume of the Force Field.
            */
            public get directionX(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set directionX(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** Apply a linear force along the local Y axis to particles within the volume of the Force Field.
            */
            public get directionY(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set directionY(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** Apply a linear force along the local Z axis to particles within the volume of the Force Field.
            */
            public get directionZ(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set directionZ(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** Apply gravity to particles within the volume of the Force Field.
            */
            public get gravity(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set gravity(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** The speed at which particles are propelled around a vortex.
            */
            public get rotationSpeed(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set rotationSpeed(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** Controls how strongly particles are dragged into the vortex motion.
            */
            public get rotationAttraction(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set rotationAttraction(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** Apply drag to particles within the volume of the Force Field.
            */
            public get drag(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set drag(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** The speed at which particles are propelled through the vector field.
            */
            public get vectorFieldSpeed(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set vectorFieldSpeed(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** Controls how strongly particles are dragged into the vector field motion.
            */
            public get vectorFieldAttraction(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set vectorFieldAttraction(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public static FindAll () : System.Array$1<UnityEngine.ParticleSystemForceField>
            public constructor ()
        }
        /** Use these flags to constrain motion of Rigidbodies.
        */
        enum RigidbodyConstraints
        { None = 0, FreezePositionX = 2, FreezePositionY = 4, FreezePositionZ = 8, FreezeRotationX = 16, FreezeRotationY = 32, FreezeRotationZ = 64, FreezePosition = 14, FreezeRotation = 112, FreezeAll = 126 }
        /** Use ForceMode to specify how to apply a force using Rigidbody.AddForce.
        */
        enum ForceMode
        { Force = 0, Acceleration = 5, Impulse = 1, VelocityChange = 2 }
        /** The ConfigurableJoint attempts to attain position / velocity targets based on this flag.
        */
        enum JointDriveMode
        { None = 0, Position = 1, Velocity = 2, PositionAndVelocity = 3 }
        /** Determines how to snap physics joints back to its constrained position when it drifts off too much.
        */
        enum JointProjectionMode
        { None = 0, PositionAndRotation = 1, PositionOnly = 2 }
        /** Cooking options that are available with MeshCollider.
        */
        enum MeshColliderCookingOptions
        { None = 0, InflateConvexMesh = 1, CookForFasterSimulation = 2, EnableMeshCleaning = 4, WeldColocatedVertices = 8, UseFastMidphase = 16 }
        /** WheelFrictionCurve is used by the WheelCollider to describe friction properties of the wheel tire.
        */
        class WheelFrictionCurve extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Extremum point slip (default 1).
            */
            public get extremumSlip(): number;
            public set extremumSlip(value: number);
            /** Force at the extremum slip (default 20000).
            */
            public get extremumValue(): number;
            public set extremumValue(value: number);
            /** Asymptote point slip (default 2).
            */
            public get asymptoteSlip(): number;
            public set asymptoteSlip(value: number);
            /** Force at the asymptote slip (default 10000).
            */
            public get asymptoteValue(): number;
            public set asymptoteValue(value: number);
            /** Multiplier for the extremumValue and asymptoteValue values (default 1).
            */
            public get stiffness(): number;
            public set stiffness(value: number);
        }
        /** The limits defined by the CharacterJoint.
        */
        class SoftJointLimit extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The limit position/angle of the joint (in degrees).
            */
            public get limit(): number;
            public set limit(value: number);
            /** When the joint hits the limit, it can be made to bounce off it.
            */
            public get bounciness(): number;
            public set bounciness(value: number);
            /** Determines how far ahead in space the solver can "see" the joint limit.
            */
            public get contactDistance(): number;
            public set contactDistance(value: number);
        }
        /** The configuration of the spring attached to the joint's limits: linear and angular. Used by CharacterJoint and ConfigurableJoint.
        */
        class SoftJointLimitSpring extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The stiffness of the spring limit. When stiffness is zero the limit is hard, otherwise soft.
            */
            public get spring(): number;
            public set spring(value: number);
            /** The damping of the spring limit. In effect when the stiffness of the sprint limit is not zero.
            */
            public get damper(): number;
            public set damper(value: number);
        }
        /** How the joint's movement will behave along its local X axis.
        */
        class JointDrive extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Strength of a rubber-band pull toward the defined direction. Only used if mode includes Position.
            */
            public get positionSpring(): number;
            public set positionSpring(value: number);
            /** Resistance strength against the Position Spring. Only used if mode includes Position.
            */
            public get positionDamper(): number;
            public set positionDamper(value: number);
            /** Amount of force applied to push the object toward the defined direction.
            */
            public get maximumForce(): number;
            public set maximumForce(value: number);
        }
        /** Rigidbody interpolation mode.
        */
        enum RigidbodyInterpolation
        { None = 0, Interpolate = 1, Extrapolate = 2 }
        /** The JointMotor is used to motorize a joint.
        */
        class JointMotor extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The motor will apply a force up to force to achieve targetVelocity.
            */
            public get targetVelocity(): number;
            public set targetVelocity(value: number);
            /** The motor will apply a force.
            */
            public get force(): number;
            public set force(value: number);
            /** If freeSpin is enabled the motor will only accelerate but never slow down.
            */
            public get freeSpin(): boolean;
            public set freeSpin(value: boolean);
        }
        /** JointSpring is used add a spring force to HingeJoint and PhysicMaterial.
        */
        class JointSpring extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The spring forces used to reach the target position.
            */
            public spring : number
            /** The damper force uses to dampen the spring.
            */
            public damper : number
            /** The target position the joint attempts to reach.
            */
            public targetPosition : number
        }
        /** JointLimits is used by the HingeJoint to limit the joints angle.
        */
        class JointLimits extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The lower angular limit (in degrees) of the joint.
            */
            public get min(): number;
            public set min(value: number);
            /** The upper angular limit (in degrees) of the joint.
            */
            public get max(): number;
            public set max(value: number);
            /** Determines the size of the bounce when the joint hits it's limit. Also known as restitution.
            */
            public get bounciness(): number;
            public set bounciness(value: number);
            /** The minimum impact velocity which will cause the joint to bounce.
            */
            public get bounceMinVelocity(): number;
            public set bounceMinVelocity(value: number);
            /** Distance inside the limit value at which the limit will be considered to be active by the solver.
            */
            public get contactDistance(): number;
            public set contactDistance(value: number);
        }
        /** ControllerColliderHit is used by CharacterController.OnControllerColliderHit to give detailed information about the collision and how to deal with it.
        */
        class ControllerColliderHit extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The controller that hit the collider.
            */
            public get controller(): UnityEngine.CharacterController;
            /** The collider that was hit by the controller.
            */
            public get collider(): UnityEngine.Collider;
            /** The rigidbody that was hit by the controller.
            */
            public get rigidbody(): UnityEngine.Rigidbody;
            /** The game object that was hit by the controller.
            */
            public get gameObject(): UnityEngine.GameObject;
            /** The transform that was hit by the controller.
            */
            public get transform(): UnityEngine.Transform;
            /** The impact point in world space.
            */
            public get point(): UnityEngine.Vector3;
            /** The normal of the surface we collided with in world space.
            */
            public get normal(): UnityEngine.Vector3;
            /** The direction the CharacterController was moving in when the collision occured.
            */
            public get moveDirection(): UnityEngine.Vector3;
            /** How far the character has travelled until it hit the collider.
            */
            public get moveLength(): number;
            public constructor ()
        }
        /** A CharacterController allows you to easily do movement constrained by collisions without having to deal with a rigidbody.
        */
        class CharacterController extends UnityEngine.Collider
        {
            protected [__keep_incompatibility]: never;
            /** The current relative velocity of the Character (see notes).
            */
            public get velocity(): UnityEngine.Vector3;
            /** Was the CharacterController touching the ground during the last move?
            */
            public get isGrounded(): boolean;
            /** What part of the capsule collided with the environment during the last CharacterController.Move call.
            */
            public get collisionFlags(): UnityEngine.CollisionFlags;
            /** The radius of the character's capsule.
            */
            public get radius(): number;
            public set radius(value: number);
            /** The height of the character's capsule.
            */
            public get height(): number;
            public set height(value: number);
            /** The center of the character's capsule relative to the transform's position.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The character controllers slope limit in degrees.
            */
            public get slopeLimit(): number;
            public set slopeLimit(value: number);
            /** The character controllers step offset in meters.
            */
            public get stepOffset(): number;
            public set stepOffset(value: number);
            /** The character's collision skin width.
            */
            public get skinWidth(): number;
            public set skinWidth(value: number);
            /** Gets or sets the minimum move distance of the character controller.
            */
            public get minMoveDistance(): number;
            public set minMoveDistance(value: number);
            /** Determines whether other rigidbodies or character controllers collide with this character controller (by default this is always enabled).
            */
            public get detectCollisions(): boolean;
            public set detectCollisions(value: boolean);
            /** Enables or disables overlap recovery.
            Enables or disables overlap recovery. Used to depenetrate character controllers from static objects when an overlap is detected.
            */
            public get enableOverlapRecovery(): boolean;
            public set enableOverlapRecovery(value: boolean);
            /** Moves the character with speed.
            */
            public SimpleMove ($speed: UnityEngine.Vector3) : boolean
            /** A more complex move function taking absolute movement deltas.
            */
            public Move ($motion: UnityEngine.Vector3) : UnityEngine.CollisionFlags
            public constructor ()
        }
        /** Control of an object's position through physics simulation.
        */
        class Rigidbody extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** The velocity vector of the rigidbody. It represents the rate of change of Rigidbody position.
            */
            public get velocity(): UnityEngine.Vector3;
            public set velocity(value: UnityEngine.Vector3);
            /** The angular velocity vector of the rigidbody measured in radians per second.
            */
            public get angularVelocity(): UnityEngine.Vector3;
            public set angularVelocity(value: UnityEngine.Vector3);
            /** The drag of the object.
            */
            public get drag(): number;
            public set drag(value: number);
            /** The angular drag of the object.
            */
            public get angularDrag(): number;
            public set angularDrag(value: number);
            /** The mass of the rigidbody.
            */
            public get mass(): number;
            public set mass(value: number);
            /** Controls whether gravity affects this rigidbody.
            */
            public get useGravity(): boolean;
            public set useGravity(value: boolean);
            /** Maximum velocity of a rigidbody when moving out of penetrating state.
            */
            public get maxDepenetrationVelocity(): number;
            public set maxDepenetrationVelocity(value: number);
            /** Controls whether physics affects the rigidbody.
            */
            public get isKinematic(): boolean;
            public set isKinematic(value: boolean);
            /** Controls whether physics will change the rotation of the object.
            */
            public get freezeRotation(): boolean;
            public set freezeRotation(value: boolean);
            /** Controls which degrees of freedom are allowed for the simulation of this Rigidbody.
            */
            public get constraints(): UnityEngine.RigidbodyConstraints;
            public set constraints(value: UnityEngine.RigidbodyConstraints);
            /** The Rigidbody's collision detection mode.
            */
            public get collisionDetectionMode(): UnityEngine.CollisionDetectionMode;
            public set collisionDetectionMode(value: UnityEngine.CollisionDetectionMode);
            /** The center of mass relative to the transform's origin.
            */
            public get centerOfMass(): UnityEngine.Vector3;
            public set centerOfMass(value: UnityEngine.Vector3);
            /** The center of mass of the rigidbody in world space (Read Only).
            */
            public get worldCenterOfMass(): UnityEngine.Vector3;
            /** The rotation of the inertia tensor.
            */
            public get inertiaTensorRotation(): UnityEngine.Quaternion;
            public set inertiaTensorRotation(value: UnityEngine.Quaternion);
            /** The diagonal inertia tensor of mass relative to the center of mass.
            */
            public get inertiaTensor(): UnityEngine.Vector3;
            public set inertiaTensor(value: UnityEngine.Vector3);
            /** Should collision detection be enabled? (By default always enabled).
            */
            public get detectCollisions(): boolean;
            public set detectCollisions(value: boolean);
            /** The position of the rigidbody.
            */
            public get position(): UnityEngine.Vector3;
            public set position(value: UnityEngine.Vector3);
            /** The rotation of the Rigidbody.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** Interpolation allows you to smooth out the effect of running physics at a fixed frame rate.
            */
            public get interpolation(): UnityEngine.RigidbodyInterpolation;
            public set interpolation(value: UnityEngine.RigidbodyInterpolation);
            /** The solverIterations determines how accurately Rigidbody joints and collision contacts are resolved. Overrides Physics.defaultSolverIterations. Must be positive.
            */
            public get solverIterations(): number;
            public set solverIterations(value: number);
            /** The mass-normalized energy threshold, below which objects start going to sleep.
            */
            public get sleepThreshold(): number;
            public set sleepThreshold(value: number);
            /** The maximimum angular velocity of the rigidbody measured in radians per second. (Default 7) range { 0, infinity }.
            */
            public get maxAngularVelocity(): number;
            public set maxAngularVelocity(value: number);
            /** The solverVelocityIterations affects how how accurately Rigidbody joints and collision contacts are resolved. Overrides Physics.defaultSolverVelocityIterations. Must be positive.
            */
            public get solverVelocityIterations(): number;
            public set solverVelocityIterations(value: number);
            /** Sets the mass based on the attached colliders assuming a constant density.
            */
            public SetDensity ($density: number) : void
            /** Moves the kinematic Rigidbody towards position.
            * @param position Provides the new position for the Rigidbody object.
            */
            public MovePosition ($position: UnityEngine.Vector3) : void
            /** Rotates the rigidbody to rotation.
            * @param rot The new rotation for the Rigidbody.
            */
            public MoveRotation ($rot: UnityEngine.Quaternion) : void
            public Sleep () : void
            public IsSleeping () : boolean
            public WakeUp () : void
            public ResetCenterOfMass () : void
            public ResetInertiaTensor () : void
            /** The velocity relative to the rigidbody at the point relativePoint.
            */
            public GetRelativePointVelocity ($relativePoint: UnityEngine.Vector3) : UnityEngine.Vector3
            /** The velocity of the rigidbody at the point worldPoint in global space.
            */
            public GetPointVelocity ($worldPoint: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Adds a force to the Rigidbody.
            * @param force Force vector in world coordinates.
            * @param mode Type of force to apply.
            */
            public AddForce ($force: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Adds a force to the Rigidbody.
            * @param force Force vector in world coordinates.
            * @param mode Type of force to apply.
            */
            public AddForce ($force: UnityEngine.Vector3) : void
            /** Adds a force to the Rigidbody.
            * @param x Size of force along the world x-axis.
            * @param y Size of force along the world y-axis.
            * @param z Size of force along the world z-axis.
            * @param mode Type of force to apply.
            */
            public AddForce ($x: number, $y: number, $z: number, $mode: UnityEngine.ForceMode) : void
            /** Adds a force to the Rigidbody.
            * @param x Size of force along the world x-axis.
            * @param y Size of force along the world y-axis.
            * @param z Size of force along the world z-axis.
            * @param mode Type of force to apply.
            */
            public AddForce ($x: number, $y: number, $z: number) : void
            /** Adds a force to the rigidbody relative to its coordinate system.
            * @param force Force vector in local coordinates.
            */
            public AddRelativeForce ($force: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Adds a force to the rigidbody relative to its coordinate system.
            * @param force Force vector in local coordinates.
            */
            public AddRelativeForce ($force: UnityEngine.Vector3) : void
            /** Adds a force to the rigidbody relative to its coordinate system.
            * @param x Size of force along the local x-axis.
            * @param y Size of force along the local y-axis.
            * @param z Size of force along the local z-axis.
            */
            public AddRelativeForce ($x: number, $y: number, $z: number, $mode: UnityEngine.ForceMode) : void
            /** Adds a force to the rigidbody relative to its coordinate system.
            * @param x Size of force along the local x-axis.
            * @param y Size of force along the local y-axis.
            * @param z Size of force along the local z-axis.
            */
            public AddRelativeForce ($x: number, $y: number, $z: number) : void
            /** Adds a torque to the rigidbody.
            * @param torque Torque vector in world coordinates.
            */
            public AddTorque ($torque: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Adds a torque to the rigidbody.
            * @param torque Torque vector in world coordinates.
            */
            public AddTorque ($torque: UnityEngine.Vector3) : void
            /** Adds a torque to the rigidbody.
            * @param x Size of torque along the world x-axis.
            * @param y Size of torque along the world y-axis.
            * @param z Size of torque along the world z-axis.
            */
            public AddTorque ($x: number, $y: number, $z: number, $mode: UnityEngine.ForceMode) : void
            /** Adds a torque to the rigidbody.
            * @param x Size of torque along the world x-axis.
            * @param y Size of torque along the world y-axis.
            * @param z Size of torque along the world z-axis.
            */
            public AddTorque ($x: number, $y: number, $z: number) : void
            /** Adds a torque to the rigidbody relative to its coordinate system.
            * @param torque Torque vector in local coordinates.
            */
            public AddRelativeTorque ($torque: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Adds a torque to the rigidbody relative to its coordinate system.
            * @param torque Torque vector in local coordinates.
            */
            public AddRelativeTorque ($torque: UnityEngine.Vector3) : void
            /** Adds a torque to the rigidbody relative to its coordinate system.
            * @param x Size of torque along the local x-axis.
            * @param y Size of torque along the local y-axis.
            * @param z Size of torque along the local z-axis.
            */
            public AddRelativeTorque ($x: number, $y: number, $z: number, $mode: UnityEngine.ForceMode) : void
            /** Adds a torque to the rigidbody relative to its coordinate system.
            * @param x Size of torque along the local x-axis.
            * @param y Size of torque along the local y-axis.
            * @param z Size of torque along the local z-axis.
            */
            public AddRelativeTorque ($x: number, $y: number, $z: number) : void
            /** Applies force at position. As a result this will apply a torque and force on the object.
            * @param force Force vector in world coordinates.
            * @param position Position in world coordinates.
            */
            public AddForceAtPosition ($force: UnityEngine.Vector3, $position: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Applies force at position. As a result this will apply a torque and force on the object.
            * @param force Force vector in world coordinates.
            * @param position Position in world coordinates.
            */
            public AddForceAtPosition ($force: UnityEngine.Vector3, $position: UnityEngine.Vector3) : void
            /** Applies a force to a rigidbody that simulates explosion effects.
            * @param explosionForce The force of the explosion (which may be modified by distance).
            * @param explosionPosition The centre of the sphere within which the explosion has its effect.
            * @param explosionRadius The radius of the sphere within which the explosion has its effect.
            * @param upwardsModifier Adjustment to the apparent position of the explosion to make it seem to lift objects.
            * @param mode The method used to apply the force to its targets.
            */
            public AddExplosionForce ($explosionForce: number, $explosionPosition: UnityEngine.Vector3, $explosionRadius: number, $upwardsModifier: number, $mode: UnityEngine.ForceMode) : void
            /** Applies a force to a rigidbody that simulates explosion effects.
            * @param explosionForce The force of the explosion (which may be modified by distance).
            * @param explosionPosition The centre of the sphere within which the explosion has its effect.
            * @param explosionRadius The radius of the sphere within which the explosion has its effect.
            * @param upwardsModifier Adjustment to the apparent position of the explosion to make it seem to lift objects.
            * @param mode The method used to apply the force to its targets.
            */
            public AddExplosionForce ($explosionForce: number, $explosionPosition: UnityEngine.Vector3, $explosionRadius: number, $upwardsModifier: number) : void
            /** Applies a force to a rigidbody that simulates explosion effects.
            * @param explosionForce The force of the explosion (which may be modified by distance).
            * @param explosionPosition The centre of the sphere within which the explosion has its effect.
            * @param explosionRadius The radius of the sphere within which the explosion has its effect.
            * @param upwardsModifier Adjustment to the apparent position of the explosion to make it seem to lift objects.
            * @param mode The method used to apply the force to its targets.
            */
            public AddExplosionForce ($explosionForce: number, $explosionPosition: UnityEngine.Vector3, $explosionRadius: number) : void
            /** The closest point to the bounding box of the attached colliders.
            */
            public ClosestPointOnBounds ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Tests if a rigidbody would collide with anything, if it was moved through the Scene.
            * @param direction The direction into which to sweep the rigidbody.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit (See Also: RaycastHit).
            * @param maxDistance The length of the sweep.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the rigidbody sweep intersects any collider, otherwise false. 
            */
            public SweepTest ($direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public SweepTest ($direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            public SweepTest ($direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Like Rigidbody.SweepTest, but returns all hits.
            * @param direction The direction into which to sweep the rigidbody.
            * @param maxDistance The length of the sweep.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns An array of all colliders hit in the sweep. 
            */
            public SweepTestAll ($direction: UnityEngine.Vector3, $maxDistance: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public SweepTestAll ($direction: UnityEngine.Vector3, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public SweepTestAll ($direction: UnityEngine.Vector3) : System.Array$1<UnityEngine.RaycastHit>
            public constructor ()
        }
        /** Describes how physics materials of the colliding objects are combined.
        The friction force as well as the residual bounce impulse are applied symmertrically to both of the colliders in contact, so each pair of overlapping colliders must have a single set of friction and bouciness settings. However, one can set arbitrary physics materials to any colliders. For that particular reason, there is a mechanism that allows the combination of two different sets of properties that correspond to each of the colliders in contact into one set to be used in the solver.
        Specifying Average, Maximum, Minimum or Multiply as the physics material combine mode, you directly set the function that is used to combine the settings corresponding to the two overlapping colliders into one set of settings that can be used to apply the material effect.
        Note that there is a special case when the two overlapping colliders have physics materials with different combine modes set. In this particular case, the function that has the highest priority is used. The priority order is as follows: Average < Minimum < Multiply < Maximum. For example, if one material has Average set but the other one has Maximum, then the combine function to be used is Maximum, since it has higher priority.
        */
        enum PhysicMaterialCombine
        { Average = 0, Minimum = 2, Multiply = 1, Maximum = 3 }
        /** Describes a collision.
        */
        class Collision extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The relative linear velocity of the two colliding objects (Read Only).
            */
            public get relativeVelocity(): UnityEngine.Vector3;
            /** The Rigidbody we hit (Read Only). This is null if the object we hit is a collider with no rigidbody attached.
            */
            public get rigidbody(): UnityEngine.Rigidbody;
            /** The Collider we hit (Read Only).
            */
            public get collider(): UnityEngine.Collider;
            /** The Transform of the object we hit (Read Only).
            */
            public get transform(): UnityEngine.Transform;
            /** The GameObject whose collider you are colliding with. (Read Only).
            */
            public get gameObject(): UnityEngine.GameObject;
            /** Gets the number of contacts for this collision.
            */
            public get contactCount(): number;
            /** The contact points generated by the physics engine. You should avoid using this as it produces memory garbage. Use GetContact or GetContacts instead.
            */
            public get contacts(): System.Array$1<UnityEngine.ContactPoint>;
            /** The total impulse applied to this contact pair to resolve the collision.
            */
            public get impulse(): UnityEngine.Vector3;
            /** Gets the contact point at the specified index.
            * @param index The index of the contact to retrieve.
            * @returns The contact at the specified index. 
            */
            public GetContact ($index: number) : UnityEngine.ContactPoint
            /** Retrieves all contact points for this collision.
            * @param contacts An array of ContactPoint used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts ($contacts: System.Array$1<UnityEngine.ContactPoint>) : number
            public GetContacts ($contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint>) : number
            public constructor ()
        }
        /** Describes a contact point where the collision occurs.
        */
        class ContactPoint extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The point of contact.
            */
            public get point(): UnityEngine.Vector3;
            /** Normal of the contact point.
            */
            public get normal(): UnityEngine.Vector3;
            /** The first collider in contact at the point.
            */
            public get thisCollider(): UnityEngine.Collider;
            /** The other collider in contact at the point.
            */
            public get otherCollider(): UnityEngine.Collider;
            /** The distance between the colliders at the contact point.
            */
            public get separation(): number;
        }
        /** CollisionFlags is a bitmask returned by CharacterController.Move.
        */
        enum CollisionFlags
        { None = 0, Sides = 1, Above = 2, Below = 4, CollidedSides = 1, CollidedAbove = 2, CollidedBelow = 4 }
        /** Overrides the global Physics.queriesHitTriggers.
        */
        enum QueryTriggerInteraction
        { UseGlobal = 0, Ignore = 1, Collide = 2 }
        /** The collision detection mode constants used for Rigidbody.collisionDetectionMode.
        */
        enum CollisionDetectionMode
        { Discrete = 0, Continuous = 1, ContinuousDynamic = 2, ContinuousSpeculative = 3 }
        /** Constrains movement for a ConfigurableJoint along the 6 axes.
        */
        enum ConfigurableJointMotion
        { Locked = 0, Limited = 1, Free = 2 }
        /** Control ConfigurableJoint's rotation with either X & YZ or Slerp Drive.
        */
        enum RotationDriveMode
        { XYAndZ = 0, Slerp = 1 }
        /** Physics material describes how to handle colliding objects (friction, bounciness).
        */
        class PhysicMaterial extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** How bouncy is the surface? A value of 0 will not bounce. A value of 1 will bounce without any loss of energy.
            */
            public get bounciness(): number;
            public set bounciness(value: number);
            /** The friction used when already moving.  This value is usually between 0 and 1.
            */
            public get dynamicFriction(): number;
            public set dynamicFriction(value: number);
            /** The friction coefficient used when an object is lying on a surface.
            */
            public get staticFriction(): number;
            public set staticFriction(value: number);
            /** Determines how the friction is combined.
            */
            public get frictionCombine(): UnityEngine.PhysicMaterialCombine;
            public set frictionCombine(value: UnityEngine.PhysicMaterialCombine);
            /** Determines how the bounciness is combined.
            */
            public get bounceCombine(): UnityEngine.PhysicMaterialCombine;
            public set bounceCombine(value: UnityEngine.PhysicMaterialCombine);
            public constructor ()
            public constructor ($name: string)
        }
        /** Structure used to get information back from a raycast.
        */
        class RaycastHit extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The Collider that was hit.
            */
            public get collider(): UnityEngine.Collider;
            /** The impact point in world space where the ray hit the collider.
            */
            public get point(): UnityEngine.Vector3;
            public set point(value: UnityEngine.Vector3);
            /** The normal of the surface the ray hit.
            */
            public get normal(): UnityEngine.Vector3;
            public set normal(value: UnityEngine.Vector3);
            /** The barycentric coordinate of the triangle we hit.
            */
            public get barycentricCoordinate(): UnityEngine.Vector3;
            public set barycentricCoordinate(value: UnityEngine.Vector3);
            /** The distance from the ray's origin to the impact point.
            */
            public get distance(): number;
            public set distance(value: number);
            /** The index of the triangle that was hit.
            */
            public get triangleIndex(): number;
            /** The uv texture coordinate at the collision location.
            */
            public get textureCoord(): UnityEngine.Vector2;
            /** The secondary uv texture coordinate at the impact point.
            */
            public get textureCoord2(): UnityEngine.Vector2;
            /** The Transform of the rigidbody or collider that was hit.
            */
            public get transform(): UnityEngine.Transform;
            /** The Rigidbody of the collider that was hit. If the collider is not attached to a rigidbody then it is null.
            */
            public get rigidbody(): UnityEngine.Rigidbody;
            /** The uv lightmap coordinate at the impact point.
            */
            public get lightmapCoord(): UnityEngine.Vector2;
        }
        /** A mesh collider allows you to do between meshes and primitives.
        */
        class MeshCollider extends UnityEngine.Collider
        {
            protected [__keep_incompatibility]: never;
            /** The mesh object used for collision detection.
            */
            public get sharedMesh(): UnityEngine.Mesh;
            public set sharedMesh(value: UnityEngine.Mesh);
            /** Use a convex collider from the mesh.
            */
            public get convex(): boolean;
            public set convex(value: boolean);
            /** Options used to enable or disable certain features in mesh cooking.
            */
            public get cookingOptions(): UnityEngine.MeshColliderCookingOptions;
            public set cookingOptions(value: UnityEngine.MeshColliderCookingOptions);
            public constructor ()
        }
        /** A box-shaped primitive collider.
        */
        class BoxCollider extends UnityEngine.Collider
        {
            protected [__keep_incompatibility]: never;
            /** The center of the box, measured in the object's local space.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The size of the box, measured in the object's local space.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            public constructor ()
        }
        /** A force applied constantly.
        */
        class ConstantForce extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The force applied to the rigidbody every frame.
            */
            public get force(): UnityEngine.Vector3;
            public set force(value: UnityEngine.Vector3);
            /** The force - relative to the rigid bodies coordinate system - applied every frame.
            */
            public get relativeForce(): UnityEngine.Vector3;
            public set relativeForce(value: UnityEngine.Vector3);
            /** The torque applied to the rigidbody every frame.
            */
            public get torque(): UnityEngine.Vector3;
            public set torque(value: UnityEngine.Vector3);
            /** The torque - relative to the rigid bodies coordinate system - applied every frame.
            */
            public get relativeTorque(): UnityEngine.Vector3;
            public set relativeTorque(value: UnityEngine.Vector3);
            public constructor ()
        }
        /** Joint is the base class for all joints.
        */
        class Joint extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** A reference to another rigidbody this joint connects to.
            */
            public get connectedBody(): UnityEngine.Rigidbody;
            public set connectedBody(value: UnityEngine.Rigidbody);
            /** The Direction of the axis around which the body is constrained.
            */
            public get axis(): UnityEngine.Vector3;
            public set axis(value: UnityEngine.Vector3);
            /** The Position of the anchor around which the joints motion is constrained.
            */
            public get anchor(): UnityEngine.Vector3;
            public set anchor(value: UnityEngine.Vector3);
            /** Position of the anchor relative to the connected Rigidbody.
            */
            public get connectedAnchor(): UnityEngine.Vector3;
            public set connectedAnchor(value: UnityEngine.Vector3);
            /** Should the connectedAnchor be calculated automatically?
            */
            public get autoConfigureConnectedAnchor(): boolean;
            public set autoConfigureConnectedAnchor(value: boolean);
            /** The force that needs to be applied for this joint to break.
            */
            public get breakForce(): number;
            public set breakForce(value: number);
            /** The torque that needs to be applied for this joint to break. To be able to break, a joint must be _Locked_ or _Limited_ on the axis of rotation where the torque is being applied. This means that some joints cannot break, such as an unconstrained Configurable Joint.
            */
            public get breakTorque(): number;
            public set breakTorque(value: number);
            /** Enable collision between bodies connected with the joint.
            */
            public get enableCollision(): boolean;
            public set enableCollision(value: boolean);
            /** Toggle preprocessing for this joint.
            */
            public get enablePreprocessing(): boolean;
            public set enablePreprocessing(value: boolean);
            /** The scale to apply to the inverse mass and inertia tensor of the body prior to solving the constraints.
            */
            public get massScale(): number;
            public set massScale(value: number);
            /** The scale to apply to the inverse mass and inertia tensor of the connected body prior to solving the constraints.
            */
            public get connectedMassScale(): number;
            public set connectedMassScale(value: number);
            /** The force applied by the solver to satisfy all constraints.
            */
            public get currentForce(): UnityEngine.Vector3;
            /** The torque applied by the solver to satisfy all constraints.
            */
            public get currentTorque(): UnityEngine.Vector3;
            public constructor ()
        }
        /** The HingeJoint groups together 2 rigid bodies, constraining them to move like connected by a hinge.
        */
        class HingeJoint extends UnityEngine.Joint
        {
            protected [__keep_incompatibility]: never;
            /** The motor will apply a force up to a maximum force to achieve the target velocity in degrees per second.
            */
            public get motor(): UnityEngine.JointMotor;
            public set motor(value: UnityEngine.JointMotor);
            /** Limit of angular rotation (in degrees) on the hinge joint.
            */
            public get limits(): UnityEngine.JointLimits;
            public set limits(value: UnityEngine.JointLimits);
            /** The spring attempts to reach a target angle by adding spring and damping forces.
            */
            public get spring(): UnityEngine.JointSpring;
            public set spring(value: UnityEngine.JointSpring);
            /** Enables the joint's motor. Disabled by default.
            */
            public get useMotor(): boolean;
            public set useMotor(value: boolean);
            /** Enables the joint's limits. Disabled by default.
            */
            public get useLimits(): boolean;
            public set useLimits(value: boolean);
            /** Enables the joint's spring. Disabled by default.
            */
            public get useSpring(): boolean;
            public set useSpring(value: boolean);
            /** The angular velocity of the joint in degrees per second. (Read Only)
            */
            public get velocity(): number;
            /** The current angle in degrees of the joint relative to its rest position. (Read Only)
            */
            public get angle(): number;
            public constructor ()
        }
        /** The spring joint ties together 2 rigid bodies, spring forces will be automatically applied to keep the object at the given distance.
        */
        class SpringJoint extends UnityEngine.Joint
        {
            protected [__keep_incompatibility]: never;
            /** The spring force used to keep the two objects together.
            */
            public get spring(): number;
            public set spring(value: number);
            /** The damper force used to dampen the spring force.
            */
            public get damper(): number;
            public set damper(value: number);
            /** The minimum distance between the bodies relative to their initial distance.
            */
            public get minDistance(): number;
            public set minDistance(value: number);
            /** The maximum distance between the bodies relative to their initial distance.
            */
            public get maxDistance(): number;
            public set maxDistance(value: number);
            /** The maximum allowed error between the current spring length and the length defined by minDistance and maxDistance.
            */
            public get tolerance(): number;
            public set tolerance(value: number);
            public constructor ()
        }
        /** The Fixed joint groups together 2 rigidbodies, making them stick together in their bound position.
        */
        class FixedJoint extends UnityEngine.Joint
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Character Joints are mainly used for Ragdoll effects.
        */
        class CharacterJoint extends UnityEngine.Joint
        {
            protected [__keep_incompatibility]: never;
            /** The secondary axis around which the joint can rotate.
            */
            public get swingAxis(): UnityEngine.Vector3;
            public set swingAxis(value: UnityEngine.Vector3);
            /** The configuration of the spring attached to the twist limits of the joint.
            */
            public get twistLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set twistLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** The configuration of the spring attached to the swing limits of the joint.
            */
            public get swingLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set swingLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** The lower limit around the primary axis of the character joint.
            */
            public get lowTwistLimit(): UnityEngine.SoftJointLimit;
            public set lowTwistLimit(value: UnityEngine.SoftJointLimit);
            /** The upper limit around the primary axis of the character joint.
            */
            public get highTwistLimit(): UnityEngine.SoftJointLimit;
            public set highTwistLimit(value: UnityEngine.SoftJointLimit);
            /** The angular limit of rotation (in degrees) around the primary axis of the character joint.
            */
            public get swing1Limit(): UnityEngine.SoftJointLimit;
            public set swing1Limit(value: UnityEngine.SoftJointLimit);
            /** The angular limit of rotation (in degrees) around the primary axis of the character joint.
            */
            public get swing2Limit(): UnityEngine.SoftJointLimit;
            public set swing2Limit(value: UnityEngine.SoftJointLimit);
            /** Brings violated constraints back into alignment even when the solver fails.
            */
            public get enableProjection(): boolean;
            public set enableProjection(value: boolean);
            /** Set the linear tolerance threshold for projection.
            */
            public get projectionDistance(): number;
            public set projectionDistance(value: number);
            /** Set the angular tolerance threshold (in degrees) for projection.
            */
            public get projectionAngle(): number;
            public set projectionAngle(value: number);
            public constructor ()
        }
        /** The configurable joint is an extremely flexible joint giving you complete control over rotation and linear motion.
        */
        class ConfigurableJoint extends UnityEngine.Joint
        {
            protected [__keep_incompatibility]: never;
            /** The joint's secondary axis.
            */
            public get secondaryAxis(): UnityEngine.Vector3;
            public set secondaryAxis(value: UnityEngine.Vector3);
            /** Allow movement along the X axis to be Free, completely Locked, or Limited according to Linear Limit.
            */
            public get xMotion(): UnityEngine.ConfigurableJointMotion;
            public set xMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow movement along the Y axis to be Free, completely Locked, or Limited according to Linear Limit.
            */
            public get yMotion(): UnityEngine.ConfigurableJointMotion;
            public set yMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow movement along the Z axis to be Free, completely Locked, or Limited according to Linear Limit.
            */
            public get zMotion(): UnityEngine.ConfigurableJointMotion;
            public set zMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow rotation around the X axis to be Free, completely Locked, or Limited according to Low and High Angular XLimit.
            */
            public get angularXMotion(): UnityEngine.ConfigurableJointMotion;
            public set angularXMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow rotation around the Y axis to be Free, completely Locked, or Limited according to Angular YLimit.
            */
            public get angularYMotion(): UnityEngine.ConfigurableJointMotion;
            public set angularYMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow rotation around the Z axis to be Free, completely Locked, or Limited according to Angular ZLimit.
            */
            public get angularZMotion(): UnityEngine.ConfigurableJointMotion;
            public set angularZMotion(value: UnityEngine.ConfigurableJointMotion);
            /** The configuration of the spring attached to the linear limit of the joint.
            */
            public get linearLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set linearLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** The configuration of the spring attached to the angular X limit of the joint.
            */
            public get angularXLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set angularXLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** The configuration of the spring attached to the angular Y and angular Z limits of the joint.
            */
            public get angularYZLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set angularYZLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** Boundary defining movement restriction, based on distance from the joint's origin.
            */
            public get linearLimit(): UnityEngine.SoftJointLimit;
            public set linearLimit(value: UnityEngine.SoftJointLimit);
            /** Boundary defining lower rotation restriction, based on delta from original rotation.
            */
            public get lowAngularXLimit(): UnityEngine.SoftJointLimit;
            public set lowAngularXLimit(value: UnityEngine.SoftJointLimit);
            /** Boundary defining upper rotation restriction, based on delta from original rotation.
            */
            public get highAngularXLimit(): UnityEngine.SoftJointLimit;
            public set highAngularXLimit(value: UnityEngine.SoftJointLimit);
            /** Boundary defining rotation restriction, based on delta from original rotation.
            */
            public get angularYLimit(): UnityEngine.SoftJointLimit;
            public set angularYLimit(value: UnityEngine.SoftJointLimit);
            /** Boundary defining rotation restriction, based on delta from original rotation.
            */
            public get angularZLimit(): UnityEngine.SoftJointLimit;
            public set angularZLimit(value: UnityEngine.SoftJointLimit);
            /** The desired position that the joint should move into.
            */
            public get targetPosition(): UnityEngine.Vector3;
            public set targetPosition(value: UnityEngine.Vector3);
            /** The desired velocity that the joint should move along.
            */
            public get targetVelocity(): UnityEngine.Vector3;
            public set targetVelocity(value: UnityEngine.Vector3);
            /** Definition of how the joint's movement will behave along its local X axis.
            */
            public get xDrive(): UnityEngine.JointDrive;
            public set xDrive(value: UnityEngine.JointDrive);
            /** Definition of how the joint's movement will behave along its local Y axis.
            */
            public get yDrive(): UnityEngine.JointDrive;
            public set yDrive(value: UnityEngine.JointDrive);
            /** Definition of how the joint's movement will behave along its local Z axis.
            */
            public get zDrive(): UnityEngine.JointDrive;
            public set zDrive(value: UnityEngine.JointDrive);
            /** This is a Quaternion. It defines the desired rotation that the joint should rotate into.
            */
            public get targetRotation(): UnityEngine.Quaternion;
            public set targetRotation(value: UnityEngine.Quaternion);
            /** This is a Vector3. It defines the desired angular velocity that the joint should rotate into.
            */
            public get targetAngularVelocity(): UnityEngine.Vector3;
            public set targetAngularVelocity(value: UnityEngine.Vector3);
            /** Control the object's rotation with either X & YZ or Slerp Drive by itself.
            */
            public get rotationDriveMode(): UnityEngine.RotationDriveMode;
            public set rotationDriveMode(value: UnityEngine.RotationDriveMode);
            /** Definition of how the joint's rotation will behave around its local X axis. Only used if Rotation Drive Mode is Swing & Twist.
            */
            public get angularXDrive(): UnityEngine.JointDrive;
            public set angularXDrive(value: UnityEngine.JointDrive);
            /** Definition of how the joint's rotation will behave around its local Y and Z axes. Only used if Rotation Drive Mode is Swing & Twist.
            */
            public get angularYZDrive(): UnityEngine.JointDrive;
            public set angularYZDrive(value: UnityEngine.JointDrive);
            /** Definition of how the joint's rotation will behave around all local axes. Only used if Rotation Drive Mode is Slerp Only.
            */
            public get slerpDrive(): UnityEngine.JointDrive;
            public set slerpDrive(value: UnityEngine.JointDrive);
            /** Brings violated constraints back into alignment even when the solver fails. Projection is not a physical process and does not preserve momentum or respect collision geometry. It is best avoided if practical, but can be useful in improving simulation quality where joint separation results in unacceptable artifacts.
            */
            public get projectionMode(): UnityEngine.JointProjectionMode;
            public set projectionMode(value: UnityEngine.JointProjectionMode);
            /** Set the linear tolerance threshold for projection.
            If the joint separates by more than this distance along its locked degrees of freedom, the solver
            will move the bodies to close the distance.
            Setting a very small tolerance may result in simulation jitter or other artifacts.
            Sometimes it is not possible to project (for example when the joints form a cycle).
            */
            public get projectionDistance(): number;
            public set projectionDistance(value: number);
            /** Set the angular tolerance threshold (in degrees) for projection.
            If the joint deviates by more than this angle around its locked angular degrees of freedom,
            the solver will move the bodies to close the angle.
            Setting a very small tolerance may result in simulation jitter or other artifacts.
            Sometimes it is not possible to project (for example when the joints form a cycle).
            */
            public get projectionAngle(): number;
            public set projectionAngle(value: number);
            /** If enabled, all Target values will be calculated in world space instead of the object's local space.
            */
            public get configuredInWorldSpace(): boolean;
            public set configuredInWorldSpace(value: boolean);
            /** If enabled, the two connected rigidbodies will be swapped, as if the joint was attached to the other body.
            */
            public get swapBodies(): boolean;
            public set swapBodies(value: boolean);
            public constructor ()
        }
        /** Represents a single instance of a 3D physics Scene.
        */
        class PhysicsScene extends System.ValueType implements System.IEquatable$1<UnityEngine.PhysicsScene>
        {
            protected [__keep_incompatibility]: never;
            public static op_Equality ($lhs: UnityEngine.PhysicsScene, $rhs: UnityEngine.PhysicsScene) : boolean
            public static op_Inequality ($lhs: UnityEngine.PhysicsScene, $rhs: UnityEngine.PhysicsScene) : boolean
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.PhysicsScene) : boolean
            public IsValid () : boolean
            public IsEmpty () : boolean
            /** Simulate physics associated with this PhysicsScene.
            * @param step The time to advance physics by.
            * @returns Whether the simulation was run or not.  Running the simulation during physics callbacks will always fail. 
            */
            public Simulate ($step: number) : void
            /** Casts a ray, from point origin, in direction direction, of length maxDistance, against all colliders in the Scene.
            * @param origin The starting point of the ray in world coordinates.
            * @param direction The direction of the ray.
            * @param maxDistance The max distance the ray should check for collisions.
            * @param layerMask A that is used to selectively ignore Colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True if the ray intersects with a Collider, otherwise false. 
            */
            public Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : boolean
            /** Casts a ray, from point origin, in direction direction, of length maxDistance, against all colliders in the Scene.
            * @param origin The starting point of the ray in world coordinates.
            * @param direction The direction of the ray.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (See Also: RaycastHit).
            * @param maxDistance The max distance the ray should check for collisions.
            * @param layerMask A that is used to selectively ignore Colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True if the ray intersects with a Collider, otherwise false. 
            */
            public Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : boolean
            /** Casts a ray, from point origin, in direction direction, of length maxDistance, against all colliders in the Scene.
            * @param origin The starting point and direction of the ray.
            * @param direction The direction of the ray.
            * @param raycastHits The buffer to store the hits into.
            * @param maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction The amount of hits stored into the results buffer.
            * @returns True if the ray intersects with a Collider, otherwise false. 
            */
            public Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $raycastHits: System.Array$1<UnityEngine.RaycastHit>, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : number
            /** Casts a capsule against all colliders in this physics scene and returns detailed information on what was hit.
            * @param point1 The center of the sphere at the start of the capsule.
            * @param point2 The center of the sphere at the end of the capsule.
            * @param radius The radius of the capsule.
            * @param direction The direction into which to sweep the capsule.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (See Also: RaycastHit).
            * @param maxDistance The max length of the sweep.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the capsule sweep intersects any collider, otherwise false. 
            */
            public CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : boolean
            /** Casts a capsule against all colliders in this physics scene and returns detailed information on what was hit.
            * @param point1 The center of the sphere at the start of the capsule.
            * @param point2 The center of the sphere at the end of the capsule.
            * @param radius The radius of the capsule.
            * @param direction The direction into which to sweep the capsule.
            * @param results The buffer to store the results in.
            * @param maxDistance The max length of the sweep.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored to the results buffer. 
            */
            public CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : number
            /** Check the given capsule against the physics world and return all overlapping colliders in the user-provided buffer.
            * @param point0 The center of the sphere at the start of the capsule.
            * @param point1 The center of the sphere at the end of the capsule.
            * @param radius The radius of the capsule.
            * @param results The buffer to store the results into.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of entries written to the buffer. 
            */
            public OverlapCapsule ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : number
            /** Casts a sphere along a ray and returns detailed information on what was hit.
            * @param origin The center of the sphere at the start of the sweep.
            * @param radius The radius of the sphere.
            * @param direction The direction into which to sweep the sphere.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (See Also: RaycastHit).
            * @param maxDistance The max length of the cast.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the sphere sweep intersects any collider, otherwise false. 
            */
            public SphereCast ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : boolean
            /** Cast sphere along the direction and store the results into buffer.
            * @param origin The center of the sphere at the start of the sweep.
            * @param radius The radius of the sphere.
            * @param direction The direction into which to sweep the sphere.
            * @param results The buffer to save the results to.
            * @param maxDistance The max length of the cast.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction A that is used to selectively ignore colliders when casting a capsule.
            * @returns The amount of hits stored into the results buffer. 
            */
            public SphereCast ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : number
            /** Computes and stores colliders touching or inside the sphere into the provided buffer.
            * @param position Center of the sphere.
            * @param radius Radius of the sphere.
            * @param results The buffer to store the results into.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of colliders stored into the results buffer. 
            */
            public OverlapSphere ($position: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            /** Casts the box along a ray and returns detailed information on what was hit.
            * @param center Center of the box.
            * @param halfExtents Half the size of the box in each dimension.
            * @param direction The direction in which to cast the box.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (See Also: RaycastHit).
            * @param orientation Rotation of the box.
            * @param maxDistance The max length of the cast.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True, if any intersections were found. 
            */
            public BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : boolean
            public BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Find all colliders touching or inside of the given box, and store them into the buffer.
            * @param center Center of the box.
            * @param halfExtents Half of the size of the box in each dimension.
            * @param results The buffer to store the results in.
            * @param orientation Rotation of the box.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of colliders stored in results. 
            */
            public OverlapBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>, $orientation: UnityEngine.Quaternion, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : number
            public OverlapBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>) : number
            /** Casts the box along a ray and returns detailed information on what was hit.
            * @param center Center of the box.
            * @param halfExtents Half the size of the box in each dimension.
            * @param direction The direction in which to cast the box.
            * @param results The buffer to store the results in.
            * @param orientation Rotation of the box.
            * @param maxDistance The max length of the cast.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored to the results buffer. 
            */
            public BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : number
            public BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        /** Scene extensions to access the underlying physics scene.
        */
        class PhysicsSceneExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An extension method that returns the 3D physics Scene from the Scene.
            * @param scene The Scene from which to return the 3D physics Scene.
            * @returns The 3D physics Scene used by the Scene. 
            */
            public static GetPhysicsScene ($scene: UnityEngine.SceneManagement.Scene) : UnityEngine.PhysicsScene
        }
        /** Global physics properties and helper methods.
        */
        class Physics extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Layer mask constant to select ignore raycast layer.
            */
            public static IgnoreRaycastLayer : number
            /** Layer mask constant to select default raycast layers.
            */
            public static DefaultRaycastLayers : number
            /** Layer mask constant to select all layers.
            */
            public static AllLayers : number
            /** The gravity applied to all rigid bodies in the Scene.
            */
            public static get gravity(): UnityEngine.Vector3;
            public static set gravity(value: UnityEngine.Vector3);
            /** The default contact offset of the newly created colliders.
            */
            public static get defaultContactOffset(): number;
            public static set defaultContactOffset(value: number);
            /** The mass-normalized energy threshold, below which objects start going to sleep.
            */
            public static get sleepThreshold(): number;
            public static set sleepThreshold(value: number);
            /** Specifies whether queries (raycasts, spherecasts, overlap tests, etc.) hit Triggers by default.
            */
            public static get queriesHitTriggers(): boolean;
            public static set queriesHitTriggers(value: boolean);
            /** Whether physics queries should hit back-face triangles.
            */
            public static get queriesHitBackfaces(): boolean;
            public static set queriesHitBackfaces(value: boolean);
            /** Two colliding objects with a relative velocity below this will not bounce (default 2). Must be positive.
            */
            public static get bounceThreshold(): number;
            public static set bounceThreshold(value: number);
            /** The defaultSolverIterations determines how accurately Rigidbody joints and collision contacts are resolved. (default 6). Must be positive.
            */
            public static get defaultSolverIterations(): number;
            public static set defaultSolverIterations(value: number);
            /** The defaultSolverVelocityIterations affects how accurately the Rigidbody joints and collision contacts are resolved. (default 1). Must be positive.
            */
            public static get defaultSolverVelocityIterations(): number;
            public static set defaultSolverVelocityIterations(value: number);
            /** Default maximum angular speed of the dynamic Rigidbody, in radians (default 50).
            */
            public static get defaultMaxAngularSpeed(): number;
            public static set defaultMaxAngularSpeed(value: number);
            /** The PhysicsScene automatically created when Unity starts.
            */
            public static get defaultPhysicsScene(): UnityEngine.PhysicsScene;
            /** Sets whether the physics should be simulated automatically or not.
            */
            public static get autoSimulation(): boolean;
            public static set autoSimulation(value: boolean);
            /** Whether or not to automatically sync transform changes with the physics system whenever a Transform component changes.
            */
            public static get autoSyncTransforms(): boolean;
            public static set autoSyncTransforms(value: boolean);
            /** Determines whether the garbage collector should reuse only a single instance of a Collision type for all collision callbacks.
            */
            public static get reuseCollisionCallbacks(): boolean;
            public static set reuseCollisionCallbacks(value: boolean);
            /** Sets the minimum separation distance for cloth inter-collision.
            */
            public static get interCollisionDistance(): number;
            public static set interCollisionDistance(value: number);
            /** Sets the cloth inter-collision stiffness.
            */
            public static get interCollisionStiffness(): number;
            public static set interCollisionStiffness(value: number);
            public static get interCollisionSettingsToggle(): boolean;
            public static set interCollisionSettingsToggle(value: boolean);
            /** Cloth Gravity setting.
            Set gravity for all cloth components.
            */
            public static get clothGravity(): UnityEngine.Vector3;
            public static set clothGravity(value: UnityEngine.Vector3);
            /** Makes the collision detection system ignore all collisions between collider1 and collider2.
            * @param collider1 Any collider.
            * @param collider2 Another collider you want to have collider1 to start or stop ignoring collisions with.
            * @param ignore Whether or not the collisions between the two colliders should be ignored or not.
            */
            public static IgnoreCollision ($collider1: UnityEngine.Collider, $collider2: UnityEngine.Collider, $ignore: boolean) : void
            public static IgnoreCollision ($collider1: UnityEngine.Collider, $collider2: UnityEngine.Collider) : void
            /** Makes the collision detection system ignore all collisions between any collider in layer1 and any collider in layer2.
            Note that IgnoreLayerCollision will reset the trigger state of affected colliders, so you might receive OnTriggerExit and OnTriggerEnter messages in response to calling this.
            */
            public static IgnoreLayerCollision ($layer1: number, $layer2: number, $ignore: boolean) : void
            public static IgnoreLayerCollision ($layer1: number, $layer2: number) : void
            /** Are collisions between layer1 and layer2 being ignored?
            */
            public static GetIgnoreLayerCollision ($layer1: number, $layer2: number) : boolean
            /** Checks whether the collision detection system will ignore all collisionstriggers between collider1 and collider2/ or not.
            * @param collider1 The first collider to compare to collider2.
            * @param collider2 The second collider to compare to collider1.
            * @returns Whether the collision detection system will ignore all collisionstriggers between collider1 and collider2/ or not. 
            */
            public static GetIgnoreCollision ($collider1: UnityEngine.Collider, $collider2: UnityEngine.Collider) : boolean
            /** Casts a ray, from point origin, in direction direction, of length maxDistance, against all colliders in the Scene.
            * @param origin The starting point of the ray in world coordinates.
            * @param direction The direction of the ray.
            * @param maxDistance The max distance the ray should check for collisions.
            * @param layerMask A that is used to selectively ignore Colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True if the ray intersects with a Collider, otherwise false. 
            */
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number) : boolean
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number) : boolean
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3) : boolean
            /** Casts a ray against all colliders in the Scene and returns detailed information on what was hit.
            * @param origin The starting point of the ray in world coordinates.
            * @param direction The direction of the ray.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (See Also: RaycastHit).
            * @param maxDistance The max distance the ray should check for collisions.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the ray intersects any collider, otherwise false. 
            */
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : boolean
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Same as above using ray.origin and ray.direction instead of origin and direction.
            * @param ray The starting point and direction of the ray.
            * @param maxDistance The max distance the ray should check for collisions.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the ray intersects any collider, otherwise false. 
            */
            public static Raycast ($ray: UnityEngine.Ray, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static Raycast ($ray: UnityEngine.Ray, $maxDistance: number, $layerMask: number) : boolean
            public static Raycast ($ray: UnityEngine.Ray, $maxDistance: number) : boolean
            public static Raycast ($ray: UnityEngine.Ray) : boolean
            /** Same as above using ray.origin and ray.direction instead of origin and direction.
            * @param ray The starting point and direction of the ray.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (See Also: RaycastHit).
            * @param maxDistance The max distance the ray should check for collisions.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the ray intersects any collider, otherwise false. 
            */
            public static Raycast ($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static Raycast ($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : boolean
            public static Raycast ($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            public static Raycast ($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Returns true if there is any collider intersecting the line between start and end.
            * @param start Start point.
            * @param end End point.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static Linecast ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static Linecast ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $layerMask: number) : boolean
            public static Linecast ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3) : boolean
            /** Returns true if there is any collider intersecting the line between start and end.
            * @param start Start point.
            * @param end End point.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (See Also: RaycastHit).
            */
            public static Linecast ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static Linecast ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $layerMask: number) : boolean
            public static Linecast ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Casts a capsule against all colliders in the Scene and returns detailed information on what was hit.
            * @param point1 The center of the sphere at the start of the capsule.
            * @param point2 The center of the sphere at the end of the capsule.
            * @param radius The radius of the capsule.
            * @param direction The direction into which to sweep the capsule.
            * @param maxDistance The max length of the sweep.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the capsule sweep intersects any collider, otherwise false. 
            */
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number) : boolean
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number) : boolean
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3) : boolean
            /** * @param point1 The center of the sphere at the start of the capsule.
            * @param point2 The center of the sphere at the end of the capsule.
            * @param radius The radius of the capsule.
            * @param direction The direction into which to sweep the capsule.
            * @param maxDistance The max length of the sweep.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (See Also: RaycastHit).
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : boolean
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Casts a sphere along a ray and returns detailed information on what was hit.
            * @param origin The center of the sphere at the start of the sweep.
            * @param radius The radius of the sphere.
            * @param direction The direction into which to sweep the sphere.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (See Also: RaycastHit).
            * @param maxDistance The max length of the cast.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the sphere sweep intersects any collider, otherwise false. 
            */
            public static SphereCast ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static SphereCast ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : boolean
            public static SphereCast ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            public static SphereCast ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Casts a sphere along a ray and returns detailed information on what was hit.
            * @param ray The starting point and direction of the ray into which the sphere sweep is cast.
            * @param radius The radius of the sphere.
            * @param maxDistance The max length of the cast.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the sphere sweep intersects any collider, otherwise false. 
            */
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $maxDistance: number, $layerMask: number) : boolean
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $maxDistance: number) : boolean
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number) : boolean
            /** * @param ray The starting point and direction of the ray into which the sphere sweep is cast.
            * @param radius The radius of the sphere.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (See Also: RaycastHit).
            * @param maxDistance The max length of the cast.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : boolean
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Casts the box along a ray and returns detailed information on what was hit.
            * @param center Center of the box.
            * @param halfExtents Half the size of the box in each dimension.
            * @param direction The direction in which to cast the box.
            * @param orientation Rotation of the box.
            * @param maxDistance The max length of the cast.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True, if any intersections were found. 
            */
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3) : boolean
            /** Casts the box along a ray and returns detailed information on what was hit.
            * @param center Center of the box.
            * @param halfExtents Half the size of the box in each dimension.
            * @param direction The direction in which to cast the box.
            * @param hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (See Also: RaycastHit).
            * @param orientation Rotation of the box.
            * @param maxDistance The max length of the cast.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True, if any intersections were found. 
            */
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** See Also: Raycast.
            * @param origin The starting point of the ray in world coordinates.
            * @param direction The direction of the ray.
            * @param maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param layermask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static RaycastAll ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3) : System.Array$1<UnityEngine.RaycastHit>
            /** Casts a ray through the Scene and returns all hits. Note that order of the results is undefined.
            * @param ray The starting point and direction of the ray.
            * @param maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns An array of RaycastHit objects. Note that the order of the results is undefined. 
            */
            public static RaycastAll ($ray: UnityEngine.Ray, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll ($ray: UnityEngine.Ray, $maxDistance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll ($ray: UnityEngine.Ray, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll ($ray: UnityEngine.Ray) : System.Array$1<UnityEngine.RaycastHit>
            /** Cast a ray through the Scene and store the hits into the buffer.
            * @param ray The starting point and direction of the ray.
            * @param results The buffer to store the hits into.
            * @param maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the results buffer. 
            */
            public static RaycastNonAlloc ($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static RaycastNonAlloc ($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : number
            public static RaycastNonAlloc ($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number) : number
            public static RaycastNonAlloc ($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            /** Cast a ray through the Scene and store the hits into the buffer.
            * @param origin The starting point and direction of the ray.
            * @param results The buffer to store the hits into.
            * @param direction The direction of the ray.
            * @param maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param layermask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the results buffer. 
            */
            public static RaycastNonAlloc ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static RaycastNonAlloc ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : number
            public static RaycastNonAlloc ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number) : number
            public static RaycastNonAlloc ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            /** Like Physics.CapsuleCast, but this function will return all hits the capsule sweep intersects.
            * @param point1 The center of the sphere at the start of the capsule.
            * @param point2 The center of the sphere at the end of the capsule.
            * @param radius The radius of the capsule.
            * @param direction The direction into which to sweep the capsule.
            * @param maxDistance The max length of the sweep.
            * @param layermask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns An array of all colliders hit in the sweep. 
            */
            public static CapsuleCastAll ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public static CapsuleCastAll ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit>
            public static CapsuleCastAll ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public static CapsuleCastAll ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3) : System.Array$1<UnityEngine.RaycastHit>
            /** Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.
            * @param origin The center of the sphere at the start of the sweep.
            * @param radius The radius of the sphere.
            * @param direction The direction in which to sweep the sphere.
            * @param maxDistance The max length of the sweep.
            * @param layerMask A that is used to selectively ignore colliders when casting a sphere.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns An array of all colliders hit in the sweep. 
            */
            public static SphereCastAll ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3) : System.Array$1<UnityEngine.RaycastHit>
            /** Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.
            * @param ray The starting point and direction of the ray into which the sphere sweep is cast.
            * @param radius The radius of the sphere.
            * @param maxDistance The max length of the sweep.
            * @param layerMask A that is used to selectively ignore colliders when casting a sphere.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static SphereCastAll ($ray: UnityEngine.Ray, $radius: number, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll ($ray: UnityEngine.Ray, $radius: number, $maxDistance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll ($ray: UnityEngine.Ray, $radius: number, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll ($ray: UnityEngine.Ray, $radius: number) : System.Array$1<UnityEngine.RaycastHit>
            /** Check the given capsule against the physics world and return all overlapping colliders.
            * @param point0 The center of the sphere at the start of the capsule.
            * @param point1 The center of the sphere at the end of the capsule.
            * @param radius The radius of the capsule.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Colliders touching or inside the capsule. 
            */
            public static OverlapCapsule ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.Collider>
            public static OverlapCapsule ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $layerMask: number) : System.Array$1<UnityEngine.Collider>
            public static OverlapCapsule ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number) : System.Array$1<UnityEngine.Collider>
            /** Returns an array with all colliders touching or inside the sphere.
            * @param position Center of the sphere.
            * @param radius Radius of the sphere.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static OverlapSphere ($position: UnityEngine.Vector3, $radius: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.Collider>
            public static OverlapSphere ($position: UnityEngine.Vector3, $radius: number, $layerMask: number) : System.Array$1<UnityEngine.Collider>
            public static OverlapSphere ($position: UnityEngine.Vector3, $radius: number) : System.Array$1<UnityEngine.Collider>
            /** Simulate physics in the Scene.
            * @param step The time to advance physics by.
            */
            public static Simulate ($step: number) : void
            public static SyncTransforms () : void
            /** Compute the minimal translation required to separate the given colliders apart at specified poses.
            * @param colliderA The first collider.
            * @param positionA Position of the first collider.
            * @param rotationA Rotation of the first collider.
            * @param colliderB The second collider.
            * @param positionB Position of the second collider.
            * @param rotationB Rotation of the second collider.
            * @param direction Direction along which the translation required to separate the colliders apart is minimal.
            * @param distance The distance along direction that is required to separate the colliders apart.
            * @returns True, if the colliders overlap at the given poses. 
            */
            public static ComputePenetration ($colliderA: UnityEngine.Collider, $positionA: UnityEngine.Vector3, $rotationA: UnityEngine.Quaternion, $colliderB: UnityEngine.Collider, $positionB: UnityEngine.Vector3, $rotationB: UnityEngine.Quaternion, $direction: $Ref<UnityEngine.Vector3>, $distance: $Ref<number>) : boolean
            /** Returns a point on the given collider that is closest to the specified location.
            * @param point Location you want to find the closest point to.
            * @param collider The collider that you find the closest point on.
            * @param position The position of the collider.
            * @param rotation The rotation of the collider.
            * @returns The point on the collider that is closest to the specified location. 
            */
            public static ClosestPoint ($point: UnityEngine.Vector3, $collider: UnityEngine.Collider, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : UnityEngine.Vector3
            /** Computes and stores colliders touching or inside the sphere into the provided buffer.
            * @param position Center of the sphere.
            * @param radius Radius of the sphere.
            * @param results The buffer to store the results into.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of colliders stored into the results buffer. 
            */
            public static OverlapSphereNonAlloc ($position: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static OverlapSphereNonAlloc ($position: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number) : number
            public static OverlapSphereNonAlloc ($position: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>) : number
            /** Returns true if there are any colliders overlapping the sphere defined by position and radius in world coordinates.
            * @param position Center of the sphere.
            * @param radius Radius of the sphere.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static CheckSphere ($position: UnityEngine.Vector3, $radius: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static CheckSphere ($position: UnityEngine.Vector3, $radius: number, $layerMask: number) : boolean
            public static CheckSphere ($position: UnityEngine.Vector3, $radius: number) : boolean
            /** Casts a capsule against all colliders in the Scene and returns detailed information on what was hit into the buffer.
            * @param point1 The center of the sphere at the start of the capsule.
            * @param point2 The center of the sphere at the end of the capsule.
            * @param radius The radius of the capsule.
            * @param direction The direction into which to sweep the capsule.
            * @param results The buffer to store the hits into.
            * @param maxDistance The max length of the sweep.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the buffer. 
            */
            public static CapsuleCastNonAlloc ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static CapsuleCastNonAlloc ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : number
            public static CapsuleCastNonAlloc ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number) : number
            public static CapsuleCastNonAlloc ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            /** Cast sphere along the direction and store the results into buffer.
            * @param origin The center of the sphere at the start of the sweep.
            * @param radius The radius of the sphere.
            * @param direction The direction in which to sweep the sphere.
            * @param results The buffer to save the hits into.
            * @param maxDistance The max length of the sweep.
            * @param layerMask A that is used to selectively ignore colliders when casting a sphere.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the results buffer. 
            */
            public static SphereCastNonAlloc ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static SphereCastNonAlloc ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : number
            public static SphereCastNonAlloc ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number) : number
            public static SphereCastNonAlloc ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            /** Cast sphere along the direction and store the results into buffer.
            * @param ray The starting point and direction of the ray into which the sphere sweep is cast.
            * @param radius The radius of the sphere.
            * @param results The buffer to save the results to.
            * @param maxDistance The max length of the sweep.
            * @param layerMask A that is used to selectively ignore colliders when casting a sphere.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the results buffer. 
            */
            public static SphereCastNonAlloc ($ray: UnityEngine.Ray, $radius: number, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static SphereCastNonAlloc ($ray: UnityEngine.Ray, $radius: number, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : number
            public static SphereCastNonAlloc ($ray: UnityEngine.Ray, $radius: number, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number) : number
            public static SphereCastNonAlloc ($ray: UnityEngine.Ray, $radius: number, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            /** Checks if any colliders overlap a capsule-shaped volume in world space.
            * @param start The center of the sphere at the start of the capsule.
            * @param end The center of the sphere at the end of the capsule.
            * @param radius The radius of the capsule.
            * @param layermask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static CheckCapsule ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $radius: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static CheckCapsule ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $radius: number, $layerMask: number) : boolean
            public static CheckCapsule ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $radius: number) : boolean
            /** Check whether the given box overlaps with other colliders or not.
            * @param center Center of the box.
            * @param halfExtents Half the size of the box in each dimension.
            * @param orientation Rotation of the box.
            * @param layermask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True, if the box overlaps with any colliders. 
            */
            public static CheckBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $layermask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static CheckBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $layerMask: number) : boolean
            public static CheckBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion) : boolean
            public static CheckBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3) : boolean
            /** Find all colliders touching or inside of the given box.
            * @param center Center of the box.
            * @param halfExtents Half of the size of the box in each dimension.
            * @param orientation Rotation of the box.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Colliders that overlap with the given box. 
            */
            public static OverlapBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.Collider>
            public static OverlapBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $layerMask: number) : System.Array$1<UnityEngine.Collider>
            public static OverlapBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion) : System.Array$1<UnityEngine.Collider>
            public static OverlapBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3) : System.Array$1<UnityEngine.Collider>
            /** Find all colliders touching or inside of the given box, and store them into the buffer.
            * @param center Center of the box.
            * @param halfExtents Half of the size of the box in each dimension.
            * @param results The buffer to store the results in.
            * @param orientation Rotation of the box.
            * @param layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of colliders stored in results. 
            */
            public static OverlapBoxNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>, $orientation: UnityEngine.Quaternion, $mask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static OverlapBoxNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>, $orientation: UnityEngine.Quaternion, $mask: number) : number
            public static OverlapBoxNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>, $orientation: UnityEngine.Quaternion) : number
            public static OverlapBoxNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>) : number
            /** Cast the box along the direction, and store hits in the provided buffer.
            * @param center Center of the box.
            * @param halfExtents Half the size of the box in each dimension.
            * @param direction The direction in which to cast the box.
            * @param results The buffer to store the results in.
            * @param orientation Rotation of the box.
            * @param maxDistance The max length of the cast.
            * @param layermask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored to the results buffer. 
            */
            public static BoxCastNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static BoxCastNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion) : number
            public static BoxCastNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number) : number
            public static BoxCastNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number) : number
            public static BoxCastNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            /** Like Physics.BoxCast, but returns all hits.
            * @param center Center of the box.
            * @param halfExtents Half the size of the box in each dimension.
            * @param direction The direction in which to cast the box.
            * @param orientation Rotation of the box.
            * @param maxDistance The max length of the cast.
            * @param layermask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns All colliders that were hit. 
            */
            public static BoxCastAll ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public static BoxCastAll ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit>
            public static BoxCastAll ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public static BoxCastAll ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion) : System.Array$1<UnityEngine.RaycastHit>
            public static BoxCastAll ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3) : System.Array$1<UnityEngine.RaycastHit>
            /** Check the given capsule against the physics world and return all overlapping colliders in the user-provided buffer.
            * @param point0 The center of the sphere at the start of the capsule.
            * @param point1 The center of the sphere at the end of the capsule.
            * @param radius The radius of the capsule.
            * @param results The buffer to store the results into.
            * @param layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of entries written to the buffer. 
            */
            public static OverlapCapsuleNonAlloc ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static OverlapCapsuleNonAlloc ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number) : number
            public static OverlapCapsuleNonAlloc ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>) : number
            /** Rebuild the broadphase interest regions as well as set the world boundaries.
            * @param worldBounds Boundaries of the physics world.
            * @param subdivisions How many cells to create along x and z axis.
            */
            public static RebuildBroadphaseRegions ($worldBounds: UnityEngine.Bounds, $subdivisions: number) : void
            /** Prepares the Mesh for use with a MeshCollider.
            * @param meshID The instance ID of the Mesh to bake collision data from.
            * @param convex A flag to indicate whether to bake convex geometry or not.
            */
            public static BakeMesh ($meshID: number, $convex: boolean) : void
            public constructor ()
        }
        /** Struct used to set up a raycast command to be performed asynchronously during a job.
        */
        class RaycastCommand extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The starting point of the ray in world coordinates.
            */
            public get from(): UnityEngine.Vector3;
            public set from(value: UnityEngine.Vector3);
            /** The direction of the ray.
            */
            public get direction(): UnityEngine.Vector3;
            public set direction(value: UnityEngine.Vector3);
            /** The maximum distance the ray should check for collisions.
            */
            public get distance(): number;
            public set distance(value: number);
            /** A LayerMask that is used to selectively ignore Colliders when casting a ray.
            */
            public get layerMask(): number;
            public set layerMask(value: number);
            /** The maximum number of Colliders the ray can hit.
            */
            public get maxHits(): number;
            public set maxHits(value: number);
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.RaycastCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.RaycastHit>, $minCommandsPerJob: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public constructor ($from: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $distance?: number, $layerMask?: number, $maxHits?: number)
            public constructor ()
        }
        /** Use this struct to set up a sphere cast command that is performed asynchronously during a job.
        */
        class SpherecastCommand extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The starting point of the sphere cast in world coordinates.
            */
            public get origin(): UnityEngine.Vector3;
            public set origin(value: UnityEngine.Vector3);
            /** The radius of the casting sphere.
            */
            public get radius(): number;
            public set radius(value: number);
            /** The direction of the sphere cast.
            */
            public get direction(): UnityEngine.Vector3;
            public set direction(value: UnityEngine.Vector3);
            /** The maximum distance the sphere should check for collisions.
            */
            public get distance(): number;
            public set distance(value: number);
            /** The LayerMask that selectively ignores Colliders when casting a sphere.
            */
            public get layerMask(): number;
            public set layerMask(value: number);
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.SpherecastCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.RaycastHit>, $minCommandsPerJob: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public constructor ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $distance?: number, $layerMask?: number)
            public constructor ()
        }
        /** Use this struct to set up a capsule cast command that is performed asynchronously during a job.
        */
        class CapsulecastCommand extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The center of the sphere at the start of the capsule.
            */
            public get point1(): UnityEngine.Vector3;
            public set point1(value: UnityEngine.Vector3);
            /** The center of the sphere at the end of the capsule.
            */
            public get point2(): UnityEngine.Vector3;
            public set point2(value: UnityEngine.Vector3);
            /** The radius of the capsule.
            */
            public get radius(): number;
            public set radius(value: number);
            /** The direction of the capsule cast.
            */
            public get direction(): UnityEngine.Vector3;
            public set direction(value: UnityEngine.Vector3);
            /** The maximum distance the capsule cast checks for collision.
            */
            public get distance(): number;
            public set distance(value: number);
            /** A LayerMask that selectively ignores Colliders when casting a capsule.
            */
            public get layerMask(): number;
            public set layerMask(value: number);
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.CapsulecastCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.RaycastHit>, $minCommandsPerJob: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public constructor ($p1: UnityEngine.Vector3, $p2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $distance?: number, $layerMask?: number)
            public constructor ()
        }
        /** Use this struct to set up a box cast command to be performed asynchronously during a job.
        */
        class BoxcastCommand extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Center of the box.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** Half the size of the box in each dimension.
            */
            public get halfExtents(): UnityEngine.Vector3;
            public set halfExtents(value: UnityEngine.Vector3);
            /** Rotation of the box.
            */
            public get orientation(): UnityEngine.Quaternion;
            public set orientation(value: UnityEngine.Quaternion);
            /** The direction in which to sweep the box.
            */
            public get direction(): UnityEngine.Vector3;
            public set direction(value: UnityEngine.Vector3);
            /** The maximum distance of the sweep.
            */
            public get distance(): number;
            public set distance(value: number);
            /** A LayerMask that is used to selectively ignore Colliders when casting a box.
            */
            public get layerMask(): number;
            public set layerMask(value: number);
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.BoxcastCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.RaycastHit>, $minCommandsPerJob: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public constructor ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $direction: UnityEngine.Vector3, $distance?: number, $layerMask?: number)
            public constructor ()
        }
        /** Represents a single instance of a 2D physics Scene.
        */
        class PhysicsScene2D extends System.ValueType implements System.IEquatable$1<UnityEngine.PhysicsScene2D>
        {
            protected [__keep_incompatibility]: never;
            public static op_Equality ($lhs: UnityEngine.PhysicsScene2D, $rhs: UnityEngine.PhysicsScene2D) : boolean
            public static op_Inequality ($lhs: UnityEngine.PhysicsScene2D, $rhs: UnityEngine.PhysicsScene2D) : boolean
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.PhysicsScene2D) : boolean
            public IsValid () : boolean
            public IsEmpty () : boolean
            /** Simulate physics associated with this PhysicsScene.
            * @param step The time to advance physics by.
            * @returns Whether the simulation was run or not.  Running the simulation during physics callbacks will always fail. 
            */
            public Simulate ($step: number) : boolean
            /** Casts a line segment against colliders in the PhysicsScene2D, returning the first intersection only.
            * @param start The start point of the line in world space.
            * @param end The end point of the line in world space.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns The cast results returned. 
            */
            public Linecast ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask?: number) : UnityEngine.RaycastHit2D
            /** Casts a line segment against colliders in the PhysicsScene2D, returning the first intersection only.
            * @param start The start point of the line in world space.
            * @param end The end point of the line in world space.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns The cast results returned. 
            */
            public Linecast ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D) : UnityEngine.RaycastHit2D
            /** Casts a line segment against colliders in the PhysicsScene2D.
            * @param start The start point of the line in world space.
            * @param end The end point of the line in world space.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Returns the number of results placed in the results array. 
            */
            public Linecast ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $layerMask?: number) : number
            /** Casts a line segment against colliders in the PhysicsScene2D.
            * @param start The start point of the line in world space.
            * @param end The end point of the line in world space.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Returns the number of results placed in the results array. 
            */
            public Linecast ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public Linecast ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>) : number
            /** Casts a ray against colliders in the PhysicsScene2D, returning the first intersection only.
            * @param origin The point in 2D space where the ray originates.
            * @param direction The vector representing the direction of the ray.
            * @param distance Maximum distance over which to cast the ray.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth, or normal angle.
            * @returns The cast results returned. 
            */
            public Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask?: number) : UnityEngine.RaycastHit2D
            /** Casts a ray against colliders in the PhysicsScene2D, returning the first intersection only.
            * @param origin The point in 2D space where the ray originates.
            * @param direction The vector representing the direction of the ray.
            * @param distance Maximum distance over which to cast the ray.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth, or normal angle.
            * @returns The cast results returned. 
            */
            public Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $contactFilter: UnityEngine.ContactFilter2D) : UnityEngine.RaycastHit2D
            /** Casts a ray against colliders the PhysicsScene2D, returning all intersections.
            * @param origin The point in 2D space where the ray originates.
            * @param direction The vector representing the direction of the ray.
            * @param distance Maximum distance over which to cast the ray.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth, or normal angle.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $results: System.Array$1<UnityEngine.RaycastHit2D>, $layerMask?: number) : number
            /** Casts a ray against colliders the PhysicsScene2D, returning all intersections.
            * @param origin The point in 2D space where the ray originates.
            * @param direction The vector representing the direction of the ray.
            * @param distance Maximum distance over which to cast the ray.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth, or normal angle.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>) : number
            /** Casts a circle against colliders in the PhysicsScene2D, returning the first intersection only.
            * @param origin The point in 2D space where the circle originates.
            * @param radius The radius of the circle.
            * @param direction Vector representing the direction to cast the circle.
            * @param distance Maximum distance over which to cast the circle.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns The cast results returned. 
            */
            public CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask?: number) : UnityEngine.RaycastHit2D
            /** Casts a circle against colliders in the PhysicsScene2D, returning the first intersection only.
            * @param origin The point in 2D space where the circle originates.
            * @param radius The radius of the circle.
            * @param direction Vector representing the direction to cast the circle.
            * @param distance Maximum distance over which to cast the circle.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns The cast results returned. 
            */
            public CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $contactFilter: UnityEngine.ContactFilter2D) : UnityEngine.RaycastHit2D
            /** Casts a circle against the colliders in the PhysicsScene2D, returning all intersections.
            * @param origin The point in 2D space where the circle originates.
            * @param radius The radius of the circle.
            * @param direction Vector representing the direction to cast the circle.
            * @param distance Maximum distance over which to cast the circle.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Returns the number of results placed in the results array. 
            */
            public CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $results: System.Array$1<UnityEngine.RaycastHit2D>, $layerMask?: number) : number
            /** Casts a circle against the colliders in the PhysicsScene2D, returning all intersections.
            * @param origin The point in 2D space where the circle originates.
            * @param radius The radius of the circle.
            * @param direction Vector representing the direction to cast the circle.
            * @param distance Maximum distance over which to cast the circle.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Returns the number of results placed in the results array. 
            */
            public CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>) : number
            /** Casts a box against colliders in the PhysicsScene2D, returning the first intersection only.
            * @param origin The point in 2D space where the box originates.
            * @param size The size of the box.
            * @param angle The angle of the box (in degrees).
            * @param direction Vector representing the direction to cast the box.
            * @param distance Maximum distance over which to cast the box.
            * @param layerMask Filter to detect colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns The cast results returned. 
            */
            public BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask?: number) : UnityEngine.RaycastHit2D
            /** Casts a box against colliders in the PhysicsScene2D, returning the first intersection only.
            * @param origin The point in 2D space where the box originates.
            * @param size The size of the box.
            * @param angle The angle of the box (in degrees).
            * @param direction Vector representing the direction to cast the box.
            * @param distance Maximum distance over which to cast the box.
            * @param layerMask Filter to detect colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns The cast results returned. 
            */
            public BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $contactFilter: UnityEngine.ContactFilter2D) : UnityEngine.RaycastHit2D
            /** Casts a box against the colliders in the PhysicsScene2D, returning all intersections.
            * @param origin The point in 2D space where the box originates.
            * @param size The size of the box.
            * @param angle The angle of the box (in degrees).
            * @param direction Vector representing the direction to cast the box.
            * @param distance Maximum distance over which to cast the box.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to detect colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Returns the number of results placed in the results array. 
            */
            public BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $results: System.Array$1<UnityEngine.RaycastHit2D>, $layerMask?: number) : number
            /** Casts a box against the colliders in the PhysicsScene2D, returning all intersections.
            * @param origin The point in 2D space where the box originates.
            * @param size The size of the box.
            * @param angle The angle of the box (in degrees).
            * @param direction Vector representing the direction to cast the box.
            * @param distance Maximum distance over which to cast the box.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to detect colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Returns the number of results placed in the results array. 
            */
            public BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>) : number
            /** Casts a capsule against colliders in the PhysicsScene2D, returning the first intersection only.
            * @param origin The point in 2D space where the capsule originates.
            * @param size The size of the capsule.
            * @param capsuleDirection The direction of the capsule.
            * @param angle The angle of the capsule (in degrees).
            * @param direction Vector representing the direction to cast the capsule.
            * @param distance Maximum distance over which to cast the capsule.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns The cast results returned. 
            */
            public CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask?: number) : UnityEngine.RaycastHit2D
            /** Casts a capsule against colliders in the PhysicsScene2D, returning the first intersection only.
            * @param origin The point in 2D space where the capsule originates.
            * @param size The size of the capsule.
            * @param capsuleDirection The direction of the capsule.
            * @param angle The angle of the capsule (in degrees).
            * @param direction Vector representing the direction to cast the capsule.
            * @param distance Maximum distance over which to cast the capsule.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns The cast results returned. 
            */
            public CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $contactFilter: UnityEngine.ContactFilter2D) : UnityEngine.RaycastHit2D
            /** Casts a capsule against the Colliders in the PhysicsScene2D, returning all intersections.
            * @param origin The point in 2D space where the capsule originates.
            * @param size The size of the capsule.
            * @param capsuleDirection The direction of the capsule.
            * @param angle The angle of the capsule (in degrees).
            * @param direction Vector representing the direction to cast the capsule.
            * @param distance Maximum distance over which to cast the capsule.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Returns the number of results placed in the results array. 
            */
            public CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $results: System.Array$1<UnityEngine.RaycastHit2D>, $layerMask?: number) : number
            /** Casts a capsule against the Colliders in the PhysicsScene2D, returning all intersections.
            * @param origin The point in 2D space where the capsule originates.
            * @param size The size of the capsule.
            * @param capsuleDirection The direction of the capsule.
            * @param angle The angle of the capsule (in degrees).
            * @param direction Vector representing the direction to cast the capsule.
            * @param distance Maximum distance over which to cast the capsule.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask The filter used to detect Colliders only on certain layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Returns the number of results placed in the results array. 
            */
            public CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>) : number
            /** Cast a 3D ray against the colliders in the PhysicsScene2D, returning the first intersection only.
            * @param ray The 3D ray defining origin and direction to test.
            * @param distance Maximum distance over which to cast the ray.
            * @param layerMask Filter to detect colliders only on certain layers.
            * @returns The cast results returned. 
            */
            public GetRayIntersection ($ray: UnityEngine.Ray, $distance: number, $layerMask?: number) : UnityEngine.RaycastHit2D
            /** Cast a 3D ray against the colliders in the PhysicsScene2D, returning all intersections.
            * @param ray The 3D ray defining origin and direction to test.
            * @param distance Maximum distance over which to cast the ray.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to detect colliders only on certain layers.
            * @returns The number of results returned. 
            */
            public GetRayIntersection ($ray: UnityEngine.Ray, $distance: number, $results: System.Array$1<UnityEngine.RaycastHit2D>, $layerMask?: number) : number
            /** Checks a point against Colliders in the PhysicsScene2D, returning the first intersection only.
            * @param point A point in world space.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns The collider overlapping the point. 
            */
            public OverlapPoint ($point: UnityEngine.Vector2, $layerMask?: number) : UnityEngine.Collider2D
            /** Checks a point against Colliders in the PhysicsScene2D, returning the first intersection only.
            * @param point A point in world space.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns The collider overlapping the point. 
            */
            public OverlapPoint ($point: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D) : UnityEngine.Collider2D
            /** Checks a point against Colliders in the PhysicsScene2D, returning all intersections.
            * @param point A point in world space.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapPoint ($point: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask?: number) : number
            /** Checks a point against Colliders in the PhysicsScene2D, returning all intersections.
            * @param point A point in world space.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapPoint ($point: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public OverlapPoint ($point: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            /** Checks a circle against Colliders in the PhysicsScene2D, returning the first intersection only.
            * @param point The centre of the circle.
            * @param radius The radius of the circle.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns The collider overlapping the circle. 
            */
            public OverlapCircle ($point: UnityEngine.Vector2, $radius: number, $layerMask?: number) : UnityEngine.Collider2D
            /** Checks a circle against Colliders in the PhysicsScene2D, returning the first intersection only.
            * @param point The centre of the circle.
            * @param radius The radius of the circle.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns The collider overlapping the circle. 
            */
            public OverlapCircle ($point: UnityEngine.Vector2, $radius: number, $contactFilter: UnityEngine.ContactFilter2D) : UnityEngine.Collider2D
            /** Checks a circle against Colliders in the PhysicsScene2D, returning all intersections.
            * @param point The centre of the circle.
            * @param radius The radius of the circle.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapCircle ($point: UnityEngine.Vector2, $radius: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask?: number) : number
            /** Checks a circle against Colliders in the PhysicsScene2D, returning all intersections.
            * @param point The centre of the circle.
            * @param radius The radius of the circle.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapCircle ($point: UnityEngine.Vector2, $radius: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public OverlapCircle ($point: UnityEngine.Vector2, $radius: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            /** Checks a box against Colliders in the PhysicsScene2D, returning the first intersection only.
            * @param point The center of the box.
            * @param size The size of the box.
            * @param angle The angle of the box.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns The collider overlapping the box. 
            */
            public OverlapBox ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask?: number) : UnityEngine.Collider2D
            /** Checks a box against Colliders in the PhysicsScene2D, returning the first intersection only.
            * @param point The center of the box.
            * @param size The size of the box.
            * @param angle The angle of the box.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns The collider overlapping the box. 
            */
            public OverlapBox ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $contactFilter: UnityEngine.ContactFilter2D) : UnityEngine.Collider2D
            /** Checks a box against Colliders in the PhysicsScene2D, returning all intersections.
            * @param point The center of the box.
            * @param size The size of the box.
            * @param angle The angle of the box.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapBox ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask?: number) : number
            /** Checks a box against Colliders in the PhysicsScene2D, returning all intersections.
            * @param point The center of the box.
            * @param size The size of the box.
            * @param angle The angle of the box.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapBox ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public OverlapBox ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            /** Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning the first intersection only.
            * @param pointA One corner of the rectangle.
            * @param pointB The corner of the rectangle diagonally opposite the pointA corner.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns The collider overlapping the area. 
            */
            public OverlapArea ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask?: number) : UnityEngine.Collider2D
            /** Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning the first intersection only.
            * @param pointA One corner of the rectangle.
            * @param pointB The corner of the rectangle diagonally opposite the pointA corner.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns The collider overlapping the area. 
            */
            public OverlapArea ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D) : UnityEngine.Collider2D
            /** Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning all intersections.
            * @param pointA One corner of the rectangle.
            * @param pointB The corner of the rectangle diagonally opposite the pointA corner.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapArea ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask?: number) : number
            /** Checks an area (non-rotated box) against Colliders in the PhysicsScene2D, returning all intersections.
            * @param pointA One corner of the rectangle.
            * @param pointB The corner of the rectangle diagonally opposite the pointA corner.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapArea ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public OverlapArea ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            /** Checks a capsule against Colliders in the PhysicsScene2D, returning the first intersection only.
            * @param point The center of the capsule.
            * @param size The size of the capsule.
            * @param direction The direction of the capsule.
            * @param angle The angle of the capsule.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns The collider overlapping the capsule. 
            */
            public OverlapCapsule ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask?: number) : UnityEngine.Collider2D
            /** Checks a capsule against Colliders in the PhysicsScene2D, returning the first intersection only.
            * @param point The center of the capsule.
            * @param size The size of the capsule.
            * @param direction The direction of the capsule.
            * @param angle The angle of the capsule.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns The collider overlapping the capsule. 
            */
            public OverlapCapsule ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $contactFilter: UnityEngine.ContactFilter2D) : UnityEngine.Collider2D
            /** Checks a capsule against Colliders in the PhysicsScene2D, returning all intersections.
            * @param point The center of the capsule.
            * @param size The size of the capsule.
            * @param direction The direction of the capsule.
            * @param angle The angle of the capsule.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapCapsule ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask?: number) : number
            /** Checks a capsule against Colliders in the PhysicsScene2D, returning all intersections.
            * @param point The center of the capsule.
            * @param size The size of the capsule.
            * @param direction The direction of the capsule.
            * @param angle The angle of the capsule.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapCapsule ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public OverlapCapsule ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            /** Checks a Collider against Colliders in the PhysicsScene2D, returning all intersections.
            * @param collider The Collider that defines the area used to query for other Collider overlaps.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapCollider ($collider: UnityEngine.Collider2D, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask?: number) : number
            /** Checks a Collider against Colliders in the PhysicsScene2D, returning all intersections.
            * @param collider The Collider that defines the area used to query for other Collider overlaps.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param layerMask Filter to check objects only on specific layers.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask and Z depth. Note that the normal angle is not used for overlap testing.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapCollider ($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public static OverlapCollider ($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        /** Information returned about an object detected by a raycast in 2D physics.
        */
        class RaycastHit2D extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The centroid of the primitive used to perform the cast.
            */
            public get centroid(): UnityEngine.Vector2;
            public set centroid(value: UnityEngine.Vector2);
            /** The point in world space where the ray hit the collider's surface.
            */
            public get point(): UnityEngine.Vector2;
            public set point(value: UnityEngine.Vector2);
            /** The normal vector of the surface hit by the ray.
            */
            public get normal(): UnityEngine.Vector2;
            public set normal(value: UnityEngine.Vector2);
            /** The distance from the ray origin to the impact point.
            */
            public get distance(): number;
            public set distance(value: number);
            /** Fraction of the distance along the ray that the hit occurred.
            */
            public get fraction(): number;
            public set fraction(value: number);
            /** The collider hit by the ray.
            */
            public get collider(): UnityEngine.Collider2D;
            /** The Rigidbody2D attached to the object that was hit.
            */
            public get rigidbody(): UnityEngine.Rigidbody2D;
            /** The Transform of the object that was hit.
            */
            public get transform(): UnityEngine.Transform;
            public static op_Implicit ($hit: UnityEngine.RaycastHit2D) : boolean
            public CompareTo ($other: UnityEngine.RaycastHit2D) : number
        }
        /** A set of parameters for filtering contact results.
        */
        class ContactFilter2D extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Sets to filter contact results based on trigger collider involvement.
            */
            public useTriggers : boolean
            /** Sets the contact filter to filter results by layer mask.
            */
            public useLayerMask : boolean
            /** Sets the contact filter to filter the results by depth using minDepth and maxDepth.
            */
            public useDepth : boolean
            /** Sets the contact filter to filter within the minDepth and maxDepth range, or outside that range.
            */
            public useOutsideDepth : boolean
            /** Sets the contact filter to filter the results by the collision's normal angle using minNormalAngle and maxNormalAngle.
            */
            public useNormalAngle : boolean
            /** Sets the contact filter to filter within the minNormalAngle and maxNormalAngle range, or outside that range.
            */
            public useOutsideNormalAngle : boolean
            /** Sets the contact filter to filter the results that only include Collider2D on the layers defined by the layer mask.
            */
            public layerMask : UnityEngine.LayerMask
            /** Sets the contact filter to filter the results to only include Collider2D with a Z coordinate (depth) greater than this value.
            */
            public minDepth : number
            /** Sets the contact filter to filter the results to only include Collider2D with a Z coordinate (depth) less than this value.
            */
            public maxDepth : number
            /** Sets the contact filter to filter the results to only include contacts with collision normal angles that are greater than this angle.
            */
            public minNormalAngle : number
            /** Sets the contact filter to filter the results to only include contacts with collision normal angles that are less than this angle.
            */
            public maxNormalAngle : number
            public static NormalAngleUpperLimit : number
            /** Given the current state of the contact filter, determine whether it would filter anything.
            */
            public get isFiltering(): boolean;
            public NoFilter () : UnityEngine.ContactFilter2D
            public ClearLayerMask () : void
            /** Sets the layerMask filter property using the layerMask parameter provided and also enables layer mask filtering by setting useLayerMask to true.
            * @param layerMask The value used to set the layerMask.
            */
            public SetLayerMask ($layerMask: UnityEngine.LayerMask) : void
            public ClearDepth () : void
            /** Sets the minDepth and maxDepth filter properties and turns on depth filtering by setting useDepth to true.
            * @param minDepth The value used to set minDepth.
            * @param maxDepth The value used to set maxDepth.
            */
            public SetDepth ($minDepth: number, $maxDepth: number) : void
            public ClearNormalAngle () : void
            /** Sets the minNormalAngle and maxNormalAngle filter properties and turns on normal angle filtering by setting useNormalAngle to true.
            * @param minNormalAngle The value used to set the minNormalAngle.
            * @param maxNormalAngle The value used to set the maxNormalAngle.
            */
            public SetNormalAngle ($minNormalAngle: number, $maxNormalAngle: number) : void
            /** Checks if the collider is a trigger and should be filtered by the useTriggers to be filtered.
            * @param collider The Collider2D used to check for a trigger.
            * @returns Returns true when collider is excluded by the filter and false if otherwise. 
            */
            public IsFilteringTrigger ($collider: UnityEngine.Collider2D) : boolean
            /** Checks if the GameObject.layer for obj is included in the layerMask to be filtered.
            * @param obj The GameObject used to check the GameObject.layer.
            * @returns Returns true when obj is excluded by the filter and false if otherwise. 
            */
            public IsFilteringLayerMask ($obj: UnityEngine.GameObject) : boolean
            /** Checks if the Transform for obj is within the depth range to be filtered.
            * @param obj The GameObject used to check the z-position (depth) of Transform.position.
            * @returns Returns true when obj is excluded by the filter and false if otherwise. 
            */
            public IsFilteringDepth ($obj: UnityEngine.GameObject) : boolean
            /** Checks if the angle of normal is within the normal angle range to be filtered.
            * @param normal The normal used to calculate an angle.
            * @returns Returns true when normal is excluded by the filter and false if otherwise. 
            */
            public IsFilteringNormalAngle ($normal: UnityEngine.Vector2) : boolean
            /** Checks if the angle is within the normal angle range to be filtered.
            * @param angle The angle used for comparison in the filter.
            * @returns Returns true when angle is excluded by the filter and false if otherwise. 
            */
            public IsFilteringNormalAngle ($angle: number) : boolean
        }
        /** The direction that the capsule sides can extend.
        */
        enum CapsuleDirection2D
        { Vertical = 0, Horizontal = 1 }
        /** Parent class for collider types used with 2D gameplay.
        */
        class Collider2D extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The density of the collider used to calculate its mass (when auto mass is enabled).
            */
            public get density(): number;
            public set density(value: number);
            /** Is this collider configured as a trigger?
            */
            public get isTrigger(): boolean;
            public set isTrigger(value: boolean);
            /** Whether the collider is used by an attached effector or not.
            */
            public get usedByEffector(): boolean;
            public set usedByEffector(value: boolean);
            /** Sets whether the Collider will be used or not used by a CompositeCollider2D.
            */
            public get usedByComposite(): boolean;
            public set usedByComposite(value: boolean);
            /** Get the CompositeCollider2D that is available to be attached to the collider.
            */
            public get composite(): UnityEngine.CompositeCollider2D;
            /** The local offset of the collider geometry.
            */
            public get offset(): UnityEngine.Vector2;
            public set offset(value: UnityEngine.Vector2);
            /** The Rigidbody2D attached to the Collider2D.
            */
            public get attachedRigidbody(): UnityEngine.Rigidbody2D;
            /** The number of separate shaped regions in the collider.
            */
            public get shapeCount(): number;
            /** The world space bounding area of the collider.
            */
            public get bounds(): UnityEngine.Bounds;
            /** The PhysicsMaterial2D that is applied to this collider.
            */
            public get sharedMaterial(): UnityEngine.PhysicsMaterial2D;
            public set sharedMaterial(value: UnityEngine.PhysicsMaterial2D);
            /** Get the friction used by the collider.
            */
            public get friction(): number;
            /** Get the bounciness used by the collider.
            */
            public get bounciness(): number;
            /** Creates a planar Mesh that is identical to the area defined by the Collider2D geometry.
            * @param useBodyPosition Should the mesh be transformed by the position of the attached Rigidbody2D?
            * @param useBodyRotation Should the mesh be transformed by the rotation of the attached Rigidbody2D?
            * @returns The planar Mesh created that matches the collider geometry or NULL if no Mesh could be created. 
            */
            public CreateMesh ($useBodyPosition: boolean, $useBodyRotation: boolean) : UnityEngine.Mesh
            public GetShapeHash () : number
            /** Check whether this collider is touching the collider or not.
            * @param collider The collider to check if it is touching this collider.
            * @returns Whether this collider is touching the collider or not. 
            */
            public IsTouching ($collider: UnityEngine.Collider2D) : boolean
            /** Check whether this collider is touching the collider or not with the results filtered by the contactFilter.
            * @param collider The collider to check if it is touching this collider.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Whether this collider is touching the collider or not. 
            */
            public IsTouching ($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D) : boolean
            /** Check whether this collider is touching other colliders or not with the results filtered by the contactFilter.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Whether this collider is touching the collider or not. 
            */
            public IsTouching ($contactFilter: UnityEngine.ContactFilter2D) : boolean
            public IsTouchingLayers () : boolean
            /** Checks whether this collider is touching any colliders on the specified layerMask or not.
            * @param layerMask Any colliders on any of these layers count as touching.
            * @returns Whether this collider is touching any collider on the specified layerMask or not. 
            */
            public IsTouchingLayers ($layerMask: number) : boolean
            /** Check if a collider overlaps a point in space.
            * @param point A point in world space.
            * @returns Does point overlap the collider? 
            */
            public OverlapPoint ($point: UnityEngine.Vector2) : boolean
            /** Calculates the minimum separation of this collider against another collider.
            * @param collider A collider used to calculate the minimum separation against this collider.
            * @returns The minimum separation of collider and this collider. 
            */
            public Distance ($collider: UnityEngine.Collider2D) : UnityEngine.ColliderDistance2D
            /** Get a list of all colliders that overlap this collider.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapCollider ($contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public OverlapCollider ($contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            /** Retrieves all contact points for this Collider.
            * @param contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts ($contacts: System.Array$1<UnityEngine.ContactPoint2D>) : number
            public GetContacts ($contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>) : number
            /** Retrieves all contact points for this Collider, with the results filtered by the contactFilter.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts ($contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>) : number
            public GetContacts ($contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>) : number
            /** Retrieves all colliders in contact with this Collider.
            * @param colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of contacts placed in the colliders array. 
            */
            public GetContacts ($colliders: System.Array$1<UnityEngine.Collider2D>) : number
            public GetContacts ($colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            /** Retrieves all colliders in contact with this Collider, with the results filtered by the contactFilter.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of colliders placed in the colliders array. 
            */
            public GetContacts ($contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Array$1<UnityEngine.Collider2D>) : number
            public GetContacts ($contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            public Cast ($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public Cast ($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            /** Casts the Collider shape into the Scene starting at the Collider position ignoring the Collider itself.
            * @param direction Vector representing the direction to cast the shape.
            * @param results Array to receive results.
            * @param distance Maximum distance over which to cast the shape.
            * @param ignoreSiblingColliders Determines whether the cast should ignore Colliders attached to the same Rigidbody2D (known as sibling Colliders).
            * @returns The number of results returned. 
            */
            public Cast ($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $ignoreSiblingColliders: boolean) : number
            public Cast ($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public Cast ($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            /** Casts the Collider shape into the Scene starting at the Collider position ignoring the Collider itself.
            * @param direction Vector representing the direction to cast the shape.
            * @param contactFilter Filter results defined by the contact filter.
            * @param results Array to receive results.
            * @param distance Maximum distance over which to cast the shape.
            * @param ignoreSiblingColliders Determines whether the cast should ignore Colliders attached to the same Rigidbody2D (known as sibling Colliders).
            * @returns The number of results returned. 
            */
            public Cast ($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $ignoreSiblingColliders: boolean) : number
            public Cast ($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number, $ignoreSiblingColliders?: boolean) : number
            public Raycast ($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public Raycast ($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public Raycast ($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number) : number
            public Raycast ($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number) : number
            /** Casts a ray into the Scene that starts at the Collider position and ignores the Collider itself.
            * @param direction Vector representing the direction of the ray.
            * @param results Array to receive results.
            * @param distance Maximum distance over which to cast the ray.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @param contactFilter Filter results defined by the contact filter.
            * @returns The number of results returned. 
            */
            public Raycast ($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : number
            public Raycast ($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            /** Casts a ray into the Scene that starts at the Collider position and ignores the Collider itself.
            * @param direction Vector representing the direction of the ray.
            * @param results Array to receive results.
            * @param distance Maximum distance over which to cast the ray.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @param contactFilter Filter results defined by the contact filter.
            * @returns The number of results returned. 
            */
            public Raycast ($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public Raycast ($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number) : number
            /** Returns a point on the perimeter of this Collider that is closest to the specified position.
            * @param position The position from which to find the closest point on this Collider.
            * @returns A point on the perimeter of this Collider that is closest to the specified position. 
            */
            public ClosestPoint ($position: UnityEngine.Vector2) : UnityEngine.Vector2
            public constructor ()
        }
        /** Scene extensions to access the underlying physics scene.
        */
        class PhysicsSceneExtensions2D extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An extension method that returns the 2D physics Scene from the Scene.
            * @param scene The Scene from which to return the 2D physics Scene.
            * @returns The 2D physics Scene used by the Scene. 
            */
            public static GetPhysicsScene2D ($scene: UnityEngine.SceneManagement.Scene) : UnityEngine.PhysicsScene2D
        }
        /** Global settings and helpers for 2D physics.
        */
        class Physics2D extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Layer mask constant for the default layer that ignores raycasts.
            */
            public static IgnoreRaycastLayer : number
            /** Layer mask constant that includes all layers participating in raycasts by default.
            */
            public static DefaultRaycastLayers : number
            /** Layer mask constant that includes all layers.
            */
            public static AllLayers : number
            /** The PhysicsScene2D automatically created when Unity starts.
            */
            public static get defaultPhysicsScene(): UnityEngine.PhysicsScene2D;
            /** The number of iterations of the physics solver when considering objects' velocities.
            */
            public static get velocityIterations(): number;
            public static set velocityIterations(value: number);
            /** The number of iterations of the physics solver when considering objects' positions.
            */
            public static get positionIterations(): number;
            public static set positionIterations(value: number);
            /** Acceleration due to gravity.
            */
            public static get gravity(): UnityEngine.Vector2;
            public static set gravity(value: UnityEngine.Vector2);
            /** Do raycasts detect Colliders configured as triggers?
            */
            public static get queriesHitTriggers(): boolean;
            public static set queriesHitTriggers(value: boolean);
            /** Sets the raycasts or linecasts that start inside Colliders to detect or not detect those Colliders.
            */
            public static get queriesStartInColliders(): boolean;
            public static set queriesStartInColliders(value: boolean);
            /** Use this to control whether or not the appropriate OnCollisionExit2D or OnTriggerExit2D callbacks should be called when a Collider2D is disabled.
            */
            public static get callbacksOnDisable(): boolean;
            public static set callbacksOnDisable(value: boolean);
            /** Determines whether the garbage collector should reuse only a single instance of a Collision2D type for all collision callbacks.
            */
            public static get reuseCollisionCallbacks(): boolean;
            public static set reuseCollisionCallbacks(value: boolean);
            /** Whether or not to automatically sync transform changes with the physics system whenever a Transform component changes.
            */
            public static get autoSyncTransforms(): boolean;
            public static set autoSyncTransforms(value: boolean);
            /** Sets whether the physics should be simulated automatically or not.
            */
            public static get autoSimulation(): boolean;
            public static set autoSimulation(value: boolean);
            /** A set of options that control how physics operates when using the job system to multithread the physics simulation.
            */
            public static get jobOptions(): UnityEngine.PhysicsJobOptions2D;
            public static set jobOptions(value: UnityEngine.PhysicsJobOptions2D);
            /** Any collisions with a relative linear velocity below this threshold will be treated as inelastic.
            */
            public static get velocityThreshold(): number;
            public static set velocityThreshold(value: number);
            /** The maximum linear position correction used when solving constraints.  This helps to prevent overshoot.
            */
            public static get maxLinearCorrection(): number;
            public static set maxLinearCorrection(value: number);
            /** The maximum angular position correction used when solving constraints.  This helps to prevent overshoot.
            */
            public static get maxAngularCorrection(): number;
            public static set maxAngularCorrection(value: number);
            /** The maximum linear speed of a rigid-body per physics update.  Increasing this can cause numerical problems.
            */
            public static get maxTranslationSpeed(): number;
            public static set maxTranslationSpeed(value: number);
            /** The maximum angular speed of a rigid-body per physics update.  Increasing this can cause numerical problems.
            */
            public static get maxRotationSpeed(): number;
            public static set maxRotationSpeed(value: number);
            /** The default contact offset of the newly created colliders.
            */
            public static get defaultContactOffset(): number;
            public static set defaultContactOffset(value: number);
            /** The scale factor that controls how fast overlaps are resolved.
            */
            public static get baumgarteScale(): number;
            public static set baumgarteScale(value: number);
            /** The scale factor that controls how fast TOI overlaps are resolved.
            */
            public static get baumgarteTOIScale(): number;
            public static set baumgarteTOIScale(value: number);
            /** The time in seconds that a rigid-body must be still before it will go to sleep.
            */
            public static get timeToSleep(): number;
            public static set timeToSleep(value: number);
            /** A rigid-body cannot sleep if its linear velocity is above this tolerance.
            */
            public static get linearSleepTolerance(): number;
            public static set linearSleepTolerance(value: number);
            /** A rigid-body cannot sleep if its angular velocity is above this tolerance.
            */
            public static get angularSleepTolerance(): number;
            public static set angularSleepTolerance(value: number);
            /** Should the collider gizmos always be shown even when they are not selected?
            */
            public static get alwaysShowColliders(): boolean;
            public static set alwaysShowColliders(value: boolean);
            /** Should the collider gizmos show the sleep-state for each collider?
            */
            public static get showColliderSleep(): boolean;
            public static set showColliderSleep(value: boolean);
            /** Should the collider gizmos show current contacts for each collider?
            */
            public static get showColliderContacts(): boolean;
            public static set showColliderContacts(value: boolean);
            /** Should the collider gizmos show the AABBs for each collider?
            */
            public static get showColliderAABB(): boolean;
            public static set showColliderAABB(value: boolean);
            /** The scale of the contact arrow used by the collider gizmos.
            */
            public static get contactArrowScale(): number;
            public static set contactArrowScale(value: number);
            /** The color used by the gizmos to show all awake colliders (collider is awake when the body is awake).
            */
            public static get colliderAwakeColor(): UnityEngine.Color;
            public static set colliderAwakeColor(value: UnityEngine.Color);
            /** The color used by the gizmos to show all asleep colliders (collider is asleep when the body is asleep).
            */
            public static get colliderAsleepColor(): UnityEngine.Color;
            public static set colliderAsleepColor(value: UnityEngine.Color);
            /** The color used by the gizmos to show all collider contacts.
            */
            public static get colliderContactColor(): UnityEngine.Color;
            public static set colliderContactColor(value: UnityEngine.Color);
            /** Sets the color used by the gizmos to show all Collider axis-aligned bounding boxes (AABBs).
            */
            public static get colliderAABBColor(): UnityEngine.Color;
            public static set colliderAABBColor(value: UnityEngine.Color);
            /** Simulate physics in the Scene.
            * @param step The time to advance physics by.
            * @returns Whether the simulation was run or not.  Running the simulation during physics callbacks will always fail. 
            */
            public static Simulate ($step: number) : boolean
            public static SyncTransforms () : void
            public static IgnoreCollision ($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D) : void
            /** Makes the collision detection system ignore all collisionstriggers between collider1 and collider2/.
            * @param collider1 The first collider to compare to collider2.
            * @param collider2 The second collider to compare to collider1.
            * @param ignore Whether collisionstriggers between collider1 and collider2/ should be ignored or not.
            */
            public static IgnoreCollision ($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D, $ignore: boolean) : void
            /** Checks whether the collision detection system will ignore all collisionstriggers between collider1 and collider2/ or not.
            * @param collider1 The first collider to compare to collider2.
            * @param collider2 The second collider to compare to collider1.
            * @returns Whether the collision detection system will ignore all collisionstriggers between collider1 and collider2/ or not. 
            */
            public static GetIgnoreCollision ($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D) : boolean
            public static IgnoreLayerCollision ($layer1: number, $layer2: number) : void
            /** Choose whether to detect or ignore collisions between a specified pair of layers.
            * @param layer1 ID of the first layer.
            * @param layer2 ID of the second layer.
            * @param ignore Should collisions between these layers be ignored?
            */
            public static IgnoreLayerCollision ($layer1: number, $layer2: number, $ignore: boolean) : void
            /** Checks whether collisions between the specified layers be ignored or not.
            * @param layer1 ID of first layer.
            * @param layer2 ID of second layer.
            * @returns Whether collisions between the specified layers be ignored or not. 
            */
            public static GetIgnoreLayerCollision ($layer1: number, $layer2: number) : boolean
            /** Set the collision layer mask that indicates which layer(s) the specified layer can collide with.
            * @param layer The layer to set the collision layer mask for.
            * @param layerMask A mask where each bit indicates a layer and whether it can collide with layer or not.
            */
            public static SetLayerCollisionMask ($layer: number, $layerMask: number) : void
            /** Get the collision layer mask that indicates which layer(s) the specified layer can collide with.
            * @param layer The layer to retrieve the collision layer mask for.
            * @returns A mask where each bit indicates a layer and whether it can collide with layer or not. 
            */
            public static GetLayerCollisionMask ($layer: number) : number
            /** Checks whether the passed colliders are in contact or not.
            * @param collider1 The collider to check if it is touching collider2.
            * @param collider2 The collider to check if it is touching collider1.
            * @returns Whether collider1 is touching collider2 or not. 
            */
            public static IsTouching ($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D) : boolean
            /** Checks whether the passed colliders are in contact or not.
            * @param collider1 The collider to check if it is touching collider2.
            * @param collider2 The collider to check if it is touching collider1.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Whether collider1 is touching collider2 or not. 
            */
            public static IsTouching ($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D) : boolean
            /** Checks whether the passed colliders are in contact or not.
            * @param collider The collider to check if it is touching any other collider filtered by the contactFilter.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Whether the collider is touching any other collider filtered by the contactFilter or not. 
            */
            public static IsTouching ($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D) : boolean
            public static IsTouchingLayers ($collider: UnityEngine.Collider2D) : boolean
            /** Checks whether the collider is touching any colliders on the specified layerMask or not.
            * @param collider The collider to check if it is touching colliders on the layerMask.
            * @param layerMask Any colliders on any of these layers count as touching.
            * @returns Whether the collider is touching any colliders on the specified layerMask or not. 
            */
            public static IsTouchingLayers ($collider: UnityEngine.Collider2D, $layerMask: number) : boolean
            /** Calculates the minimum distance between two colliders.
            * @param colliderA A collider used to calculate the minimum distance against colliderB.
            * @param colliderB A collider used to calculate the minimum distance against colliderA.
            * @returns The minimum distance between colliderA and colliderB. 
            */
            public static Distance ($colliderA: UnityEngine.Collider2D, $colliderB: UnityEngine.Collider2D) : UnityEngine.ColliderDistance2D
            /** Returns a point on the perimeter of the collider that is closest to the specified position.
            * @param position The position from which to find the closest point on the specified collider.
            * @param collider The Collider on which to find the closest specified position.
            * @returns A point on the perimeter of the collider that is closest to the specified position. 
            */
            public static ClosestPoint ($position: UnityEngine.Vector2, $collider: UnityEngine.Collider2D) : UnityEngine.Vector2
            /** Returns a point on the perimeter of all enabled colliders attached to the rigidbody that is closest to the specified position.
            * @param position The position from which to find the closest point on the specified rigidbody.
            * @param rigidbody The Rigidbody on which to find the closest specified position.
            * @returns A point on the perimeter of a Collider attached to the rigidbody that is closest to the specified position. 
            */
            public static ClosestPoint ($position: UnityEngine.Vector2, $rigidbody: UnityEngine.Rigidbody2D) : UnityEngine.Vector2
            public static Linecast ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2) : UnityEngine.RaycastHit2D
            public static Linecast ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask: number) : UnityEngine.RaycastHit2D
            public static Linecast ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask: number, $minDepth: number) : UnityEngine.RaycastHit2D
            /** Casts a line segment against colliders in the Scene.
            * @param start The start point of the line in world space.
            * @param end The end point of the line in world space.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static Linecast ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask: number, $minDepth: number, $maxDepth: number) : UnityEngine.RaycastHit2D
            /** Casts a line segment against colliders in the Scene with results filtered by ContactFilter2D.
            * @param start The start point of the line in world space.
            * @param end The end point of the line in world space.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static Linecast ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public static Linecast ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>) : number
            public static LinecastAll ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2) : System.Array$1<UnityEngine.RaycastHit2D>
            public static LinecastAll ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static LinecastAll ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask: number, $minDepth: number) : System.Array$1<UnityEngine.RaycastHit2D>
            /** Casts a line against colliders in the Scene.
            * @param start The start point of the line in world space.
            * @param end The end point of the line in world space.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static LinecastAll ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask: number, $minDepth: number, $maxDepth: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static LinecastNonAlloc ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public static LinecastNonAlloc ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $layerMask: number) : number
            public static LinecastNonAlloc ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $layerMask: number, $minDepth: number) : number
            /** Casts a line against colliders in the Scene.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @param start The start point of the line in world space.
            * @param end The end point of the line in world space.
            * @param results Returned array of objects that intersect the line.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @returns Returns the number of results placed in the results array. 
            */
            public static LinecastNonAlloc ($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $layerMask: number, $minDepth: number, $maxDepth: number) : number
            public static Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2) : UnityEngine.RaycastHit2D
            public static Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number) : UnityEngine.RaycastHit2D
            public static Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number) : UnityEngine.RaycastHit2D
            public static Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number) : UnityEngine.RaycastHit2D
            /** Casts a ray against colliders in the Scene.
            * @param origin The point in 2D space where the ray originates.
            * @param direction A vector representing the direction of the ray.
            * @param distance The maximum distance over which to cast the ray.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : UnityEngine.RaycastHit2D
            public static Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            /** Casts a ray against colliders in the Scene.
            * @param origin The point in 2D space where the ray originates.
            * @param direction A vector representing the direction of the ray.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param distance The maximum distance over which to cast the ray.
            * @returns Returns the number of results placed in the results array. 
            */
            public static Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public static Raycast ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number) : number
            public static RaycastNonAlloc ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public static RaycastNonAlloc ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public static RaycastNonAlloc ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number) : number
            public static RaycastNonAlloc ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number) : number
            /** Casts a ray into the Scene.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @param origin The point in 2D space where the ray originates.
            * @param direction A vector representing the direction of the ray.
            * @param results Array to receive results.
            * @param distance The maximum distance over which to cast the ray.
            * @param layerMask Filter to check objects only on specific layers.
            * @returns Returns the number of results placed in the results array. 
            */
            public static RaycastNonAlloc ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : number
            public static RaycastAll ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2) : System.Array$1<UnityEngine.RaycastHit2D>
            public static RaycastAll ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static RaycastAll ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static RaycastAll ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number) : System.Array$1<UnityEngine.RaycastHit2D>
            /** Casts a ray against colliders in the Scene, returning all colliders that contact with it.
            * @param origin The point in 2D space where the ray originates.
            * @param direction A vector representing the direction of the ray.
            * @param distance The maximum distance over which to cast the ray.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static RaycastAll ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2) : UnityEngine.RaycastHit2D
            public static CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number) : UnityEngine.RaycastHit2D
            public static CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number) : UnityEngine.RaycastHit2D
            public static CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number) : UnityEngine.RaycastHit2D
            /** Casts a circle against colliders in the Scene, returning the first collider to contact with it.
            * @param origin The point in 2D space where the circle originates.
            * @param radius The radius of the circle.
            * @param direction A vector representing the direction of the circle.
            * @param distance The maximum distance over which to cast the circle.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : UnityEngine.RaycastHit2D
            public static CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            /** Casts a circle against colliders in the Scene, returning all colliders that contact with it.
            * @param origin The point in 2D space where the circle originates.
            * @param radius The radius of the circle.
            * @param direction A vector representing the direction of the circle.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param distance The maximum distance over which to cast the circle.
            * @returns Returns the number of results placed in the results array. 
            */
            public static CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public static CircleCast ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number) : number
            public static CircleCastAll ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2) : System.Array$1<UnityEngine.RaycastHit2D>
            public static CircleCastAll ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static CircleCastAll ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static CircleCastAll ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number) : System.Array$1<UnityEngine.RaycastHit2D>
            /** Casts a circle against colliders in the Scene, returning all colliders that contact with it.
            * @param origin The point in 2D space where the circle originates.
            * @param radius The radius of the circle.
            * @param direction A vector representing the direction of the circle.
            * @param distance The maximum distance over which to cast the circle.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static CircleCastAll ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static CircleCastNonAlloc ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public static CircleCastNonAlloc ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public static CircleCastNonAlloc ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number) : number
            public static CircleCastNonAlloc ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number) : number
            /** Casts a circle into the Scene, returning colliders that contact with it into the provided results array.
            * @param origin The point in 2D space where the circle originates.
            * @param radius The radius of the circle.
            * @param direction A vector representing the direction of the circle.
            * @param results Array to receive results.
            * @param distance The maximum distance over which to cast the circle.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static CircleCastNonAlloc ($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : number
            public static BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2) : UnityEngine.RaycastHit2D
            public static BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number) : UnityEngine.RaycastHit2D
            public static BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number) : UnityEngine.RaycastHit2D
            public static BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number) : UnityEngine.RaycastHit2D
            /** Casts a box against colliders in the Scene, returning the first collider to contact with it.
            * @param origin The point in 2D space where the box originates.
            * @param size The size of the box.
            * @param angle The angle of the box (in degrees).
            * @param direction A vector representing the direction of the box.
            * @param distance The maximum distance over which to cast the box.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : UnityEngine.RaycastHit2D
            public static BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            /** Casts a box against the Colliders in the Scene and returns all Colliders that are in contact with it.
            * @param origin The point in 2D space where the box originates.
            * @param size The size of the box.
            * @param angle The angle of the box (in degrees).
            * @param direction A vector representing the direction of the box.
            * @param distance The maximum distance over which to cast the box.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Returns the number of results placed in the results array. 
            */
            public static BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public static BoxCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number) : number
            public static BoxCastAll ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2) : System.Array$1<UnityEngine.RaycastHit2D>
            public static BoxCastAll ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static BoxCastAll ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static BoxCastAll ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number) : System.Array$1<UnityEngine.RaycastHit2D>
            /** Casts a box against colliders in the Scene, returning all colliders that contact with it.
            * @param origin The point in 2D space where the box originates.
            * @param size The size of the box.
            * @param angle The angle of the box (in degrees).
            * @param direction A vector representing the direction of the box.
            * @param distance The maximum distance over which to cast the box.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static BoxCastAll ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static BoxCastNonAlloc ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public static BoxCastNonAlloc ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public static BoxCastNonAlloc ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number) : number
            public static BoxCastNonAlloc ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number) : number
            /** Casts a box into the Scene, returning colliders that contact with it into the provided results array.
            * @param origin The point in 2D space where the box originates.
            * @param size The size of the box.
            * @param angle The angle of the box (in degrees).
            * @param direction A vector representing the direction of the box.
            * @param results Array to receive results.
            * @param distance The maximum distance over which to cast the box.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static BoxCastNonAlloc ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : number
            public static CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2) : UnityEngine.RaycastHit2D
            public static CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number) : UnityEngine.RaycastHit2D
            public static CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number) : UnityEngine.RaycastHit2D
            public static CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number) : UnityEngine.RaycastHit2D
            /** Casts a capsule against colliders in the Scene, returning the first collider to contact with it.
            * @param origin The point in 2D space where the capsule originates.
            * @param size The size of the capsule.
            * @param capsuleDirection The direction of the capsule.
            * @param angle The angle of the capsule (in degrees).
            * @param direction Vector representing the direction to cast the capsule.
            * @param distance The maximum distance over which to cast the capsule.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns The cast results returned. 
            */
            public static CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : UnityEngine.RaycastHit2D
            public static CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            /** Casts a capsule against the colliders in the Scene and returns all colliders that are in contact with it.
            * @param origin The point in 2D space where the capsule originates.
            * @param size The size of the capsule.
            * @param capsuleDirection The direction of the capsule.
            * @param angle The angle of the capsule (in degrees).
            * @param direction Vector representing the direction to cast the capsule.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param distance The maximum distance over which to cast the capsule.
            * @returns Returns the number of results placed in the results array. 
            */
            public static CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public static CapsuleCast ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number) : number
            public static CapsuleCastAll ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2) : System.Array$1<UnityEngine.RaycastHit2D>
            public static CapsuleCastAll ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static CapsuleCastAll ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static CapsuleCastAll ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number) : System.Array$1<UnityEngine.RaycastHit2D>
            /** Casts a capsule against colliders in the Scene, returning all colliders that contact with it.
            * @param origin The point in 2D space where the capsule originates.
            * @param size The size of the capsule.
            * @param capsuleDirection The direction of the capsule.
            * @param angle The angle of the capsule (in degrees).
            * @param direction Vector representing the direction to cast the capsule.
            * @param distance The maximum distance over which to cast the capsule.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns The cast results returned. 
            */
            public static CapsuleCastAll ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static CapsuleCastNonAlloc ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public static CapsuleCastNonAlloc ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public static CapsuleCastNonAlloc ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number) : number
            public static CapsuleCastNonAlloc ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number) : number
            /** Casts a capsule into the Scene, returning colliders that contact with it into the provided results array.
            * @param origin The point in 2D space where the capsule originates.
            * @param size The size of the capsule.
            * @param capsuleDirection The direction of the capsule.
            * @param angle The angle of the capsule (in degrees).
            * @param direction Vector representing the direction to cast the capsule.
            * @param results Array to receive results.
            * @param distance The maximum distance over which to cast the capsule.
            * @param layerMask Filter to detect Colliders only on certain layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static CapsuleCastNonAlloc ($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number) : number
            public static GetRayIntersection ($ray: UnityEngine.Ray) : UnityEngine.RaycastHit2D
            public static GetRayIntersection ($ray: UnityEngine.Ray, $distance: number) : UnityEngine.RaycastHit2D
            /** Cast a 3D ray against the colliders in the Scene returning the first collider along the ray.
            * @param ray The 3D ray defining origin and direction to test.
            * @param distance The maximum distance over which to cast the ray.
            * @param layerMask Filter to detect colliders only on certain layers.
            * @returns The cast results returned. 
            */
            public static GetRayIntersection ($ray: UnityEngine.Ray, $distance: number, $layerMask: number) : UnityEngine.RaycastHit2D
            public static GetRayIntersectionAll ($ray: UnityEngine.Ray) : System.Array$1<UnityEngine.RaycastHit2D>
            public static GetRayIntersectionAll ($ray: UnityEngine.Ray, $distance: number) : System.Array$1<UnityEngine.RaycastHit2D>
            /** Cast a 3D ray against the colliders in the Scene returning all the colliders along the ray.
            * @param ray The 3D ray defining origin and direction to test.
            * @param distance The maximum distance over which to cast the ray.
            * @param layerMask Filter to detect colliders only on certain layers.
            * @returns The cast results returned. 
            */
            public static GetRayIntersectionAll ($ray: UnityEngine.Ray, $distance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit2D>
            public static GetRayIntersectionNonAlloc ($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            public static GetRayIntersectionNonAlloc ($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            /** Cast a 3D ray against the colliders in the Scene returning the colliders along the ray.
            * @param ray The 3D ray defining origin and direction to test.
            * @param distance The maximum distance over which to cast the ray.
            * @param layerMask Filter to detect colliders only on certain layers.
            * @param results Array to receive results.
            * @returns The number of results returned. 
            */
            public static GetRayIntersectionNonAlloc ($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number) : number
            public static OverlapPoint ($point: UnityEngine.Vector2) : UnityEngine.Collider2D
            public static OverlapPoint ($point: UnityEngine.Vector2, $layerMask: number) : UnityEngine.Collider2D
            public static OverlapPoint ($point: UnityEngine.Vector2, $layerMask: number, $minDepth: number) : UnityEngine.Collider2D
            /** Checks if a collider overlaps a point in space.
            * @param point A point in world space.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The collider overlapping the point. 
            */
            public static OverlapPoint ($point: UnityEngine.Vector2, $layerMask: number, $minDepth: number, $maxDepth: number) : UnityEngine.Collider2D
            /** Checks if a collider overlaps a point in world space.
            * @param point A point in world space.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapPoint ($point: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public static OverlapPoint ($point: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            public static OverlapPointAll ($point: UnityEngine.Vector2) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapPointAll ($point: UnityEngine.Vector2, $layerMask: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapPointAll ($point: UnityEngine.Vector2, $layerMask: number, $minDepth: number) : System.Array$1<UnityEngine.Collider2D>
            /** Get a list of all colliders that overlap a point in space.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @param point A point in space.
            * @param layerMask Filter to check objects only on specific layers.
            * @returns The cast results returned. 
            */
            public static OverlapPointAll ($point: UnityEngine.Vector2, $layerMask: number, $minDepth: number, $maxDepth: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapPointNonAlloc ($point: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public static OverlapPointNonAlloc ($point: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number) : number
            public static OverlapPointNonAlloc ($point: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number) : number
            /** Get a list of all colliders that overlap a point in space.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @param point A point in space.
            * @param results Array to receive results.
            * @param layerMask Filter to check objects only on specific layers.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapPointNonAlloc ($point: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number, $maxDepth: number) : number
            public static OverlapCircle ($point: UnityEngine.Vector2, $radius: number) : UnityEngine.Collider2D
            public static OverlapCircle ($point: UnityEngine.Vector2, $radius: number, $layerMask: number) : UnityEngine.Collider2D
            public static OverlapCircle ($point: UnityEngine.Vector2, $radius: number, $layerMask: number, $minDepth: number) : UnityEngine.Collider2D
            /** Checks if a collider falls within a circular area.
            * @param point Centre of the circle.
            * @param radius The radius of the circle.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The collider overlapping the circle. 
            */
            public static OverlapCircle ($point: UnityEngine.Vector2, $radius: number, $layerMask: number, $minDepth: number, $maxDepth: number) : UnityEngine.Collider2D
            /** Checks if a collider is within a circular area.
            * @param point Centre of the circle.
            * @param radius The radius of the circle.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapCircle ($point: UnityEngine.Vector2, $radius: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public static OverlapCircle ($point: UnityEngine.Vector2, $radius: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            public static OverlapCircleAll ($point: UnityEngine.Vector2, $radius: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapCircleAll ($point: UnityEngine.Vector2, $radius: number, $layerMask: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapCircleAll ($point: UnityEngine.Vector2, $radius: number, $layerMask: number, $minDepth: number) : System.Array$1<UnityEngine.Collider2D>
            /** Get a list of all colliders that fall within a circular area.
            * @param point The center of the circle.
            * @param radius The radius of the circle.
            * @param layerMask Filter to check objects only on specified layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results. 
            */
            public static OverlapCircleAll ($point: UnityEngine.Vector2, $radius: number, $layerMask: number, $minDepth: number, $maxDepth: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapCircleNonAlloc ($point: UnityEngine.Vector2, $radius: number, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public static OverlapCircleNonAlloc ($point: UnityEngine.Vector2, $radius: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number) : number
            public static OverlapCircleNonAlloc ($point: UnityEngine.Vector2, $radius: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number) : number
            /** Get a list of all colliders that fall within a circular area.
            * @param point The center of the circle.
            * @param radius The radius of the circle.
            * @param results Array to receive results.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapCircleNonAlloc ($point: UnityEngine.Vector2, $radius: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number, $maxDepth: number) : number
            public static OverlapBox ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number) : UnityEngine.Collider2D
            public static OverlapBox ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask: number) : UnityEngine.Collider2D
            public static OverlapBox ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask: number, $minDepth: number) : UnityEngine.Collider2D
            /** Checks if a collider falls within a box area.
            * @param point The center of the box.
            * @param size The size of the box.
            * @param angle The angle of the box.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns The collider overlapping the box. 
            */
            public static OverlapBox ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask: number, $minDepth: number, $maxDepth: number) : UnityEngine.Collider2D
            /** Checks if a collider falls within a box area.
            * @param point The center of the box.
            * @param size The size of the box.
            * @param angle The angle of the box.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapBox ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public static OverlapBox ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            public static OverlapBoxAll ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapBoxAll ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapBoxAll ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask: number, $minDepth: number) : System.Array$1<UnityEngine.Collider2D>
            /** Get a list of all colliders that fall within a box area.
            * @param point The center of the box.
            * @param size The size of the box.
            * @param angle The angle of the box.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns The cast results returned. 
            */
            public static OverlapBoxAll ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask: number, $minDepth: number, $maxDepth: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapBoxNonAlloc ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public static OverlapBoxNonAlloc ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number) : number
            public static OverlapBoxNonAlloc ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number) : number
            /** Get a list of all colliders that fall within a box area.
            * @param point The center of the box.
            * @param size The size of the box.
            * @param angle The angle of the box.
            * @param results Array to receive results.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapBoxNonAlloc ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number, $maxDepth: number) : number
            public static OverlapArea ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2) : UnityEngine.Collider2D
            public static OverlapArea ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask: number) : UnityEngine.Collider2D
            public static OverlapArea ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask: number, $minDepth: number) : UnityEngine.Collider2D
            /** Checks if a collider falls within a rectangular area.
            * @param pointA One corner of the rectangle.
            * @param pointB Diagonally opposite the point A corner of the rectangle.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The collider overlapping the area. 
            */
            public static OverlapArea ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask: number, $minDepth: number, $maxDepth: number) : UnityEngine.Collider2D
            /** Checks if a collider falls within a rectangular area.
            * @param pointA One corner of the rectangle.
            * @param pointB Diagonally opposite the point A corner of the rectangle.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapArea ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public static OverlapArea ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            public static OverlapAreaAll ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapAreaAll ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapAreaAll ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask: number, $minDepth: number) : System.Array$1<UnityEngine.Collider2D>
            /** Get a list of all colliders that fall within a rectangular area.
            * @param pointA One corner of the rectangle.
            * @param pointB Diagonally opposite the point A corner of the rectangle.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static OverlapAreaAll ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask: number, $minDepth: number, $maxDepth: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapAreaNonAlloc ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public static OverlapAreaNonAlloc ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number) : number
            public static OverlapAreaNonAlloc ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number) : number
            /** Get a list of all colliders that fall within a specified area.
            * @param pointA One corner of the rectangle.
            * @param pointB Diagonally opposite the point A corner of the rectangle.
            * @param results Array to receive results.
            * @param layerMask Filter to check objects only on specified layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapAreaNonAlloc ($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number, $maxDepth: number) : number
            public static OverlapCapsule ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number) : UnityEngine.Collider2D
            public static OverlapCapsule ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask: number) : UnityEngine.Collider2D
            public static OverlapCapsule ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask: number, $minDepth: number) : UnityEngine.Collider2D
            /** Checks if a collider falls within a capsule area.
            * @param point The center of the capsule.
            * @param size The size of the capsule.
            * @param direction The direction of the capsule.
            * @param angle The angle of the capsule.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns The collider overlapping the capsule. 
            */
            public static OverlapCapsule ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask: number, $minDepth: number, $maxDepth: number) : UnityEngine.Collider2D
            /** Checks if a collider falls within a capsule area.
            * @param point The center of the capsule.
            * @param size The size of the capsule.
            * @param direction The direction of the capsule.
            * @param angle The angle of the capsule.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapCapsule ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public static OverlapCapsule ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            public static OverlapCapsuleAll ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapCapsuleAll ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapCapsuleAll ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask: number, $minDepth: number) : System.Array$1<UnityEngine.Collider2D>
            /** Get a list of all colliders that fall within a capsule area.
            * @param point The center of the capsule.
            * @param size The size of the capsule.
            * @param direction The direction of the capsule.
            * @param angle The angle of the capsule.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns The cast results returned. 
            */
            public static OverlapCapsuleAll ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask: number, $minDepth: number, $maxDepth: number) : System.Array$1<UnityEngine.Collider2D>
            public static OverlapCapsuleNonAlloc ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public static OverlapCapsuleNonAlloc ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number) : number
            public static OverlapCapsuleNonAlloc ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number) : number
            /** Get a list of all colliders that fall within a capsule area.
            * @param point The center of the capsule.
            * @param size The size of the capsule.
            * @param direction The direction of the capsule.
            * @param angle The angle of the capsule.
            * @param results Array to receive results.
            * @param layerMask Filter to check objects only on specific layers.
            * @param minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapCapsuleNonAlloc ($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number, $maxDepth: number) : number
            /** Gets a list of all Colliders that overlap the given collider.
            * @param collider The collider that defines the area used to query for other collider overlaps.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapCollider ($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public static OverlapCollider ($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            /** Retrieves all contact points in for contacts between with the collider1 and collider2, with the results filtered by the ContactFilter2D.
            * @param collider1 The collider to check if it has contacts against collider2.
            * @param collider2 The collider to check if it has contacts against collider1.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public static GetContacts ($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>) : number
            /** Retrieves all contact points in contact with the collider.
            * @param collider The collider to retrieve contacts for.
            * @param contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public static GetContacts ($collider: UnityEngine.Collider2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>) : number
            /** Retrieves all contact points in contact with the collider, with the results filtered by the ContactFilter2D.
            * @param collider The collider to retrieve contacts for.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public static GetContacts ($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>) : number
            /** Retrieves all colliders in contact with the collider.
            * @param collider The collider to retrieve contacts for.
            * @param colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of colliders placed in the colliders array. 
            */
            public static GetContacts ($collider: UnityEngine.Collider2D, $colliders: System.Array$1<UnityEngine.Collider2D>) : number
            /** Retrieves all colliders in contact with the collider, with the results filtered by the ContactFilter2D.
            * @param collider The collider to retrieve contacts for.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of colliders placed in the colliders array. 
            */
            public static GetContacts ($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Array$1<UnityEngine.Collider2D>) : number
            /** Retrieves all contact points in contact with any of the collider(s) attached to this rigidbody.
            * @param rigidbody The rigidbody to retrieve contacts for.  All colliders attached to this rigidbody will be checked.
            * @param contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public static GetContacts ($rigidbody: UnityEngine.Rigidbody2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>) : number
            /** Retrieves all contact points in contact with any of the collider(s) attached to this rigidbody, with the results filtered by the ContactFilter2D.
            * @param rigidbody The rigidbody to retrieve contacts for.  All colliders attached to this rigidbody will be checked.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public static GetContacts ($rigidbody: UnityEngine.Rigidbody2D, $contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>) : number
            /** Retrieves all colliders in contact with any of the collider(s) attached to this rigidbody.
            * @param rigidbody The rigidbody to retrieve contacts for.  All colliders attached to this rigidbody will be checked.
            * @param colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of colliders placed in the colliders array. 
            */
            public static GetContacts ($rigidbody: UnityEngine.Rigidbody2D, $colliders: System.Array$1<UnityEngine.Collider2D>) : number
            /** Retrieves all colliders in contact with any of the collider(s) attached to this rigidbody, with the results filtered by the ContactFilter2D.
            * @param rigidbody The rigidbody to retrieve contacts for.  All colliders attached to this rigidbody will be checked.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of colliders placed in the colliders array. 
            */
            public static GetContacts ($rigidbody: UnityEngine.Rigidbody2D, $contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Array$1<UnityEngine.Collider2D>) : number
            public static GetContacts ($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>) : number
            public static GetContacts ($collider: UnityEngine.Collider2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>) : number
            public static GetContacts ($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>) : number
            public static GetContacts ($collider: UnityEngine.Collider2D, $colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            public static GetContacts ($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            public static GetContacts ($rigidbody: UnityEngine.Rigidbody2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>) : number
            public static GetContacts ($rigidbody: UnityEngine.Rigidbody2D, $contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>) : number
            public static GetContacts ($rigidbody: UnityEngine.Rigidbody2D, $colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            public static GetContacts ($rigidbody: UnityEngine.Rigidbody2D, $contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            public constructor ()
        }
        /** A set of options that control how physics operates when using the job system to multithread the physics simulation.
        */
        class PhysicsJobOptions2D extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Should physics simulation use multithreading?
            */
            public get useMultithreading(): boolean;
            public set useMultithreading(value: boolean);
            /** Should physics simulation sort multi-threaded results to maintain processing order consistency?
            */
            public get useConsistencySorting(): boolean;
            public set useConsistencySorting(value: boolean);
            /** Controls the minimum number of Rigidbody2D being interpolated in each simulation job.
            */
            public get interpolationPosesPerJob(): number;
            public set interpolationPosesPerJob(value: number);
            /** Controls the minimum number of new contacts to find in each simulation job.
            */
            public get newContactsPerJob(): number;
            public set newContactsPerJob(value: number);
            /** Controls the minimum number of contacts to collide in each simulation job.
            */
            public get collideContactsPerJob(): number;
            public set collideContactsPerJob(value: number);
            /** Controls the minimum number of flags to be cleared in each simulation job.
            */
            public get clearFlagsPerJob(): number;
            public set clearFlagsPerJob(value: number);
            /** Controls the minimum number of bodies to be cleared in each simulation job.
            */
            public get clearBodyForcesPerJob(): number;
            public set clearBodyForcesPerJob(value: number);
            /** Controls the minimum number of fixtures to synchronize in the broadphase during discrete island solving in each simulation job.
            */
            public get syncDiscreteFixturesPerJob(): number;
            public set syncDiscreteFixturesPerJob(value: number);
            /** Controls the minimum number of fixtures to synchronize in the broadphase during continuous island solving in each simulation job.
            */
            public get syncContinuousFixturesPerJob(): number;
            public set syncContinuousFixturesPerJob(value: number);
            /** Controls the minimum number of nearest contacts to find in each simulation job.
            */
            public get findNearestContactsPerJob(): number;
            public set findNearestContactsPerJob(value: number);
            /** Controls the minimum number of trigger contacts to update in each simulation job.
            */
            public get updateTriggerContactsPerJob(): number;
            public set updateTriggerContactsPerJob(value: number);
            /** The minimum threshold cost of all bodies, contacts and joints in an island during discrete island solving.
            */
            public get islandSolverCostThreshold(): number;
            public set islandSolverCostThreshold(value: number);
            /** Scales the cost of each body during discrete island solving.
            */
            public get islandSolverBodyCostScale(): number;
            public set islandSolverBodyCostScale(value: number);
            /** Scales the cost of each contact during discrete island solving.
            */
            public get islandSolverContactCostScale(): number;
            public set islandSolverContactCostScale(value: number);
            /** Scales the cost of each joint during discrete island solving.
            */
            public get islandSolverJointCostScale(): number;
            public set islandSolverJointCostScale(value: number);
            /** Controls the minimum number of bodies to solve in each simulation job when performing island solving.
            */
            public get islandSolverBodiesPerJob(): number;
            public set islandSolverBodiesPerJob(value: number);
            /** Controls the minimum number of contacts to solve in each simulation job when performing island solving.
            */
            public get islandSolverContactsPerJob(): number;
            public set islandSolverContactsPerJob(value: number);
        }
        /** Represents the separation or overlap of two Collider2D.
        */
        class ColliderDistance2D extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** A point on a Collider2D that is a specific distance away from pointB.
            */
            public get pointA(): UnityEngine.Vector2;
            public set pointA(value: UnityEngine.Vector2);
            /** A point on a Collider2D that is a specific distance away from pointA.
            */
            public get pointB(): UnityEngine.Vector2;
            public set pointB(value: UnityEngine.Vector2);
            /** A normalized vector that points from pointB to pointA.
            */
            public get normal(): UnityEngine.Vector2;
            /** Gets the distance between two colliders.
            */
            public get distance(): number;
            public set distance(value: number);
            /** Gets whether the distance represents an overlap or not.
            */
            public get isOverlapped(): boolean;
            /** Gets whether the distance is valid or not.
            */
            public get isValid(): boolean;
            public set isValid(value: boolean);
        }
        /** Rigidbody physics component for 2D sprites.
        */
        class Rigidbody2D extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** The position of the rigidbody.
            */
            public get position(): UnityEngine.Vector2;
            public set position(value: UnityEngine.Vector2);
            /** The rotation of the rigidbody.
            */
            public get rotation(): number;
            public set rotation(value: number);
            /** Linear velocity of the Rigidbody in units per second.
            */
            public get velocity(): UnityEngine.Vector2;
            public set velocity(value: UnityEngine.Vector2);
            /** Angular velocity in degrees per second.
            */
            public get angularVelocity(): number;
            public set angularVelocity(value: number);
            /** Should the total rigid-body mass be automatically calculated from the Collider2D.density of attached colliders?
            */
            public get useAutoMass(): boolean;
            public set useAutoMass(value: boolean);
            /** Mass of the Rigidbody.
            */
            public get mass(): number;
            public set mass(value: number);
            /** The PhysicsMaterial2D that is applied to all Collider2D attached to this Rigidbody2D.
            */
            public get sharedMaterial(): UnityEngine.PhysicsMaterial2D;
            public set sharedMaterial(value: UnityEngine.PhysicsMaterial2D);
            /** The center of mass of the rigidBody in local space.
            */
            public get centerOfMass(): UnityEngine.Vector2;
            public set centerOfMass(value: UnityEngine.Vector2);
            /** Gets the center of mass of the rigidBody in global space.
            */
            public get worldCenterOfMass(): UnityEngine.Vector2;
            /** The rigidBody rotational inertia.
            */
            public get inertia(): number;
            public set inertia(value: number);
            /** Coefficient of drag.
            */
            public get drag(): number;
            public set drag(value: number);
            /** Coefficient of angular drag.
            */
            public get angularDrag(): number;
            public set angularDrag(value: number);
            /** The degree to which this object is affected by gravity.
            */
            public get gravityScale(): number;
            public set gravityScale(value: number);
            /** The physical behaviour type of the Rigidbody2D.
            */
            public get bodyType(): UnityEngine.RigidbodyType2D;
            public set bodyType(value: UnityEngine.RigidbodyType2D);
            /** Should kinematickinematic and kinematicstatic collisions be allowed?
            */
            public get useFullKinematicContacts(): boolean;
            public set useFullKinematicContacts(value: boolean);
            /** Should this rigidbody be taken out of physics control?
            */
            public get isKinematic(): boolean;
            public set isKinematic(value: boolean);
            /** Controls whether physics will change the rotation of the object.
            */
            public get freezeRotation(): boolean;
            public set freezeRotation(value: boolean);
            /** Controls which degrees of freedom are allowed for the simulation of this Rigidbody2D.
            */
            public get constraints(): UnityEngine.RigidbodyConstraints2D;
            public set constraints(value: UnityEngine.RigidbodyConstraints2D);
            /** Indicates whether the rigid body should be simulated or not by the physics system.
            */
            public get simulated(): boolean;
            public set simulated(value: boolean);
            /** Physics interpolation used between updates.
            */
            public get interpolation(): UnityEngine.RigidbodyInterpolation2D;
            public set interpolation(value: UnityEngine.RigidbodyInterpolation2D);
            /** The sleep state that the rigidbody will initially be in.
            */
            public get sleepMode(): UnityEngine.RigidbodySleepMode2D;
            public set sleepMode(value: UnityEngine.RigidbodySleepMode2D);
            /** The method used by the physics engine to check if two objects have collided.
            */
            public get collisionDetectionMode(): UnityEngine.CollisionDetectionMode2D;
            public set collisionDetectionMode(value: UnityEngine.CollisionDetectionMode2D);
            /** Returns the number of Collider2D attached to this Rigidbody2D.
            */
            public get attachedColliderCount(): number;
            /** Sets the rotation of the Rigidbody2D to angle (given in degrees).
            * @param angle The rotation of the Rigidbody (in degrees).
            */
            public SetRotation ($angle: number) : void
            /** Sets the rotation of the Rigidbody2D to the z-axis rotation extracted from the full 3D rotation.
            * @param rotation Full 3D rotation used to extract only the z-axis rotation.
            */
            public SetRotation ($rotation: UnityEngine.Quaternion) : void
            /** Moves the rigidbody to position.
            * @param position The new position for the Rigidbody object.
            */
            public MovePosition ($position: UnityEngine.Vector2) : void
            /** Rotates the Rigidbody to angle (given in degrees).
            * @param angle The new rotation angle for the Rigidbody object.
            */
            public MoveRotation ($angle: number) : void
            /** An overload of MoveRotation that allows a full 3D rotation as an argument.
            * @param rotation Full 3D rotation used to extract only the z-axis rotation.
            */
            public MoveRotation ($rotation: UnityEngine.Quaternion) : void
            public IsSleeping () : boolean
            public IsAwake () : boolean
            public Sleep () : void
            public WakeUp () : void
            /** Checks whether the collider  is touching any of the collider(s) attached to this rigidbody or not.
            * @param collider The collider to check if it is touching any of the collider(s) attached to this rigidbody.
            * @returns Whether the collider is touching any of the collider(s) attached to this rigidbody or not. 
            */
            public IsTouching ($collider: UnityEngine.Collider2D) : boolean
            /** Checks whether the collider  is touching any of the collider(s) attached to this rigidbody or not with the results filtered by the ContactFilter2D.
            * @param collider The collider to check if it is touching any of the collider(s) attached to this rigidbody.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Whether the collider is touching any of the collider(s) attached to this rigidbody or not. 
            */
            public IsTouching ($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D) : boolean
            /** Checks whether any collider is touching any of the collider(s) attached to this rigidbody or not with the results filtered by the ContactFilter2D.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Whether any collider is touching any of the collider(s) attached to this rigidbody or not. 
            */
            public IsTouching ($contactFilter: UnityEngine.ContactFilter2D) : boolean
            public IsTouchingLayers () : boolean
            /** Checks whether any of the collider(s) attached to this rigidbody are touching any colliders on the specified layerMask or not.
            * @param layerMask Any colliders on any of these layers count as touching.
            * @returns Whether any of the collider(s) attached to this rigidbody are touching any colliders on the specified layerMask or not. 
            */
            public IsTouchingLayers ($layerMask: number) : boolean
            /** Check if any of the Rigidbody2D colliders overlap a point in space.
            * @param point A point in world space.
            * @returns Whether the point overlapped any of the Rigidbody2D colliders. 
            */
            public OverlapPoint ($point: UnityEngine.Vector2) : boolean
            /** Calculates the minimum distance of this collider against all Collider2D attached to this Rigidbody2D.
            * @param collider A collider used to calculate the minimum distance against all colliders attached to this Rigidbody2D.
            * @returns The minimum distance of collider against all colliders attached to this Rigidbody2D. 
            */
            public Distance ($collider: UnityEngine.Collider2D) : UnityEngine.ColliderDistance2D
            /** Returns a point on the perimeter of all enabled Colliders attached to this Rigidbody that is closest to the specified position.
            * @param position The position from which to find the closest point on this Rigidbody.
            * @returns A point on the perimeter of a Collider attached to this rigidbody that is closest to the specified position. 
            */
            public ClosestPoint ($position: UnityEngine.Vector2) : UnityEngine.Vector2
            public AddForce ($force: UnityEngine.Vector2) : void
            /** Apply a force to the rigidbody.
            * @param force Components of the force in the X and Y axes.
            * @param mode The method used to apply the specified force.
            */
            public AddForce ($force: UnityEngine.Vector2, $mode: UnityEngine.ForceMode2D) : void
            public AddRelativeForce ($relativeForce: UnityEngine.Vector2) : void
            /** Adds a force to the rigidbody2D relative to its coordinate system.
            * @param relativeForce Components of the force in the X and Y axes.
            * @param mode The method used to apply the specified force.
            */
            public AddRelativeForce ($relativeForce: UnityEngine.Vector2, $mode: UnityEngine.ForceMode2D) : void
            public AddForceAtPosition ($force: UnityEngine.Vector2, $position: UnityEngine.Vector2) : void
            /** Apply a force at a given position in space.
            * @param force Components of the force in the X and Y axes.
            * @param position Position in world space to apply the force.
            * @param mode The method used to apply the specified force.
            */
            public AddForceAtPosition ($force: UnityEngine.Vector2, $position: UnityEngine.Vector2, $mode: UnityEngine.ForceMode2D) : void
            public AddTorque ($torque: number) : void
            /** Apply a torque at the rigidbody's centre of mass.
            * @param torque Torque to apply.
            * @param mode The force mode to use.
            */
            public AddTorque ($torque: number, $mode: UnityEngine.ForceMode2D) : void
            /** Get a local space point given the point point in rigidBody global space.
            * @param point The global space point to transform into local space.
            */
            public GetPoint ($point: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Get a global space point given the point relativePoint in rigidBody local space.
            * @param relativePoint The local space point to transform into global space.
            */
            public GetRelativePoint ($relativePoint: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Get a local space vector given the vector vector in rigidBody global space.
            * @param vector The global space vector to transform into a local space vector.
            */
            public GetVector ($vector: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Get a global space vector given the vector relativeVector in rigidBody local space.
            * @param relativeVector The local space vector to transform into a global space vector.
            */
            public GetRelativeVector ($relativeVector: UnityEngine.Vector2) : UnityEngine.Vector2
            /** The velocity of the rigidbody at the point Point in global space.
            * @param point The global space point to calculate velocity for.
            */
            public GetPointVelocity ($point: UnityEngine.Vector2) : UnityEngine.Vector2
            /** The velocity of the rigidbody at the point Point in local space.
            * @param relativePoint The local space point to calculate velocity for.
            */
            public GetRelativePointVelocity ($relativePoint: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Get a list of all Colliders that overlap all Colliders attached to this Rigidbody2D.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapCollider ($contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>) : number
            public OverlapCollider ($contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            /** Retrieves all contact points for all of the Collider(s) attached to this Rigidbody.
            * @param contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts ($contacts: System.Array$1<UnityEngine.ContactPoint2D>) : number
            public GetContacts ($contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>) : number
            /** Retrieves all contact points for all of the Collider(s) attached to this Rigidbody, with the results filtered by the ContactFilter2D.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts ($contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>) : number
            public GetContacts ($contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>) : number
            /** Retrieves all Colliders in contact with any of the Collider(s) attached to this Rigidbody.
            * @param colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of colliders placed in the colliders array. 
            */
            public GetContacts ($colliders: System.Array$1<UnityEngine.Collider2D>) : number
            public GetContacts ($colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            /** Retrieves all Colliders in contact with any of the Collider(s) attached to this rigidbody, with the results filtered by the ContactFilter2D.
            * @param contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of colliders placed in the colliders array. 
            */
            public GetContacts ($contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Array$1<UnityEngine.Collider2D>) : number
            public GetContacts ($contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            /** Returns all Collider2D that are attached to this Rigidbody2D.
            * @param results An array of Collider2D used to receive the results.
            * @returns Returns the number of Collider2D placed in the results array. 
            */
            public GetAttachedColliders ($results: System.Array$1<UnityEngine.Collider2D>) : number
            public GetAttachedColliders ($results: System.Collections.Generic.List$1<UnityEngine.Collider2D>) : number
            public Cast ($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            /** All the Collider2D shapes attached to the Rigidbody2D are cast into the Scene starting at each Collider position ignoring the Colliders attached to the same Rigidbody2D.
            * @param direction Vector representing the direction to cast each Collider2D shape.
            * @param results Array to receive results.
            * @param distance Maximum distance over which to cast the Collider(s).
            * @returns Returns the number of results placed in the results array. 
            */
            public Cast ($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public Cast ($direction: UnityEngine.Vector2, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number) : number
            public Cast ($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>) : number
            /** All the Collider2D shapes attached to the Rigidbody2D are cast into the Scene starting at each Collider position ignoring the Colliders attached to the same Rigidbody2D.
            * @param direction Vector representing the direction to cast each Collider2D shape.
            * @param contactFilter Filter results defined by the contact filter.
            * @param results Array to receive results.
            * @param distance Maximum distance over which to cast the Collider(s).
            * @returns Returns the number of results placed in the results array. 
            */
            public Cast ($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public Cast ($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance: number) : number
            public constructor ()
        }
        /** Details about a specific point of contact involved in a 2D physics collision.
        */
        class ContactPoint2D extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The point of contact between the two colliders in world space.
            */
            public get point(): UnityEngine.Vector2;
            /** Surface normal at the contact point.
            */
            public get normal(): UnityEngine.Vector2;
            /** Gets the distance between the colliders at the contact point.
            */
            public get separation(): number;
            /** Gets the impulse applied at the contact point along the ContactPoint2D.normal.
            */
            public get normalImpulse(): number;
            /** Gets the impulse applied at the contact point which is perpendicular to the ContactPoint2D.normal.
            */
            public get tangentImpulse(): number;
            /** Gets the relative velocity of the two colliders at the contact point (Read Only).
            */
            public get relativeVelocity(): UnityEngine.Vector2;
            /** The incoming Collider2D involved in the collision with the otherCollider.
            */
            public get collider(): UnityEngine.Collider2D;
            /** The other Collider2D involved in the collision with the collider.
            */
            public get otherCollider(): UnityEngine.Collider2D;
            /** The incoming Rigidbody2D involved in the collision with the otherRigidbody.
            */
            public get rigidbody(): UnityEngine.Rigidbody2D;
            /** The other Rigidbody2D involved in the collision with the rigidbody.
            */
            public get otherRigidbody(): UnityEngine.Rigidbody2D;
            /** Indicates whether the collision response or reaction is enabled or disabled.
            */
            public get enabled(): boolean;
        }
        /** Use these flags to constrain motion of the Rigidbody2D.
        */
        enum RigidbodyConstraints2D
        { None = 0, FreezePositionX = 1, FreezePositionY = 2, FreezeRotation = 4, FreezePosition = 3, FreezeAll = 7 }
        /** Interpolation mode for Rigidbody2D objects.
        */
        enum RigidbodyInterpolation2D
        { None = 0, Interpolate = 1, Extrapolate = 2 }
        /** Settings for a Rigidbody2D's initial sleep state.
        */
        enum RigidbodySleepMode2D
        { NeverSleep = 0, StartAwake = 1, StartAsleep = 2 }
        /** Controls how collisions are detected when a Rigidbody2D moves.
        */
        enum CollisionDetectionMode2D
        { None = 0, Discrete = 0, Continuous = 1 }
        /** The physical behaviour type of the Rigidbody2D.
        */
        enum RigidbodyType2D
        { Dynamic = 0, Kinematic = 1, Static = 2 }
        /** Option for how to apply a force using Rigidbody2D.AddForce.
        */
        enum ForceMode2D
        { Force = 0, Impulse = 1 }
        /** Represents the state of a joint limit.
        */
        enum JointLimitState2D
        { Inactive = 0, LowerLimit = 1, UpperLimit = 2, EqualLimits = 3 }
        /** Selects the source and/or target to be used by an Effector2D.
        */
        enum EffectorSelection2D
        { Rigidbody = 0, Collider = 1 }
        /** The mode used to apply Effector2D forces.
        */
        enum EffectorForceMode2D
        { Constant = 0, InverseLinear = 1, InverseSquared = 2 }
        /** Collision details returned by 2D physics callback functions.
        */
        class Collision2D extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The incoming Collider2D involved in the collision with the otherCollider.
            */
            public get collider(): UnityEngine.Collider2D;
            /** The other Collider2D involved in the collision with the collider.
            */
            public get otherCollider(): UnityEngine.Collider2D;
            /** The incoming Rigidbody2D involved in the collision with the otherRigidbody.
            */
            public get rigidbody(): UnityEngine.Rigidbody2D;
            /** The other Rigidbody2D involved in the collision with the rigidbody.
            */
            public get otherRigidbody(): UnityEngine.Rigidbody2D;
            /** The Transform of the incoming object involved in the collision.
            */
            public get transform(): UnityEngine.Transform;
            /** The incoming GameObject involved in the collision.
            */
            public get gameObject(): UnityEngine.GameObject;
            /** The relative linear velocity of the two colliding objects (Read Only).
            */
            public get relativeVelocity(): UnityEngine.Vector2;
            /** Indicates whether the collision response or reaction is enabled or disabled.
            */
            public get enabled(): boolean;
            /** The specific points of contact with the incoming Collider2D. You should avoid using this as it produces memory garbage. Use GetContact or GetContacts instead.
            */
            public get contacts(): System.Array$1<UnityEngine.ContactPoint2D>;
            /** Gets the number of contacts for this collision.
            */
            public get contactCount(): number;
            /** Gets the contact point at the specified index.
            * @param index The index of the contact to retrieve.
            * @returns The contact at the specified index. 
            */
            public GetContact ($index: number) : UnityEngine.ContactPoint2D
            /** Retrieves all contact points for contacts between collider and otherCollider.
            * @param contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts ($contacts: System.Array$1<UnityEngine.ContactPoint2D>) : number
            public GetContacts ($contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>) : number
            public constructor ()
        }
        /** Angular limits on the rotation of a Rigidbody2D object around a HingeJoint2D.
        */
        class JointAngleLimits2D extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Lower angular limit of rotation.
            */
            public get min(): number;
            public set min(value: number);
            /** Upper angular limit of rotation.
            */
            public get max(): number;
            public set max(value: number);
        }
        /** Motion limits of a Rigidbody2D object along a SliderJoint2D.
        */
        class JointTranslationLimits2D extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Minimum distance the Rigidbody2D object can move from the Slider Joint's anchor.
            */
            public get min(): number;
            public set min(value: number);
            /** Maximum distance the Rigidbody2D object can move from the Slider Joint's anchor.
            */
            public get max(): number;
            public set max(value: number);
        }
        /** Parameters for the optional motor force applied to a Joint2D.
        */
        class JointMotor2D extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The desired speed for the Rigidbody2D to reach as it moves with the joint.
            */
            public get motorSpeed(): number;
            public set motorSpeed(value: number);
            /** The maximum force that can be applied to the Rigidbody2D at the joint to attain the target speed.
            */
            public get maxMotorTorque(): number;
            public set maxMotorTorque(value: number);
        }
        /** Joint suspension is used to define how suspension works on a WheelJoint2D.
        */
        class JointSuspension2D extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The amount by which the suspension spring force is reduced in proportion to the movement speed.
            */
            public get dampingRatio(): number;
            public set dampingRatio(value: number);
            /** The frequency at which the suspension spring oscillates.
            */
            public get frequency(): number;
            public set frequency(value: number);
            /** The world angle (in degrees) along which the suspension will move.
            */
            public get angle(): number;
            public set angle(value: number);
        }
        /** Asset type that defines the surface properties of a Collider2D.
        */
        class PhysicsMaterial2D extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The degree of elasticity during collisions.
            */
            public get bounciness(): number;
            public set bounciness(value: number);
            /** Coefficient of friction.
            */
            public get friction(): number;
            public set friction(value: number);
            public constructor ()
            public constructor ($name: string)
        }
        /** A Collider that can merge other Colliders together.
        */
        class CompositeCollider2D extends UnityEngine.Collider2D
        {
            protected [__keep_incompatibility]: never;
            /** Specifies the type of geometry the Composite Collider should generate.
            */
            public get geometryType(): UnityEngine.CompositeCollider2D.GeometryType;
            public set geometryType(value: UnityEngine.CompositeCollider2D.GeometryType);
            /** Specifies when to generate the Composite Collider geometry.
            */
            public get generationType(): UnityEngine.CompositeCollider2D.GenerationType;
            public set generationType(value: UnityEngine.CompositeCollider2D.GenerationType);
            /** Controls the minimum distance allowed between generated vertices.
            */
            public get vertexDistance(): number;
            public set vertexDistance(value: number);
            /** Controls the radius of all edges created by the Collider.
            */
            public get edgeRadius(): number;
            public set edgeRadius(value: number);
            /** Vertices are offset by this distance when compositing multiple physic shapes. Any vertices between shapes within this distance are combined.
            */
            public get offsetDistance(): number;
            public set offsetDistance(value: number);
            /** The number of paths in the Collider.
            */
            public get pathCount(): number;
            /** Gets the total number of points in all the paths within the Collider.
            */
            public get pointCount(): number;
            public GenerateGeometry () : void
            /** Gets the number of points in the specified path from the Collider by its index.
            * @param index The index of the path from 0 to pathCount minus 1.
            * @returns Returns the number of points in the path specified by index. 
            */
            public GetPathPointCount ($index: number) : number
            /** Gets a path from the Collider by its index.
            * @param index The index of the path from 0 to pathCount minus 1.
            * @param points An ordered array of the vertices (points) in the selected path.
            * @returns Returns the number of points placed in the points array. 
            */
            public GetPath ($index: number, $points: System.Array$1<UnityEngine.Vector2>) : number
            public GetPath ($index: number, $points: System.Collections.Generic.List$1<UnityEngine.Vector2>) : number
            public constructor ()
        }
        /** Collider for 2D physics representing an circle.
        */
        class CircleCollider2D extends UnityEngine.Collider2D
        {
            protected [__keep_incompatibility]: never;
            /** Radius of the circle.
            */
            public get radius(): number;
            public set radius(value: number);
            public constructor ()
        }
        /** A capsule-shaped primitive collider.
        */
        class CapsuleCollider2D extends UnityEngine.Collider2D
        {
            protected [__keep_incompatibility]: never;
            /** The width and height of the capsule area.
            */
            public get size(): UnityEngine.Vector2;
            public set size(value: UnityEngine.Vector2);
            /** The direction that the capsule sides can extend.
            */
            public get direction(): UnityEngine.CapsuleDirection2D;
            public set direction(value: UnityEngine.CapsuleDirection2D);
            public constructor ()
        }
        /** Collider for 2D physics representing an arbitrary set of connected edges (lines) defined by its vertices.
        */
        class EdgeCollider2D extends UnityEngine.Collider2D
        {
            protected [__keep_incompatibility]: never;
            /** Controls the radius of all edges created by the collider.
            */
            public get edgeRadius(): number;
            public set edgeRadius(value: number);
            /** Gets the number of edges.
            */
            public get edgeCount(): number;
            /** Gets the number of points.
            */
            public get pointCount(): number;
            /** Get or set the points defining multiple continuous edges.
            */
            public get points(): System.Array$1<UnityEngine.Vector2>;
            public set points(value: System.Array$1<UnityEngine.Vector2>);
            public Reset () : void
            public constructor ()
        }
        /** Collider for 2D physics representing an axis-aligned rectangle.
        */
        class BoxCollider2D extends UnityEngine.Collider2D
        {
            protected [__keep_incompatibility]: never;
            /** The width and height of the rectangle.
            */
            public get size(): UnityEngine.Vector2;
            public set size(value: UnityEngine.Vector2);
            /** Controls the radius of all edges created by the collider.
            */
            public get edgeRadius(): number;
            public set edgeRadius(value: number);
            /** Determines whether the BoxCollider2D's shape is automatically updated based on a SpriteRenderer's tiling properties.
            */
            public get autoTiling(): boolean;
            public set autoTiling(value: boolean);
            public constructor ()
        }
        /** Collider for 2D physics representing an arbitrary polygon defined by its vertices.
        */
        class PolygonCollider2D extends UnityEngine.Collider2D
        {
            protected [__keep_incompatibility]: never;
            /** Determines whether the PolygonCollider2D's shape is automatically updated based on a SpriteRenderer's tiling properties.
            */
            public get autoTiling(): boolean;
            public set autoTiling(value: boolean);
            /** Corner points that define the collider's shape in local space.
            */
            public get points(): System.Array$1<UnityEngine.Vector2>;
            public set points(value: System.Array$1<UnityEngine.Vector2>);
            /** The number of paths in the polygon.
            */
            public get pathCount(): number;
            public set pathCount(value: number);
            public GetTotalPointCount () : number
            /** Gets a path from the Collider by its index.
            * @param index The index of the path to retrieve.
            * @returns An ordered array of the vertices (points) in the selected path. 
            */
            public GetPath ($index: number) : System.Array$1<UnityEngine.Vector2>
            /** Define a path by its constituent points.
            * @param index Index of the path to set.
            * @param points An ordered array of the vertices (points) that define the path.
            */
            public SetPath ($index: number, $points: System.Array$1<UnityEngine.Vector2>) : void
            public GetPath ($index: number, $points: System.Collections.Generic.List$1<UnityEngine.Vector2>) : number
            public SetPath ($index: number, $points: System.Collections.Generic.List$1<UnityEngine.Vector2>) : void
            public CreatePrimitive ($sides: number) : void
            public CreatePrimitive ($sides: number, $scale: UnityEngine.Vector2) : void
            /** Creates as regular primitive polygon with the specified number of sides.
            * @param sides The number of sides in the polygon.  This must be greater than two.
            * @param scale The X/Y scale of the polygon.  These must be greater than zero.
            * @param offset The X/Y offset of the polygon.
            */
            public CreatePrimitive ($sides: number, $scale: UnityEngine.Vector2, $offset: UnityEngine.Vector2) : void
            public constructor ()
        }
        /** Parent class for joints to connect Rigidbody2D objects.
        */
        class Joint2D extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The Rigidbody2D attached to the Joint2D.
            */
            public get attachedRigidbody(): UnityEngine.Rigidbody2D;
            /** The Rigidbody2D object to which the other end of the joint is attached (ie, the object without the joint component).
            */
            public get connectedBody(): UnityEngine.Rigidbody2D;
            public set connectedBody(value: UnityEngine.Rigidbody2D);
            /** Should the two rigid bodies connected with this joint collide with each other?
            */
            public get enableCollision(): boolean;
            public set enableCollision(value: boolean);
            /** The force that needs to be applied for this joint to break.
            */
            public get breakForce(): number;
            public set breakForce(value: number);
            /** The torque that needs to be applied for this joint to break.
            */
            public get breakTorque(): number;
            public set breakTorque(value: number);
            /** Gets the reaction force of the joint.
            */
            public get reactionForce(): UnityEngine.Vector2;
            /** Gets the reaction torque of the joint.
            */
            public get reactionTorque(): number;
            /** Gets the reaction force of the joint given the specified timeStep.
            * @param timeStep The time to calculate the reaction force for.
            * @returns The reaction force of the joint in the specified timeStep. 
            */
            public GetReactionForce ($timeStep: number) : UnityEngine.Vector2
            /** Gets the reaction torque of the joint given the specified timeStep.
            * @param timeStep The time to calculate the reaction torque for.
            * @returns The reaction torque of the joint in the specified timeStep. 
            */
            public GetReactionTorque ($timeStep: number) : number
            public constructor ()
        }
        /** Parent class for all joints that have anchor points.
        */
        class AnchoredJoint2D extends UnityEngine.Joint2D
        {
            protected [__keep_incompatibility]: never;
            /** The joint's anchor point on the object that has the joint component.
            */
            public get anchor(): UnityEngine.Vector2;
            public set anchor(value: UnityEngine.Vector2);
            /** The joint's anchor point on the second object (ie, the one which doesn't have the joint component).
            */
            public get connectedAnchor(): UnityEngine.Vector2;
            public set connectedAnchor(value: UnityEngine.Vector2);
            /** Should the connectedAnchor be calculated automatically?
            */
            public get autoConfigureConnectedAnchor(): boolean;
            public set autoConfigureConnectedAnchor(value: boolean);
            public constructor ()
        }
        /** Joint that attempts to keep two Rigidbody2D objects a set distance apart by applying a force between them.
        */
        class SpringJoint2D extends UnityEngine.AnchoredJoint2D
        {
            protected [__keep_incompatibility]: never;
            /** Should the distance be calculated automatically?
            */
            public get autoConfigureDistance(): boolean;
            public set autoConfigureDistance(value: boolean);
            /** The distance the spring will try to keep between the two objects.
            */
            public get distance(): number;
            public set distance(value: number);
            /** The amount by which the spring force is reduced in proportion to the movement speed.
            */
            public get dampingRatio(): number;
            public set dampingRatio(value: number);
            /** The frequency at which the spring oscillates around the distance distance between the objects.
            */
            public get frequency(): number;
            public set frequency(value: number);
            public constructor ()
        }
        /** Joint that keeps two Rigidbody2D objects a fixed distance apart.
        */
        class DistanceJoint2D extends UnityEngine.AnchoredJoint2D
        {
            protected [__keep_incompatibility]: never;
            /** Should the distance be calculated automatically?
            */
            public get autoConfigureDistance(): boolean;
            public set autoConfigureDistance(value: boolean);
            /** The distance separating the two ends of the joint.
            */
            public get distance(): number;
            public set distance(value: number);
            /** Whether to maintain a maximum distance only or not.  If not then the absolute distance will be maintained instead.
            */
            public get maxDistanceOnly(): boolean;
            public set maxDistanceOnly(value: boolean);
            public constructor ()
        }
        /** Applies both force and torque to reduce both the linear and angular velocities to zero.
        */
        class FrictionJoint2D extends UnityEngine.AnchoredJoint2D
        {
            protected [__keep_incompatibility]: never;
            /** The maximum force that can be generated when trying to maintain the friction joint constraint.
            */
            public get maxForce(): number;
            public set maxForce(value: number);
            /** The maximum torque that can be generated when trying to maintain the friction joint constraint.
            */
            public get maxTorque(): number;
            public set maxTorque(value: number);
            public constructor ()
        }
        /** Joint that allows a Rigidbody2D object to rotate around a point in space or a point on another object.
        */
        class HingeJoint2D extends UnityEngine.AnchoredJoint2D
        {
            protected [__keep_incompatibility]: never;
            /** Should the joint be rotated automatically by a motor torque?
            */
            public get useMotor(): boolean;
            public set useMotor(value: boolean);
            /** Should limits be placed on the range of rotation?
            */
            public get useLimits(): boolean;
            public set useLimits(value: boolean);
            /** Parameters for the motor force applied to the joint.
            */
            public get motor(): UnityEngine.JointMotor2D;
            public set motor(value: UnityEngine.JointMotor2D);
            /** Limit of angular rotation (in degrees) on the joint.
            */
            public get limits(): UnityEngine.JointAngleLimits2D;
            public set limits(value: UnityEngine.JointAngleLimits2D);
            /** Gets the state of the joint limit.
            */
            public get limitState(): UnityEngine.JointLimitState2D;
            /** The angle (in degrees) referenced between the two bodies used as the constraint for the joint.
            */
            public get referenceAngle(): number;
            /** The current joint angle (in degrees) with respect to the reference angle.
            */
            public get jointAngle(): number;
            /** The current joint speed.
            */
            public get jointSpeed(): number;
            /** Gets the motor torque of the joint given the specified timestep.
            * @param timeStep The time to calculate the motor torque for.
            */
            public GetMotorTorque ($timeStep: number) : number
            public constructor ()
        }
        /** Keeps two Rigidbody2D at their relative orientations.
        */
        class RelativeJoint2D extends UnityEngine.Joint2D
        {
            protected [__keep_incompatibility]: never;
            /** The maximum force that can be generated when trying to maintain the relative joint constraint.
            */
            public get maxForce(): number;
            public set maxForce(value: number);
            /** The maximum torque that can be generated when trying to maintain the relative joint constraint.
            */
            public get maxTorque(): number;
            public set maxTorque(value: number);
            /** Scales both the linear and angular forces used to correct the required relative orientation.
            */
            public get correctionScale(): number;
            public set correctionScale(value: number);
            /** Should both the linearOffset and angularOffset be calculated automatically?
            */
            public get autoConfigureOffset(): boolean;
            public set autoConfigureOffset(value: boolean);
            /** The current linear offset between the Rigidbody2D that the joint connects.
            */
            public get linearOffset(): UnityEngine.Vector2;
            public set linearOffset(value: UnityEngine.Vector2);
            /** The current angular offset between the Rigidbody2D that the joint connects.
            */
            public get angularOffset(): number;
            public set angularOffset(value: number);
            /** The world-space position that is currently trying to be maintained.
            */
            public get target(): UnityEngine.Vector2;
            public constructor ()
        }
        /** Joint that restricts the motion of a Rigidbody2D object to a single line.
        */
        class SliderJoint2D extends UnityEngine.AnchoredJoint2D
        {
            protected [__keep_incompatibility]: never;
            /** Should the angle be calculated automatically?
            */
            public get autoConfigureAngle(): boolean;
            public set autoConfigureAngle(value: boolean);
            /** The angle of the line in space (in degrees).
            */
            public get angle(): number;
            public set angle(value: number);
            /** Should a motor force be applied automatically to the Rigidbody2D?
            */
            public get useMotor(): boolean;
            public set useMotor(value: boolean);
            /** Should motion limits be used?
            */
            public get useLimits(): boolean;
            public set useLimits(value: boolean);
            /** Parameters for a motor force that is applied automatically to the Rigibody2D along the line.
            */
            public get motor(): UnityEngine.JointMotor2D;
            public set motor(value: UnityEngine.JointMotor2D);
            /** Restrictions on how far the joint can slide in each direction along the line.
            */
            public get limits(): UnityEngine.JointTranslationLimits2D;
            public set limits(value: UnityEngine.JointTranslationLimits2D);
            /** Gets the state of the joint limit.
            */
            public get limitState(): UnityEngine.JointLimitState2D;
            /** The angle (in degrees) referenced between the two bodies used as the constraint for the joint.
            */
            public get referenceAngle(): number;
            /** The current joint translation.
            */
            public get jointTranslation(): number;
            /** The current joint speed.
            */
            public get jointSpeed(): number;
            /** Gets the motor force of the joint given the specified timestep.
            * @param timeStep The time to calculate the motor force for.
            */
            public GetMotorForce ($timeStep: number) : number
            public constructor ()
        }
        /** The joint attempts to move a Rigidbody2D to a specific target position.
        */
        class TargetJoint2D extends UnityEngine.Joint2D
        {
            protected [__keep_incompatibility]: never;
            /** The local-space anchor on the rigid-body the joint is attached to.
            */
            public get anchor(): UnityEngine.Vector2;
            public set anchor(value: UnityEngine.Vector2);
            /** The world-space position that the joint will attempt to move the body to.
            */
            public get target(): UnityEngine.Vector2;
            public set target(value: UnityEngine.Vector2);
            /** Should the target be calculated automatically?
            */
            public get autoConfigureTarget(): boolean;
            public set autoConfigureTarget(value: boolean);
            /** The maximum force that can be generated when trying to maintain the target joint constraint.
            */
            public get maxForce(): number;
            public set maxForce(value: number);
            /** The amount by which the target spring force is reduced in proportion to the movement speed.
            */
            public get dampingRatio(): number;
            public set dampingRatio(value: number);
            /** The frequency at which the target spring oscillates around the target position.
            */
            public get frequency(): number;
            public set frequency(value: number);
            public constructor ()
        }
        /** Connects two Rigidbody2D together at their anchor points using a configurable spring.
        */
        class FixedJoint2D extends UnityEngine.AnchoredJoint2D
        {
            protected [__keep_incompatibility]: never;
            /** The amount by which the spring force is reduced in proportion to the movement speed.
            */
            public get dampingRatio(): number;
            public set dampingRatio(value: number);
            /** The frequency at which the spring oscillates around the distance between the objects.
            */
            public get frequency(): number;
            public set frequency(value: number);
            /** The angle referenced between the two bodies used as the constraint for the joint.
            */
            public get referenceAngle(): number;
            public constructor ()
        }
        /** The wheel joint allows the simulation of wheels by providing a constraining suspension motion with an optional motor.
        */
        class WheelJoint2D extends UnityEngine.AnchoredJoint2D
        {
            protected [__keep_incompatibility]: never;
            /** Set the joint suspension configuration.
            */
            public get suspension(): UnityEngine.JointSuspension2D;
            public set suspension(value: UnityEngine.JointSuspension2D);
            /** Should a motor force be applied automatically to the Rigidbody2D?
            */
            public get useMotor(): boolean;
            public set useMotor(value: boolean);
            /** Parameters for a motor force that is applied automatically to the Rigibody2D along the line.
            */
            public get motor(): UnityEngine.JointMotor2D;
            public set motor(value: UnityEngine.JointMotor2D);
            /** The current joint translation.
            */
            public get jointTranslation(): number;
            /** The current joint linear speed in meters/sec.
            */
            public get jointLinearSpeed(): number;
            /** The current joint rotational speed in degrees/sec.
            */
            public get jointSpeed(): number;
            /** The current joint angle (in degrees) defined as the relative angle between the two Rigidbody2D that the joint connects to.
            */
            public get jointAngle(): number;
            /** Gets the motor torque of the joint given the specified timestep.
            * @param timeStep The time to calculate the motor torque for.
            */
            public GetMotorTorque ($timeStep: number) : number
            public constructor ()
        }
        /** A base class for all 2D effectors.
        */
        class Effector2D extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Should the collider-mask be used or the global collision matrix?
            */
            public get useColliderMask(): boolean;
            public set useColliderMask(value: boolean);
            /** The mask used to select specific layers allowed to interact with the effector.
            */
            public get colliderMask(): number;
            public set colliderMask(value: number);
            public constructor ()
        }
        /** Applies forces within an area.
        */
        class AreaEffector2D extends UnityEngine.Effector2D
        {
            protected [__keep_incompatibility]: never;
            /** The angle of the force to be applied.
            */
            public get forceAngle(): number;
            public set forceAngle(value: number);
            /** Should the forceAngle use global space?
            */
            public get useGlobalAngle(): boolean;
            public set useGlobalAngle(value: boolean);
            /** The magnitude of the force to be applied.
            */
            public get forceMagnitude(): number;
            public set forceMagnitude(value: number);
            /** The variation of the magnitude of the force to be applied.
            */
            public get forceVariation(): number;
            public set forceVariation(value: number);
            /** The linear drag to apply to rigid-bodies.
            */
            public get drag(): number;
            public set drag(value: number);
            /** The angular drag to apply to rigid-bodies.
            */
            public get angularDrag(): number;
            public set angularDrag(value: number);
            /** The target for where the effector applies any force.
            */
            public get forceTarget(): UnityEngine.EffectorSelection2D;
            public set forceTarget(value: UnityEngine.EffectorSelection2D);
            public constructor ()
        }
        /** Applies forces to simulate buoyancy, fluid-flow and fluid drag.
        */
        class BuoyancyEffector2D extends UnityEngine.Effector2D
        {
            protected [__keep_incompatibility]: never;
            /** Defines an arbitrary horizontal line that represents the fluid surface level.
            */
            public get surfaceLevel(): number;
            public set surfaceLevel(value: number);
            /** The density of the fluid used to calculate the buoyancy forces.
            */
            public get density(): number;
            public set density(value: number);
            /** A force applied to slow linear movement of any Collider2D in contact with the effector.
            */
            public get linearDrag(): number;
            public set linearDrag(value: number);
            /** A force applied to slow angular movement of any Collider2D in contact with the effector.
            */
            public get angularDrag(): number;
            public set angularDrag(value: number);
            /** The angle of the force used to similate fluid flow.
            */
            public get flowAngle(): number;
            public set flowAngle(value: number);
            /** The magnitude of the force used to similate fluid flow.
            */
            public get flowMagnitude(): number;
            public set flowMagnitude(value: number);
            /** The random variation of the force used to similate fluid flow.
            */
            public get flowVariation(): number;
            public set flowVariation(value: number);
            public constructor ()
        }
        /** Applies forces to attract/repulse against a point.
        */
        class PointEffector2D extends UnityEngine.Effector2D
        {
            protected [__keep_incompatibility]: never;
            /** The magnitude of the force to be applied.
            */
            public get forceMagnitude(): number;
            public set forceMagnitude(value: number);
            /** The variation of the magnitude of the force to be applied.
            */
            public get forceVariation(): number;
            public set forceVariation(value: number);
            /** The scale applied to the calculated distance between source and target.
            */
            public get distanceScale(): number;
            public set distanceScale(value: number);
            /** The linear drag to apply to rigid-bodies.
            */
            public get drag(): number;
            public set drag(value: number);
            /** The angular drag to apply to rigid-bodies.
            */
            public get angularDrag(): number;
            public set angularDrag(value: number);
            /** The source which is used to calculate the centroid point of the effector.  The distance from the target is defined from this point.
            */
            public get forceSource(): UnityEngine.EffectorSelection2D;
            public set forceSource(value: UnityEngine.EffectorSelection2D);
            /** The target for where the effector applies any force.
            */
            public get forceTarget(): UnityEngine.EffectorSelection2D;
            public set forceTarget(value: UnityEngine.EffectorSelection2D);
            /** The mode used to apply the effector force.
            */
            public get forceMode(): UnityEngine.EffectorForceMode2D;
            public set forceMode(value: UnityEngine.EffectorForceMode2D);
            public constructor ()
        }
        /** Applies "platform" behaviour such as one-way collisions etc.
        */
        class PlatformEffector2D extends UnityEngine.Effector2D
        {
            protected [__keep_incompatibility]: never;
            /** Should the one-way collision behaviour be used?
            */
            public get useOneWay(): boolean;
            public set useOneWay(value: boolean);
            /** Ensures that all contacts controlled by the one-way behaviour act the same.
            */
            public get useOneWayGrouping(): boolean;
            public set useOneWayGrouping(value: boolean);
            /** Should friction be used on the platform sides?
            */
            public get useSideFriction(): boolean;
            public set useSideFriction(value: boolean);
            /** Should bounce be used on the platform sides?
            */
            public get useSideBounce(): boolean;
            public set useSideBounce(value: boolean);
            /** The angle of an arc that defines the surface of the platform centered of the local 'up' of the effector.
            */
            public get surfaceArc(): number;
            public set surfaceArc(value: number);
            /** The angle of an arc that defines the sides of the platform centered on the local 'left' and 'right' of the effector. Any collision normals within this arc are considered for the 'side' behaviours.
            */
            public get sideArc(): number;
            public set sideArc(value: number);
            /** The rotational offset angle from the local 'up'.
            */
            public get rotationalOffset(): number;
            public set rotationalOffset(value: number);
            public constructor ()
        }
        /** Applies tangent forces along the surfaces of colliders.
        */
        class SurfaceEffector2D extends UnityEngine.Effector2D
        {
            protected [__keep_incompatibility]: never;
            /** The speed to be maintained along the surface.
            */
            public get speed(): number;
            public set speed(value: number);
            /** The speed variation (from zero to the variation) added to base speed to be applied.
            */
            public get speedVariation(): number;
            public set speedVariation(value: number);
            /** The scale of the impulse force applied while attempting to reach the surface speed.
            */
            public get forceScale(): number;
            public set forceScale(value: number);
            /** Should the impulse force but applied to the contact point?
            */
            public get useContactForce(): boolean;
            public set useContactForce(value: boolean);
            /** Should friction be used for any contact with the surface?
            */
            public get useFriction(): boolean;
            public set useFriction(value: boolean);
            /** Should bounce be used for any contact with the surface?
            */
            public get useBounce(): boolean;
            public set useBounce(value: boolean);
            public constructor ()
        }
        /** A base type for 2D physics components that required a callback during FixedUpdate.
        */
        class PhysicsUpdateBehaviour2D extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Applies both linear and angular (torque) forces continuously to the rigidbody each physics update.
        */
        class ConstantForce2D extends UnityEngine.PhysicsUpdateBehaviour2D
        {
            protected [__keep_incompatibility]: never;
            /** The linear force applied to the rigidbody each physics update.
            */
            public get force(): UnityEngine.Vector2;
            public set force(value: UnityEngine.Vector2);
            /** The linear force, relative to the rigid-body coordinate system, applied each physics update.
            */
            public get relativeForce(): UnityEngine.Vector2;
            public set relativeForce(value: UnityEngine.Vector2);
            /** The torque applied to the rigidbody each physics update.
            */
            public get torque(): number;
            public set torque(value: number);
            public constructor ()
        }
        /** Functionality to take Screenshots.
        */
        class ScreenCapture extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static CaptureScreenshot ($filename: string) : void
            /** Captures a screenshot at path filename as a PNG file.
            * @param filename Pathname to save the screenshot file to.
            * @param superSize Factor by which to increase resolution.
            * @param stereoCaptureMode Specifies the eye texture to capture when stereo rendering is enabled.
            */
            public static CaptureScreenshot ($filename: string, $superSize: number) : void
            public static CaptureScreenshot ($filename: string, $stereoCaptureMode: UnityEngine.ScreenCapture.StereoScreenCaptureMode) : void
            public static CaptureScreenshotAsTexture () : UnityEngine.Texture2D
            /** Captures a screenshot of the game view into a Texture2D object.
            * @param superSize Factor by which to increase resolution.
            * @param stereoCaptureMode Specifies the eye texture to capture when stereo rendering is enabled.
            */
            public static CaptureScreenshotAsTexture ($superSize: number) : UnityEngine.Texture2D
            public static CaptureScreenshotAsTexture ($stereoCaptureMode: UnityEngine.ScreenCapture.StereoScreenCaptureMode) : UnityEngine.Texture2D
            /** Captures a screenshot of the game view into a RenderTexture object.
            * @param renderTexture RenderTexture that will get filled with the screen content.
            */
            public static CaptureScreenshotIntoRenderTexture ($renderTexture: UnityEngine.RenderTexture) : void
        }
        /** A component for masking Sprites and Particles.
        */
        class SpriteMask extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** Unique ID of the sorting layer defining the start of the custom range.
            */
            public get frontSortingLayerID(): number;
            public set frontSortingLayerID(value: number);
            /** Order within the front sorting layer defining the start of the custom range.
            */
            public get frontSortingOrder(): number;
            public set frontSortingOrder(value: number);
            /** Unique ID of the sorting layer defining the end of the custom range.
            */
            public get backSortingLayerID(): number;
            public set backSortingLayerID(value: number);
            /** Order within the back sorting layer defining the end of the custom range.
            */
            public get backSortingOrder(): number;
            public set backSortingOrder(value: number);
            /** The minimum alpha value used by the mask to select the area of influence defined over the mask's sprite.
            */
            public get alphaCutoff(): number;
            public set alphaCutoff(value: number);
            /** The Sprite used to define the mask.
            */
            public get sprite(): UnityEngine.Sprite;
            public set sprite(value: UnityEngine.Sprite);
            /** Mask sprites from front to back sorting values only.
            */
            public get isCustomRangeActive(): boolean;
            public set isCustomRangeActive(value: boolean);
            /** Determines the position of the Sprite used for sorting the SpriteMask.
            */
            public get spriteSortPoint(): UnityEngine.SpriteSortPoint;
            public set spriteSortPoint(value: UnityEngine.SpriteSortPoint);
            public constructor ()
        }
        /** A StreamingController controls the streaming settings for an individual camera location.
        */
        class StreamingController extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Offset applied to the mipmap level chosen by the texture streaming system for any textures visible from this camera. This Offset can take either a positive or negative value.
            */
            public get streamingMipmapBias(): number;
            public set streamingMipmapBias(value: number);
            /** Initiate preloading of streaming data for this camera.
            * @param timeoutSeconds Optional timeout before stopping preloading. Set to 0.0f when no timeout is required.
            * @param activateCameraOnTimeout Set to True to activate the connected Camera component when timeout expires.
            * @param disableCameraCuttingFrom Camera to deactivate on timeout (if Camera.activateCameraOnTime is True). This parameter can be null.
            */
            public SetPreloading ($timeoutSeconds?: number, $activateCameraOnTimeout?: boolean, $disableCameraCuttingFrom?: UnityEngine.Camera) : void
            public CancelPreloading () : void
            public IsPreloading () : boolean
            public constructor ()
        }
        /** Deprecated feature, no longer available
        */
        class ProceduralMaterial extends UnityEngine.Material
        {
            protected [__keep_incompatibility]: never;
            /** Deprecated feature, no longer available
            */
            public get cacheSize(): UnityEngine.ProceduralCacheSize;
            public set cacheSize(value: UnityEngine.ProceduralCacheSize);
            /** Deprecated feature, no longer available
            */
            public get animationUpdateRate(): number;
            public set animationUpdateRate(value: number);
            /** Deprecated feature, no longer available
            */
            public get isProcessing(): boolean;
            /** Deprecated feature, no longer available
            */
            public get isCachedDataAvailable(): boolean;
            /** Deprecated feature, no longer available
            */
            public get isLoadTimeGenerated(): boolean;
            public set isLoadTimeGenerated(value: boolean);
            /** Deprecated feature, no longer available
            */
            public get loadingBehavior(): UnityEngine.ProceduralLoadingBehavior;
            /** Deprecated feature, no longer available
            */
            public static get isSupported(): boolean;
            /** Deprecated feature, no longer available
            */
            public static get substanceProcessorUsage(): UnityEngine.ProceduralProcessorUsage;
            public static set substanceProcessorUsage(value: UnityEngine.ProceduralProcessorUsage);
            /** Deprecated feature, no longer available
            */
            public get preset(): string;
            public set preset(value: string);
            /** Deprecated feature, no longer available
            */
            public get isReadable(): boolean;
            public set isReadable(value: boolean);
            /** Deprecated feature, no longer available
            */
            public get isFrozen(): boolean;
            public GetProceduralPropertyDescriptions () : System.Array$1<UnityEngine.ProceduralPropertyDescription>
            /** Deprecated feature, no longer available
            */
            public HasProceduralProperty ($inputName: string) : boolean
            /** Deprecated feature, no longer available
            */
            public GetProceduralBoolean ($inputName: string) : boolean
            /** Deprecated feature, no longer available
            */
            public IsProceduralPropertyVisible ($inputName: string) : boolean
            /** Deprecated feature, no longer available
            */
            public SetProceduralBoolean ($inputName: string, $value: boolean) : void
            /** Deprecated feature, no longer available
            */
            public GetProceduralFloat ($inputName: string) : number
            /** Deprecated feature, no longer available
            */
            public SetProceduralFloat ($inputName: string, $value: number) : void
            /** Deprecated feature, no longer available
            */
            public GetProceduralVector ($inputName: string) : UnityEngine.Vector4
            /** Deprecated feature, no longer available
            */
            public SetProceduralVector ($inputName: string, $value: UnityEngine.Vector4) : void
            /** Deprecated feature, no longer available
            */
            public GetProceduralColor ($inputName: string) : UnityEngine.Color
            /** Deprecated feature, no longer available
            */
            public SetProceduralColor ($inputName: string, $value: UnityEngine.Color) : void
            /** Deprecated feature, no longer available
            */
            public GetProceduralEnum ($inputName: string) : number
            /** Deprecated feature, no longer available
            */
            public SetProceduralEnum ($inputName: string, $value: number) : void
            /** Deprecated feature, no longer available
            */
            public GetProceduralTexture ($inputName: string) : UnityEngine.Texture2D
            /** Deprecated feature, no longer available
            */
            public SetProceduralTexture ($inputName: string, $value: UnityEngine.Texture2D) : void
            /** Deprecated feature, no longer available
            */
            public GetProceduralString ($inputName: string) : string
            /** Deprecated feature, no longer available
            */
            public SetProceduralString ($inputName: string, $value: string) : void
            /** Deprecated feature, no longer available
            */
            public IsProceduralPropertyCached ($inputName: string) : boolean
            /** Deprecated feature, no longer available
            */
            public CacheProceduralProperty ($inputName: string, $value: boolean) : void
            public ClearCache () : void
            public RebuildTextures () : void
            public RebuildTexturesImmediately () : void
            public static StopRebuilds () : void
            public GetGeneratedTextures () : System.Array$1<UnityEngine.Texture>
            /** Deprecated feature, no longer available
            */
            public GetGeneratedTexture ($textureName: string) : UnityEngine.ProceduralTexture
            public FreezeAndReleaseSourceData () : void
        }
        /** Deprecated feature, no longer available
        */
        class ProceduralPropertyDescription extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Deprecated feature, no longer available
            */
            public name : string
            /** Deprecated feature, no longer available
            */
            public label : string
            /** Deprecated feature, no longer available
            */
            public group : string
            /** Deprecated feature, no longer available
            */
            public type : UnityEngine.ProceduralPropertyType
            /** Deprecated feature, no longer available
            */
            public hasRange : boolean
            /** Deprecated feature, no longer available
            */
            public minimum : number
            /** Deprecated feature, no longer available
            */
            public maximum : number
            /** Deprecated feature, no longer available
            */
            public step : number
            /** Deprecated feature, no longer available
            */
            public enumOptions : System.Array$1<string>
            /** Deprecated feature, no longer available
            */
            public componentLabels : System.Array$1<string>
            public constructor ()
        }
        /** Deprecated feature, no longer available
        */
        enum ProceduralCacheSize
        { Tiny = 0, Medium = 1, Heavy = 2, NoLimit = 3, None = 4 }
        /** Deprecated feature, no longer available
        */
        enum ProceduralLoadingBehavior
        { DoNothing = 0, Generate = 1, BakeAndKeep = 2, BakeAndDiscard = 3, Cache = 4, DoNothingAndCache = 5 }
        /** Deprecated feature, no longer available
        */
        enum ProceduralProcessorUsage
        { Unsupported = 0, One = 1, Half = 2, All = 3 }
        /** Deprecated feature, no longer available
        */
        class ProceduralTexture extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** Deprecated feature, no longer available
            */
            public get hasAlpha(): boolean;
            /** Deprecated feature, no longer available
            */
            public get format(): UnityEngine.TextureFormat;
            public GetProceduralOutputType () : UnityEngine.ProceduralOutputType
            /** Deprecated feature, no longer available
            */
            public GetPixels32 ($x: number, $y: number, $blockWidth: number, $blockHeight: number) : System.Array$1<UnityEngine.Color32>
        }
        /** Deprecated feature, no longer available
        */
        enum ProceduralPropertyType
        { Boolean = 0, Float = 1, Vector2 = 2, Vector3 = 3, Vector4 = 4, Color3 = 5, Color4 = 6, Enum = 7, Texture = 8, String = 9 }
        /** Deprecated feature, no longer available
        */
        enum ProceduralOutputType
        { Unknown = 0, Diffuse = 1, Normal = 2, Height = 3, Emissive = 4, Specular = 5, Opacity = 6, Smoothness = 7, AmbientOcclusion = 8, DetailMask = 9, Metallic = 10, Roughness = 11 }
        interface ISubsystemDescriptor
        {
            /** A unique string that identifies the subsystem that this Descriptor can create.
            */
            id : string
            Create () : UnityEngine.ISubsystem
        }
        interface ISubsystem
        {
            /** Will be true if asking the subsytem to start was successful. False in the case that the subsystem has stopped, was asked to stop or has not been started yet.
            */
            running : boolean
            Start () : void
            Stop () : void
            Destroy () : void
        }
        /** Information about a subsystem that can be queried before creating a subsystem instance.
        */
        class IntegratedSubsystemDescriptor extends System.Object implements UnityEngine.ISubsystemDescriptor, UnityEngine.ISubsystemDescriptorImpl
        {
            protected [__keep_incompatibility]: never;
            /** A unique string that identifies the subsystem that this Descriptor can create.
            */
            public get id(): string;
            public Create () : UnityEngine.ISubsystem
        }
        interface ISubsystemDescriptorImpl extends UnityEngine.ISubsystemDescriptor
        {
            /** A unique string that identifies the subsystem that this Descriptor can create.
            */
            id : string
            Create () : UnityEngine.ISubsystem
        }
        /** Information about a subsystem that can be queried before creating a subsystem instance.
        */
        class SubsystemDescriptor extends System.Object implements UnityEngine.ISubsystemDescriptor
        {
            protected [__keep_incompatibility]: never;
            /** A unique string that identifies the subsystem that this Descriptor can create.
            */
            public get id(): string;
            public set id(value: string);
            /** The System.Type of the subsystem implementation associated with this descriptor.
            */
            public get subsystemImplementationType(): System.Type;
            public set subsystemImplementationType(value: System.Type);
            public Create () : UnityEngine.ISubsystem
        }
        /** Gives access to subsystems which provide additional functionality through plugins.
        */
        class SubsystemManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetAllSubsystemDescriptors ($descriptors: System.Collections.Generic.List$1<UnityEngine.ISubsystemDescriptor>) : void
            public static add_reloadSubsytemsStarted ($value: System.Action) : void
            public static remove_reloadSubsytemsStarted ($value: System.Action) : void
            public static add_reloadSubsytemsCompleted ($value: System.Action) : void
            public static remove_reloadSubsytemsCompleted ($value: System.Action) : void
        }
        /** An IntegratedSubsystem is initialized from an IntegratedSubsystemDescriptor for a given Subsystem (Example, Input, Environment, Display, etc.) and provides an interface to interact with that given IntegratedSubsystem until it is Destroyed. After an IntegratedSubsystem is created it can be Started or Stopped to turn on and off functionality (and preserve performance). The base type for IntegratedSubsystem only exposes this functionality; this class is designed to be a base class for derived classes that expose more functionality specific to a given IntegratedSubsystem.
        Note: initializing a second IntegratedSubsystem from the same IntegratedSubsystemDescriptor will return a reference to the existing IntegratedSubsystem as only one IntegratedSubsystem is currently allowed for a single IntegratedSubsystem provider.
        */
        class IntegratedSubsystem extends System.Object implements UnityEngine.ISubsystem
        {
            protected [__keep_incompatibility]: never;
            /** Whether or not the subsystem is running.
            */
            public get running(): boolean;
            public Start () : void
            public Stop () : void
            public Destroy () : void
            public constructor ()
        }
        /** A Subsystem is initialized from a SubsystemDescriptor for a given Subsystem (Example, Input, Environment, Display, etc.) and provides an interface to interact with that given Subsystem until it is Destroyed. After a Subsystem is created it can be Started or Stopped to turn on and off functionality (and preserve performance). The base type for Subsystem only exposes this functionality; this class is designed to be a base class for derived classes that expose more functionality specific to a given Subsystem.
        Note: initializing a second Subsystem from the same SubsystemDescriptor will return a reference to the existing Subsystem as only one Subsystem is currently allowed for a single Subsystem provider.
        */
        class Subsystem extends System.Object implements UnityEngine.ISubsystem
        {
            protected [__keep_incompatibility]: never;
            /** Whether or not the subsystem is running.
            */
            public get running(): boolean;
            public Start () : void
            public Stop () : void
            public Destroy () : void
        }
        /** Indicate the types of changes to the terrain in OnTerrainChanged callback.
        */
        enum TerrainChangedFlags
        { Heightmap = 1, TreeInstances = 2, DelayedHeightmapUpdate = 4, FlushEverythingImmediately = 8, RemoveDirtyDetailsImmediately = 16, HeightmapResolution = 32, Holes = 64, DelayedHolesUpdate = 128, WillBeDestroyed = 256 }
        /** Enum provding terrain rendering options.
        */
        enum TerrainRenderFlags
        { heightmap = 1, trees = 2, details = 4, all = 7, Heightmap = 1, Trees = 2, Details = 4, All = 7 }
        /** The Terrain component renders the terrain.
        */
        class Terrain extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The Terrain Data that stores heightmaps, terrain textures, detail meshes and trees.
            */
            public get terrainData(): UnityEngine.TerrainData;
            public set terrainData(value: UnityEngine.TerrainData);
            /** The maximum distance at which trees are rendered.
            */
            public get treeDistance(): number;
            public set treeDistance(value: number);
            /** Distance from the camera where trees will be rendered as billboards only.
            */
            public get treeBillboardDistance(): number;
            public set treeBillboardDistance(value: number);
            /** Total distance delta that trees will use to transition from billboard orientation to mesh orientation.
            */
            public get treeCrossFadeLength(): number;
            public set treeCrossFadeLength(value: number);
            /** Maximum number of trees rendered at full LOD.
            */
            public get treeMaximumFullLODCount(): number;
            public set treeMaximumFullLODCount(value: number);
            /** Detail objects will be displayed up to this distance.
            */
            public get detailObjectDistance(): number;
            public set detailObjectDistance(value: number);
            /** Density of detail objects.
            */
            public get detailObjectDensity(): number;
            public set detailObjectDensity(value: number);
            /** An approximation of how many pixels the terrain will pop in the worst case when switching lod.
            */
            public get heightmapPixelError(): number;
            public set heightmapPixelError(value: number);
            /** Lets you essentially lower the heightmap resolution used for rendering.
            */
            public get heightmapMaximumLOD(): number;
            public set heightmapMaximumLOD(value: number);
            /** Heightmap patches beyond basemap distance will use a precomputed low res basemap.
            */
            public get basemapDistance(): number;
            public set basemapDistance(value: number);
            /** The index of the baked lightmap applied to this terrain.
            */
            public get lightmapIndex(): number;
            public set lightmapIndex(value: number);
            /** The index of the realtime lightmap applied to this terrain.
            */
            public get realtimeLightmapIndex(): number;
            public set realtimeLightmapIndex(value: number);
            /** The UV scale & offset used for a baked lightmap.
            */
            public get lightmapScaleOffset(): UnityEngine.Vector4;
            public set lightmapScaleOffset(value: UnityEngine.Vector4);
            /** The UV scale & offset used for a realtime lightmap.
            */
            public get realtimeLightmapScaleOffset(): UnityEngine.Vector4;
            public set realtimeLightmapScaleOffset(value: UnityEngine.Vector4);
            /** Whether some per-camera rendering resources for the terrain should be freed after not being used for some frames.
            */
            public get freeUnusedRenderingResources(): boolean;
            public set freeUnusedRenderingResources(value: boolean);
            /** Allows you to set the shadow casting mode for the terrain.
            */
            public get shadowCastingMode(): UnityEngine.Rendering.ShadowCastingMode;
            public set shadowCastingMode(value: UnityEngine.Rendering.ShadowCastingMode);
            /** How reflection probes are used for terrain. See Rendering.ReflectionProbeUsage.
            */
            public get reflectionProbeUsage(): UnityEngine.Rendering.ReflectionProbeUsage;
            public set reflectionProbeUsage(value: UnityEngine.Rendering.ReflectionProbeUsage);
            /** The custom material used to render the terrain.
            */
            public get materialTemplate(): UnityEngine.Material;
            public set materialTemplate(value: UnityEngine.Material);
            /** Specify if terrain heightmap should be drawn.
            */
            public get drawHeightmap(): boolean;
            public set drawHeightmap(value: boolean);
            /** Specifies if the terrain tile will be automatically connected to adjacent tiles.
            */
            public get allowAutoConnect(): boolean;
            public set allowAutoConnect(value: boolean);
            /** Grouping ID for auto connect.
            */
            public get groupingID(): number;
            public set groupingID(value: number);
            /** Set to true to enable the terrain instance renderer. The default value is false.
            */
            public get drawInstanced(): boolean;
            public set drawInstanced(value: boolean);
            /** Returns the normal map texture computed from sampling the heightmap. It is only used when terrain is rendered using instancing.
            */
            public get normalmapTexture(): UnityEngine.RenderTexture;
            /** Specify if terrain trees and details should be drawn.
            */
            public get drawTreesAndFoliage(): boolean;
            public set drawTreesAndFoliage(value: boolean);
            /** Set the terrain bounding box scale.
            */
            public get patchBoundsMultiplier(): UnityEngine.Vector3;
            public set patchBoundsMultiplier(value: UnityEngine.Vector3);
            /** The multiplier to the current LOD bias used for rendering LOD trees (i.e. SpeedTree trees).
            */
            public get treeLODBiasMultiplier(): number;
            public set treeLODBiasMultiplier(value: number);
            /** Collect detail patches from memory.
            */
            public get collectDetailPatches(): boolean;
            public set collectDetailPatches(value: boolean);
            /** Controls what part of the terrain should be rendered.
            */
            public get editorRenderFlags(): UnityEngine.TerrainRenderFlags;
            public set editorRenderFlags(value: UnityEngine.TerrainRenderFlags);
            /** Specifies if an array of internal light probes should be baked for terrain trees. Available only in editor.
            */
            public get bakeLightProbesForTrees(): boolean;
            public set bakeLightProbesForTrees(value: boolean);
            /** Removes ringing from probes on trees if enabled.
            */
            public get deringLightProbesForTrees(): boolean;
            public set deringLightProbesForTrees(value: boolean);
            /** Allows you to specify how Unity chooses the for tree instances.
            */
            public get preserveTreePrototypeLayers(): boolean;
            public set preserveTreePrototypeLayers(value: boolean);
            /** Graphics format of the Terrain heightmap.
            */
            public static get heightmapFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public static get heightmapTextureFormat(): UnityEngine.TextureFormat;
            public static get heightmapRenderTextureFormat(): UnityEngine.RenderTextureFormat;
            /** Graphics format of the Terrain normal map texture.
            */
            public static get normalmapFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            /** Texture format of the Terrain normal map texture.
            */
            public static get normalmapTextureFormat(): UnityEngine.TextureFormat;
            /** Render texture format of the Terrain normal map texture.
            */
            public static get normalmapRenderTextureFormat(): UnityEngine.RenderTextureFormat;
            /** Graphics format of the Terrain holes Texture when it is not compressed.
            */
            public static get holesFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            /** Render texture format of the Terrain holes Texture.
            */
            public static get holesRenderTextureFormat(): UnityEngine.RenderTextureFormat;
            /** Graphics format of the Terrain holes Texture when it is compressed.
            */
            public static get compressedHolesFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            /** Texture format of the Terrain holes Texture when it is compressed.
            */
            public static get compressedHolesTextureFormat(): UnityEngine.TextureFormat;
            /** The active terrain. This is a convenience function to get to the main terrain in the Scene.
            */
            public static get activeTerrain(): UnityEngine.Terrain;
            /** The active terrains in the Scene.
            */
            public static get activeTerrains(): System.Array$1<UnityEngine.Terrain>;
            /** Terrain left neighbor.
            */
            public get leftNeighbor(): UnityEngine.Terrain;
            /** Terrain right neighbor.
            */
            public get rightNeighbor(): UnityEngine.Terrain;
            /** Terrain top neighbor.
            */
            public get topNeighbor(): UnityEngine.Terrain;
            /** Terrain bottom neighbor.
            */
            public get bottomNeighbor(): UnityEngine.Terrain;
            /** Determines which rendering layers the Terrain renderer lives on.
            */
            public get renderingLayerMask(): number;
            public set renderingLayerMask(value: number);
            public GetClosestReflectionProbes ($result: System.Collections.Generic.List$1<UnityEngine.Rendering.ReflectionProbeBlendInfo>) : void
            /** Samples the height at the given position defined in world space, relative to the terrain space.
            */
            public SampleHeight ($worldPosition: UnityEngine.Vector3) : number
            /** Adds a tree instance to the terrain.
            */
            public AddTreeInstance ($instance: UnityEngine.TreeInstance) : void
            /** Lets you setup the connection between neighboring Terrain tiles.
            */
            public SetNeighbors ($left: UnityEngine.Terrain, $top: UnityEngine.Terrain, $right: UnityEngine.Terrain, $bottom: UnityEngine.Terrain) : void
            public GetPosition () : UnityEngine.Vector3
            public Flush () : void
            /** Set the additional material properties when rendering the terrain heightmap using the splat material.
            */
            public SetSplatMaterialPropertyBlock ($properties: UnityEngine.MaterialPropertyBlock) : void
            /** Get the previously set splat material properties by copying to the dest MaterialPropertyBlock object.
            */
            public GetSplatMaterialPropertyBlock ($dest: UnityEngine.MaterialPropertyBlock) : void
            public static SetConnectivityDirty () : void
            /** Creates a Terrain including collider from TerrainData.
            */
            public static CreateTerrainGameObject ($assignTerrain: UnityEngine.TerrainData) : UnityEngine.GameObject
            public constructor ()
        }
        /** The Terrain component renders the terrain.
        */
        interface Terrain {
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Terrain.
            */
            UpdateGIMaterials () : void;
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Terrain.
            */
            UpdateGIMaterials ($x: number, $y: number, $width: number, $height: number) : void;
        }
        /** The TerrainData class stores heightmaps, detail mesh positions, tree instances, and terrain texture alpha maps.
        */
        class TerrainData extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The name for the Terrain alpha map textures.
            */
            public static get AlphamapTextureName(): string;
            /** The name for the Terrain holes Texture.
            */
            public static get HolesTextureName(): string;
            /** Returns the heightmap texture.
            */
            public get heightmapTexture(): UnityEngine.RenderTexture;
            /** Resolution of the heightmap.
            */
            public get heightmapResolution(): number;
            public set heightmapResolution(value: number);
            /** The size of each heightmap sample.
            */
            public get heightmapScale(): UnityEngine.Vector3;
            /** Returns the Terrain holes Texture.
            */
            public get holesTexture(): UnityEngine.Texture;
            /** Enable the Terrain holes Texture compression.
            */
            public get enableHolesTextureCompression(): boolean;
            public set enableHolesTextureCompression(value: boolean);
            /** Returns the Terrain holes resolution for both the data and the Texture.
            */
            public get holesResolution(): number;
            /** The total size in world units of the terrain.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            /** The local bounding box of the TerrainData object.
            */
            public get bounds(): UnityEngine.Bounds;
            /** Strength of the waving grass in the terrain.
            */
            public get wavingGrassStrength(): number;
            public set wavingGrassStrength(value: number);
            /** Amount of waving grass in the terrain.
            */
            public get wavingGrassAmount(): number;
            public set wavingGrassAmount(value: number);
            /** Speed of the waving grass.
            */
            public get wavingGrassSpeed(): number;
            public set wavingGrassSpeed(value: number);
            /** Color of the waving grass that the terrain has.
            */
            public get wavingGrassTint(): UnityEngine.Color;
            public set wavingGrassTint(value: UnityEngine.Color);
            /** Detail width of the TerrainData.
            */
            public get detailWidth(): number;
            /** Detail height of the TerrainData.
            */
            public get detailHeight(): number;
            /** The number of patches along a terrain tile edge. This is squared to make a grid of patches.
            */
            public get detailPatchCount(): number;
            /** Detail Resolution of the TerrainData.
            */
            public get detailResolution(): number;
            /** Detail Resolution of each patch. A larger value will decrease the number of batches used by detail objects.
            */
            public get detailResolutionPerPatch(): number;
            /** Contains the detail texture/meshes that the terrain has.
            */
            public get detailPrototypes(): System.Array$1<UnityEngine.DetailPrototype>;
            public set detailPrototypes(value: System.Array$1<UnityEngine.DetailPrototype>);
            /** Contains the current trees placed in the terrain.
            */
            public get treeInstances(): System.Array$1<UnityEngine.TreeInstance>;
            public set treeInstances(value: System.Array$1<UnityEngine.TreeInstance>);
            /** Returns the number of tree instances.
            */
            public get treeInstanceCount(): number;
            /** The list of tree prototypes this are the ones available in the inspector.
            */
            public get treePrototypes(): System.Array$1<UnityEngine.TreePrototype>;
            public set treePrototypes(value: System.Array$1<UnityEngine.TreePrototype>);
            /** Number of alpha map layers.
            */
            public get alphamapLayers(): number;
            /** Resolution of the alpha map.
            */
            public get alphamapResolution(): number;
            public set alphamapResolution(value: number);
            /** Width of the alpha map.
            */
            public get alphamapWidth(): number;
            /** Height of the alpha map.
            */
            public get alphamapHeight(): number;
            /** Resolution of the base map used for rendering far patches on the terrain.
            */
            public get baseMapResolution(): number;
            public set baseMapResolution(value: number);
            /** Returns the number of alphamap textures.
            */
            public get alphamapTextureCount(): number;
            /** Alpha map textures used by the Terrain. Used by Terrain Inspector for undo.
            */
            public get alphamapTextures(): System.Array$1<UnityEngine.Texture2D>;
            /** Retrieves the terrain layers used by the current terrain.
            */
            public get terrainLayers(): System.Array$1<UnityEngine.TerrainLayer>;
            public set terrainLayers(value: System.Array$1<UnityEngine.TerrainLayer>);
            /** Copies the specified part of the active RenderTexture to the Terrain heightmap texture.
            * @param sourceRect The part of the active Render Texture to copy.
            * @param dest The X and Y coordinates of the heightmap texture to copy into.
            * @param syncControl Controls how CPU synchronization is performed.
            */
            public CopyActiveRenderTextureToHeightmap ($sourceRect: UnityEngine.RectInt, $dest: UnityEngine.Vector2Int, $syncControl: UnityEngine.TerrainHeightmapSyncControl) : void
            /** Marks the specified part of the heightmap as dirty.
            * @param region The rectangular region to mark as dirty.
            * @param syncControl Controls how CPU synchronization is performed.
            */
            public DirtyHeightmapRegion ($region: UnityEngine.RectInt, $syncControl: UnityEngine.TerrainHeightmapSyncControl) : void
            /** Copies the specified part of the active RenderTexture to the Terrain texture.
            * @param textureName The name of the Terrain texture to copy into.
            * @param textureIndex The index of the Terrain texture to copy into.
            * @param sourceRect The part of the active Render Texture to copy.
            * @param dest The X and Y coordinates of the Terrain texture to copy into.
            * @param allowDelayedCPUSync Specifies whether to allow delayed CPU synchronization of the texture.
            */
            public CopyActiveRenderTextureToTexture ($textureName: string, $textureIndex: number, $sourceRect: UnityEngine.RectInt, $dest: UnityEngine.Vector2Int, $allowDelayedCPUSync: boolean) : void
            /** Marks the specified part of the Terrain texture as dirty.
            * @param textureName The name of the Terrain texture.
            * @param region The rectangular region to mark as dirty.
            * @param allowDelayedCPUSync Specifies whether to allow delayed CPU synchronization of the texture.
            */
            public DirtyTextureRegion ($textureName: string, $region: UnityEngine.RectInt, $allowDelayedCPUSync: boolean) : void
            /** Performs synchronization queued by previous calls to CopyActiveRenderTextureToTexture and DirtyTextureRegion, which makes CPU data of the Terrain textures up to date.
            * @param textureName The name of the Terrain texture to synchronize.
            */
            public SyncTexture ($textureName: string) : void
            /** Gets the height at a certain point x,y.
            */
            public GetHeight ($x: number, $y: number) : number
            /** Gets an interpolated height at a point x,y. The x and y coordinates are clamped to [0, 1].
            * @param x X coordinate of the point in the range of [0, 1].
            * @param y Y coordinate of the point in the range of [0, 1].
            */
            public GetInterpolatedHeight ($x: number, $y: number) : number
            /** Gets an array of terrain height values using the normalized x,y coordinates.
            * @param xBase The base x coordinate.
            * @param yBase The base y coordinate.
            * @param xCount The number of queries along the X axis.
            * @param yCount The number of queries along the Y axis.
            * @param xInterval The interval between each query along the X axis.
            * @param yInterval The interval between each query along the Y axis.
            */
            public GetInterpolatedHeights ($xBase: number, $yBase: number, $xCount: number, $yCount: number, $xInterval: number, $yInterval: number) : System.Array$1<number>
            /** Fills the array with Terrain height values using normalized x,y coordinates.
            * @param results The array to fill with height values.
            * @param resultXOffset The offset from the beginning of the array, along the X axis, at which to start filling in height values.
            * @param resultYOffset The offset from the beginning of the array, along the Y axis, at which to start filling in height values.
            * @param xBase The base x coordinate.
            * @param yBase The base y coordinate.
            * @param xCount The number of queries along the X axis.
            * @param yCount The number of queries along the Y axis.
            * @param xInterval The interval between each query along the X axis.
            * @param yInterval The interval between each query along the Y axis.
            */
            public GetInterpolatedHeights ($results: System.Array$1<number>, $resultXOffset: number, $resultYOffset: number, $xBase: number, $yBase: number, $xCount: number, $yCount: number, $xInterval: number, $yInterval: number) : void
            /** Get an array of heightmap samples.
            * @param xBase First x index of heightmap samples to retrieve.
            * @param yBase First y index of heightmap samples to retrieve.
            * @param width Number of samples to retrieve along the heightmap's x axis.
            * @param height Number of samples to retrieve along the heightmap's y axis.
            */
            public GetHeights ($xBase: number, $yBase: number, $width: number, $height: number) : System.Array$1<number>
            /** Sets an array of heightmap samples.
            * @param xBase First x index of heightmap samples to set.
            * @param yBase First y index of heightmap samples to set.
            * @param heights Array of heightmap samples to set (values range from 0 to 1, array indexed as [y,x]).
            */
            public SetHeights ($xBase: number, $yBase: number, $heights: System.Array$1<number>) : void
            public GetPatchMinMaxHeights () : System.Array$1<UnityEngine.PatchExtents>
            /** Override the minimum and maximum patch heights for every renderable terrain patch.  Note that the overriden values get reset when the terrain resolution is changed and stays unchanged when the terrain heightmap is painted or changed via script.
            * @param minMaxHeights Array of minimum and maximum terrain patch height values.
            */
            public OverrideMinMaxPatchHeights ($minMaxHeights: System.Array$1<UnityEngine.PatchExtents>) : void
            public GetMaximumHeightError () : System.Array$1<number>
            /** Override the maximum tessellation height error with user provided values.  Note that the overriden values get reset when the terrain resolution is changed and stays unchanged when the terrain heightmap is painted or changed via script.
            * @param maxError Provided maximum height error values.
            */
            public OverrideMaximumHeightError ($maxError: System.Array$1<number>) : void
            /** Sets an array of heightmap samples.
            * @param xBase First x index of heightmap samples to set.
            * @param yBase First y index of heightmap samples to set.
            * @param heights Array of heightmap samples to set (values range from 0 to 1, array indexed as [y,x]).
            */
            public SetHeightsDelayLOD ($xBase: number, $yBase: number, $heights: System.Array$1<number>) : void
            /** Gets whether a certain point at x,y is a hole.
            */
            public IsHole ($x: number, $y: number) : boolean
            /** Gets an array of Terrain holes samples.
            * @param xBase First x index of Terrain holes samples to retrieve.
            * @param yBase First y index of Terrain holes samples to retrieve.
            * @param width Number of samples to retrieve along the Terrain holes x axis.
            * @param height Number of samples to retrieve along the Terrain holes y axis.
            */
            public GetHoles ($xBase: number, $yBase: number, $width: number, $height: number) : System.Array$1<boolean>
            /** Sets an array of Terrain holes samples.
            * @param xBase First x index of Terrain holes samples to set.
            * @param yBase First y index of Terrain holes samples to set.
            * @param holes Array of Terrain holes samples to set (array indexed as [y,x]).
            */
            public SetHoles ($xBase: number, $yBase: number, $holes: System.Array$1<boolean>) : void
            /** Sets an array of Terrain holes samples.
            * @param xBase First x index of Terrain holes samples to set.
            * @param yBase First y index of Terrain holes samples to set.
            * @param holes Array of Terrain holes samples to set (array indexed as [y,x]).
            */
            public SetHolesDelayLOD ($xBase: number, $yBase: number, $holes: System.Array$1<boolean>) : void
            /** Gets the gradient of the terrain at point (x,y).
            */
            public GetSteepness ($x: number, $y: number) : number
            /** Get an interpolated normal at a given location.
            */
            public GetInterpolatedNormal ($x: number, $y: number) : UnityEngine.Vector3
            /** Sets the resolution of the detail map.
            * @param detailResolution Specifies the number of pixels in the detail resolution map. A larger detailResolution, leads to more accurate detail object painting.
            * @param resolutionPerPatch Specifies the size in pixels of each individually rendered detail patch. A larger number reduces draw calls, but might increase triangle count since detail patches are culled on a per batch basis. A recommended value is 16. If you use a very large detail object distance and your grass is very sparse, it makes sense to increase the value.
            */
            public SetDetailResolution ($detailResolution: number, $resolutionPerPatch: number) : void
            public RefreshPrototypes () : void
            /** Returns an array of all supported detail layer indices in the area.
            */
            public GetSupportedLayers ($xBase: number, $yBase: number, $totalWidth: number, $totalHeight: number) : System.Array$1<number>
            /** Returns a 2D array of the detail object density in the specific location.
            */
            public GetDetailLayer ($xBase: number, $yBase: number, $width: number, $height: number, $layer: number) : System.Array$1<number>
            /** Sets the detail layer density map.
            */
            public SetDetailLayer ($xBase: number, $yBase: number, $layer: number, $details: System.Array$1<number>) : void
            /** Sets the Tree Instance array, and optionally snaps Trees onto the surface of the Terrain heightmap.
            * @param instances The array of TreeInstance objects.
            * @param snapToHeightmap Specifies whether to snap Trees to the Terrain heightmap.
            */
            public SetTreeInstances ($instances: System.Array$1<UnityEngine.TreeInstance>, $snapToHeightmap: boolean) : void
            /** Gets the tree instance at the specified index. It is used as a faster version of treeInstances[index] as this function doesn't create the entire tree instances array.
            * @param index The index of the tree instance.
            */
            public GetTreeInstance ($index: number) : UnityEngine.TreeInstance
            /** Sets the tree instance with new parameters at the specified index. However, you cannot change TreeInstance.prototypeIndex and TreeInstance.position. If you change them, the method throws an ArgumentException.
            * @param index The index of the tree instance.
            * @param instance The new TreeInstance value.
            */
            public SetTreeInstance ($index: number, $instance: UnityEngine.TreeInstance) : void
            /** Returns the alpha map at a position x, y given a width and height.
            * @param x The x offset to read from.
            * @param y The y offset to read from.
            * @param width The width of the alpha map area to read.
            * @param height The height of the alpha map area to read.
            * @returns A 3D array of floats, where the 3rd dimension represents the mixing weight of each splatmap at each x,y coordinate. 
            */
            public GetAlphamaps ($x: number, $y: number, $width: number, $height: number) : System.Array$1<number>
            /** Assign all splat values in the given map area.
            */
            public SetAlphamaps ($x: number, $y: number, $map: System.Array$1<number>) : void
            public SetBaseMapDirty () : void
            /** Returns the alphamap texture at the specified index.
            * @param index Index of the alphamap.
            * @returns Alphamap texture at the specified index. 
            */
            public GetAlphamapTexture ($index: number) : UnityEngine.Texture2D
            /** This function sets the terrainLayers property, and in addition, registers the action to the Editor's undo stack.
            * @param terrainLayers The Terrain Layer assets to set.
            * @param undoName The name of the Editor's undo action.
            */
            public SetTerrainLayersRegisterUndo ($terrainLayers: System.Array$1<UnityEngine.TerrainLayer>, $undoName: string) : void
            public SyncHeightmap () : void
            public constructor ()
        }
        /** Contains information about a tree placed in the Terrain game object.
        */
        class TreeInstance extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Position of the tree.
            */
            public position : UnityEngine.Vector3
            /** Width scale of this instance (compared to the prototype's size).
            */
            public widthScale : number
            /** Height scale of this instance (compared to the prototype's size).
            */
            public heightScale : number
            /** Read-only.
            Rotation of the tree on X-Z plane (in radians).
            */
            public rotation : number
            /** Color of this instance.
            */
            public color : UnityEngine.Color32
            /** Lightmap color calculated for this instance.
            */
            public lightmapColor : UnityEngine.Color32
            /** Index of this instance in the TerrainData.treePrototypes array.
            */
            public prototypeIndex : number
        }
        /** Extension methods to the Terrain class, used only for the UpdateGIMaterials method used by the Global Illumination System.
        */
        class TerrainExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Terrain.
            */
            public static UpdateGIMaterials ($terrain: UnityEngine.Terrain) : void
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Terrain.
            */
            public static UpdateGIMaterials ($terrain: UnityEngine.Terrain, $x: number, $y: number, $width: number, $height: number) : void
        }
        /** Tree Component for the tree creator.
        */
        class Tree extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Data asociated to the Tree.
            */
            public get data(): UnityEngine.ScriptableObject;
            public set data(value: UnityEngine.ScriptableObject);
            /** Tells if there is wind data exported from SpeedTree are saved on this component.
            */
            public get hasSpeedTreeWind(): boolean;
            public constructor ()
        }
        /** Controls what Terrain heightmap data to synchronize when there are changes to the heightmap texture.
        */
        enum TerrainHeightmapSyncControl
        { None = 0, HeightOnly = 1, HeightAndLod = 2 }
        /** Structure containing minimum and maximum terrain patch height values.
        */
        class PatchExtents extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Minimum height of a terrain patch.
            */
            public get min(): number;
            public set min(value: number);
            /** Maximum height of a terrain patch.
            */
            public get max(): number;
            public set max(value: number);
        }
        /** Detail prototype used by the Terrain GameObject.
        */
        class DetailPrototype extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** GameObject used by the DetailPrototype.
            */
            public get prototype(): UnityEngine.GameObject;
            public set prototype(value: UnityEngine.GameObject);
            /** Texture used by the DetailPrototype.
            */
            public get prototypeTexture(): UnityEngine.Texture2D;
            public set prototypeTexture(value: UnityEngine.Texture2D);
            /** Minimum width of the grass billboards (if render mode is GrassBillboard).
            */
            public get minWidth(): number;
            public set minWidth(value: number);
            /** Maximum width of the grass billboards (if render mode is GrassBillboard).
            */
            public get maxWidth(): number;
            public set maxWidth(value: number);
            /** Minimum height of the grass billboards (if render mode is GrassBillboard).
            */
            public get minHeight(): number;
            public set minHeight(value: number);
            /** Maximum height of the grass billboards (if render mode is GrassBillboard).
            */
            public get maxHeight(): number;
            public set maxHeight(value: number);
            /** How spread out is the noise for the DetailPrototype.
            */
            public get noiseSpread(): number;
            public set noiseSpread(value: number);
            /** Bend factor of the detailPrototype.
            */
            public get bendFactor(): number;
            public set bendFactor(value: number);
            /** Color when the DetailPrototypes are "healthy".
            */
            public get healthyColor(): UnityEngine.Color;
            public set healthyColor(value: UnityEngine.Color);
            /** Color when the DetailPrototypes are "dry".
            */
            public get dryColor(): UnityEngine.Color;
            public set dryColor(value: UnityEngine.Color);
            /** Render mode for the DetailPrototype.
            */
            public get renderMode(): UnityEngine.DetailRenderMode;
            public set renderMode(value: UnityEngine.DetailRenderMode);
            public get usePrototypeMesh(): boolean;
            public set usePrototypeMesh(value: boolean);
            public constructor ()
            public constructor ($other: UnityEngine.DetailPrototype)
        }
        /** Simple class that contains a pointer to a tree prototype.
        */
        class TreePrototype extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Retrieves the actual GameObject used by the tree.
            */
            public get prefab(): UnityEngine.GameObject;
            public set prefab(value: UnityEngine.GameObject);
            /** Bend factor of the tree prototype.
            */
            public get bendFactor(): number;
            public set bendFactor(value: number);
            public constructor ()
            public constructor ($other: UnityEngine.TreePrototype)
        }
        /** A Splat prototype is just a texture that is used by the TerrainData.
        */
        class SplatPrototype extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Texture of the splat applied to the Terrain.
            */
            public get texture(): UnityEngine.Texture2D;
            public set texture(value: UnityEngine.Texture2D);
            /** Normal map of the splat applied to the Terrain.
            */
            public get normalMap(): UnityEngine.Texture2D;
            public set normalMap(value: UnityEngine.Texture2D);
            /** Size of the tile used in the texture of the SplatPrototype.
            */
            public get tileSize(): UnityEngine.Vector2;
            public set tileSize(value: UnityEngine.Vector2);
            /** Offset of the tile texture of the SplatPrototype.
            */
            public get tileOffset(): UnityEngine.Vector2;
            public set tileOffset(value: UnityEngine.Vector2);
            public get specular(): UnityEngine.Color;
            public set specular(value: UnityEngine.Color);
            /** The metallic value of the splat layer.
            */
            public get metallic(): number;
            public set metallic(value: number);
            /** The smoothness value of the splat layer when the main texture has no alpha channel.
            */
            public get smoothness(): number;
            public set smoothness(value: number);
            public constructor ()
        }
        /** Description of a terrain layer.
        */
        class TerrainLayer extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The diffuse texture used by the terrain layer.
            */
            public get diffuseTexture(): UnityEngine.Texture2D;
            public set diffuseTexture(value: UnityEngine.Texture2D);
            /** Normal map texture used by the terrain layer.
            */
            public get normalMapTexture(): UnityEngine.Texture2D;
            public set normalMapTexture(value: UnityEngine.Texture2D);
            /** The mask map texture used by the terrain layer.
            */
            public get maskMapTexture(): UnityEngine.Texture2D;
            public set maskMapTexture(value: UnityEngine.Texture2D);
            /** UV Tiling size.
            */
            public get tileSize(): UnityEngine.Vector2;
            public set tileSize(value: UnityEngine.Vector2);
            /** UV tiling offset.
            */
            public get tileOffset(): UnityEngine.Vector2;
            public set tileOffset(value: UnityEngine.Vector2);
            /** Specular color.
            */
            public get specular(): UnityEngine.Color;
            public set specular(value: UnityEngine.Color);
            /** Metallic factor used by the terrain layer.
            */
            public get metallic(): number;
            public set metallic(value: number);
            /** Smoothness of the specular reflection.
            */
            public get smoothness(): number;
            public set smoothness(value: number);
            /** A float value that scales the normal vector. The minimum value is 0, the maximum value is 1.
            */
            public get normalScale(): number;
            public set normalScale(value: number);
            /** A Vector4 value specifying the minimum RGBA value that the diffuse texture maps to when the value of the channel is 0.
            */
            public get diffuseRemapMin(): UnityEngine.Vector4;
            public set diffuseRemapMin(value: UnityEngine.Vector4);
            /** A Vector4 value specifying the maximum RGBA value that the diffuse texture maps to when the value of the channel is 1.
            */
            public get diffuseRemapMax(): UnityEngine.Vector4;
            public set diffuseRemapMax(value: UnityEngine.Vector4);
            /** A Vector4 value specifying the minimum RGBA value that the mask map texture maps to when the value of the channel is 0.
            */
            public get maskMapRemapMin(): UnityEngine.Vector4;
            public set maskMapRemapMin(value: UnityEngine.Vector4);
            /** A Vector4 value specifying the maximum RGBA value that the mask map texture maps to when the value of the channel is 1.
            */
            public get maskMapRemapMax(): UnityEngine.Vector4;
            public set maskMapRemapMax(value: UnityEngine.Vector4);
            public constructor ()
        }
        /** Render mode for detail prototypes.
        */
        enum DetailRenderMode
        { GrassBillboard = 0, VertexLit = 1, Grass = 2 }
        /** A heightmap based collider.
        */
        class TerrainCollider extends UnityEngine.Collider
        {
            protected [__keep_incompatibility]: never;
            /** The terrain that stores the heightmap.
            */
            public get terrainData(): UnityEngine.TerrainData;
            public set terrainData(value: UnityEngine.TerrainData);
            public constructor ()
        }
        class GUIText extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** How multiline text should be aligned.
        */
        enum TextAlignment
        { Left = 0, Center = 1, Right = 2 }
        /** A struct that stores the settings for TextGeneration.
        */
        class TextGenerationSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Font to use for generation.
            */
            public font : UnityEngine.Font
            /** The base color for the text generation.
            */
            public color : UnityEngine.Color
            /** Font size.
            */
            public fontSize : number
            /** The line spacing multiplier.
            */
            public lineSpacing : number
            /** Allow rich text markup in generation.
            */
            public richText : boolean
            /** A scale factor for the text. This is useful if the Text is on a Canvas and the canvas is scaled.
            */
            public scaleFactor : number
            /** Font style.
            */
            public fontStyle : UnityEngine.FontStyle
            /** How is the generated text anchored.
            */
            public textAnchor : UnityEngine.TextAnchor
            /** Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics.
            */
            public alignByGeometry : boolean
            /** Should the text be resized to fit the configured bounds?
            */
            public resizeTextForBestFit : boolean
            /** Minimum size for resized text.
            */
            public resizeTextMinSize : number
            /** Maximum size for resized text.
            */
            public resizeTextMaxSize : number
            /** Should the text generator update the bounds from the generated text.
            */
            public updateBounds : boolean
            /** What happens to text when it reaches the bottom generation bounds.
            */
            public verticalOverflow : UnityEngine.VerticalWrapMode
            /** What happens to text when it reaches the horizontal generation bounds.
            */
            public horizontalOverflow : UnityEngine.HorizontalWrapMode
            /** Extents that the generator will attempt to fit the text in.
            */
            public generationExtents : UnityEngine.Vector2
            /** Generated vertices are offset by the pivot.
            */
            public pivot : UnityEngine.Vector2
            /** Continue to generate characters even if the text runs out of bounds.
            */
            public generateOutOfBounds : boolean
            public Equals ($other: UnityEngine.TextGenerationSettings) : boolean
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        /** Wrapping modes for text that reaches the vertical boundary.
        */
        enum VerticalWrapMode
        { Truncate = 0, Overflow = 1 }
        /** Wrapping modes for text that reaches the horizontal boundary.
        */
        enum HorizontalWrapMode
        { Wrap = 0, Overflow = 1 }
        /** Class that can be used to generate text for rendering.
        */
        class TextGenerator extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** The number of characters that have been generated and are included in the visible lines.
            */
            public get characterCountVisible(): number;
            /** Array of generated vertices.
            */
            public get verts(): System.Collections.Generic.IList$1<UnityEngine.UIVertex>;
            /** Array of generated characters.
            */
            public get characters(): System.Collections.Generic.IList$1<UnityEngine.UICharInfo>;
            /** Information about each generated text line.
            */
            public get lines(): System.Collections.Generic.IList$1<UnityEngine.UILineInfo>;
            /** Extents of the generated text in rect format.
            */
            public get rectExtents(): UnityEngine.Rect;
            /** Number of vertices generated.
            */
            public get vertexCount(): number;
            /** The number of characters that have been generated.
            */
            public get characterCount(): number;
            /** Number of text lines generated.
            */
            public get lineCount(): number;
            /** The size of the font that was found if using best fit mode.
            */
            public get fontSizeUsedForBestFit(): number;
            public Invalidate () : void
            public GetCharacters ($characters: System.Collections.Generic.List$1<UnityEngine.UICharInfo>) : void
            public GetLines ($lines: System.Collections.Generic.List$1<UnityEngine.UILineInfo>) : void
            public GetVertices ($vertices: System.Collections.Generic.List$1<UnityEngine.UIVertex>) : void
            /** Given a string and settings, returns the preferred width for a container that would hold this text.
            * @param str Generation text.
            * @param settings Settings for generation.
            * @returns Preferred width. 
            */
            public GetPreferredWidth ($str: string, $settings: UnityEngine.TextGenerationSettings) : number
            /** Given a string and settings, returns the preferred height for a container that would hold this text.
            * @param str Generation text.
            * @param settings Settings for generation.
            * @returns Preferred height. 
            */
            public GetPreferredHeight ($str: string, $settings: UnityEngine.TextGenerationSettings) : number
            /** Will generate the vertices and other data for the given string with the given settings.
            * @param str String to generate.
            * @param settings Generation settings.
            * @param context The object used as context of the error log message, if necessary.
            * @returns True if the generation is a success, false otherwise. 
            */
            public PopulateWithErrors ($str: string, $settings: UnityEngine.TextGenerationSettings, $context: UnityEngine.GameObject) : boolean
            /** Will generate the vertices and other data for the given string with the given settings.
            * @param str String to generate.
            * @param settings Settings.
            */
            public Populate ($str: string, $settings: UnityEngine.TextGenerationSettings) : boolean
            public GetVerticesArray () : System.Array$1<UnityEngine.UIVertex>
            public GetCharactersArray () : System.Array$1<UnityEngine.UICharInfo>
            public GetLinesArray () : System.Array$1<UnityEngine.UILineInfo>
            public constructor ()
            public constructor ($initialCapacity: number)
            public Dispose () : void
        }
        /** Class that specifies some information about a renderable character.
        */
        class UICharInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Position of the character cursor in local (text generated) space.
            */
            public cursorPos : UnityEngine.Vector2
            /** Character width.
            */
            public charWidth : number
        }
        /** Information about a generated line of text.
        */
        class UILineInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Index of the first character in the line.
            */
            public startCharIdx : number
            /** Height of the line.
            */
            public height : number
            /** The upper Y position of the line in pixels. This is used for text annotation such as the caret and selection box in the InputField.
            */
            public topY : number
            /** Space in pixels between this line and the next line.
            */
            public leading : number
        }
        /** Vertex class used by a Canvas for managing vertices.
        */
        class UIVertex extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Vertex position.
            */
            public position : UnityEngine.Vector3
            /** Normal.
            */
            public normal : UnityEngine.Vector3
            /** Tangent.
            */
            public tangent : UnityEngine.Vector4
            /** Vertex color.
            */
            public color : UnityEngine.Color32
            /** The first texture coordinate set of the mesh. Used by UI elements by default.
            */
            public uv0 : UnityEngine.Vector2
            /** The second texture coordinate set of the mesh, if present.
            */
            public uv1 : UnityEngine.Vector2
            /** The Third texture coordinate set of the mesh, if present.
            */
            public uv2 : UnityEngine.Vector2
            /** The forth texture coordinate set of the mesh, if present.
            */
            public uv3 : UnityEngine.Vector2
            /** Simple UIVertex with sensible settings for use in the UI system.
            */
            public static simpleVert : UnityEngine.UIVertex
        }
        /** A script interface for the.
        */
        class TextMesh extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** The text that is displayed.
            */
            public get text(): string;
            public set text(value: string);
            /** The Font used.
            */
            public get font(): UnityEngine.Font;
            public set font(value: UnityEngine.Font);
            /** The font size to use (for dynamic fonts).
            */
            public get fontSize(): number;
            public set fontSize(value: number);
            /** The font style to use (for dynamic fonts).
            */
            public get fontStyle(): UnityEngine.FontStyle;
            public set fontStyle(value: UnityEngine.FontStyle);
            /** How far should the text be offset from the transform.position.z when drawing.
            */
            public get offsetZ(): number;
            public set offsetZ(value: number);
            /** How lines of text are aligned (Left, Right, Center).
            */
            public get alignment(): UnityEngine.TextAlignment;
            public set alignment(value: UnityEngine.TextAlignment);
            /** Which point of the text shares the position of the Transform.
            */
            public get anchor(): UnityEngine.TextAnchor;
            public set anchor(value: UnityEngine.TextAnchor);
            /** The size of each character (This scales the whole text).
            */
            public get characterSize(): number;
            public set characterSize(value: number);
            /** How much space will be in-between lines of text.
            */
            public get lineSpacing(): number;
            public set lineSpacing(value: number);
            /** How much space will be inserted for a tab '\t' character. This is a multiplum of the 'spacebar' character offset.
            */
            public get tabSize(): number;
            public set tabSize(value: number);
            /** Enable HTML-style tags for Text Formatting Markup.
            */
            public get richText(): boolean;
            public set richText(value: boolean);
            /** The color used to render the text.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            public constructor ()
        }
        /** Specification for how to render a character from the font texture. See Font.characterInfo.
        */
        class CharacterInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Unicode value of the character.
            */
            public index : number
            /** The size of the character or 0 if it is the default font size.
            */
            public size : number
            /** The style of the character.
            */
            public style : UnityEngine.FontStyle
            /** The horizontal distance, rounded to the nearest integer, from the origin of this character to the origin of the next character.
            */
            public get advance(): number;
            public set advance(value: number);
            /** The width of the glyph image.
            */
            public get glyphWidth(): number;
            public set glyphWidth(value: number);
            /** The height of the glyph image.
            */
            public get glyphHeight(): number;
            public set glyphHeight(value: number);
            /** The horizontal distance from the origin of this glyph to the begining of the glyph image.
            */
            public get bearing(): number;
            public set bearing(value: number);
            /** The minimum extend of the glyph image in the y-axis.
            */
            public get minY(): number;
            public set minY(value: number);
            /** The maximum extend of the glyph image in the y-axis.
            */
            public get maxY(): number;
            public set maxY(value: number);
            /** The minium extend of the glyph image in the x-axis.
            */
            public get minX(): number;
            public set minX(value: number);
            /** The maximum extend of the glyph image in the x-axis.
            */
            public get maxX(): number;
            public set maxX(value: number);
            /** The uv coordinate matching the bottom left of the glyph image in the font texture.
            */
            public get uvBottomLeft(): UnityEngine.Vector2;
            public set uvBottomLeft(value: UnityEngine.Vector2);
            /** The uv coordinate matching the bottom right of the glyph image in the font texture.
            */
            public get uvBottomRight(): UnityEngine.Vector2;
            public set uvBottomRight(value: UnityEngine.Vector2);
            /** The uv coordinate matching the top right of the glyph image in the font texture.
            */
            public get uvTopRight(): UnityEngine.Vector2;
            public set uvTopRight(value: UnityEngine.Vector2);
            /** The uv coordinate matching the top left of the glyph image in the font texture.
            */
            public get uvTopLeft(): UnityEngine.Vector2;
            public set uvTopLeft(value: UnityEngine.Vector2);
        }
        /** Attribute to define the class as a grid brush and to make it available in the palette window.
        */
        class CustomGridBrushAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Hide all asset instances of this brush in the tile palette window.
            */
            public get hideAssetInstances(): boolean;
            /** Hide the default instance of brush in the tile palette window.
            */
            public get hideDefaultInstance(): boolean;
            /** If set to true, brush will replace Unity built-in brush as the default brush in palette window.
            Only one class at any one time should set defaultBrush to true.
            */
            public get defaultBrush(): boolean;
            /** Name of the default instance of this brush.
            */
            public get defaultName(): string;
            public constructor ()
            public constructor ($hideAssetInstances: boolean, $hideDefaultInstance: boolean, $defaultBrush: boolean, $defaultName: string)
        }
        /** Base class for authoring data on a grid with grid painting tools like paint, erase, pick, select and fill.
        */
        class GridBrushBase extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** Paints data into a grid within the given bounds.
            * @param grid Grid used for layout.
            * @param brushTarget Target of the paint operation. By default the currently selected GameObject.
            * @param position The coordinates of the cell to paint data to.
            */
            public Paint ($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.Vector3Int) : void
            /** Erases data on a grid within the given bounds.
            * @param grid Grid used for layout.
            * @param brushTarget Target of the erase operation. By default the currently selected GameObject.
            * @param position The coordinates of the cell to erase data from.
            */
            public Erase ($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.Vector3Int) : void
            /** Box fills tiles and GameObjects into given bounds within the selected layers.
            * @param gridLayout Grid used for layout.
            * @param brushTarget Target of box fill operation. By default the currently selected GameObject.
            * @param position The bounds to box fill data to.
            */
            public BoxFill ($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.BoundsInt) : void
            /** Erases data on a grid within the given bounds.
            * @param gridLayout Grid used for layout.
            * @param brushTarget Target of the erase operation. By default the currently selected GameObject.
            * @param position The bounds to erase data from.
            */
            public BoxErase ($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.BoundsInt) : void
            /** Select an area of a grid.
            * @param grid Grid used for layout.
            * @param brushTarget Targets of paint operation. By default the currently selected GameObject.
            * @param position Area to get selected.
            */
            public Select ($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.BoundsInt) : void
            /** Flood fills data onto a grid given the starting coordinates of the cell.
            * @param gridLayout Grid used for layout.
            * @param brushTarget Targets of flood fill operation. By default the currently selected GameObject.
            * @param position Starting position of the flood fill.
            */
            public FloodFill ($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.Vector3Int) : void
            public Rotate ($direction: UnityEngine.GridBrushBase.RotationDirection, $layout: UnityEngine.GridLayout.CellLayout) : void
            public Flip ($flip: UnityEngine.GridBrushBase.FlipAxis, $layout: UnityEngine.GridLayout.CellLayout) : void
            /** Picks data from a grid given the coordinates of the cells.
            * @param grid Grid used for layout.
            * @param brushTarget Target of the paint operation. By default the currently selected GameObject.
            * @param position The coordinates of the cells to paint data from.
            * @param pivot Pivot of the picking brush.
            */
            public Pick ($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.BoundsInt, $pivot: UnityEngine.Vector3Int) : void
            /** Move is called when user moves the area previously selected with the selection marquee.
            * @param grid Grid used for layout.
            * @param brushTarget Target of the move operation. By default the currently selected GameObject.
            * @param from Source bounds of the move.
            * @param to Target bounds of the move.
            */
            public Move ($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $from: UnityEngine.BoundsInt, $to: UnityEngine.BoundsInt) : void
            /** MoveEnd is called when user starts moving the area previously selected with the selection marquee.
            * @param grid Grid used for layout.
            * @param brushTarget Target of the move operation. By default the currently selected GameObject.
            * @param position Position where the move operation has started.
            */
            public MoveStart ($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.BoundsInt) : void
            /** MoveEnd is called when user has ended the move of the area previously selected with the selection marquee.
            * @param position Layers affected by the move operation.
            * @param brushTarget Target of the move operation. By default the currently selected GameObject.
            * @param grid Grid used for layout.
            */
            public MoveEnd ($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.BoundsInt) : void
            /** Changes the Z position of the GridBrushBase.
            * @param change Modify the Z position of GridBrushBase by this value.
            */
            public ChangeZPosition ($change: number) : void
            public ResetZPosition () : void
        }
        interface ICanvasRaycastFilter
        {
            /** Given a point and a camera is the raycast valid.
            * @param sp Screen position.
            * @param eventCamera Raycast camera.
            * @returns Valid. 
            */
            IsRaycastLocationValid ($sp: UnityEngine.Vector2, $eventCamera: UnityEngine.Camera) : boolean
        }
        /** A Canvas placable element that can be used to modify children Alpha, Raycasting, Enabled state.
        */
        class CanvasGroup extends UnityEngine.Behaviour implements UnityEngine.ICanvasRaycastFilter
        {
            protected [__keep_incompatibility]: never;
            /** Set the alpha of the group.
            */
            public get alpha(): number;
            public set alpha(value: number);
            /** Is the group interactable (are the elements beneath the group enabled).
            */
            public get interactable(): boolean;
            public set interactable(value: boolean);
            /** Does this group block raycasting (allow collision).
            */
            public get blocksRaycasts(): boolean;
            public set blocksRaycasts(value: boolean);
            /** Should the group ignore parent groups?
            */
            public get ignoreParentGroups(): boolean;
            public set ignoreParentGroups(value: boolean);
            /** Returns true if the Group allows raycasts.
            */
            public IsRaycastLocationValid ($sp: UnityEngine.Vector2, $eventCamera: UnityEngine.Camera) : boolean
            public constructor ()
        }
        /** A component that will render to the screen after all normal rendering has completed when attached to a Canvas. Designed for GUI application.
        */
        class CanvasRenderer extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Enable 'render stack' pop draw call.
            */
            public get hasPopInstruction(): boolean;
            public set hasPopInstruction(value: boolean);
            /** The number of materials usable by this renderer.
            */
            public get materialCount(): number;
            public set materialCount(value: number);
            /** The number of materials usable by this renderer. Used internally for masking.
            */
            public get popMaterialCount(): number;
            public set popMaterialCount(value: number);
            /** Depth of the renderer relative to the root canvas.
            */
            public get absoluteDepth(): number;
            /** True if any change has occured that would invalidate the positions of generated geometry.
            */
            public get hasMoved(): boolean;
            /** Indicates whether geometry emitted by this renderer can be ignored when the vertex color alpha is close to zero for every vertex of the mesh.
            */
            public get cullTransparentMesh(): boolean;
            public set cullTransparentMesh(value: boolean);
            /** True if rect clipping has been enabled on this renderer.
            See Also: CanvasRenderer.EnableRectClipping, CanvasRenderer.DisableRectClipping.
            */
            public get hasRectClipping(): boolean;
            /** Depth of the renderer realative to the parent canvas.
            */
            public get relativeDepth(): number;
            /** Indicates whether geometry emitted by this renderer is ignored.
            */
            public get cull(): boolean;
            public set cull(value: boolean);
            /** Set the color of the renderer. Will be multiplied with the UIVertex color and the Canvas color.
            * @param color Renderer multiply color.
            */
            public SetColor ($color: UnityEngine.Color) : void
            public GetColor () : UnityEngine.Color
            /** Enables rect clipping on the CanvasRendered. Geometry outside of the specified rect will be clipped (not rendered).
            */
            public EnableRectClipping ($rect: UnityEngine.Rect) : void
            public DisableRectClipping () : void
            /** Set the material for the canvas renderer. If a texture is specified then it will be used as the 'MainTex' instead of the material's 'MainTex'.
            See Also: CanvasRenderer.SetMaterialCount, CanvasRenderer.SetTexture.
            * @param material Material for rendering.
            * @param texture Material texture overide.
            * @param index Material index.
            */
            public SetMaterial ($material: UnityEngine.Material, $index: number) : void
            /** Gets the current Material assigned to the CanvasRenderer.
            * @param index The material index to retrieve (0 if this parameter is omitted).
            * @returns Result. 
            */
            public GetMaterial ($index: number) : UnityEngine.Material
            /** Set the material for the canvas renderer. Used internally for masking.
            */
            public SetPopMaterial ($material: UnityEngine.Material, $index: number) : void
            /** Gets the current Material assigned to the CanvasRenderer. Used internally for masking.
            */
            public GetPopMaterial ($index: number) : UnityEngine.Material
            /** Sets the texture used by this renderer's material.
            */
            public SetTexture ($texture: UnityEngine.Texture) : void
            /** The Alpha Texture that will be passed to the Shader under the _AlphaTex property.
            * @param texture The Texture to be passed.
            */
            public SetAlphaTexture ($texture: UnityEngine.Texture) : void
            /** Sets the Mesh used by this renderer. Note the Mesh must be read/write enabled.
            */
            public SetMesh ($mesh: UnityEngine.Mesh) : void
            public Clear () : void
            public GetAlpha () : number
            /** Set the alpha of the renderer. Will be multiplied with the UIVertex alpha and the Canvas alpha.
            * @param alpha Alpha.
            */
            public SetAlpha ($alpha: number) : void
            public GetInheritedAlpha () : number
            /** Set the material for the canvas renderer. If a texture is specified then it will be used as the 'MainTex' instead of the material's 'MainTex'.
            See Also: CanvasRenderer.SetMaterialCount, CanvasRenderer.SetTexture.
            * @param material Material for rendering.
            * @param texture Material texture overide.
            * @param index Material index.
            */
            public SetMaterial ($material: UnityEngine.Material, $texture: UnityEngine.Texture) : void
            public GetMaterial () : UnityEngine.Material
            public static SplitUIVertexStreams ($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $indices: System.Collections.Generic.List$1<number>) : void
            public static SplitUIVertexStreams ($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $uv2S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $uv3S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $indices: System.Collections.Generic.List$1<number>) : void
            public static CreateUIVertexStream ($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $indices: System.Collections.Generic.List$1<number>) : void
            public static CreateUIVertexStream ($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $uv2S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $uv3S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $indices: System.Collections.Generic.List$1<number>) : void
            public static AddUIVertexStream ($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public static AddUIVertexStream ($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $uv2S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $uv3S: System.Collections.Generic.List$1<UnityEngine.Vector2>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public static add_onRequestRebuild ($value: UnityEngine.CanvasRenderer.OnRequestRebuild) : void
            public static remove_onRequestRebuild ($value: UnityEngine.CanvasRenderer.OnRequestRebuild) : void
            public constructor ()
        }
        /** Utility class containing helper methods for working with  RectTransform.
        */
        class RectTransformUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Convert a given point in screen space into a pixel correct point.
            * @returns Pixel adjusted point. 
            */
            public static PixelAdjustPoint ($point: UnityEngine.Vector2, $elementTransform: UnityEngine.Transform, $canvas: UnityEngine.Canvas) : UnityEngine.Vector2
            /** Given a rect transform, return the corner points in pixel accurate coordinates.
            * @returns Pixel adjusted rect. 
            */
            public static PixelAdjustRect ($rectTransform: UnityEngine.RectTransform, $canvas: UnityEngine.Canvas) : UnityEngine.Rect
            public static RectangleContainsScreenPoint ($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2) : boolean
            /** Does the RectTransform contain the screen point as seen from the given camera?
            * @param rect The RectTransform to test with.
            * @param screenPoint The screen point to test.
            * @param cam The camera from which the test is performed from. (Optional)
            * @returns True if the point is inside the rectangle. 
            */
            public static RectangleContainsScreenPoint ($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2, $cam: UnityEngine.Camera) : boolean
            /** Transform a screen space point to a position in world space that is on the plane of the given RectTransform.
            * @param rect The RectTransform to find a point inside.
            * @param cam The camera associated with the screen space position.
            * @param screenPoint Screen space position.
            * @param worldPoint Point in world space.
            * @returns Returns true if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle. 
            */
            public static ScreenPointToWorldPointInRectangle ($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2, $cam: UnityEngine.Camera, $worldPoint: $Ref<UnityEngine.Vector3>) : boolean
            /** Transform a screen space point to a position in the local space of a RectTransform that is on the plane of its rectangle.
            * @param rect The RectTransform to find a point inside.
            * @param cam The camera associated with the screen space position.
            * @param screenPoint Screen space position.
            * @param localPoint Point in local space of the rect transform.
            * @returns Returns true if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle. 
            */
            public static ScreenPointToLocalPointInRectangle ($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2, $cam: UnityEngine.Camera, $localPoint: $Ref<UnityEngine.Vector2>) : boolean
            public static ScreenPointToRay ($cam: UnityEngine.Camera, $screenPos: UnityEngine.Vector2) : UnityEngine.Ray
            public static WorldToScreenPoint ($cam: UnityEngine.Camera, $worldPoint: UnityEngine.Vector3) : UnityEngine.Vector2
            public static CalculateRelativeRectTransformBounds ($root: UnityEngine.Transform, $child: UnityEngine.Transform) : UnityEngine.Bounds
            public static CalculateRelativeRectTransformBounds ($trans: UnityEngine.Transform) : UnityEngine.Bounds
            /** Flips the alignment of the RectTransform along the horizontal or vertical axis, and optionally its children as well.
            * @param rect The RectTransform to flip.
            * @param keepPositioning Flips around the pivot if true. Flips within the parent rect if false.
            * @param recursive Flip the children as well?
            * @param axis The axis to flip along. 0 is horizontal and 1 is vertical.
            */
            public static FlipLayoutOnAxis ($rect: UnityEngine.RectTransform, $axis: number, $keepPositioning: boolean, $recursive: boolean) : void
            /** Flips the horizontal and vertical axes of the RectTransform size and alignment, and optionally its children as well.
            * @param rect The RectTransform to flip.
            * @param keepPositioning Flips around the pivot if true. Flips within the parent rect if false.
            * @param recursive Flip the children as well?
            */
            public static FlipLayoutAxes ($rect: UnityEngine.RectTransform, $keepPositioning: boolean, $recursive: boolean) : void
        }
        /** Element that can be used for screen rendering.
        */
        class Canvas extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Is the Canvas in World or Overlay mode?
            */
            public get renderMode(): UnityEngine.RenderMode;
            public set renderMode(value: UnityEngine.RenderMode);
            /** Is this the root Canvas?
            */
            public get isRootCanvas(): boolean;
            /** Get the render rect for the Canvas.
            */
            public get pixelRect(): UnityEngine.Rect;
            /** Used to scale the entire canvas, while still making it fit the screen. Only applies with renderMode is Screen Space.
            */
            public get scaleFactor(): number;
            public set scaleFactor(value: number);
            /** The number of pixels per unit that is considered the default.
            */
            public get referencePixelsPerUnit(): number;
            public set referencePixelsPerUnit(value: number);
            /** Allows for nested canvases to override pixelPerfect settings inherited from parent canvases.
            */
            public get overridePixelPerfect(): boolean;
            public set overridePixelPerfect(value: boolean);
            /** Force elements in the canvas to be aligned with pixels. Only applies with renderMode is Screen Space.
            */
            public get pixelPerfect(): boolean;
            public set pixelPerfect(value: boolean);
            /** How far away from the camera is the Canvas generated.
            */
            public get planeDistance(): number;
            public set planeDistance(value: number);
            /** The render order in which the canvas is being emitted to the Scene. (Read Only)
            */
            public get renderOrder(): number;
            /** Override the sorting of canvas.
            */
            public get overrideSorting(): boolean;
            public set overrideSorting(value: boolean);
            /** Canvas' order within a sorting layer.
            */
            public get sortingOrder(): number;
            public set sortingOrder(value: number);
            /** For Overlay mode, display index on which the UI canvas will appear.
            */
            public get targetDisplay(): number;
            public set targetDisplay(value: number);
            /** Unique ID of the Canvas' sorting layer.
            */
            public get sortingLayerID(): number;
            public set sortingLayerID(value: number);
            /** Cached calculated value based upon SortingLayerID.
            */
            public get cachedSortingLayerValue(): number;
            /** Get or set the mask of additional shader channels to be used when creating the Canvas mesh.
            */
            public get additionalShaderChannels(): UnityEngine.AdditionalCanvasShaderChannels;
            public set additionalShaderChannels(value: UnityEngine.AdditionalCanvasShaderChannels);
            /** Name of the Canvas' sorting layer.
            */
            public get sortingLayerName(): string;
            public set sortingLayerName(value: string);
            /** Returns the Canvas closest to root, by checking through each parent and returning the last canvas found. If no other canvas is found then the canvas will return itself.
            */
            public get rootCanvas(): UnityEngine.Canvas;
            /** Camera used for sizing the Canvas when in Screen Space - Camera. Also used as the Camera that events will be sent through for a World Space [[Canvas].
            */
            public get worldCamera(): UnityEngine.Camera;
            public set worldCamera(value: UnityEngine.Camera);
            /** The normalized grid size that the canvas will split the renderable area into.
            */
            public get normalizedSortingGridSize(): number;
            public set normalizedSortingGridSize(value: number);
            public static add_willRenderCanvases ($value: UnityEngine.Canvas.WillRenderCanvases) : void
            public static remove_willRenderCanvases ($value: UnityEngine.Canvas.WillRenderCanvases) : void
            public static GetDefaultCanvasMaterial () : UnityEngine.Material
            public static GetETC1SupportedCanvasMaterial () : UnityEngine.Material
            public static ForceUpdateCanvases () : void
            public constructor ()
        }
        /** RenderMode for the Canvas.
        */
        enum RenderMode
        { ScreenSpaceOverlay = 0, ScreenSpaceCamera = 1, WorldSpace = 2 }
        /** Enum mask of possible shader channel properties that can also be included when the Canvas mesh is created.
        */
        enum AdditionalCanvasShaderChannels
        { None = 0, TexCoord1 = 1, TexCoord2 = 2, TexCoord3 = 4, Normal = 8, Tangent = 16 }
        class UISystemProfilerApi extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static BeginSample ($type: UnityEngine.UISystemProfilerApi.SampleType) : void
            public static EndSample ($type: UnityEngine.UISystemProfilerApi.SampleType) : void
            public static AddMarker ($name: string, $obj: UnityEngine.Object) : void
        }
        /** Provides access to your remote settings.
        */
        class RemoteSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_Updated ($value: UnityEngine.RemoteSettings.UpdatedEventHandler) : void
            public static remove_Updated ($value: UnityEngine.RemoteSettings.UpdatedEventHandler) : void
            public static add_BeforeFetchFromServer ($value: System.Action) : void
            public static remove_BeforeFetchFromServer ($value: System.Action) : void
            public static add_Completed ($value: System.Action$3<boolean, boolean, number>) : void
            public static remove_Completed ($value: System.Action$3<boolean, boolean, number>) : void
            public static ForceUpdate () : void
            public static WasLastUpdatedFromServer () : boolean
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param key The key identifying the setting.
            * @param defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetInt ($key: string) : number
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param key The key identifying the setting.
            * @param defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetInt ($key: string, $defaultValue: number) : number
            public static GetLong ($key: string) : bigint
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param key The key identifying the setting.
            * @param defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetLong ($key: string, $defaultValue: bigint) : bigint
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param key The key identifying the setting.
            * @param defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetFloat ($key: string) : number
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param key The key identifying the setting.
            * @param defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetFloat ($key: string, $defaultValue: number) : number
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param key The key identifying the setting.
            * @param defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetString ($key: string) : string
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param key The key identifying the setting.
            * @param defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetString ($key: string, $defaultValue: string) : string
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param key The key identifying the setting.
            * @param defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetBool ($key: string) : boolean
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param key The key identifying the setting.
            * @param defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetBool ($key: string, $defaultValue: boolean) : boolean
            /** Reports whether the specified key exists in the remote settings configuration.
            * @param key The key identifying the setting.
            * @returns True, if the key exists. 
            */
            public static HasKey ($key: string) : boolean
            public static GetCount () : number
            public static GetKeys () : System.Array$1<string>
            /** Gets the object corresponding to the remote setting identified by key, if it exists.
            * @param key The key identifying the setting.
            * @param type The type of object represented in RemoteSettings.
            * @returns An instance of the object with fields assigned the corresponding remote values. 
            */
            public static GetObject ($type: System.Type, $key?: string) : any
            /** Gets the object corresponding to the remote setting identified by key, if it exists.
            * @param defaultValue The object that should be for default values.
            * @param key The key identifying the setting.
            * @returns An instance of the object with fields assigned the corresponding remote values. 
            */
            public static GetObject ($key: string, $defaultValue: any) : any
            /** Gets a dictionary corresponding to the remote setting identified by key, if it exists.
            * @param key The key identifying the setting.
            * @returns An instance of Dictionary<string, object> containing the corresponding remote value or values. 
            */
            public static GetDictionary ($key?: string) : System.Collections.Generic.IDictionary$2<string, any>
        }
        class RemoteConfigSettings extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public add_Updated ($value: System.Action$1<boolean>) : void
            public remove_Updated ($value: System.Action$1<boolean>) : void
            public Dispose () : void
            public static QueueConfig ($name: string, $param: any, $ver?: number, $prefix?: string) : boolean
            public static SendDeviceInfoInConfigRequest () : boolean
            public static AddSessionTag ($tag: string) : void
            public ForceUpdate () : void
            public WasLastUpdatedFromServer () : boolean
            public GetInt ($key: string) : number
            public GetInt ($key: string, $defaultValue: number) : number
            public GetLong ($key: string) : bigint
            public GetLong ($key: string, $defaultValue: bigint) : bigint
            public GetFloat ($key: string) : number
            public GetFloat ($key: string, $defaultValue: number) : number
            public GetString ($key: string) : string
            public GetString ($key: string, $defaultValue: string) : string
            public GetBool ($key: string) : boolean
            public GetBool ($key: string, $defaultValue: boolean) : boolean
            public HasKey ($key: string) : boolean
            public GetCount () : number
            public GetKeys () : System.Array$1<string>
            public GetObject ($type: System.Type, $key?: string) : any
            public GetObject ($key: string, $defaultValue: any) : any
            public GetDictionary ($key?: string) : System.Collections.Generic.IDictionary$2<string, any>
            public constructor ($configKey: string)
            public constructor ()
        }
        /** Helper class to generate form data to post to web servers using the UnityWebRequest or WWW classes.
        */
        class WWWForm extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** (Read Only) Returns the correct request headers for posting the form using the WWW class.
            */
            public get headers(): System.Collections.Generic.Dictionary$2<string, string>;
            /** (Read Only) The raw data to pass as the POST request body when sending the form.
            */
            public get data(): System.Array$1<number>;
            /** Add a simple field to the form.
            */
            public AddField ($fieldName: string, $value: string) : void
            /** Add a simple field to the form.
            */
            public AddField ($fieldName: string, $value: string, $e: System.Text.Encoding) : void
            /** Adds a simple field to the form.
            */
            public AddField ($fieldName: string, $i: number) : void
            /** Add binary data to the form.
            */
            public AddBinaryData ($fieldName: string, $contents: System.Array$1<number>) : void
            /** Add binary data to the form.
            */
            public AddBinaryData ($fieldName: string, $contents: System.Array$1<number>, $fileName: string) : void
            /** Add binary data to the form.
            */
            public AddBinaryData ($fieldName: string, $contents: System.Array$1<number>, $fileName: string, $mimeType: string) : void
            public constructor ()
        }
        /** Simple access to web pages.
        */
        class WWW extends UnityEngine.CustomYieldInstruction implements System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Streams an AssetBundle that can contain any kind of asset from the project folder.
            */
            public get assetBundle(): UnityEngine.AssetBundle;
            /** Returns the contents of the fetched web page as a byte array (Read Only).
            */
            public get bytes(): System.Array$1<number>;
            /** The number of bytes downloaded by this WWW query (read only).
            */
            public get bytesDownloaded(): number;
            /** Returns an error message if there was an error during the download (Read Only).
            */
            public get error(): string;
            /** Is the download already finished? (Read Only)
            */
            public get isDone(): boolean;
            /** How far has the download progressed (Read Only).
            */
            public get progress(): number;
            /** Dictionary of headers returned by the request.
            */
            public get responseHeaders(): System.Collections.Generic.Dictionary$2<string, string>;
            /** Returns the contents of the fetched web page as a string (Read Only).
            */
            public get text(): string;
            /** Returns a Texture2D generated from the downloaded data (Read Only).
            */
            public get texture(): UnityEngine.Texture2D;
            /** Returns a non-readable Texture2D generated from the downloaded data (Read Only).
            */
            public get textureNonReadable(): UnityEngine.Texture2D;
            /** Obsolete, has no effect.
            */
            public get threadPriority(): UnityEngine.ThreadPriority;
            public set threadPriority(value: UnityEngine.ThreadPriority);
            /** How far has the upload progressed (Read Only).
            */
            public get uploadProgress(): number;
            /** The URL of this WWW request (Read Only).
            */
            public get url(): string;
            public get keepWaiting(): boolean;
            /** Escapes characters in a string to ensure they are URL-friendly.
            * @param s A string with characters to be escaped.
            * @param e The text encoding to use.
            */
            public static EscapeURL ($s: string) : string
            /** Escapes characters in a string to ensure they are URL-friendly.
            * @param s A string with characters to be escaped.
            * @param e The text encoding to use.
            */
            public static EscapeURL ($s: string, $e: System.Text.Encoding) : string
            /** Converts URL-friendly escape sequences back to normal text.
            * @param s A string containing escaped characters.
            * @param e The text encoding to use.
            */
            public static UnEscapeURL ($s: string) : string
            /** Converts URL-friendly escape sequences back to normal text.
            * @param s A string containing escaped characters.
            * @param e The text encoding to use.
            */
            public static UnEscapeURL ($s: string, $e: System.Text.Encoding) : string
            /** Loads an AssetBundle with the specified version number from the cache. If the AssetBundle is not currently cached, it will automatically be downloaded and stored in the cache for future retrieval from local storage.
            * @param url The URL to download the AssetBundle from, if it is not present in the cache. Must be '%' escaped.
            * @param version Version of the AssetBundle. The file will only be loaded from the disk cache if it has previously been downloaded with the same version parameter. By incrementing the version number requested by your application, you can force Caching to download a new copy of the AssetBundle from url.
            * @param hash Hash128 which is used as the version of the AssetBundle.
            * @param cachedBundle A structure used to download a given version of AssetBundle to a customized cache path.
            Analogous to the cachedAssetBundle parameter for UnityWebRequestAssetBundle.GetAssetBundle.</param>
            * @param crc An optional CRC-32 Checksum of the uncompressed contents. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match. You can use this to avoid data corruption from bad downloads or users tampering with the cached files on disk. If the CRC does not match, Unity will try to redownload the data, and if the CRC on the server does not match it will fail with an error. Look at the error string returned to see the correct CRC value to use for an AssetBundle.
            * @returns A WWW instance, which can be used to access the data once the load/download operation is completed. 
            */
            public static LoadFromCacheOrDownload ($url: string, $version: number) : UnityEngine.WWW
            /** Loads an AssetBundle with the specified version number from the cache. If the AssetBundle is not currently cached, it will automatically be downloaded and stored in the cache for future retrieval from local storage.
            * @param url The URL to download the AssetBundle from, if it is not present in the cache. Must be '%' escaped.
            * @param version Version of the AssetBundle. The file will only be loaded from the disk cache if it has previously been downloaded with the same version parameter. By incrementing the version number requested by your application, you can force Caching to download a new copy of the AssetBundle from url.
            * @param hash Hash128 which is used as the version of the AssetBundle.
            * @param cachedBundle A structure used to download a given version of AssetBundle to a customized cache path.
            Analogous to the cachedAssetBundle parameter for UnityWebRequestAssetBundle.GetAssetBundle.</param>
            * @param crc An optional CRC-32 Checksum of the uncompressed contents. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match. You can use this to avoid data corruption from bad downloads or users tampering with the cached files on disk. If the CRC does not match, Unity will try to redownload the data, and if the CRC on the server does not match it will fail with an error. Look at the error string returned to see the correct CRC value to use for an AssetBundle.
            * @returns A WWW instance, which can be used to access the data once the load/download operation is completed. 
            */
            public static LoadFromCacheOrDownload ($url: string, $version: number, $crc: number) : UnityEngine.WWW
            public static LoadFromCacheOrDownload ($url: string, $hash: UnityEngine.Hash128) : UnityEngine.WWW
            /** Loads an AssetBundle with the specified version number from the cache. If the AssetBundle is not currently cached, it will automatically be downloaded and stored in the cache for future retrieval from local storage.
            * @param url The URL to download the AssetBundle from, if it is not present in the cache. Must be '%' escaped.
            * @param version Version of the AssetBundle. The file will only be loaded from the disk cache if it has previously been downloaded with the same version parameter. By incrementing the version number requested by your application, you can force Caching to download a new copy of the AssetBundle from url.
            * @param hash Hash128 which is used as the version of the AssetBundle.
            * @param cachedBundle A structure used to download a given version of AssetBundle to a customized cache path.
            Analogous to the cachedAssetBundle parameter for UnityWebRequestAssetBundle.GetAssetBundle.</param>
            * @param crc An optional CRC-32 Checksum of the uncompressed contents. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match. You can use this to avoid data corruption from bad downloads or users tampering with the cached files on disk. If the CRC does not match, Unity will try to redownload the data, and if the CRC on the server does not match it will fail with an error. Look at the error string returned to see the correct CRC value to use for an AssetBundle.
            * @returns A WWW instance, which can be used to access the data once the load/download operation is completed. 
            */
            public static LoadFromCacheOrDownload ($url: string, $hash: UnityEngine.Hash128, $crc: number) : UnityEngine.WWW
            /** Loads an AssetBundle with the specified version number from the cache. If the AssetBundle is not currently cached, it will automatically be downloaded and stored in the cache for future retrieval from local storage.
            * @param url The URL to download the AssetBundle from, if it is not present in the cache. Must be '%' escaped.
            * @param version Version of the AssetBundle. The file will only be loaded from the disk cache if it has previously been downloaded with the same version parameter. By incrementing the version number requested by your application, you can force Caching to download a new copy of the AssetBundle from url.
            * @param hash Hash128 which is used as the version of the AssetBundle.
            * @param cachedBundle A structure used to download a given version of AssetBundle to a customized cache path.
            Analogous to the cachedAssetBundle parameter for UnityWebRequestAssetBundle.GetAssetBundle.</param>
            * @param crc An optional CRC-32 Checksum of the uncompressed contents. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match. You can use this to avoid data corruption from bad downloads or users tampering with the cached files on disk. If the CRC does not match, Unity will try to redownload the data, and if the CRC on the server does not match it will fail with an error. Look at the error string returned to see the correct CRC value to use for an AssetBundle.
            * @returns A WWW instance, which can be used to access the data once the load/download operation is completed. 
            */
            public static LoadFromCacheOrDownload ($url: string, $cachedBundle: UnityEngine.CachedAssetBundle, $crc?: number) : UnityEngine.WWW
            /** Replaces the contents of an existing Texture2D with an image from the downloaded data.
            * @param tex An existing texture object to be overwritten with the image data.
            */
            public LoadImageIntoTexture ($texture: UnityEngine.Texture2D) : void
            public Dispose () : void
            public GetAudioClip () : UnityEngine.AudioClip
            /** Returns an AudioClip generated from the downloaded data (Read Only).
            * @param threeD Use this to specify whether the clip should be a 2D or 3D clip
            the .audioClip property defaults to 3D.
            * @param stream Sets whether the clip should be completely downloaded before it's ready to play (false) or the stream can be played even if only part of the clip is downloaded (true).
            The latter will disable seeking on the clip (with .time and/or .timeSamples).
            * @param audioType The AudioType of the content you are downloading. If this is not set Unity will try to determine the type from URL.
            * @returns The returned AudioClip. 
            */
            public GetAudioClip ($threeD: boolean) : UnityEngine.AudioClip
            /** Returns an AudioClip generated from the downloaded data (Read Only).
            * @param threeD Use this to specify whether the clip should be a 2D or 3D clip
            the .audioClip property defaults to 3D.
            * @param stream Sets whether the clip should be completely downloaded before it's ready to play (false) or the stream can be played even if only part of the clip is downloaded (true).
            The latter will disable seeking on the clip (with .time and/or .timeSamples).
            * @param audioType The AudioType of the content you are downloading. If this is not set Unity will try to determine the type from URL.
            * @returns The returned AudioClip. 
            */
            public GetAudioClip ($threeD: boolean, $stream: boolean) : UnityEngine.AudioClip
            /** Returns an AudioClip generated from the downloaded data (Read Only).
            * @param threeD Use this to specify whether the clip should be a 2D or 3D clip
            the .audioClip property defaults to 3D.
            * @param stream Sets whether the clip should be completely downloaded before it's ready to play (false) or the stream can be played even if only part of the clip is downloaded (true).
            The latter will disable seeking on the clip (with .time and/or .timeSamples).
            * @param audioType The AudioType of the content you are downloading. If this is not set Unity will try to determine the type from URL.
            * @returns The returned AudioClip. 
            */
            public GetAudioClip ($threeD: boolean, $stream: boolean, $audioType: UnityEngine.AudioType) : UnityEngine.AudioClip
            public GetAudioClipCompressed () : UnityEngine.AudioClip
            /** Returns an AudioClip generated from the downloaded data that is compressed in memory (Read Only).
            * @param threeD Use this to specify whether the clip should be a 2D or 3D clip.
            * @param audioType The AudioType of the content your downloading. If this is not set Unity will try to determine the type from URL.
            * @returns The returned AudioClip. 
            */
            public GetAudioClipCompressed ($threeD: boolean) : UnityEngine.AudioClip
            /** Returns an AudioClip generated from the downloaded data that is compressed in memory (Read Only).
            * @param threeD Use this to specify whether the clip should be a 2D or 3D clip.
            * @param audioType The AudioType of the content your downloading. If this is not set Unity will try to determine the type from URL.
            * @returns The returned AudioClip. 
            */
            public GetAudioClipCompressed ($threeD: boolean, $audioType: UnityEngine.AudioType) : UnityEngine.AudioClip
            public constructor ($url: string)
            public constructor ($url: string, $form: UnityEngine.WWWForm)
            public constructor ($url: string, $postData: System.Array$1<number>)
            public constructor ($url: string, $postData: System.Array$1<number>, $headers: System.Collections.Generic.Dictionary$2<string, string>)
            public constructor ()
        }
        class WWWAudioExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Contact information for the wheel, reported by WheelCollider.
        */
        class WheelHit extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The other Collider the wheel is hitting.
            */
            public get collider(): UnityEngine.Collider;
            public set collider(value: UnityEngine.Collider);
            /** The point of contact between the wheel and the ground.
            */
            public get point(): UnityEngine.Vector3;
            public set point(value: UnityEngine.Vector3);
            /** The normal at the point of contact.
            */
            public get normal(): UnityEngine.Vector3;
            public set normal(value: UnityEngine.Vector3);
            /** The direction the wheel is pointing in.
            */
            public get forwardDir(): UnityEngine.Vector3;
            public set forwardDir(value: UnityEngine.Vector3);
            /** The sideways direction of the wheel.
            */
            public get sidewaysDir(): UnityEngine.Vector3;
            public set sidewaysDir(value: UnityEngine.Vector3);
            /** The magnitude of the force being applied for the contact.
            */
            public get force(): number;
            public set force(value: number);
            /** Tire slip in the rolling direction. Acceleration slip is negative, braking slip is positive.
            */
            public get forwardSlip(): number;
            public set forwardSlip(value: number);
            /** Tire slip in the sideways direction.
            */
            public get sidewaysSlip(): number;
            public set sidewaysSlip(value: number);
        }
        /** A special collider for vehicle wheels.
        */
        class WheelCollider extends UnityEngine.Collider
        {
            protected [__keep_incompatibility]: never;
            /** The center of the wheel, measured in the object's local space.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The radius of the wheel, measured in local space.
            */
            public get radius(): number;
            public set radius(value: number);
            /** Maximum extension distance of wheel suspension, measured in local space.
            */
            public get suspensionDistance(): number;
            public set suspensionDistance(value: number);
            /** The parameters of wheel's suspension. The suspension attempts to reach a target position by applying a linear force and a damping force.
            */
            public get suspensionSpring(): UnityEngine.JointSpring;
            public set suspensionSpring(value: UnityEngine.JointSpring);
            /** Application point of the suspension and tire forces measured from the base of the resting wheel.
            */
            public get forceAppPointDistance(): number;
            public set forceAppPointDistance(value: number);
            /** The mass of the wheel, expressed in kilograms. Must be larger than zero. Typical values would be in range (20,80).
            */
            public get mass(): number;
            public set mass(value: number);
            /** The damping rate of the wheel. Must be larger than zero.
            */
            public get wheelDampingRate(): number;
            public set wheelDampingRate(value: number);
            /** Properties of tire friction in the direction the wheel is pointing in.
            */
            public get forwardFriction(): UnityEngine.WheelFrictionCurve;
            public set forwardFriction(value: UnityEngine.WheelFrictionCurve);
            /** Properties of tire friction in the sideways direction.
            */
            public get sidewaysFriction(): UnityEngine.WheelFrictionCurve;
            public set sidewaysFriction(value: UnityEngine.WheelFrictionCurve);
            /** Motor torque on the wheel axle expressed in Newton metres. Positive or negative depending on direction.
            */
            public get motorTorque(): number;
            public set motorTorque(value: number);
            /** Brake torque expressed in Newton metres.
            */
            public get brakeTorque(): number;
            public set brakeTorque(value: number);
            /** Steering angle in degrees, always around the local y-axis.
            */
            public get steerAngle(): number;
            public set steerAngle(value: number);
            /** Indicates whether the wheel currently collides with something (Read Only).
            */
            public get isGrounded(): boolean;
            /** Current wheel axle rotation speed, in rotations per minute (Read Only).
            */
            public get rpm(): number;
            /** The mass supported by this WheelCollider.
            */
            public get sprungMass(): number;
            /** Configure vehicle sub-stepping parameters.
            * @param speedThreshold The speed threshold of the sub-stepping algorithm.
            * @param stepsBelowThreshold Amount of simulation sub-steps when vehicle's speed is below speedThreshold.
            * @param stepsAboveThreshold Amount of simulation sub-steps when vehicle's speed is above speedThreshold.
            */
            public ConfigureVehicleSubsteps ($speedThreshold: number, $stepsBelowThreshold: number, $stepsAboveThreshold: number) : void
            /** Gets the world space pose of the wheel accounting for ground contact, suspension limits, steer angle, and rotation angle (angles in degrees).
            * @param pos Position of the wheel in world space.
            * @param quat Rotation of the wheel in world space.
            */
            public GetWorldPose ($pos: $Ref<UnityEngine.Vector3>, $quat: $Ref<UnityEngine.Quaternion>) : void
            /** Gets ground collision data for the wheel.
            */
            public GetGroundHit ($hit: $Ref<UnityEngine.WheelHit>) : boolean
            public constructor ()
        }
        /** Modes a Wind Zone can have, either Spherical or Directional.
        */
        enum WindZoneMode
        { Directional = 0, Spherical = 1 }
        /** Wind Zones add realism to the trees you create by making them wave their branches and leaves as if blown by the wind.
        */
        class WindZone extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Defines the type of wind zone to be used (Spherical or Directional).
            */
            public get mode(): UnityEngine.WindZoneMode;
            public set mode(value: UnityEngine.WindZoneMode);
            /** Radius of the Spherical Wind Zone (only active if the WindZoneMode is set to Spherical).
            */
            public get radius(): number;
            public set radius(value: number);
            /** The primary wind force.
            */
            public get windMain(): number;
            public set windMain(value: number);
            /** The turbulence wind force.
            */
            public get windTurbulence(): number;
            public set windTurbulence(value: number);
            /** Defines how much the wind changes over time.
            */
            public get windPulseMagnitude(): number;
            public set windPulseMagnitude(value: number);
            /** Defines the frequency of the wind changes.
            */
            public get windPulseFrequency(): number;
            public set windPulseFrequency(value: number);
            public constructor ()
        }
        class LazyLoadReference$1<T> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.Playables {
        /** Use the PlayableGraph to manage Playable creations and destructions.
        */
        class PlayableGraph extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        interface IPlayable
        {
        }
    }
    namespace UnityEngine.Animations {
        /** An implementation of IPlayable that controls an animation RuntimeAnimatorController.
        */
        class AnimatorControllerPlayable extends System.ValueType implements UnityEngine.Playables.IPlayable, System.IEquatable$1<UnityEngine.Animations.AnimatorControllerPlayable>
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.AudioSettings {
        interface AudioConfigurationChangeHandler
        { 
        (deviceWasChanged: boolean) : void; 
        Invoke?: (deviceWasChanged: boolean) => void;
        }
        var AudioConfigurationChangeHandler: { new (func: (deviceWasChanged: boolean) => void): AudioConfigurationChangeHandler; }
    }
    namespace UnityEngine.Audio {
        /** Object representing a group in the mixer.
        */
        class AudioMixerGroup extends UnityEngine.Object implements UnityEngine.Internal.ISubAssetNotDuplicatable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.Internal {
        interface ISubAssetNotDuplicatable
        {
        }
    }
    namespace UnityEngine.AudioClip {
        interface PCMReaderCallback
        { 
        (data: System.Array$1<number>) : void; 
        Invoke?: (data: System.Array$1<number>) => void;
        }
        var PCMReaderCallback: { new (func: (data: System.Array$1<number>) => void): PCMReaderCallback; }
        interface PCMSetPositionCallback
        { 
        (position: number) : void; 
        Invoke?: (position: number) => void;
        }
        var PCMSetPositionCallback: { new (func: (position: number) => void): PCMSetPositionCallback; }
    }
    namespace Unity.Collections {
        class NativeArray$1<T> extends System.ValueType implements System.Collections.IEnumerable, System.IDisposable, System.IEquatable$1<Unity.Collections.NativeArray$1<T>>, System.Collections.Generic.IEnumerable$1<T>
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
            public GetEnumerator () : System.Collections.Generic.IEnumerator$1<T>
        }
    }
    namespace UnityEngine.Application {
        interface AdvertisingIdentifierCallback
        { 
        (advertisingId: string, trackingEnabled: boolean, errorMsg: string) : void; 
        Invoke?: (advertisingId: string, trackingEnabled: boolean, errorMsg: string) => void;
        }
        var AdvertisingIdentifierCallback: { new (func: (advertisingId: string, trackingEnabled: boolean, errorMsg: string) => void): AdvertisingIdentifierCallback; }
        interface LowMemoryCallback
        { 
        () : void; 
        Invoke?: () => void;
        }
        var LowMemoryCallback: { new (func: () => void): LowMemoryCallback; }
        interface LogCallback
        { 
        (condition: string, stackTrace: string, type: UnityEngine.LogType) : void; 
        Invoke?: (condition: string, stackTrace: string, type: UnityEngine.LogType) => void;
        }
        var LogCallback: { new (func: (condition: string, stackTrace: string, type: UnityEngine.LogType) => void): LogCallback; }
    }
    namespace UnityEngine.Events {
        /** Zero argument delegate used by UnityEvents.
        */
        interface UnityAction
        { 
        () : void; 
        Invoke?: () => void;
        }
        var UnityAction: { new (func: () => void): UnityAction; }
        interface UnityAction$2<T0, T1>
        { 
        (arg0: T0, arg1: T1) : void; 
        Invoke?: (arg0: T0, arg1: T1) => void;
        }
        interface UnityAction$1<T0>
        { 
        (arg0: T0) : void; 
        Invoke?: (arg0: T0) => void;
        }
    }
    namespace UnityEngine.Camera {
        interface CameraCallback
        { 
        (cam: UnityEngine.Camera) : void; 
        Invoke?: (cam: UnityEngine.Camera) => void;
        }
        var CameraCallback: { new (func: (cam: UnityEngine.Camera) => void): CameraCallback; }
        enum GateFitMode
        { Vertical = 1, Horizontal = 2, Fill = 3, Overscan = 4, None = 0 }
        enum MonoOrStereoscopicEye
        { Left = 0, Right = 1, Mono = 2 }
        class GateFitParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        enum StereoscopicEye
        { Left = 0, Right = 1 }
    }
    namespace UnityEngine.Rendering {
        /** Opaque object sorting mode of a Camera.
        */
        enum OpaqueSortMode
        { Default = 0, FrontToBack = 1, NoDistanceSort = 2 }
        /** Defines a place in camera's rendering to attach Rendering.CommandBuffer objects to.
        */
        enum CameraEvent
        { BeforeDepthTexture = 0, AfterDepthTexture = 1, BeforeDepthNormalsTexture = 2, AfterDepthNormalsTexture = 3, BeforeGBuffer = 4, AfterGBuffer = 5, BeforeLighting = 6, AfterLighting = 7, BeforeFinalPass = 8, AfterFinalPass = 9, BeforeForwardOpaque = 10, AfterForwardOpaque = 11, BeforeImageEffectsOpaque = 12, AfterImageEffectsOpaque = 13, BeforeSkybox = 14, AfterSkybox = 15, BeforeForwardAlpha = 16, AfterForwardAlpha = 17, BeforeImageEffects = 18, AfterImageEffects = 19, AfterEverything = 20, BeforeReflections = 21, AfterReflections = 22, BeforeHaloAndLensFlares = 23, AfterHaloAndLensFlares = 24 }
        /** List of graphics commands to execute.
        */
        class CommandBuffer extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
        }
        /** Describes the desired characteristics with respect to prioritisation and load balancing of the queue that a command buffer being submitted via Graphics.ExecuteCommandBufferAsync or [[ScriptableRenderContext.ExecuteCommandBufferAsync] should be sent to.
        */
        enum ComputeQueueType
        { Default = 0, Background = 1, Urgent = 2 }
        /** Parameters controlling culling process in CullingResults.
        */
        class ScriptableCullingParameters extends System.ValueType implements System.IEquatable$1<UnityEngine.Rendering.ScriptableCullingParameters>
        {
            protected [__keep_incompatibility]: never;
        }
        enum ReflectionProbeType
        { Cube = 0, Card = 1 }
        /** Values for ReflectionProbe.clearFlags, determining what to clear when rendering a ReflectionProbe.
        */
        enum ReflectionProbeClearFlags
        { Skybox = 1, SolidColor = 2 }
        /** Reflection probe's update mode.
        */
        enum ReflectionProbeMode
        { Baked = 0, Realtime = 1, Custom = 2 }
        /** An enum describing the way a realtime reflection probe refreshes in the Player.
        */
        enum ReflectionProbeRefreshMode
        { OnAwake = 0, EveryFrame = 1, ViaScripting = 2 }
        /** When a probe's ReflectionProbe.refreshMode is set to ReflectionProbeRefreshMode.EveryFrame, this enum specify whether or not Unity should update the probe's cubemap over several frames or update the whole cubemap in one frame.
        Updating a probe's cubemap is a costly operation. Unity needs to render the entire Scene for each face of the cubemap, as well as perform special blurring in order to get glossy reflections. The impact on frame rate can be significant. Time-slicing helps maintaning a more constant frame rate during these updates by performing the rendering over several frames.
        */
        enum ReflectionProbeTimeSlicingMode
        { AllFacesAtOnce = 0, IndividualFaces = 1, NoTimeSlicing = 2 }
        /** Graphics Tier.
        See Also: Graphics.activeTier.
        */
        enum GraphicsTier
        { Tier1 = 0, Tier2 = 1, Tier3 = 2 }
        /** Used to manage synchronisation between tasks on async compute queues and the graphics queue.
        */
        class GraphicsFence extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** Broadly describes the stages of processing a draw call on the GPU.
        */
        enum SynchronisationStage
        { VertexProcessing = 0, PixelProcessing = 1 }
        /** The type of the GraphicsFence. Currently the only supported fence type is AsyncQueueSynchronization.
        */
        enum GraphicsFenceType
        { AsyncQueueSynchronisation = 0, CPUSynchronisation = 1 }
        /** Describes the various stages of GPU processing against which the GraphicsFence can be set and waited against.
        */
        enum SynchronisationStageFlags
        { VertexProcessing = 1, PixelProcessing = 2, ComputeProcessing = 4, AllGPUOperations = 7 }
        /** How shadows are cast from this object.
        */
        enum ShadowCastingMode
        { Off = 0, On = 1, TwoSided = 2, ShadowsOnly = 3 }
        /** Light probe interpolation type.
        */
        enum LightProbeUsage
        { Off = 0, BlendProbes = 1, UseProxyVolume = 2, CustomProvided = 4 }
        /** This functionality is deprecated, and should no longer be used. Please use GraphicsFence.
        */
        class GPUFence extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** Spherical harmonics up to the second order (3 bands, 9 coefficients).
        */
        class SphericalHarmonicsL2 extends System.ValueType implements System.IEquatable$1<UnityEngine.Rendering.SphericalHarmonicsL2>
        {
            protected [__keep_incompatibility]: never;
        }
        /** This enum describes what should be done on the render target when it is activated (loaded).
        */
        enum RenderBufferLoadAction
        { Load = 0, Clear = 1, DontCare = 2 }
        /** This enum describes what should be done on the render target when the GPU is done rendering into it.
        */
        enum RenderBufferStoreAction
        { Store = 0, Resolve = 1, StoreAndResolve = 2, DontCare = 3 }
        /** An asset that produces a specific IRenderPipeline.
        */
        class RenderPipelineAsset extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
        }
        /** Format of the mesh index buffer data.
        */
        enum IndexFormat
        { UInt16 = 0, UInt32 = 1 }
        /** Information about a single VertexAttribute of a Mesh vertex.
        */
        class VertexAttributeDescriptor extends System.ValueType implements System.IEquatable$1<UnityEngine.Rendering.VertexAttributeDescriptor>
        {
            protected [__keep_incompatibility]: never;
        }
        /** Possible attribute types that describe a vertex in a Mesh.
        */
        enum VertexAttribute
        { Position = 0, Normal = 1, Tangent = 2, Color = 3, TexCoord0 = 4, TexCoord1 = 5, TexCoord2 = 6, TexCoord3 = 7, TexCoord4 = 8, TexCoord5 = 9, TexCoord6 = 10, TexCoord7 = 11, BlendWeight = 12, BlendIndices = 13 }
        /** Data type of a VertexAttribute.
        */
        enum VertexAttributeFormat
        { Float32 = 0, Float16 = 1, UNorm8 = 2, SNorm8 = 3, UNorm16 = 4, SNorm16 = 5, UInt8 = 6, SInt8 = 7, UInt16 = 8, SInt16 = 9, UInt32 = 10, SInt32 = 11 }
        /** Contains information about a single sub-mesh of a Mesh.
        */
        class SubMeshDescriptor extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** Mesh data update flags.
        */
        enum MeshUpdateFlags
        { Default = 0, DontValidateIndices = 1, DontResetBoneBounds = 2, DontNotifyMeshUsers = 4, DontRecalculateBounds = 8 }
        /** Reflection Probe usage.
        */
        enum ReflectionProbeUsage
        { Off = 0, BlendProbes = 1, BlendProbesAndSkybox = 2, Simple = 3 }
        /** ReflectionProbeBlendInfo contains information required for blending probes.
        */
        class ReflectionProbeBlendInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        enum ShaderHardwareTier
        { Tier1 = 0, Tier2 = 1, Tier3 = 2 }
        /** Shader tag ids are used to refer to various names in shaders.
        */
        class ShaderTagId extends System.ValueType implements System.IEquatable$1<UnityEngine.Rendering.ShaderTagId>
        {
            protected [__keep_incompatibility]: never;
        }
        /** Types of data that can be encapsulated within a render texture.
        */
        enum RenderTextureSubElement
        { Color = 0, Depth = 1, Stencil = 2, Default = 3 }
        /** Type of a given shader property.
        */
        enum ShaderPropertyType
        { Color = 0, Vector = 1, Float = 2, Range = 3, Texture = 4 }
        /** Flags that control how a shader property behaves.
        */
        enum ShaderPropertyFlags
        { None = 0, HideInInspector = 1, PerRendererData = 2, NoScaleOffset = 4, Normal = 8, HDR = 16, Gamma = 32, NonModifiableTextureData = 64, MainTexture = 128, MainColor = 256 }
        /** Texture "dimension" (type).
        */
        enum TextureDimension
        { Unknown = -1, None = 0, Any = 1, Tex2D = 2, Tex3D = 3, Cube = 4, Tex2DArray = 5, CubeArray = 6 }
        /** Ambient lighting mode.
        */
        enum AmbientMode
        { Skybox = 0, Trilight = 1, Flat = 3, Custom = 4 }
        /** Default reflection mode.
        */
        enum DefaultReflectionMode
        { Skybox = 0, Custom = 1 }
        /** Shadow resolution options for a Light.
        */
        enum LightShadowResolution
        { FromQualitySettings = -1, Low = 0, Medium = 1, High = 2, VeryHigh = 3 }
        /** Defines a place in light's rendering to attach Rendering.CommandBuffer objects to.
        */
        enum LightEvent
        { BeforeShadowMap = 0, AfterShadowMap = 1, BeforeScreenspaceMask = 2, AfterScreenspaceMask = 3, BeforeShadowMapPass = 4, AfterShadowMapPass = 5 }
        /** Allows precise control over which shadow map passes to execute Rendering.CommandBuffer objects attached using Light.AddCommandBuffer.
        */
        enum ShadowMapPass
        { PointlightPositiveX = 1, PointlightNegativeX = 2, PointlightPositiveY = 4, PointlightNegativeY = 8, PointlightPositiveZ = 16, PointlightNegativeZ = 32, DirectionalCascade0 = 64, DirectionalCascade1 = 128, DirectionalCascade2 = 256, DirectionalCascade3 = 512, Spotlight = 1024, Pointlight = 63, Directional = 960, All = 2047 }
        /** Used by CommandBuffer.SetShadowSamplingMode.
        */
        enum ShadowSamplingMode
        { CompareDepths = 0, RawDepth = 1, None = 2 }
        /** Graphics device API type.
        */
        enum GraphicsDeviceType
        { OpenGL2 = 0, Direct3D9 = 1, Direct3D11 = 2, PlayStation3 = 3, Null = 4, Xbox360 = 6, OpenGLES2 = 8, OpenGLES3 = 11, PlayStationVita = 12, PlayStation4 = 13, XboxOne = 14, PlayStationMobile = 15, Metal = 16, OpenGLCore = 17, Direct3D12 = 18, N3DS = 19, Vulkan = 21, Switch = 22, XboxOneD3D12 = 23 }
        /** Options for the application's actual rendering threading mode.
        */
        enum RenderingThreadingMode
        { Direct = 0, SingleThreaded = 1, MultiThreaded = 2, LegacyJobified = 3, NativeGraphicsJobs = 4, NativeGraphicsJobsWithoutRenderThread = 5 }
        /** Support for various Graphics.CopyTexture cases.
        */
        enum CopyTextureSupport
        { None = 0, Basic = 1, Copy3D = 2, DifferentTypes = 4, TextureToRT = 8, RTToTexture = 16 }
        /** Specifies which color components will get written into the target framebuffer.
        */
        enum ColorWriteMask
        { Alpha = 1, Blue = 2, Green = 4, Red = 8, All = 15 }
        /** Depth or stencil comparison function.
        */
        enum CompareFunction
        { Disabled = 0, Never = 1, Less = 2, Equal = 3, LessEqual = 4, Greater = 5, NotEqual = 6, GreaterEqual = 7, Always = 8 }
        /** Determines how Unity will compress baked reflection cubemap.
        */
        enum ReflectionCubemapCompression
        { Uncompressed = 0, Compressed = 1, Auto = 2 }
    }
    namespace UnityEngine.SceneManagement {
        /** Run-time data structure for *.unity file.
        */
        class Scene extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get handle(): number;
            /** Returns the relative path of the Scene. Like: "AssetsMyScenesMyScene.unity".
            */
            public get path(): string;
            /** Returns the name of the Scene that is currently active in the game or app.
            */
            public get name(): string;
            public set name(value: string);
            /** Returns true if the Scene is loaded.
            */
            public get isLoaded(): boolean;
            /** Return the index of the Scene in the Build Settings.
            */
            public get buildIndex(): number;
            /** Returns true if the Scene is modifed.
            */
            public get isDirty(): boolean;
            /** The number of root transforms of this Scene.
            */
            public get rootCount(): number;
            public get isSubScene(): boolean;
            public set isSubScene(value: boolean);
            public IsValid () : boolean
            public GetRootGameObjects () : System.Array$1<UnityEngine.GameObject>
            public GetRootGameObjects ($rootGameObjects: System.Collections.Generic.List$1<UnityEngine.GameObject>) : void
            public static op_Equality ($lhs: UnityEngine.SceneManagement.Scene, $rhs: UnityEngine.SceneManagement.Scene) : boolean
            public static op_Inequality ($lhs: UnityEngine.SceneManagement.Scene, $rhs: UnityEngine.SceneManagement.Scene) : boolean
        }
        /** Run-time data structure for *.unity file.
        */
        interface Scene {
            /** An extension method that returns the 3D physics Scene from the Scene.
            * @param scene The Scene from which to return the 3D physics Scene.
            * @returns The 3D physics Scene used by the Scene. 
            */
            GetPhysicsScene () : UnityEngine.PhysicsScene;
            /** An extension method that returns the 2D physics Scene from the Scene.
            * @param scene The Scene from which to return the 2D physics Scene.
            * @returns The 2D physics Scene used by the Scene. 
            */
            GetPhysicsScene2D () : UnityEngine.PhysicsScene2D;
        }
        /** Scene management at run-time.
        */
        class SceneManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The total number of currently loaded Scenes.
            */
            public static get sceneCount(): number;
            /** Number of Scenes in Build Settings.
            */
            public static get sceneCountInBuildSettings(): number;
            public static GetActiveScene () : UnityEngine.SceneManagement.Scene
            /** Set the Scene to be active.
            * @param scene The Scene to be set.
            * @returns Returns false if the Scene is not loaded yet. 
            */
            public static SetActiveScene ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Searches all Scenes loaded for a Scene that has the given asset path.
            * @param scenePath Path of the Scene. Should be relative to the project folder. Like: "AssetsMyScenesMyScene.unity".
            * @returns A reference to the Scene, if valid. If not, an invalid Scene is returned. 
            */
            public static GetSceneByPath ($scenePath: string) : UnityEngine.SceneManagement.Scene
            /** Searches through the Scenes loaded for a Scene with the given name.
            * @param name Name of Scene to find.
            * @returns A reference to the Scene, if valid. If not, an invalid Scene is returned. 
            */
            public static GetSceneByName ($name: string) : UnityEngine.SceneManagement.Scene
            /** Get a Scene struct from a build index.
            * @param buildIndex Build index as shown in the Build Settings window.
            * @returns A reference to the Scene, if valid. If not, an invalid Scene is returned. 
            */
            public static GetSceneByBuildIndex ($buildIndex: number) : UnityEngine.SceneManagement.Scene
            /** Get the Scene at index in the SceneManager's list of loaded Scenes.
            * @param index Index of the Scene to get. Index must be greater than or equal to 0 and less than SceneManager.sceneCount.
            * @returns A reference to the Scene at the index specified. 
            */
            public static GetSceneAt ($index: number) : UnityEngine.SceneManagement.Scene
            /** Create an empty new Scene at runtime with the given name.
            * @param sceneName The name of the new Scene. It cannot be empty or null, or same as the name of the existing Scenes.
            * @param parameters Various parameters used to create the Scene.
            * @returns A reference to the new Scene that was created, or an invalid Scene if creation failed. 
            */
            public static CreateScene ($sceneName: string, $parameters: UnityEngine.SceneManagement.CreateSceneParameters) : UnityEngine.SceneManagement.Scene
            /** This will merge the source Scene into the destinationScene.
            * @param sourceScene The Scene that will be merged into the destination Scene.
            * @param destinationScene Existing Scene to merge the source Scene into.
            */
            public static MergeScenes ($sourceScene: UnityEngine.SceneManagement.Scene, $destinationScene: UnityEngine.SceneManagement.Scene) : void
            /** Move a GameObject from its current Scene to a new Scene.
            * @param go GameObject to move.
            * @param scene Scene to move into.
            */
            public static MoveGameObjectToScene ($go: UnityEngine.GameObject, $scene: UnityEngine.SceneManagement.Scene) : void
            public static add_sceneLoaded ($value: UnityEngine.Events.UnityAction$2<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.LoadSceneMode>) : void
            public static remove_sceneLoaded ($value: UnityEngine.Events.UnityAction$2<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.LoadSceneMode>) : void
            public static add_sceneUnloaded ($value: UnityEngine.Events.UnityAction$1<UnityEngine.SceneManagement.Scene>) : void
            public static remove_sceneUnloaded ($value: UnityEngine.Events.UnityAction$1<UnityEngine.SceneManagement.Scene>) : void
            public static add_activeSceneChanged ($value: UnityEngine.Events.UnityAction$2<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.Scene>) : void
            public static remove_activeSceneChanged ($value: UnityEngine.Events.UnityAction$2<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.Scene>) : void
            /** Create an empty new Scene at runtime with the given name.
            * @param sceneName The name of the new Scene. It cannot be empty or null, or same as the name of the existing Scenes.
            * @param parameters Various parameters used to create the Scene.
            * @returns A reference to the new Scene that was created, or an invalid Scene if creation failed. 
            */
            public static CreateScene ($sceneName: string) : UnityEngine.SceneManagement.Scene
            /** Loads the Scene by its name or index in Build Settings.
            * @param sceneName Name or path of the Scene to load.
            * @param sceneBuildIndex Index of the Scene in the Build Settings to load.
            * @param mode Allows you to specify whether or not to load the Scene additively. See SceneManagement.LoadSceneMode for more information about the options.
            */
            public static LoadScene ($sceneName: string, $mode: UnityEngine.SceneManagement.LoadSceneMode) : void
            public static LoadScene ($sceneName: string) : void
            /** Loads the Scene by its name or index in Build Settings.
            * @param sceneName Name or path of the Scene to load.
            * @param sceneBuildIndex Index of the Scene in the Build Settings to load.
            * @param parameters Various parameters used to load the Scene.
            * @returns A handle to the Scene being loaded. 
            */
            public static LoadScene ($sceneName: string, $parameters: UnityEngine.SceneManagement.LoadSceneParameters) : UnityEngine.SceneManagement.Scene
            /** Loads the Scene by its name or index in Build Settings.
            * @param sceneName Name or path of the Scene to load.
            * @param sceneBuildIndex Index of the Scene in the Build Settings to load.
            * @param mode Allows you to specify whether or not to load the Scene additively. See SceneManagement.LoadSceneMode for more information about the options.
            */
            public static LoadScene ($sceneBuildIndex: number, $mode: UnityEngine.SceneManagement.LoadSceneMode) : void
            public static LoadScene ($sceneBuildIndex: number) : void
            /** Loads the Scene by its name or index in Build Settings.
            * @param sceneName Name or path of the Scene to load.
            * @param sceneBuildIndex Index of the Scene in the Build Settings to load.
            * @param parameters Various parameters used to load the Scene.
            * @returns A handle to the Scene being loaded. 
            */
            public static LoadScene ($sceneBuildIndex: number, $parameters: UnityEngine.SceneManagement.LoadSceneParameters) : UnityEngine.SceneManagement.Scene
            /** Loads the Scene asynchronously in the background.
            * @param sceneName Name or path of the Scene to load.
            * @param sceneBuildIndex Index of the Scene in the Build Settings to load.
            * @param mode If LoadSceneMode.Single then all current Scenes will be unloaded before loading.
            * @param parameters Struct that collects the various parameters into a single place except for the name and index.
            * @returns Use the AsyncOperation to determine if the operation has completed. 
            */
            public static LoadSceneAsync ($sceneBuildIndex: number, $mode: UnityEngine.SceneManagement.LoadSceneMode) : UnityEngine.AsyncOperation
            public static LoadSceneAsync ($sceneBuildIndex: number) : UnityEngine.AsyncOperation
            /** Loads the Scene asynchronously in the background.
            * @param sceneName Name or path of the Scene to load.
            * @param sceneBuildIndex Index of the Scene in the Build Settings to load.
            * @param mode If LoadSceneMode.Single then all current Scenes will be unloaded before loading.
            * @param parameters Struct that collects the various parameters into a single place except for the name and index.
            * @returns Use the AsyncOperation to determine if the operation has completed. 
            */
            public static LoadSceneAsync ($sceneBuildIndex: number, $parameters: UnityEngine.SceneManagement.LoadSceneParameters) : UnityEngine.AsyncOperation
            /** Loads the Scene asynchronously in the background.
            * @param sceneName Name or path of the Scene to load.
            * @param sceneBuildIndex Index of the Scene in the Build Settings to load.
            * @param mode If LoadSceneMode.Single then all current Scenes will be unloaded before loading.
            * @param parameters Struct that collects the various parameters into a single place except for the name and index.
            * @returns Use the AsyncOperation to determine if the operation has completed. 
            */
            public static LoadSceneAsync ($sceneName: string, $mode: UnityEngine.SceneManagement.LoadSceneMode) : UnityEngine.AsyncOperation
            public static LoadSceneAsync ($sceneName: string) : UnityEngine.AsyncOperation
            /** Loads the Scene asynchronously in the background.
            * @param sceneName Name or path of the Scene to load.
            * @param sceneBuildIndex Index of the Scene in the Build Settings to load.
            * @param mode If LoadSceneMode.Single then all current Scenes will be unloaded before loading.
            * @param parameters Struct that collects the various parameters into a single place except for the name and index.
            * @returns Use the AsyncOperation to determine if the operation has completed. 
            */
            public static LoadSceneAsync ($sceneName: string, $parameters: UnityEngine.SceneManagement.LoadSceneParameters) : UnityEngine.AsyncOperation
            /** Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.
            * @param sceneBuildIndex Index of the Scene in BuildSettings.
            * @param sceneName Name or path of the Scene to unload.
            * @param scene Scene to unload.
            * @param options Scene unloading options.
            * @returns Use the AsyncOperation to determine if the operation has completed. 
            */
            public static UnloadSceneAsync ($sceneBuildIndex: number) : UnityEngine.AsyncOperation
            /** Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.
            * @param sceneBuildIndex Index of the Scene in BuildSettings.
            * @param sceneName Name or path of the Scene to unload.
            * @param scene Scene to unload.
            * @param options Scene unloading options.
            * @returns Use the AsyncOperation to determine if the operation has completed. 
            */
            public static UnloadSceneAsync ($sceneName: string) : UnityEngine.AsyncOperation
            /** Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.
            * @param sceneBuildIndex Index of the Scene in BuildSettings.
            * @param sceneName Name or path of the Scene to unload.
            * @param scene Scene to unload.
            * @param options Scene unloading options.
            * @returns Use the AsyncOperation to determine if the operation has completed. 
            */
            public static UnloadSceneAsync ($scene: UnityEngine.SceneManagement.Scene) : UnityEngine.AsyncOperation
            /** Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.
            * @param sceneBuildIndex Index of the Scene in BuildSettings.
            * @param sceneName Name or path of the Scene to unload.
            * @param scene Scene to unload.
            * @param options Scene unloading options.
            * @returns Use the AsyncOperation to determine if the operation has completed. 
            */
            public static UnloadSceneAsync ($sceneBuildIndex: number, $options: UnityEngine.SceneManagement.UnloadSceneOptions) : UnityEngine.AsyncOperation
            /** Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.
            * @param sceneBuildIndex Index of the Scene in BuildSettings.
            * @param sceneName Name or path of the Scene to unload.
            * @param scene Scene to unload.
            * @param options Scene unloading options.
            * @returns Use the AsyncOperation to determine if the operation has completed. 
            */
            public static UnloadSceneAsync ($sceneName: string, $options: UnityEngine.SceneManagement.UnloadSceneOptions) : UnityEngine.AsyncOperation
            /** Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.
            * @param sceneBuildIndex Index of the Scene in BuildSettings.
            * @param sceneName Name or path of the Scene to unload.
            * @param scene Scene to unload.
            * @param options Scene unloading options.
            * @returns Use the AsyncOperation to determine if the operation has completed. 
            */
            public static UnloadSceneAsync ($scene: UnityEngine.SceneManagement.Scene, $options: UnityEngine.SceneManagement.UnloadSceneOptions) : UnityEngine.AsyncOperation
            public constructor ()
        }
        /** This struct collects all the CreateScene parameters in to a single place.
        */
        class CreateSceneParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** See SceneManagement.LocalPhysicsMode.
            */
            public get localPhysicsMode(): UnityEngine.SceneManagement.LocalPhysicsMode;
            public set localPhysicsMode(value: UnityEngine.SceneManagement.LocalPhysicsMode);
            public constructor ($physicsMode: UnityEngine.SceneManagement.LocalPhysicsMode)
            public constructor ()
        }
        /** Used when loading a Scene in a player.
        */
        enum LoadSceneMode
        { Single = 0, Additive = 1 }
        /** This struct collects all the LoadScene parameters in to a single place.
        */
        class LoadSceneParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** See LoadSceneMode.
            */
            public get loadSceneMode(): UnityEngine.SceneManagement.LoadSceneMode;
            public set loadSceneMode(value: UnityEngine.SceneManagement.LoadSceneMode);
            /** See SceneManagement.LocalPhysicsMode.
            */
            public get localPhysicsMode(): UnityEngine.SceneManagement.LocalPhysicsMode;
            public set localPhysicsMode(value: UnityEngine.SceneManagement.LocalPhysicsMode);
            public constructor ($mode: UnityEngine.SceneManagement.LoadSceneMode)
            public constructor ($mode: UnityEngine.SceneManagement.LoadSceneMode, $physicsMode: UnityEngine.SceneManagement.LocalPhysicsMode)
            public constructor ()
        }
        /** Scene unloading options passed to SceneManager.UnloadScene.
        */
        enum UnloadSceneOptions
        { None = 0, UnloadAllEmbeddedSceneObjects = 1 }
        /** Provides options for 2D and 3D local physics.
        */
        enum LocalPhysicsMode
        { None = 0, Physics2D = 1, Physics3D = 2 }
        /** Scene and Build Settings related utilities.
        */
        class SceneUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Get the Scene path from a build index.
            * @returns Scene path (e.g "AssetsScenesScene1.unity"). 
            */
            public static GetScenePathByBuildIndex ($buildIndex: number) : string
            /** Get the build index from a Scene path.
            * @param scenePath Scene path (e.g: "AssetsScenesScene1.unity").
            * @returns Build index. 
            */
            public static GetBuildIndexByScenePath ($scenePath: string) : number
        }
    }
    namespace UnityEngine.CullingGroup {
        interface StateChanged
        { 
        (sphere: UnityEngine.CullingGroupEvent) : void; 
        Invoke?: (sphere: UnityEngine.CullingGroupEvent) => void;
        }
        var StateChanged: { new (func: (sphere: UnityEngine.CullingGroupEvent) => void): StateChanged; }
    }
    namespace UnityEngine.ReflectionProbe {
        enum ReflectionProbeEvent
        { ReflectionProbeAdded = 0, ReflectionProbeRemoved = 1 }
    }
    namespace UnityEngine.BoundsInt {
        class PositionEnumerator extends System.ValueType implements System.Collections.Generic.IEnumerator$1<UnityEngine.Vector3Int>, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get Current(): any;
            public MoveNext () : boolean
            public Reset () : void
            public Dispose () : void
        }
    }
    namespace UnityEngine.RectInt {
        class PositionEnumerator extends System.ValueType implements System.Collections.Generic.IEnumerator$1<UnityEngine.Vector2Int>, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get Current(): any;
            public MoveNext () : boolean
            public Reset () : void
            public Dispose () : void
        }
    }
    namespace UnityEngine.Display {
        interface DisplaysUpdatedDelegate
        { 
        () : void; 
        Invoke?: () => void;
        }
        var DisplaysUpdatedDelegate: { new (func: () => void): DisplaysUpdatedDelegate; }
    }
    namespace UnityEngine.Experimental.Rendering {
        /** Indicates how a Renderer is updated.
        */
        enum RayTracingMode
        { Off = 0, Static = 1, DynamicTransform = 2, DynamicGeometry = 3 }
        /** Use this format to create either Textures or RenderTextures from scripts.
        */
        enum GraphicsFormat
        { None = 0, R8_SRGB = 1, R8G8_SRGB = 2, R8G8B8_SRGB = 3, R8G8B8A8_SRGB = 4, R8_UNorm = 5, R8G8_UNorm = 6, R8G8B8_UNorm = 7, R8G8B8A8_UNorm = 8, R8_SNorm = 9, R8G8_SNorm = 10, R8G8B8_SNorm = 11, R8G8B8A8_SNorm = 12, R8_UInt = 13, R8G8_UInt = 14, R8G8B8_UInt = 15, R8G8B8A8_UInt = 16, R8_SInt = 17, R8G8_SInt = 18, R8G8B8_SInt = 19, R8G8B8A8_SInt = 20, R16_UNorm = 21, R16G16_UNorm = 22, R16G16B16_UNorm = 23, R16G16B16A16_UNorm = 24, R16_SNorm = 25, R16G16_SNorm = 26, R16G16B16_SNorm = 27, R16G16B16A16_SNorm = 28, R16_UInt = 29, R16G16_UInt = 30, R16G16B16_UInt = 31, R16G16B16A16_UInt = 32, R16_SInt = 33, R16G16_SInt = 34, R16G16B16_SInt = 35, R16G16B16A16_SInt = 36, R32_UInt = 37, R32G32_UInt = 38, R32G32B32_UInt = 39, R32G32B32A32_UInt = 40, R32_SInt = 41, R32G32_SInt = 42, R32G32B32_SInt = 43, R32G32B32A32_SInt = 44, R16_SFloat = 45, R16G16_SFloat = 46, R16G16B16_SFloat = 47, R16G16B16A16_SFloat = 48, R32_SFloat = 49, R32G32_SFloat = 50, R32G32B32_SFloat = 51, R32G32B32A32_SFloat = 52, B8G8R8_SRGB = 56, B8G8R8A8_SRGB = 57, B8G8R8_UNorm = 58, B8G8R8A8_UNorm = 59, B8G8R8_SNorm = 60, B8G8R8A8_SNorm = 61, B8G8R8_UInt = 62, B8G8R8A8_UInt = 63, B8G8R8_SInt = 64, B8G8R8A8_SInt = 65, R4G4B4A4_UNormPack16 = 66, B4G4R4A4_UNormPack16 = 67, R5G6B5_UNormPack16 = 68, B5G6R5_UNormPack16 = 69, R5G5B5A1_UNormPack16 = 70, B5G5R5A1_UNormPack16 = 71, A1R5G5B5_UNormPack16 = 72, E5B9G9R9_UFloatPack32 = 73, B10G11R11_UFloatPack32 = 74, A2B10G10R10_UNormPack32 = 75, A2B10G10R10_UIntPack32 = 76, A2B10G10R10_SIntPack32 = 77, A2R10G10B10_UNormPack32 = 78, A2R10G10B10_UIntPack32 = 79, A2R10G10B10_SIntPack32 = 80, A2R10G10B10_XRSRGBPack32 = 81, A2R10G10B10_XRUNormPack32 = 82, R10G10B10_XRSRGBPack32 = 83, R10G10B10_XRUNormPack32 = 84, A10R10G10B10_XRSRGBPack32 = 85, A10R10G10B10_XRUNormPack32 = 86, RGB_DXT1_SRGB = 96, RGBA_DXT1_SRGB = 96, RGB_DXT1_UNorm = 97, RGBA_DXT1_UNorm = 97, RGBA_DXT3_SRGB = 98, RGBA_DXT3_UNorm = 99, RGBA_DXT5_SRGB = 100, RGBA_DXT5_UNorm = 101, R_BC4_UNorm = 102, R_BC4_SNorm = 103, RG_BC5_UNorm = 104, RG_BC5_SNorm = 105, RGB_BC6H_UFloat = 106, RGB_BC6H_SFloat = 107, RGBA_BC7_SRGB = 108, RGBA_BC7_UNorm = 109, RGB_PVRTC_2Bpp_SRGB = 110, RGB_PVRTC_2Bpp_UNorm = 111, RGB_PVRTC_4Bpp_SRGB = 112, RGB_PVRTC_4Bpp_UNorm = 113, RGBA_PVRTC_2Bpp_SRGB = 114, RGBA_PVRTC_2Bpp_UNorm = 115, RGBA_PVRTC_4Bpp_SRGB = 116, RGBA_PVRTC_4Bpp_UNorm = 117, RGB_ETC_UNorm = 118, RGB_ETC2_SRGB = 119, RGB_ETC2_UNorm = 120, RGB_A1_ETC2_SRGB = 121, RGB_A1_ETC2_UNorm = 122, RGBA_ETC2_SRGB = 123, RGBA_ETC2_UNorm = 124, R_EAC_UNorm = 125, R_EAC_SNorm = 126, RG_EAC_UNorm = 127, RG_EAC_SNorm = 128, RGBA_ASTC4X4_SRGB = 129, RGBA_ASTC4X4_UNorm = 130, RGBA_ASTC5X5_SRGB = 131, RGBA_ASTC5X5_UNorm = 132, RGBA_ASTC6X6_SRGB = 133, RGBA_ASTC6X6_UNorm = 134, RGBA_ASTC8X8_SRGB = 135, RGBA_ASTC8X8_UNorm = 136, RGBA_ASTC10X10_SRGB = 137, RGBA_ASTC10X10_UNorm = 138, RGBA_ASTC12X12_SRGB = 139, RGBA_ASTC12X12_UNorm = 140 }
        /** 
        Use a default format to create either Textures or RenderTextures from scripts based on platform specific capability.
        */
        enum DefaultFormat
        { LDR = 0, HDR = 1 }
        enum TextureCreationFlags
        { None = 0, MipChain = 1, Crunch = 64 }
        /** Use this format usages to figure out the capabilities of specific GraphicsFormat
        */
        enum FormatUsage
        { Sample = 0, Linear = 1, Sparse = 2, Render = 4, Blend = 5, GetPixels = 6, SetPixels = 7, SetPixels32 = 8, ReadPixels = 9, LoadStore = 10, MSAA2x = 11, MSAA4x = 12, MSAA8x = 13, StencilSampling = 15 }
        /** A shader for GPU ray tracing.
        */
        class RayTracingShader extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.GraphicsBuffer {
        enum Target
        { Index = 2 }
    }
    namespace UnityEngine.LightProbeProxyVolume {
        enum BoundingBoxMode
        { AutomaticLocal = 0, AutomaticWorld = 1, Custom = 2 }
        enum ResolutionMode
        { Automatic = 0, Custom = 1 }
        enum ProbePositionMode
        { CellCorner = 0, CellCenter = 1 }
        enum RefreshMode
        { Automatic = 0, EveryFrame = 1, ViaScripting = 2 }
        enum QualityMode
        { Low = 0, Normal = 1 }
    }
    namespace UnityEngine.iOS {
        /** ActivityIndicator Style (iOS Specific).
        */
        enum ActivityIndicatorStyle
        { DontShow = -1, WhiteLarge = 0, White = 1, Gray = 2 }
    }
    namespace UnityEngine.Random {
        class State extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.Scripting {
        /** PreserveAttribute prevents byte code stripping from removing a class, method, field, or property.
        */
        class PreserveAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.ShaderVariantCollection {
        class ShaderVariant extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.TouchScreenKeyboard {
        enum Status
        { Visible = 0, Done = 1, Canceled = 2, LostFocus = 3 }
    }
    namespace UnityEngine.ADBannerView {
        interface BannerWasClickedDelegate
        { 
        () : void; 
        Invoke?: () => void;
        }
        var BannerWasClickedDelegate: { new (func: () => void): BannerWasClickedDelegate; }
        interface BannerWasLoadedDelegate
        { 
        () : void; 
        Invoke?: () => void;
        }
        var BannerWasLoadedDelegate: { new (func: () => void): BannerWasLoadedDelegate; }
        enum Layout
        { Top = 0, Bottom = 1, TopLeft = 0, TopRight = 4, TopCenter = 8, BottomLeft = 1, BottomRight = 5, BottomCenter = 9, CenterLeft = 2, CenterRight = 6, Center = 10, Manual = -1 }
        enum Type
        { Banner = 0, MediumRect = 1 }
    }
    namespace UnityEngine.ADInterstitialAd {
        interface InterstitialWasLoadedDelegate
        { 
        () : void; 
        Invoke?: () => void;
        }
        var InterstitialWasLoadedDelegate: { new (func: () => void): InterstitialWasLoadedDelegate; }
    }
    namespace UnityEngine.RectTransform {
        interface ReapplyDrivenProperties
        { 
        (driven: UnityEngine.RectTransform) : void; 
        Invoke?: (driven: UnityEngine.RectTransform) => void;
        }
        var ReapplyDrivenProperties: { new (func: (driven: UnityEngine.RectTransform) => void): ReapplyDrivenProperties; }
        enum Edge
        { Left = 0, Right = 1, Top = 2, Bottom = 3 }
        enum Axis
        { Horizontal = 0, Vertical = 1 }
    }
    namespace UnityEngine.SocialPlatforms {
        interface ISocialPlatform
        {
        }
        interface ILocalUser extends UnityEngine.SocialPlatforms.IUserProfile
        {
        }
        interface IUserProfile
        {
        }
        interface IAchievementDescription
        {
        }
        interface IAchievement
        {
        }
        interface IScore
        {
        }
        interface ILeaderboard
        {
        }
    }
    namespace UnityEngine.GridLayout {
        enum CellLayout
        { Rectangle = 0, Hexagon = 1, Isometric = 2, IsometricZAsY = 3 }
        enum CellSwizzle
        { XYZ = 0, XZY = 1, YXZ = 2, YZX = 3, ZXY = 4, ZYX = 5 }
    }
    namespace UnityEngine.GUI {
        enum ToolbarButtonSize
        { Fixed = 0, FitToContents = 1 }
        interface WindowFunction
        { 
        (id: number) : void; 
        Invoke?: (id: number) => void;
        }
        var WindowFunction: { new (func: (id: number) => void): WindowFunction; }
    }
    namespace UnityEngine.TextEditor {
        enum DblClickSnapping
        { WORDS = 0, PARAGRAPHS = 1 }
    }
    namespace UnityEngine.Texture2D {
        enum EXRFlags
        { None = 0, OutputAsFloat = 1, CompressZIP = 2, CompressRLE = 4, CompressPIZ = 8 }
    }
    namespace UnityEngine.ParticleSystem {
        class Particle extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class PlaybackState extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class Trails extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class EmitParams extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class MainModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get duration(): number;
            public set duration(value: number);
            public get loop(): boolean;
            public set loop(value: boolean);
            public get prewarm(): boolean;
            public set prewarm(value: boolean);
            public get startDelay(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set startDelay(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public get startDelayMultiplier(): number;
            public set startDelayMultiplier(value: number);
            public get startLifetime(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set startLifetime(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public get startLifetimeMultiplier(): number;
            public set startLifetimeMultiplier(value: number);
            public get startSpeed(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set startSpeed(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public get startSpeedMultiplier(): number;
            public set startSpeedMultiplier(value: number);
            public get startSize3D(): boolean;
            public set startSize3D(value: boolean);
            public get startSize(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set startSize(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public get startSizeMultiplier(): number;
            public set startSizeMultiplier(value: number);
            public get startSizeX(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set startSizeX(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public get startSizeXMultiplier(): number;
            public set startSizeXMultiplier(value: number);
            public get startSizeY(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set startSizeY(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public get startSizeYMultiplier(): number;
            public set startSizeYMultiplier(value: number);
            public get startSizeZ(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set startSizeZ(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public get startSizeZMultiplier(): number;
            public set startSizeZMultiplier(value: number);
            public get startRotation3D(): boolean;
            public set startRotation3D(value: boolean);
            public get startRotation(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set startRotation(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public get startRotationMultiplier(): number;
            public set startRotationMultiplier(value: number);
            public get startRotationX(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set startRotationX(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public get startRotationXMultiplier(): number;
            public set startRotationXMultiplier(value: number);
            public get startRotationY(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set startRotationY(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public get startRotationYMultiplier(): number;
            public set startRotationYMultiplier(value: number);
            public get startRotationZ(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set startRotationZ(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public get startRotationZMultiplier(): number;
            public set startRotationZMultiplier(value: number);
            public get flipRotation(): number;
            public set flipRotation(value: number);
            public get startColor(): UnityEngine.ParticleSystem.MinMaxGradient;
            public set startColor(value: UnityEngine.ParticleSystem.MinMaxGradient);
            public get gravityModifier(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set gravityModifier(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public get gravityModifierMultiplier(): number;
            public set gravityModifierMultiplier(value: number);
            public get simulationSpace(): UnityEngine.ParticleSystemSimulationSpace;
            public set simulationSpace(value: UnityEngine.ParticleSystemSimulationSpace);
            public get customSimulationSpace(): UnityEngine.Transform;
            public set customSimulationSpace(value: UnityEngine.Transform);
            public get simulationSpeed(): number;
            public set simulationSpeed(value: number);
            public get useUnscaledTime(): boolean;
            public set useUnscaledTime(value: boolean);
            public get scalingMode(): UnityEngine.ParticleSystemScalingMode;
            public set scalingMode(value: UnityEngine.ParticleSystemScalingMode);
            public get playOnAwake(): boolean;
            public set playOnAwake(value: boolean);
            public get maxParticles(): number;
            public set maxParticles(value: number);
            public get emitterVelocityMode(): UnityEngine.ParticleSystemEmitterVelocityMode;
            public set emitterVelocityMode(value: UnityEngine.ParticleSystemEmitterVelocityMode);
            public get stopAction(): UnityEngine.ParticleSystemStopAction;
            public set stopAction(value: UnityEngine.ParticleSystemStopAction);
            public get ringBufferMode(): UnityEngine.ParticleSystemRingBufferMode;
            public set ringBufferMode(value: UnityEngine.ParticleSystemRingBufferMode);
            public get ringBufferLoopRange(): UnityEngine.Vector2;
            public set ringBufferLoopRange(value: UnityEngine.Vector2);
            public get cullingMode(): UnityEngine.ParticleSystemCullingMode;
            public set cullingMode(value: UnityEngine.ParticleSystemCullingMode);
        }
        class EmissionModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class ShapeModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class VelocityOverLifetimeModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class LimitVelocityOverLifetimeModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class InheritVelocityModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class ForceOverLifetimeModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class ColorOverLifetimeModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class ColorBySpeedModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class SizeOverLifetimeModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class SizeBySpeedModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class RotationOverLifetimeModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class RotationBySpeedModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class ExternalForcesModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class NoiseModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class CollisionModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class TriggerModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class SubEmittersModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class TextureSheetAnimationModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class LightsModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class TrailModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class CustomDataModule extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class MinMaxCurve extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class MinMaxGradient extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace Unity.Jobs {
        /** JobHandle.
        */
        class JobHandle extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.CompositeCollider2D {
        enum GeometryType
        { Outlines = 0, Polygons = 1 }
        enum GenerationType
        { Synchronous = 0, Manual = 1 }
    }
    namespace UnityEngine.ScreenCapture {
        enum StereoScreenCaptureMode
        { LeftEye = 1, RightEye = 2, BothEyes = 3 }
    }
    namespace UnityEngine.Terrain {
        enum MaterialType
        { BuiltInStandard = 0, BuiltInLegacyDiffuse = 1, BuiltInLegacySpecular = 2, Custom = 3 }
    }
    namespace UnityEngine.Font {
        interface FontTextureRebuildCallback
        { 
        () : void; 
        Invoke?: () => void;
        }
        var FontTextureRebuildCallback: { new (func: () => void): FontTextureRebuildCallback; }
    }
    namespace UnityEngine.GridBrushBase {
        enum RotationDirection
        { Clockwise = 0, CounterClockwise = 1 }
        enum FlipAxis
        { X = 0, Y = 1 }
    }
    namespace UnityEngine.CanvasRenderer {
        interface OnRequestRebuild
        { 
        () : void; 
        Invoke?: () => void;
        }
        var OnRequestRebuild: { new (func: () => void): OnRequestRebuild; }
    }
    namespace UnityEngine.Canvas {
        interface WillRenderCanvases
        { 
        () : void; 
        Invoke?: () => void;
        }
        var WillRenderCanvases: { new (func: () => void): WillRenderCanvases; }
    }
    namespace UnityEngine.UISystemProfilerApi {
        enum SampleType
        { Layout = 0, Render = 1 }
    }
    namespace UnityEngine.Networking {
        /** Transport Layer API.
        */
        class NetworkTransport extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Deprecated.
            */
            public static get IsStarted(): boolean;
            /** Check if the transport is using a platform specific protocol.
            * @param endPoint EndPoint instance to check.
            * @returns True if the given endpoint is using a platform protocol. 
            */
            public static DoesEndPointUsePlatformProtocols ($endPoint: System.Net.EndPoint) : boolean
            /** Try to establish connection to other peer, where the peer is specified using a C# System.EndPoint.
            * @param hostId Host ID associated with this connection (Retrieved when calling Networking.NetworkTransport.AddHost).
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @param xboxOneEndPoint A valid System.EndPoint.
            * @param exceptionConnectionId Set to 0 in the case of a default connection.
            * @returns A unique connection identifier on success (otherwise zero). 
            */
            public static ConnectEndPoint ($hostId: number, $endPoint: System.Net.EndPoint, $exceptionConnectionId: number, $error: $Ref<number>) : number
            public static Init () : void
            public static Init ($config: UnityEngine.Networking.GlobalConfig) : void
            public static Shutdown () : void
            public static AddSceneId ($id: number) : void
            public static GetNextSceneId () : number
            /** Create a host and configure them to simulate Internet latency (works on Editor and development build only).
            * @param topology The Networking.HostTopology associated with the host.
            * @param minTimeout Minimum simulated delay in milliseconds.
            * @param maxTimeout Maximum simulated delay in milliseconds.
            * @param port Port to bind to (when 0 is selected, the OS will choose a port at random).
            * @param ip IP address to bind to.
            * @returns Returns host ID just created. 
            */
            public static AddHostWithSimulator ($topology: UnityEngine.Networking.HostTopology, $minTimeout: number, $maxTimeout: number, $port: number, $ip: string) : number
            public static AddHostWithSimulator ($topology: UnityEngine.Networking.HostTopology, $minTimeout: number, $maxTimeout: number, $port: number) : number
            public static AddHostWithSimulator ($topology: UnityEngine.Networking.HostTopology, $minTimeout: number, $maxTimeout: number) : number
            /** Creates a host based on Networking.HostTopology.
            * @param topology The Networking.HostTopology associated with the host.
            * @param port Port to bind to (when 0 is selected, the OS will choose a port at random).
            * @param ip IP address to bind to.
            * @returns Returns the ID of the host that was created. 
            */
            public static AddHost ($topology: UnityEngine.Networking.HostTopology, $port: number, $ip: string) : number
            public static AddHost ($topology: UnityEngine.Networking.HostTopology, $port: number) : number
            public static AddHost ($topology: UnityEngine.Networking.HostTopology) : number
            /** Created web socket host.
            * @param port Port to bind to.
            * @param topology The Networking.HostTopology associated with the host.
            * @param ip IP address to bind to.
            * @returns Web socket host id. 
            */
            public static AddWebsocketHost ($topology: UnityEngine.Networking.HostTopology, $port: number, $ip: string) : number
            /** Created web socket host.
            * @param port Port to bind to.
            * @param topology The Networking.HostTopology associated with the host.
            * @param ip IP address to bind to.
            * @returns Web socket host id. 
            */
            public static AddWebsocketHost ($topology: UnityEngine.Networking.HostTopology, $port: number) : number
            /** Create dedicated connection to Relay server.
            * @param hostId Host ID associated with this connection (Retrieved when calling Networking.NetworkTransport.AddHost).
            * @param address IPv4 address of the relay.
            * @param port Port of the relay.
            * @param network GUID for the relay match, retrieved by calling Networking.Match.NetworkMatch.CreateMatch and using the Networking.Match.MatchInfo.networkId.
            * @param source GUID for the source, can be retrieved by calling Utility.GetSourceID.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @param node Slot ID for this user, retrieved by calling Networking.Match.NetworkMatch.CreateMatch and using the Networking.Match.MatchInfo.nodeId.
            */
            public static ConnectAsNetworkHost ($hostId: number, $address: string, $port: number, $network: UnityEngine.Networking.Types.NetworkID, $source: UnityEngine.Networking.Types.SourceID, $node: UnityEngine.Networking.Types.NodeID, $error: $Ref<number>) : void
            /** This will disconnect the host and disband the group.
            DisconnectNetworkHost can only be called by the group owner on the relay server.
            * @param hostId Host ID associated with this connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            */
            public static DisconnectNetworkHost ($hostId: number, $error: $Ref<number>) : void
            /** Polls the host for the following events:  Networking.NetworkEventType.ConnectEvent and Networking.NetworkEventType.DisconnectEvent.
            Can only be called by the relay group owner.
            * @param hostId The host ID to check for events.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Type of event returned. 
            */
            public static ReceiveRelayEventFromHost ($hostId: number, $error: $Ref<number>) : UnityEngine.Networking.NetworkEventType
            /** Create a connection to another peer in the Relay group.
            * @param hostId Host ID associated with this connection (retrieved when calling Networking.NetworkTransport.AddHost).
            * @param address IP address of the peer, retrieved by calling Networking.Match.NetworkMatch.JoinMatch and using the Networking.Match.MatchInfo.address.
            * @param port Port of the peer, retrieved by calling Networking.Match.NetworkMatch.JoinMatch and using the Networking.Match.MatchInfo.port.
            * @param exceptionConnectionId Set to 0 in the case of a default connection.
            * @param relaySlotId ID of the remote peer in relay.
            * @param network GUID for the relay match, retrieved by calling Networking.Match.NetworkMatch.JoinMatch and using the Networking.Match.MatchInfo.networkId.
            * @param source GUID for the source, can be retrieved by calling Utility.GetSourceID.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @param node Slot ID reserved for the user, retrieved by calling Networking.Match.NetworkMatch.JoinMatch and using the Networking.Match.MatchInfo.nodeId.
            * @param bucketSizeFactor Allowed peak bandwidth (peak bandwidth = factor*bytesPerSec, recommended value is 2.0) If data has not been sent for a long time, it is allowed to send more data, with factor 2 it is allowed send 2*bytesPerSec bytes per sec.
            * @param bytesPerSec Average bandwidth (bandwidth will be throttled on this level).
            * @returns A unique connection identifier on success (otherwise zero). 
            */
            public static ConnectToNetworkPeer ($hostId: number, $address: string, $port: number, $exceptionConnectionId: number, $relaySlotId: number, $network: UnityEngine.Networking.Types.NetworkID, $source: UnityEngine.Networking.Types.SourceID, $node: UnityEngine.Networking.Types.NodeID, $bytesPerSec: number, $bucketSizeFactor: number, $error: $Ref<number>) : number
            /** Create a connection to another peer in the Relay group.
            * @param hostId Host ID associated with this connection (retrieved when calling Networking.NetworkTransport.AddHost).
            * @param address IP address of the peer, retrieved by calling Networking.Match.NetworkMatch.JoinMatch and using the Networking.Match.MatchInfo.address.
            * @param port Port of the peer, retrieved by calling Networking.Match.NetworkMatch.JoinMatch and using the Networking.Match.MatchInfo.port.
            * @param exceptionConnectionId Set to 0 in the case of a default connection.
            * @param relaySlotId ID of the remote peer in relay.
            * @param network GUID for the relay match, retrieved by calling Networking.Match.NetworkMatch.JoinMatch and using the Networking.Match.MatchInfo.networkId.
            * @param source GUID for the source, can be retrieved by calling Utility.GetSourceID.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @param node Slot ID reserved for the user, retrieved by calling Networking.Match.NetworkMatch.JoinMatch and using the Networking.Match.MatchInfo.nodeId.
            * @param bucketSizeFactor Allowed peak bandwidth (peak bandwidth = factor*bytesPerSec, recommended value is 2.0) If data has not been sent for a long time, it is allowed to send more data, with factor 2 it is allowed send 2*bytesPerSec bytes per sec.
            * @param bytesPerSec Average bandwidth (bandwidth will be throttled on this level).
            * @returns A unique connection identifier on success (otherwise zero). 
            */
            public static ConnectToNetworkPeer ($hostId: number, $address: string, $port: number, $exceptionConnectionId: number, $relaySlotId: number, $network: UnityEngine.Networking.Types.NetworkID, $source: UnityEngine.Networking.Types.SourceID, $node: UnityEngine.Networking.Types.NodeID, $error: $Ref<number>) : number
            /** Returns the number of received messages waiting in the queue for processing.
            * @param hostId Host ID associated with this queue.
            * @param error Error code. Cast this value to Networking.NetworkError for more information.
            * @returns The number of messages in the queue. 
            */
            public static GetIncomingMessageQueueSize ($hostId: number, $error: $Ref<number>) : number
            /** Returns the number of messages waiting in the outgoing message queue to be sent.
            * @param hostId Host ID associated with this queue.
            * @param error Error code. Cast this value to Networking.NetworkError for more information.
            * @returns The number of messages waiting in the outgoing message queue to be sent. 
            */
            public static GetOutgoingMessageQueueSize ($hostId: number, $error: $Ref<number>) : number
            /** Return the round trip time for the given connectionId.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @returns Current round trip time in ms. 
            */
            public static GetCurrentRTT ($hostId: number, $connectionId: number, $error: $Ref<number>) : number
            /** Returns how many incoming packets have been lost due transmitting (dropped by network).
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns The absolute number of packets that have been lost since the connection was established. 
            */
            public static GetIncomingPacketLossCount ($hostId: number, $connectionId: number, $error: $Ref<number>) : number
            /** Returns how many packets have been received from start for connection.
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns The absolute number of packets received since the connection was established. 
            */
            public static GetIncomingPacketCount ($hostId: number, $connectionId: number, $error: $Ref<number>) : number
            /** Returns the value in percent of the number of sent packets that were dropped by the network and not received by the peer.
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns The number of packets dropped by the network in the last ping timeout period expressed as an integer percentage from 0 to 100. 
            */
            public static GetOutgoingPacketNetworkLossPercent ($hostId: number, $connectionId: number, $error: $Ref<number>) : number
            /** Returns the value in percent of the number of sent packets that were dropped by the peer.
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns The number of packets dropped by the peer in the last ping timeout period expressed as an integer percentage from 0 to 100. 
            */
            public static GetOutgoingPacketOverflowLossPercent ($hostId: number, $connectionId: number, $error: $Ref<number>) : number
            /** Gets the currently-allowed network bandwidth in bytes per second. The value returned can vary because bandwidth can be throttled by flow control. If the bandwidth is throttled to zero, the connection is disconnected.ted.
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Currently-allowed bandwidth in bytes per second. 
            */
            public static GetMaxAllowedBandwidth ($hostId: number, $connectionId: number, $error: $Ref<number>) : number
            /** Returns size of reliable buffer.
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Size of ack buffer. 
            */
            public static GetAckBufferCount ($hostId: number, $connectionId: number, $error: $Ref<number>) : number
            public static GetIncomingPacketDropCountForAllHosts () : number
            public static GetIncomingPacketCountForAllHosts () : number
            public static GetOutgoingPacketCount () : number
            /** Returns how many packets have been sent for host from it start (from call Networking.NetworkTransport.AddHost).
            * @param hostId ID of the host.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Count packets have been sent from host start. 
            */
            public static GetOutgoingPacketCountForHost ($hostId: number, $error: $Ref<number>) : number
            /** Returns how many packets have been sent for connection from it start (from call Networking.NetworkTransport.Connect for active connect or from connection request receiving for passive connect).
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Packets count sent for connection from it start. 
            */
            public static GetOutgoingPacketCountForConnection ($hostId: number, $connectionId: number, $error: $Ref<number>) : number
            public static GetOutgoingMessageCount () : number
            /** Returns how many messages have been sent from start for host (from call Networking.NetworkTransport.AddHost).
            * @param hostId ID of the host.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Messages count sending from start for the host. 
            */
            public static GetOutgoingMessageCountForHost ($hostId: number, $error: $Ref<number>) : number
            /** Returns how many packets have been sent from start for connection (from call Networking.NetworkTransport.Connect for active connect or from connection request receiving for passive connect).
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Messages count sending from start for connection. 
            */
            public static GetOutgoingMessageCountForConnection ($hostId: number, $connectionId: number, $error: $Ref<number>) : number
            public static GetOutgoingUserBytesCount () : number
            /** Returns how much payload (user) bytes have been sent from start for the host (from call Networking.NetworkTransport.AddHost).
            * @param hostId ID of the host.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Total payload (in bytes) sent from start for the host. 
            */
            public static GetOutgoingUserBytesCountForHost ($hostId: number, $error: $Ref<number>) : number
            /** Returns how much payload (user) bytes have been sent from start for connection (from call Networking.NetworkTransport.Connect for active connect or from connection request receiving for passive connect).
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Total payload (in bytes) sent from start for connection. 
            */
            public static GetOutgoingUserBytesCountForConnection ($hostId: number, $connectionId: number, $error: $Ref<number>) : number
            public static GetOutgoingSystemBytesCount () : number
            /** Returns how much payload and protocol system headers (in bytes) have been sent from start for the host (from call Networking.NetworkTransport.AddHost).
            * @param hostId ID of the host.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Total user payload and protocol system headers (in bytes) sent from start for the host. 
            */
            public static GetOutgoingSystemBytesCountForHost ($hostId: number, $error: $Ref<number>) : number
            /** Returns how much payload and protocol system headers (in bytes) have been sent from start for connection (from call Networking.NetworkTransport.Connect for active connect or from connection request receiving for passive connect).
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Total user payload and protocol system headers (in bytes) sent from start for connection. 
            */
            public static GetOutgoingSystemBytesCountForConnection ($hostId: number, $connectionId: number, $error: $Ref<number>) : number
            public static GetOutgoingFullBytesCount () : number
            /** Returns how much raw data (in bytes) have been sent from start for the host (from call Networking.NetworkTransport.AddHost).
            * @param hostId ID of the host.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Total data (user payload, protocol specific data, ip and udp headers) (in bytes) sent from start for the host. 
            */
            public static GetOutgoingFullBytesCountForHost ($hostId: number, $error: $Ref<number>) : number
            /** Returns how much raw data (in bytes) have been sent from start for connection (from call Networking.NetworkTransport.Connect for active connect or from connection request receiving for passive connect).
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Total data (user payload, protocol specific data, ip and udp headers) (in bytes) sent from start for connection. 
            */
            public static GetOutgoingFullBytesCountForConnection ($hostId: number, $connectionId: number, $error: $Ref<number>) : number
            public static GetConnectionInfo ($hostId: number, $connectionId: number, $port: $Ref<number>, $network: $Ref<bigint>, $dstNode: $Ref<number>, $error: $Ref<number>) : string
            /** Returns the connection parameters for the specified connectionId. These parameters can be sent to other users to establish a direct connection to this peer. If this peer is connected to the host via Relay, the Relay-related parameters are set.
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of connection.
            * @param address IP address.
            * @param port Port.
            * @param network Relay network guid.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @param dstNode Destination slot id.
            */
            public static GetConnectionInfo ($hostId: number, $connectionId: number, $address: $Ref<string>, $port: $Ref<number>, $network: $Ref<UnityEngine.Networking.Types.NetworkID>, $dstNode: $Ref<UnityEngine.Networking.Types.NodeID>, $error: $Ref<number>) : void
            public static GetNetworkTimestamp () : number
            /** Returns the delay for the timestamp received.
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param remoteTime Timestamp delivered from peer.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            */
            public static GetRemoteDelayTimeMS ($hostId: number, $connectionId: number, $remoteTime: number, $error: $Ref<number>) : number
            /** Start to multicast send.
            * @param hostId Host ID associated with this connection.
            * @param channelId The channel ID.
            * @param buffer Buffer containing the data to send.
            * @param size Size of the buffer.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            */
            public static StartSendMulticast ($hostId: number, $channelId: number, $buffer: System.Array$1<number>, $size: number, $error: $Ref<number>) : boolean
            /** Add a connection for the multicast send.
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            */
            public static SendMulticast ($hostId: number, $connectionId: number, $error: $Ref<number>) : boolean
            /** Finalizes sending of a message to a group of connections. Only one multicast message at a time is allowed per host.
            * @param hostId Host ID associated with this connection (retrieved when calling Networking.NetworkTransport.AddHost).
            * @param error Error (can be cast to Networking.NetworkError for more information).
            */
            public static FinishSendMulticast ($hostId: number, $error: $Ref<number>) : boolean
            /** Closes the opened socket, and closes all connections belonging to that socket.
            * @param hostId Host ID to remove.
            */
            public static RemoveHost ($hostId: number) : boolean
            /** Tries to establish a connection to another peer.
            * @param hostId Host ID associated with this connection (retrieved when calling Networking.NetworkTransport.AddHost).
            * @param address IPv4 address of the other peer.
            * @param port Port of the other peer.
            * @param exceptionConnectionId Set to 0 in the case of a default connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns A unique connection identifier on success (otherwise zero). 
            */
            public static Connect ($hostId: number, $address: string, $port: number, $exeptionConnectionId: number, $error: $Ref<number>) : number
            /** Connect with simulated latency.
            * @param hostId Host ID associated with this connection (Retrieved when calling Networking.NetworkTransport.AddHost).
            * @param address IPv4 address of the other peer.
            * @param port Port of the other peer.
            * @param exeptionConnectionId Set to 0 in the case of a default connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @param conf A Networking.ConnectionSimulatorConfig defined for this connection.
            * @returns A unique connection identifier on success (otherwise zero). 
            */
            public static ConnectWithSimulator ($hostId: number, $address: string, $port: number, $exeptionConnectionId: number, $error: $Ref<number>, $conf: UnityEngine.Networking.ConnectionSimulatorConfig) : number
            /** Send a disconnect signal to the connected peer and close the connection. Poll Networking.NetworkTransport.Receive() to be notified that the connection is closed. This signal is only sent once (best effort delivery).  If this packet is dropped for some reason, the peer closes the connection by timeout.
            * @param hostId Host ID associated with this connection.
            * @param connectionId The connection ID of the connection you want to close.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            */
            public static Disconnect ($hostId: number, $connectionId: number, $error: $Ref<number>) : boolean
            /** Send data to peer.
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param channelId The channel ID to send on.
            * @param buffer Buffer containing the data to send.
            * @param size Size of the buffer.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            */
            public static Send ($hostId: number, $connectionId: number, $channelId: number, $buffer: System.Array$1<number>, $size: number, $error: $Ref<number>) : boolean
            /** Function is queueing but not sending messages.
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @param channelId The channel ID to send on.
            * @param buffer Buffer containing the data to send.
            * @param size Size of the buffer.
            * @returns True if success. 
            */
            public static QueueMessageForSending ($hostId: number, $connectionId: number, $channelId: number, $buffer: System.Array$1<number>, $size: number, $error: $Ref<number>) : boolean
            /** Sends messages, previously queued by NetworkTransport.QueueMessageForSending function.
            * @param hostId Host ID associated with this connection.
            * @param connectionId ID of the connection.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns True if hostId and connectioId are valid. 
            */
            public static SendQueuedMessages ($hostId: number, $connectionId: number, $error: $Ref<number>) : boolean
            /** Called to poll the underlying system for events.
            * @param hostId Host ID associated with the event.
            * @param connectionId The connectionID that received the event.
            * @param channelId The channel ID associated with the event.
            * @param buffer The buffer that will hold the data received.
            * @param bufferSize Size of the buffer supplied.
            * @param receivedSize The actual receive size of the data.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Type of event returned. 
            */
            public static Receive ($hostId: $Ref<number>, $connectionId: $Ref<number>, $channelId: $Ref<number>, $buffer: System.Array$1<number>, $bufferSize: number, $receivedSize: $Ref<number>, $error: $Ref<number>) : UnityEngine.Networking.NetworkEventType
            /** Similar to Networking.NetworkTransport.Receive but will only poll for the provided hostId.
            * @param hostId The host ID to check for events.
            * @param connectionId The connection ID that received the event.
            * @param channelId The channel ID associated with the event.
            * @param buffer The buffer that will hold the data received.
            * @param bufferSize Size of the buffer supplied.
            * @param receivedSize The actual receive size of the data.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Type of event returned. 
            */
            public static ReceiveFromHost ($hostId: number, $connectionId: $Ref<number>, $channelId: $Ref<number>, $buffer: System.Array$1<number>, $bufferSize: number, $receivedSize: $Ref<number>, $error: $Ref<number>) : UnityEngine.Networking.NetworkEventType
            /** Used to inform the profiler of network packet statistics.
            * @param packetStatId The ID of the message being reported.
            * @param numMsgs Number of messages being reported.
            * @param numBytes Number of bytes used by reported messages.
            * @param direction Whether the packet is outgoing (-1) or incoming (0).
            */
            public static SetPacketStat ($direction: number, $packetStatId: number, $numMsgs: number, $numBytes: number) : void
            /** This method allows you to specify that notifications callbacks should be called when Unity's networking can send more messages than defined in notificationLevel.
            * @param hostId Host ID.
            * @param connectionId Connection ID.
            * @param notificationLevel Defines how many free slots in the incoming queue should be available before [GlobalConfig.ConnectionReadyForSend] callback is triggered.
            * @param error Error code.
            * @returns Result, if false error will show error code. 
            */
            public static NotifyWhenConnectionReadyForSend ($hostId: number, $connectionId: number, $notificationLevel: number, $error: $Ref<number>) : boolean
            /** Returns the port number assigned to the host.
            * @param hostId Host ID.
            * @returns The UDP port number, or -1 if an error occurred. 
            */
            public static GetHostPort ($hostId: number) : number
            /** Starts sending a broadcasting message in all local subnets.
            * @param hostId Host ID which should be reported via broadcast (broadcast receivers will connect to this host).
            * @param broadcastPort Port used for the broadcast message.
            * @param key Key part of the credentials associated with this broadcast.
            * @param version Version part of the credentials associated with this broadcast.
            * @param subversion Subversion part of the credentials associated with this broadcast.
            * @param buffer Complimentary message. This message will delivered to the receiver with the broadcast event.
            * @param size Size of message.
            * @param timeout Specifies how often the broadcast message should be sent in milliseconds.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            * @returns Return true if broadcasting request has been submitted. 
            */
            public static StartBroadcastDiscovery ($hostId: number, $broadcastPort: number, $key: number, $version: number, $subversion: number, $buffer: System.Array$1<number>, $size: number, $timeout: number, $error: $Ref<number>) : boolean
            public static StopBroadcastDiscovery () : void
            public static IsBroadcastDiscoveryRunning () : boolean
            /** Sets the credentials required for receiving broadcast messages. Should any credentials of a received broadcast message not match, the broadcast discovery message is dropped.
            * @param hostId Host ID associated with this broadcast.
            * @param key Key part of the credentials associated with this broadcast.
            * @param version Version part of the credentials associated with this broadcast.
            * @param subversion Subversion part of the credentials associated with this broadcast.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            */
            public static SetBroadcastCredentials ($hostId: number, $key: number, $version: number, $subversion: number, $error: $Ref<number>) : void
            public static GetBroadcastConnectionInfo ($hostId: number, $port: $Ref<number>, $error: $Ref<number>) : string
            /** After Networking.NetworkTransport.Receive() returns Networking.NetworkEventType.BroadcastEvent, this function will return the connection information of the broadcast sender. This information can then be used for connecting to the broadcast sender.
            * @param hostId ID of the broadcast receiver.
            * @param address IPv4 address of broadcast sender.
            * @param port Port of broadcast sender.
            * @param error Error (can be cast to Networking.NetworkError for more information).
            */
            public static GetBroadcastConnectionInfo ($hostId: number, $address: $Ref<string>, $port: $Ref<number>, $error: $Ref<number>) : void
            /** After Networking.NetworkTransport.Receive() returns Networking.NetworkEventType.BroadcastEvent, this function returns a complimentary message from the broadcast sender.
            * @param hostId ID of broadcast receiver.
            * @param buffer Message buffer provided by caller.
            * @param bufferSize Buffer size.
            * @param receivedSize Received size (if received size > bufferSize, corresponding error will be set).
            * @param error Error (can be cast to Networking.NetworkError for more information).
            */
            public static GetBroadcastConnectionMessage ($hostId: number, $buffer: System.Array$1<number>, $bufferSize: number, $receivedSize: $Ref<number>, $error: $Ref<number>) : void
            /** Enable or disable a multicast lock.
            */
            public static SetMulticastLock ($enabled: boolean) : void
            /** Instructs the transport layer to load the provided encryption plugin.
            * @param libraryName The path to the native encryption plugin to load, relative to the executable.
            * @returns True if the provided native encryption plugin was loaded successfully and is being used by the transport layer. False otherwise. 
            */
            public static LoadEncryptionLibrary ($libraryName: string) : boolean
            public static UnloadEncryptionLibrary () : void
            public static IsEncryptionActive () : boolean
            /** Gets the safe un-encrypted maximum payload size for a given maximum packet size.
            * @param maxPacketSize The largest packet size that the network allows, in bytes.
            * @returns The maximum amount of bytes that can you can safely send over the network so they fit in the given maximum packet size after encryption. 
            */
            public static GetEncryptionSafeMaxPacketSize ($maxPacketSize: number) : number
        }
        /** Defines global paramters for network library.
        */
        class GlobalConfig extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Defines (1) for select reactor, minimum time period, when system will check if there are any messages for send (2) for fixrate reactor, minimum interval of time, when system will check for sending and receiving messages.
            */
            public get ThreadAwakeTimeout(): number;
            public set ThreadAwakeTimeout(value: number);
            /** Defines reactor model for the network library.
            */
            public get ReactorModel(): UnityEngine.Networking.ReactorModel;
            public set ReactorModel(value: UnityEngine.Networking.ReactorModel);
            /** This property determines the initial size of the queue that holds messages received by Unity Multiplayer before they are processed.
            */
            public get ReactorMaximumReceivedMessages(): number;
            public set ReactorMaximumReceivedMessages(value: number);
            /** Defines the initial size of the send queue. Messages are placed in this queue ready to be sent in packets to their destination.
            */
            public get ReactorMaximumSentMessages(): number;
            public set ReactorMaximumSentMessages(value: number);
            /** Defines maximum possible packet size in bytes for all network connections.
            */
            public get MaxPacketSize(): number;
            public set MaxPacketSize(value: number);
            /** Defines how many hosts you can use. Default Value = 16. Max value = 128.
            */
            public get MaxHosts(): number;
            public set MaxHosts(value: number);
            /** Defines how many worker threads are available to handle incoming and outgoing messages.
            */
            public get ThreadPoolSize(): number;
            public set ThreadPoolSize(value: number);
            /** Defines the minimum timeout in milliseconds recognised by the system. The default value is 1 ms.
            */
            public get MinTimerTimeout(): number;
            public set MinTimerTimeout(value: number);
            /** Defines the maximum timeout in milliseconds for any configuration. The default value is 12 seconds (12000ms).
            */
            public get MaxTimerTimeout(): number;
            public set MaxTimerTimeout(value: number);
            /** Deprecated. Defines the minimal timeout for network simulator. You cannot set up any delay less than this value. See Also: MinTimerTimeout.
            */
            public get MinNetSimulatorTimeout(): number;
            public set MinNetSimulatorTimeout(value: number);
            /** Deprecated. Defines maximum delay for network simulator. See Also: MaxTimerTimeout.
            */
            public get MaxNetSimulatorTimeout(): number;
            public set MaxNetSimulatorTimeout(value: number);
            /** Defines the callback delegate which you can use to get a notification when the host (defined by hostID) has a network event. The callback is called for all event types except Networking.NetworkEventType.Nothing.
            See Also: Networking.NetworkEventType
            */
            public get NetworkEventAvailable(): System.Action$1<number>;
            public set NetworkEventAvailable(value: System.Action$1<number>);
            /** Defines the callback delegate which you can use to get a notification when a connection is ready to send data.
            */
            public get ConnectionReadyForSend(): System.Action$2<number, number>;
            public set ConnectionReadyForSend(value: System.Action$2<number, number>);
            public constructor ()
        }
        /** Class defines network topology for host (socket opened by Networking.NetworkTransport.AddHost function). This topology defines: (1) how many connection with default config will be supported and (2) what will be special connections (connections with config different from default).
        */
        class HostTopology extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Defines config for default connections in the topology.
            */
            public get DefaultConfig(): UnityEngine.Networking.ConnectionConfig;
            /** Defines how many connection with default config be permitted.
            */
            public get MaxDefaultConnections(): number;
            /** Returns count of special connection added to topology.
            */
            public get SpecialConnectionConfigsCount(): number;
            /** List of special connection configs.
            */
            public get SpecialConnectionConfigs(): System.Collections.Generic.List$1<UnityEngine.Networking.ConnectionConfig>;
            /** Defines the maximum number of messages that each host can hold in its pool of received messages. The default size is 128.
            */
            public get ReceivedMessagePoolSize(): number;
            public set ReceivedMessagePoolSize(value: number);
            /** Defines the maximum number of messages that each host can hold in its pool of messages waiting to be sent. The default size is 128.
            */
            public get SentMessagePoolSize(): number;
            public set SentMessagePoolSize(value: number);
            public get MessagePoolSizeGrowthFactor(): number;
            public set MessagePoolSizeGrowthFactor(value: number);
            /** Return reference to special connection config. Parameters of this config can be changed.
            * @param i Config id.
            * @returns Connection config. 
            */
            public GetSpecialConnectionConfig ($i: number) : UnityEngine.Networking.ConnectionConfig
            /** Add special connection to topology (for example if you need to keep connection to standalone chat server you will need to use this function). Returned id should be use as one of parameters (with ip and port) to establish connection to this server.
            * @param config Connection config for special connection.
            * @returns Id of this connection. You should use this id when you call Networking.NetworkTransport.Connect. 
            */
            public AddSpecialConnectionConfig ($config: UnityEngine.Networking.ConnectionConfig) : number
            public constructor ($defaultConfig: UnityEngine.Networking.ConnectionConfig, $maxDefaultConnections: number)
            public constructor ()
        }
        /** Event that is returned when calling the Networking.NetworkTransport.Receive and Networking.NetworkTransport.ReceiveFromHost functions.
        */
        enum NetworkEventType
        { DataEvent = 0, ConnectEvent = 1, DisconnectEvent = 2, Nothing = 3, BroadcastEvent = 4 }
        /** Create configuration for network simulator; You can use this class in editor and developer build only.
        */
        class ConnectionSimulatorConfig extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
            public constructor ($outMinDelay: number, $outAvgDelay: number, $inMinDelay: number, $inAvgDelay: number, $packetLossPercentage: number)
            public constructor ()
        }
        /** Enumeration of all supported quality of service channel modes.
        */
        enum QosType
        { Unreliable = 0, UnreliableFragmented = 1, UnreliableSequenced = 2, Reliable = 3, ReliableFragmented = 4, ReliableSequenced = 5, StateUpdate = 6, ReliableStateUpdate = 7, AllCostDelivery = 8, UnreliableFragmentedSequenced = 9, ReliableFragmentedSequenced = 10 }
        /** Possible Networking.NetworkTransport errors.
        */
        enum NetworkError
        { Ok = 0, WrongHost = 1, WrongConnection = 2, WrongChannel = 3, NoResources = 4, BadMessage = 5, Timeout = 6, MessageToLong = 7, WrongOperation = 8, VersionMismatch = 9, CRCMismatch = 10, DNSFailure = 11, UsageError = 12 }
        /** Define how unet will handle network io operation.
        */
        enum ReactorModel
        { SelectReactor = 0, FixRateReactor = 1 }
        /** Defines size of the buffer holding reliable messages, before they will be acknowledged.
        */
        enum ConnectionAcksType
        { Acks32 = 1, Acks64 = 2, Acks96 = 3, Acks128 = 4 }
        /** Defines parameters of channels.
        */
        class ChannelQOS extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Channel quality of service.
            */
            public get QOS(): UnityEngine.Networking.QosType;
            /** Returns true if the channel belongs to a shared group.
            */
            public get BelongsToSharedOrderChannel(): boolean;
            public constructor ($value: UnityEngine.Networking.QosType)
            public constructor ()
            public constructor ($channel: UnityEngine.Networking.ChannelQOS)
        }
        /** This class defines parameters of connection between two peers, this definition includes various timeouts and sizes as well as channel configuration.
        */
        class ConnectionConfig extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Defines maximum packet size (in bytes) (including payload and all header). Packet can contain multiple messages inside. Default value = 1500.
            Note that this default value is suitable for local testing only. Usually you should change this value; a recommended setting for PC or mobile is 1470. For games consoles this value should probably be less than ~1100. Wrong size definition can cause packet dropping.
            */
            public get PacketSize(): number;
            public set PacketSize(value: number);
            /** Defines the fragment size for fragmented messages (for QOS: ReliableFragmented and UnreliableFragmented). Default value = 500.
            Under fragmented quality of service modes, the original message is split into fragments (up to 64) of up to FragmentSize bytes each. The fragment size depends on the frequency and size of reliable messages sent. Each reliable message potentially could be re-sent, so you need to choose a fragment size less than the remaining free space in a UDP packet after retransmitted reliable messages are added to the packet. For example, if Networking.ConnectionConfig.PacketSize is 1440 bytes, and a reliable message's average size is 200 bytes, it would be wise to set this parameter to 900 – 1000 bytes.
            */
            public get FragmentSize(): number;
            public set FragmentSize(value: number);
            /** Defines the maximum wait time in milliseconds before the "not acknowledged" message is re-sent. Default value = 1200.
            It does not make a lot of sense to wait for acknowledgement forever. This parameter sets an upper time limit at which point reliable messages are re-sent.
            */
            public get ResendTimeout(): number;
            public set ResendTimeout(value: number);
            /** Defines the timeout in milliseconds before a connection is considered to have been disconnected. Default value = 2000.
            Unity Multiplayer defines conditions under which a connection is considered as disconnected. Disconnection can happen for the following reasons:
            (1) A disconnection request was received.
            (2) The connection has not received any traffic at all for a time longer than DisconnectTimeout (Note that live connections receive regular keep-alive packets, so in this case "no traffic" means not only no user traffic but also absence of any keep-alive traffic as well).
            (3) Flow control determines that the time between sending packets is longer than DisconnectTimeout. Keep-alive packets are regularly delivered from peers and contain statistical information. This information includes values of packet loss due to network and peer overflow conditions. Setting NetworkDropThreshold and OverflowDropThreshold defines thresholds for flow control which can decrease packet frequency. When the time before sending the next packet is longer than DisconnectTimeout, the connection will be considered as disconnected and a disconnect event is received.
            */
            public get DisconnectTimeout(): number;
            public set DisconnectTimeout(value: number);
            /** Timeout in ms which library will wait before it will send another connection request.
            */
            public get ConnectTimeout(): number;
            public set ConnectTimeout(value: number);
            /** Defines minimum time in milliseconds between sending packets. This duration may be automatically increased if required by flow control. Default value = 10.
            When Send() is called, Unity Multiplayer won’t send the message immediately. Instead, once every SendTimeout milliseconds each connection is checked to see if it has something to send. While initial and minimal send timeouts can be set, these may be increased internally due to network conditions or buffer overflows.
            */
            public get MinUpdateTimeout(): number;
            public set MinUpdateTimeout(value: number);
            /** Defines the duration in milliseconds between keep-alive packets, also known as pings. Default value = 500.
            The ping frequency should be long enough to accumulate good statistics and short enough to compare with DisconnectTimeout. A good guideline is to have more than 3 pings per disconnect timeout, and more than 5 messages per ping. For example, with a DisconnectTimeout of 2000ms, a PingTimeout of 500ms works well.
            */
            public get PingTimeout(): number;
            public set PingTimeout(value: number);
            public get ReducedPingTimeout(): number;
            public set ReducedPingTimeout(value: number);
            /** Defines the timeout in milliseconds after which messages sent via the AllCost channel will be re-sent without waiting for acknowledgement. Default value = 20 ms.
            AllCost delivery quality of service (QOS) is a special QOS for delivering game-critical information, such as when the game starts, or when bullets are shot.
            Due to packets dropping, sometimes reliable messages cannot be delivered and need to be re-sent. Reliable messages will re-sent after RTT+Delta time, (RTT is round trip time) where RTT is a dynamic value and can reach couple of hundred milliseconds. For the AllCost delivery channel this timeout can be user-defined to force game critical information to be re-sent.
            */
            public get AllCostTimeout(): number;
            public set AllCostTimeout(value: number);
            /** Defines the percentage (from 0 to 100) of packets that need to be dropped due to network conditions before the SendUpdate timeout is automatically increased (and send rate is automatically decreased). Default value = 5.
            To avoid receiver overflow, Unity Multiplayer supports flow control. Each ping packet sent between connected peers contains two values:
            (1) Packets lost due to network conditions.
            (2) Packets lost because the receiver does not have free space in its incoming buffers.
            Like OverflowDropThreshold, both values are reported in percent. Use NetworkDropThreshold and OverflowDropThreshold to set thresholds for these values. If a value reported in the ping packet exceeds the corresponding threshold, Unity Multiplayer increases the sending timeout for packets up to a maximum value of DisconnectTimeout.
            Note: wireless networks usually exhibit 5% or greater packet loss. For wireless networks it is advisable to use a NetworkDropThreshold of 40-50%.
            */
            public get NetworkDropThreshold(): number;
            public set NetworkDropThreshold(value: number);
            /** Defines the percentage (from 0 to 100) of packets that need to be dropped due to lack of space in internal buffers before the SendUpdate timeout is automatically increased (and send rate is automatically decreased). Default value = 5.
            To avoid receiver overflow, Unity Multiplayer supports flow control. Each ping packet sent between connected peers contains two values:
            (1) Packets lost due to network conditions.
            (2) Packets lost because the receiver does not have free space in its incoming buffers.
            Like NetworkDropThreshold, both values are reported in percent. Use NetworkDropThreshold and OverflowDropThreshold to set thresholds for these values. If a value reported in the ping packet exceeds the corresponding threshold, Unity Multiplayer increases the sending timeout for packets up to a maximum value of DisconnectTimeout.
            Note: wireless networks usually exhibit 5% or greater packet loss. For wireless networks it is advisable to use a NetworkDropThreshold of 40-50%.
            */
            public get OverflowDropThreshold(): number;
            public set OverflowDropThreshold(value: number);
            /** Defines the maximum number of times Unity Multiplayer will attempt to send a connection request without receiving a response before it reports that it cannot establish a connection. Default value = 10.
            */
            public get MaxConnectionAttempt(): number;
            public set MaxConnectionAttempt(value: number);
            /** Defines the duration in milliseconds that the receiver waits for before it sends an acknowledgement back without waiting for any data payload. Default value = 33.
            Network clients that send data to a server may do so using many different quality of service (QOS) modes, some of which (reliable modes) expect the server to send back acknowledgement of receipt of data sent.
            Servers must periodically acknowledge data packets received over channels with reliable QOS modes by sending packets containing acknowledgement data (also known as "acks") back to the client. If the server were to send an acknowledgement immediately after receiving each packet from the client there would be significant overhead (the acknowledgement is a 32 or 64 bit integer, which is very small compared to the whole size of the packet which also contains the IP and the UDP header). AckDelay allows the server some time to accumulate a list of received reliable data packets to acknowledge, and decreases traffic overhead by combining many acknowledgements into a single packet.
            */
            public get AckDelay(): number;
            public set AckDelay(value: number);
            /** Gets or sets the delay in milliseconds after a call to Send() before packets are sent. During this time, new messages may be combined in queued packets. Default value: 10ms.
            */
            public get SendDelay(): number;
            public set SendDelay(value: number);
            /** Defines the maximum size in bytes of a reliable message which is considered small enough to include in a combined message. Default value = 100.
            Since each message sent to a server contains IP information and a UDP header, duplicating this information for every message sent can be inefficient in the case where there are many small messages being sent frequently. Many small reliable messages can be combined into one longer reliable message, saving space in the waiting buffer. Unity Multiplayer will automatically combine up to MaxCombinedReliableMessageCount small messages into one message. To qualify as a small message, the data payload of the message should not be greater than MaxCombinedReliableMessageSize.
            */
            public get MaxCombinedReliableMessageSize(): number;
            public set MaxCombinedReliableMessageSize(value: number);
            /** Defines the maximum number of small reliable messages that can be included in one combined message. Default value = 10.
            Since each message sent to a server contains IP information and a UDP header, duplicating this information for every message sent can be inefficient in the case where there are many small messages being sent frequently. Many small reliable messages can be combined into one longer reliable message, saving space in the waiting buffer. Unity Multiplayer will automatically combine up to MaxCombinedReliableMessageCount small messages into one message. To qualify as a small message, the data payload of the message should not be greater than MaxCombinedReliableMessageSize.
            */
            public get MaxCombinedReliableMessageCount(): number;
            public set MaxCombinedReliableMessageCount(value: number);
            /** Defines maximum number of messages that can be held in the queue for sending. Default value = 128.
            This buffer serves to smooth spikes in traffic and decreases network jitter. If the queue is full, a NoResources error will result from any calls to Send(). Setting this value greater than around 300 is likely to cause significant delaying of message delivering and can make game unplayable.
            */
            public get MaxSentMessageQueueSize(): number;
            public set MaxSentMessageQueueSize(value: number);
            /** Determines the size of the buffer used to store reliable messages that are waiting for acknowledgement. It can be set to Acks32, Acks64, Acks96, or Acks128. Depends of this setting buffer can hold 32, 64, 96, or 128 messages. Default value = Ack32.
            Messages sent on reliable quality of service channels are stored in a special buffer while they wait for acknowledgement from the peer. This buffer can be either 32, 64, 96 or 128 positions long. It is recommended to begin with this value set to Ack32, which defines a buffer up to 32 messages in size. If you receive NoResources errors often when you send reliable messages, change this value to the next possible size.
            */
            public get AcksType(): UnityEngine.Networking.ConnectionAcksType;
            public set AcksType(value: UnityEngine.Networking.ConnectionAcksType);
            /** When starting a server use protocols that make use of platform specific optimisations where appropriate rather than cross-platform protocols. (Playstation/Xbox consoles only).
            */
            public get UsePlatformSpecificProtocols(): boolean;
            public set UsePlatformSpecificProtocols(value: boolean);
            /** Gets or sets the bandwidth in bytes per second that can be used by Unity Multiplayer. No traffic over this limit is allowed. Unity Multiplayer may internally reduce the bandwidth it uses due to flow control. The default value is 1.5MB/sec (1,536,000 bytes per second). The default value is intentionally a large number to allow all traffic to pass without delay.
            */
            public get InitialBandwidth(): number;
            public set InitialBandwidth(value: number);
            /** Defines, when multiplied internally by InitialBandwidth, the maximum bandwidth that can be used under burst conditions.
            */
            public get BandwidthPeakFactor(): number;
            public set BandwidthPeakFactor(value: number);
            /** WebSocket only. Defines the buffer size in bytes for received frames on a WebSocket host. If this value is 0 (the default), a 4 kilobyte buffer is used. Any other value results in a buffer of that size, in bytes.
            WebSocket message fragments are called "frames". A WebSocket host has a buffer to store incoming message frames. Therefore this buffer should be set to the largest legal frame size supported. If an incoming frame exceeds the buffer size, no error is reported. However, the buffer will invoke the user callback in order to create space for the overflow.
            */
            public get WebSocketReceiveBufferMaxSize(): number;
            public set WebSocketReceiveBufferMaxSize(value: number);
            /** Defines the size in bytes of the receiving buffer for UDP sockets. It is useful to set this parameter equal to the maximum size of a fragmented message. Default value is OS specific (usually 8kb).
            */
            public get UdpSocketReceiveBufferMaxSize(): number;
            public set UdpSocketReceiveBufferMaxSize(value: number);
            /** Defines path to SSL certificate file, for WebSocket via SSL communication.
            */
            public get SSLCertFilePath(): string;
            public set SSLCertFilePath(value: string);
            /** Defines the path to the file containing the private key for WebSocket via SSL communication.
            */
            public get SSLPrivateKeyFilePath(): string;
            public set SSLPrivateKeyFilePath(value: string);
            /** Defines the path to the file containing the certification authority (CA) certificate for WebSocket via SSL communication.
            */
            public get SSLCAFilePath(): string;
            public set SSLCAFilePath(value: string);
            /** (Read Only) The number of channels in the current configuration.
            */
            public get ChannelCount(): number;
            /** (Read Only) The number of shared order groups in current configuration.
            */
            public get SharedOrderChannelCount(): number;
            /** The list of channels belonging to the current configuration.
            Note: any ConnectionConfig passed as a parameter to a function in Unity Multiplayer is deep copied (that is, an entirely new copy is made, with no references to the original).
            */
            public get Channels(): System.Collections.Generic.List$1<UnityEngine.Networking.ChannelQOS>;
            /** Validate parameters of connection config. Will throw exceptions if parameters are incorrect.
            */
            public static Validate ($config: UnityEngine.Networking.ConnectionConfig) : void
            /** Adds a new channel to the configuration and returns the unique id of that channel.
            Channels are logical delimiters of traffic between peers. Every time you send data to a peer, you should use two ids: connection id and channel id. Channels are not only logically separate traffic but could each be configured with a different quality of service (QOS). In the example below, a configuration is created containing two channels with Unreliable and Reliable QOS types. This configuration is then used for sending data.
            * @param value Add new channel to configuration.
            * @returns Channel id, user can use this id to send message via this channel. 
            */
            public AddChannel ($value: UnityEngine.Networking.QosType) : number
            public MakeChannelsSharedOrder ($channelIndices: System.Collections.Generic.List$1<number>) : void
            /** Return the QoS set for the given channel or throw an out of range exception.
            * @param idx Index in array.
            * @returns Channel QoS. 
            */
            public GetChannel ($idx: number) : UnityEngine.Networking.QosType
            /** Return IList<byte> of channel IDs which belong to the group.
            * @param idx Group id.
            * @returns List of channel IDs belonging to the group. 
            */
            public GetSharedOrderChannels ($idx: number) : System.Collections.Generic.IList$1<number>
            public constructor ()
            public constructor ($config: UnityEngine.Networking.ConnectionConfig)
        }
        /** Networking Utility.
        */
        class Utility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetSourceID () : UnityEngine.Networking.Types.SourceID
            /** Utility function that accepts the access token for a network after it's received from the server.
            */
            public static SetAccessTokenForNetwork ($netId: UnityEngine.Networking.Types.NetworkID, $accessToken: UnityEngine.Networking.Types.NetworkAccessToken) : void
            /** Utility function to get this client's access token for a particular network, if it has been set.
            */
            public static GetAccessTokenForNetwork ($netId: UnityEngine.Networking.Types.NetworkID) : UnityEngine.Networking.Types.NetworkAccessToken
        }
        interface IMultipartFormSection
        {
            /** Returns the name of this section, if any.
            * @returns The section's name, or null. 
            */
            sectionName : string
            /** Returns the raw binary data contained in this section. Must not return null or a zero-length array.
            * @returns The raw binary data contained in this section. Must not be null or empty. 
            */
            sectionData : System.Array$1<number>
            /** Returns a string denoting the desired filename of this section on the destination server.
            * @returns The desired file name of this section, or null if this is not a file section. 
            */
            fileName : string
            /** Returns the value to use in the Content-Type header for this form section.
            * @returns The value to use in the Content-Type header, or null. 
            */
            contentType : string
        }
        /** A helper object for form sections containing generic, non-file data.
        */
        class MultipartFormDataSection extends System.Object implements UnityEngine.Networking.IMultipartFormSection
        {
            protected [__keep_incompatibility]: never;
            /** Returns the name of this section, if any.
            * @returns The section's name, or null. 
            */
            public get sectionName(): string;
            /** Returns the raw binary data contained in this section. Will not return null or a zero-length array.
            * @returns The raw binary data contained in this section. Will not be null or empty. 
            */
            public get sectionData(): System.Array$1<number>;
            /** Returns a string denoting the desired filename of this section on the destination server.
            * @returns The desired file name of this section, or null if this is not a file section. 
            */
            public get fileName(): string;
            /** Returns the value to use in this section's Content-Type header.
            * @returns The Content-Type header for this section, or null. 
            */
            public get contentType(): string;
            public constructor ($name: string, $data: System.Array$1<number>, $contentType: string)
            public constructor ($name: string, $data: System.Array$1<number>)
            public constructor ($data: System.Array$1<number>)
            public constructor ($name: string, $data: string, $encoding: System.Text.Encoding, $contentType: string)
            public constructor ($name: string, $data: string, $contentType: string)
            public constructor ($name: string, $data: string)
            public constructor ($data: string)
            public constructor ()
        }
        /** A helper object for adding file uploads to multipart forms via the [IMultipartFormSection] API.
        */
        class MultipartFormFileSection extends System.Object implements UnityEngine.Networking.IMultipartFormSection
        {
            protected [__keep_incompatibility]: never;
            /** Returns the name of this section, if any.
            * @returns The section's name, or null. 
            */
            public get sectionName(): string;
            /** Returns the raw binary data contained in this section. Will not return null or a zero-length array.
            * @returns The raw binary data contained in this section. Will not be null or empty. 
            */
            public get sectionData(): System.Array$1<number>;
            /** Returns a string denoting the desired filename of this section on the destination server.
            * @returns The desired file name of this section, or null if this is not a file section. 
            */
            public get fileName(): string;
            /** Returns the value of the section's Content-Type header.
            * @returns The Content-Type header for this section, or null. 
            */
            public get contentType(): string;
            public constructor ($name: string, $data: System.Array$1<number>, $fileName: string, $contentType: string)
            public constructor ($data: System.Array$1<number>)
            public constructor ($fileName: string, $data: System.Array$1<number>)
            public constructor ($name: string, $data: string, $dataEncoding: System.Text.Encoding, $fileName: string)
            public constructor ($data: string, $dataEncoding: System.Text.Encoding, $fileName: string)
            public constructor ($data: string, $fileName: string)
            public constructor ()
        }
        /** Asynchronous operation object returned from UnityWebRequest.SendWebRequest().
        You can yield until it continues, register an event handler with AsyncOperation.completed, or manually check whether it's done (AsyncOperation.isDone) or progress (AsyncOperation.progress).
        */
        class UnityWebRequestAsyncOperation extends UnityEngine.AsyncOperation
        {
            protected [__keep_incompatibility]: never;
            /** Returns the associated UnityWebRequest that created the operation.
            */
            public get webRequest(): UnityEngine.Networking.UnityWebRequest;
            public constructor ()
        }
        /** The UnityWebRequest object is used to communicate with web servers.
        */
        class UnityWebRequest extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** The string "GET", commonly used as the verb for an HTTP GET request.
            */
            public static kHttpVerbGET : string
            /** The string "HEAD", commonly used as the verb for an HTTP HEAD request.
            */
            public static kHttpVerbHEAD : string
            /** The string "POST", commonly used as the verb for an HTTP POST request.
            */
            public static kHttpVerbPOST : string
            /** The string "PUT", commonly used as the verb for an HTTP PUT request.
            */
            public static kHttpVerbPUT : string
            /** The string "CREATE", commonly used as the verb for an HTTP CREATE request.
            */
            public static kHttpVerbCREATE : string
            /** The string "DELETE", commonly used as the verb for an HTTP DELETE request.
            */
            public static kHttpVerbDELETE : string
            /** If true, any CertificateHandler attached to this UnityWebRequest will have CertificateHandler.Dispose called automatically when UnityWebRequest.Dispose is called.
            */
            public get disposeCertificateHandlerOnDispose(): boolean;
            public set disposeCertificateHandlerOnDispose(value: boolean);
            /** If true, any DownloadHandler attached to this UnityWebRequest will have DownloadHandler.Dispose called automatically when UnityWebRequest.Dispose is called.
            */
            public get disposeDownloadHandlerOnDispose(): boolean;
            public set disposeDownloadHandlerOnDispose(value: boolean);
            /** If true, any UploadHandler attached to this UnityWebRequest will have UploadHandler.Dispose called automatically when UnityWebRequest.Dispose is called.
            */
            public get disposeUploadHandlerOnDispose(): boolean;
            public set disposeUploadHandlerOnDispose(value: boolean);
            /** Defines the HTTP verb used by this UnityWebRequest, such as GET or POST.
            */
            public get method(): string;
            public set method(value: string);
            /** A human-readable string describing any system errors encountered by this UnityWebRequest object while handling HTTP requests or responses. (Read Only)
            */
            public get error(): string;
            /** Determines whether this UnityWebRequest will include Expect: 100-Continue in its outgoing request headers. (Default: true).
            */
            public get useHttpContinue(): boolean;
            public set useHttpContinue(value: boolean);
            /** Defines the target URL for the UnityWebRequest to communicate with.
            */
            public get url(): string;
            public set url(value: string);
            /** Defines the target URI for the UnityWebRequest to communicate with.
            */
            public get uri(): System.Uri;
            public set uri(value: System.Uri);
            /** The numeric HTTP response code returned by the server, such as 200, 404 or 500. (Read Only)
            */
            public get responseCode(): bigint;
            /** Returns a floating-point value between 0.0 and 1.0, indicating the progress of uploading body data to the server.
            */
            public get uploadProgress(): number;
            /** Returns true while a UnityWebRequest’s configuration properties can be altered. (Read Only)
            */
            public get isModifiable(): boolean;
            /** Returns true after the UnityWebRequest has finished communicating with the remote server. (Read Only)
            */
            public get isDone(): boolean;
            /** Returns true after this UnityWebRequest encounters a system error. (Read Only)
            */
            public get isNetworkError(): boolean;
            /** Returns true after this UnityWebRequest receives an HTTP response code indicating an error. (Read Only)
            */
            public get isHttpError(): boolean;
            /** Returns a floating-point value between 0.0 and 1.0, indicating the progress of downloading body data from the server. (Read Only)
            */
            public get downloadProgress(): number;
            /** Returns the number of bytes of body data the system has uploaded to the remote server. (Read Only)
            */
            public get uploadedBytes(): bigint;
            /** Returns the number of bytes of body data the system has downloaded from the remote server. (Read Only)
            */
            public get downloadedBytes(): bigint;
            /** Indicates the number of redirects which this UnityWebRequest will follow before halting with a “Redirect Limit Exceeded” system error.
            */
            public get redirectLimit(): number;
            public set redirectLimit(value: number);
            /** Holds a reference to the UploadHandler object which manages body data to be uploaded to the remote server.
            */
            public get uploadHandler(): UnityEngine.Networking.UploadHandler;
            public set uploadHandler(value: UnityEngine.Networking.UploadHandler);
            /** Holds a reference to a DownloadHandler object, which manages body data received from the remote server by this UnityWebRequest.
            */
            public get downloadHandler(): UnityEngine.Networking.DownloadHandler;
            public set downloadHandler(value: UnityEngine.Networking.DownloadHandler);
            /** Holds a reference to a CertificateHandler object, which manages certificate validation for this UnityWebRequest.
            */
            public get certificateHandler(): UnityEngine.Networking.CertificateHandler;
            public set certificateHandler(value: UnityEngine.Networking.CertificateHandler);
            /** Sets UnityWebRequest to attempt to abort after the number of seconds in timeout have passed.
            */
            public get timeout(): number;
            public set timeout(value: number);
            public static ClearCookieCache () : void
            public static ClearCookieCache ($uri: System.Uri) : void
            public Dispose () : void
            public SendWebRequest () : UnityEngine.Networking.UnityWebRequestAsyncOperation
            public Abort () : void
            /** Retrieves the value of a custom request header.
            * @param name Name of the custom request header. Case-insensitive.
            * @returns The value of the custom request header. If no custom header with a matching name has been set, returns an empty string. 
            */
            public GetRequestHeader ($name: string) : string
            /** Set a HTTP request header to a custom value.
            * @param name The key of the header to be set. Case-sensitive.
            * @param value The header's intended value.
            */
            public SetRequestHeader ($name: string, $value: string) : void
            /** Retrieves the value of a response header from the latest HTTP response received.
            * @param name The name of the HTTP header to retrieve. Case-insensitive.
            * @returns The value of the HTTP header from the latest HTTP response. If no header with a matching name has been received, or no responses have been received, returns null. 
            */
            public GetResponseHeader ($name: string) : string
            public GetResponseHeaders () : System.Collections.Generic.Dictionary$2<string, string>
            /** Create a UnityWebRequest for HTTP GET.
            * @param uri The URI of the resource to retrieve via HTTP GET.
            * @returns An object that retrieves data from the uri. 
            */
            public static Get ($uri: string) : UnityEngine.Networking.UnityWebRequest
            /** Create a UnityWebRequest for HTTP GET.
            * @param uri The URI of the resource to retrieve via HTTP GET.
            * @returns An object that retrieves data from the uri. 
            */
            public static Get ($uri: System.Uri) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured for HTTP DELETE.
            * @param uri The URI to which a DELETE request should be sent.
            * @returns A UnityWebRequest configured to send an HTTP DELETE request. 
            */
            public static Delete ($uri: string) : UnityEngine.Networking.UnityWebRequest
            public static Delete ($uri: System.Uri) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to send a HTTP HEAD request.
            * @param uri The URI to which to send a HTTP HEAD request.
            * @returns A UnityWebRequest configured to transmit a HTTP HEAD request. 
            */
            public static Head ($uri: string) : UnityEngine.Networking.UnityWebRequest
            public static Head ($uri: System.Uri) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to upload raw data to a remote server via HTTP PUT.
            * @param uri The URI to which the data will be sent.
            * @param bodyData The data to transmit to the remote server.
            If a string, the string will be converted to raw bytes via <a href="http:msdn.microsoft.comen-uslibrarysystem.text.encoding.utf8">System.Text.Encoding.UTF8<a>.
            * @returns A UnityWebRequest configured to transmit bodyData to uri via HTTP PUT. 
            */
            public static Put ($uri: string, $bodyData: System.Array$1<number>) : UnityEngine.Networking.UnityWebRequest
            public static Put ($uri: System.Uri, $bodyData: System.Array$1<number>) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to upload raw data to a remote server via HTTP PUT.
            * @param uri The URI to which the data will be sent.
            * @param bodyData The data to transmit to the remote server.
            If a string, the string will be converted to raw bytes via <a href="http:msdn.microsoft.comen-uslibrarysystem.text.encoding.utf8">System.Text.Encoding.UTF8<a>.
            * @returns A UnityWebRequest configured to transmit bodyData to uri via HTTP PUT. 
            */
            public static Put ($uri: string, $bodyData: string) : UnityEngine.Networking.UnityWebRequest
            public static Put ($uri: System.Uri, $bodyData: string) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to send form data to a server via HTTP POST.
            * @param uri The target URI to which form data will be transmitted.
            * @param postData Form body data. Will be URLEncoded prior to transmission.
            * @returns A UnityWebRequest configured to send form data to uri via POST. 
            */
            public static Post ($uri: string, $postData: string) : UnityEngine.Networking.UnityWebRequest
            public static Post ($uri: System.Uri, $postData: string) : UnityEngine.Networking.UnityWebRequest
            /** Create a UnityWebRequest configured to send form data to a server via HTTP POST.
            * @param uri The target URI to which form data will be transmitted.
            * @param formData Form fields or files encapsulated in a WWWForm object, for formatting and transmission to the remote server.
            * @returns A UnityWebRequest configured to send form data to uri via POST. 
            */
            public static Post ($uri: string, $formData: UnityEngine.WWWForm) : UnityEngine.Networking.UnityWebRequest
            public static Post ($uri: System.Uri, $formData: UnityEngine.WWWForm) : UnityEngine.Networking.UnityWebRequest
            public static Post ($uri: string, $multipartFormSections: System.Collections.Generic.List$1<UnityEngine.Networking.IMultipartFormSection>) : UnityEngine.Networking.UnityWebRequest
            public static Post ($uri: System.Uri, $multipartFormSections: System.Collections.Generic.List$1<UnityEngine.Networking.IMultipartFormSection>) : UnityEngine.Networking.UnityWebRequest
            public static Post ($uri: string, $multipartFormSections: System.Collections.Generic.List$1<UnityEngine.Networking.IMultipartFormSection>, $boundary: System.Array$1<number>) : UnityEngine.Networking.UnityWebRequest
            public static Post ($uri: System.Uri, $multipartFormSections: System.Collections.Generic.List$1<UnityEngine.Networking.IMultipartFormSection>, $boundary: System.Array$1<number>) : UnityEngine.Networking.UnityWebRequest
            public static Post ($uri: string, $formFields: System.Collections.Generic.Dictionary$2<string, string>) : UnityEngine.Networking.UnityWebRequest
            public static Post ($uri: System.Uri, $formFields: System.Collections.Generic.Dictionary$2<string, string>) : UnityEngine.Networking.UnityWebRequest
            /** Escapes characters in a string to ensure they are URL-friendly.
            * @param s A string with characters to be escaped.
            * @param e The text encoding to use.
            */
            public static EscapeURL ($s: string) : string
            /** Escapes characters in a string to ensure they are URL-friendly.
            * @param s A string with characters to be escaped.
            * @param e The text encoding to use.
            */
            public static EscapeURL ($s: string, $e: System.Text.Encoding) : string
            /** Converts URL-friendly escape sequences back to normal text.
            * @param s A string containing escaped characters.
            * @param e The text encoding to use.
            */
            public static UnEscapeURL ($s: string) : string
            /** Converts URL-friendly escape sequences back to normal text.
            * @param s A string containing escaped characters.
            * @param e The text encoding to use.
            */
            public static UnEscapeURL ($s: string, $e: System.Text.Encoding) : string
            public static SerializeFormSections ($multipartFormSections: System.Collections.Generic.List$1<UnityEngine.Networking.IMultipartFormSection>, $boundary: System.Array$1<number>) : System.Array$1<number>
            public static GenerateBoundary () : System.Array$1<number>
            public static SerializeSimpleForm ($formFields: System.Collections.Generic.Dictionary$2<string, string>) : System.Array$1<number>
            public constructor ()
            public constructor ($url: string)
            public constructor ($uri: System.Uri)
            public constructor ($url: string, $method: string)
            public constructor ($uri: System.Uri, $method: string)
            public constructor ($url: string, $method: string, $downloadHandler: UnityEngine.Networking.DownloadHandler, $uploadHandler: UnityEngine.Networking.UploadHandler)
            public constructor ($uri: System.Uri, $method: string, $downloadHandler: UnityEngine.Networking.DownloadHandler, $uploadHandler: UnityEngine.Networking.UploadHandler)
        }
        /** Helper object for UnityWebRequests. Manages the buffering and transmission of body data during HTTP requests.
        */
        class UploadHandler extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** The raw data which will be transmitted to the remote server as body data. (Read Only)
            */
            public get data(): System.Array$1<number>;
            /** Determines the default Content-Type header which will be transmitted with the outbound HTTP request.
            */
            public get contentType(): string;
            public set contentType(value: string);
            /** Returns the proportion of data uploaded to the remote server compared to the total amount of data to upload. (Read Only)
            */
            public get progress(): number;
            public Dispose () : void
        }
        /** Manage and process HTTP response body data received from a remote server.
        */
        class DownloadHandler extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Returns true if this DownloadHandler has been informed by its parent UnityWebRequest that all data has been received, and this DownloadHandler has completed any necessary post-download processing. (Read Only)
            */
            public get isDone(): boolean;
            /** Returns the raw bytes downloaded from the remote server, or null. (Read Only)
            */
            public get data(): System.Array$1<number>;
            /** Convenience property. Returns the bytes from data interpreted as a UTF8 string. (Read Only)
            */
            public get text(): string;
            public Dispose () : void
        }
        /** Responsible for rejecting or accepting certificates received on https requests.
        */
        class CertificateHandler extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
        }
        /** A general-purpose DownloadHandler implementation which stores received data in a native byte buffer.
        */
        class DownloadHandlerBuffer extends UnityEngine.Networking.DownloadHandler implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Returns a copy of the native-memory buffer interpreted as a UTF8 string.
            * @param www A finished UnityWebRequest object with DownloadHandlerBuffer attached.
            * @returns The same as DownloadHandlerBuffer.text 
            */
            public static GetContent ($www: UnityEngine.Networking.UnityWebRequest) : string
            public constructor ()
        }
        /** An abstract base class for user-created scripting-driven DownloadHandler implementations.
        */
        class DownloadHandlerScript extends UnityEngine.Networking.DownloadHandler implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($preallocatedBuffer: System.Array$1<number>)
        }
        /** Download handler for saving the downloaded data to file.
        */
        class DownloadHandlerFile extends UnityEngine.Networking.DownloadHandler implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Should the created file be removed if download is aborted (manually or due to an error). Default: false.
            */
            public get removeFileOnAbort(): boolean;
            public set removeFileOnAbort(value: boolean);
            public constructor ($path: string)
            public constructor ($path: string, $append: boolean)
            public constructor ()
        }
        /** A general-purpose UploadHandler subclass, using a native-code memory buffer.
        */
        class UploadHandlerRaw extends UnityEngine.Networking.UploadHandler implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($data: System.Array$1<number>)
            public constructor ()
        }
        /** A specialized UploadHandler that reads data from a given file and sends raw bytes to the server as the request body.
        */
        class UploadHandlerFile extends UnityEngine.Networking.UploadHandler implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($filePath: string)
            public constructor ()
        }
        /** Helpers for downloading asset bundles using UnityWebRequest.
        */
        class UnityWebRequestAssetBundle extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param uri The URI of the asset bundle to download.
            * @param crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle ($uri: string) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param uri The URI of the asset bundle to download.
            * @param crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle ($uri: System.Uri) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param uri The URI of the asset bundle to download.
            * @param crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle ($uri: string, $crc: number) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param uri The URI of the asset bundle to download.
            * @param crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle ($uri: System.Uri, $crc: number) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param uri The URI of the asset bundle to download.
            * @param crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle ($uri: string, $version: number, $crc: number) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param uri The URI of the asset bundle to download.
            * @param crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle ($uri: System.Uri, $version: number, $crc: number) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param uri The URI of the asset bundle to download.
            * @param crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle ($uri: string, $hash: UnityEngine.Hash128, $crc?: number) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param uri The URI of the asset bundle to download.
            * @param crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle ($uri: System.Uri, $hash: UnityEngine.Hash128, $crc?: number) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param uri The URI of the asset bundle to download.
            * @param crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle ($uri: string, $cachedAssetBundle: UnityEngine.CachedAssetBundle, $crc?: number) : UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param uri The URI of the asset bundle to download.
            * @param crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle ($uri: System.Uri, $cachedAssetBundle: UnityEngine.CachedAssetBundle, $crc?: number) : UnityEngine.Networking.UnityWebRequest
        }
        /** A DownloadHandler subclass specialized for downloading AssetBundles.
        */
        class DownloadHandlerAssetBundle extends UnityEngine.Networking.DownloadHandler implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Returns the downloaded AssetBundle, or null. (Read Only)
            */
            public get assetBundle(): UnityEngine.AssetBundle;
            /** Returns the downloaded AssetBundle, or null.
            * @param www A finished UnityWebRequest object with DownloadHandlerAssetBundle attached.
            * @returns The same as DownloadHandlerAssetBundle.assetBundle 
            */
            public static GetContent ($www: UnityEngine.Networking.UnityWebRequest) : UnityEngine.AssetBundle
            public constructor ($url: string, $crc: number)
            public constructor ($url: string, $version: number, $crc: number)
            public constructor ($url: string, $hash: UnityEngine.Hash128, $crc: number)
            public constructor ($url: string, $name: string, $hash: UnityEngine.Hash128, $crc: number)
            public constructor ($url: string, $cachedBundle: UnityEngine.CachedAssetBundle, $crc: number)
            public constructor ()
        }
        /** Helpers for downloading multimedia files using UnityWebRequest.
        */
        class UnityWebRequestMultimedia extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Create a UnityWebRequest to download an audio clip via HTTP GET and create an AudioClip based on the retrieved data.
            * @param uri The URI of the audio clip to download.
            * @param audioType The type of audio encoding for the downloaded audio clip. See AudioType.
            * @returns A UnityWebRequest properly configured to download an audio clip and convert it to an AudioClip. 
            */
            public static GetAudioClip ($uri: string, $audioType: UnityEngine.AudioType) : UnityEngine.Networking.UnityWebRequest
            public static GetAudioClip ($uri: System.Uri, $audioType: UnityEngine.AudioType) : UnityEngine.Networking.UnityWebRequest
        }
        /** A DownloadHandler subclass specialized for downloading audio data for use as AudioClip objects.
        */
        class DownloadHandlerAudioClip extends UnityEngine.Networking.DownloadHandler implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Returns the downloaded AudioClip, or null. (Read Only)
            */
            public get audioClip(): UnityEngine.AudioClip;
            /** Create streaming AudioClip.
            */
            public get streamAudio(): boolean;
            public set streamAudio(value: boolean);
            /** Create AudioClip that is compressed in memory.
            */
            public get compressed(): boolean;
            public set compressed(value: boolean);
            /** Returns the downloaded AudioClip, or null.
            * @param www A finished UnityWebRequest object with DownloadHandlerAudioClip attached.
            * @returns The same as DownloadHandlerAudioClip.audioClip 
            */
            public static GetContent ($www: UnityEngine.Networking.UnityWebRequest) : UnityEngine.AudioClip
            public constructor ($url: string, $audioType: UnityEngine.AudioType)
            public constructor ($uri: System.Uri, $audioType: UnityEngine.AudioType)
            public constructor ()
        }
        /** MovieTexture has been removed. Use VideoPlayer instead.
        */
        class DownloadHandlerMovieTexture extends UnityEngine.Networking.DownloadHandler implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** MovieTexture has been removed. Use VideoPlayer instead.
            */
            public get movieTexture(): UnityEngine.MovieTexture;
            /** MovieTexture has been removed. Use VideoPlayer instead.
            */
            public static GetContent ($uwr: UnityEngine.Networking.UnityWebRequest) : UnityEngine.MovieTexture
            public constructor ()
        }
        /** Helpers for downloading image files into Textures using UnityWebRequest.
        */
        class UnityWebRequestTexture extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Create a UnityWebRequest intended to download an image via HTTP GET and create a Texture based on the retrieved data.
            * @param uri The URI of the image to download.
            * @param nonReadable If true, the texture's raw data will not be accessible to script. This can conserve memory. Default: false.
            * @returns A UnityWebRequest properly configured to download an image and convert it to a Texture. 
            */
            public static GetTexture ($uri: string) : UnityEngine.Networking.UnityWebRequest
            public static GetTexture ($uri: System.Uri) : UnityEngine.Networking.UnityWebRequest
            /** Create a UnityWebRequest intended to download an image via HTTP GET and create a Texture based on the retrieved data.
            * @param uri The URI of the image to download.
            * @param nonReadable If true, the texture's raw data will not be accessible to script. This can conserve memory. Default: false.
            * @returns A UnityWebRequest properly configured to download an image and convert it to a Texture. 
            */
            public static GetTexture ($uri: string, $nonReadable: boolean) : UnityEngine.Networking.UnityWebRequest
            public static GetTexture ($uri: System.Uri, $nonReadable: boolean) : UnityEngine.Networking.UnityWebRequest
        }
        /** A DownloadHandler subclass specialized for downloading images for use as Texture objects.
        */
        class DownloadHandlerTexture extends UnityEngine.Networking.DownloadHandler implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Returns the downloaded Texture, or null. (Read Only)
            */
            public get texture(): UnityEngine.Texture2D;
            /** Returns the downloaded Texture, or null.
            * @param www A finished UnityWebRequest object with DownloadHandlerTexture attached.
            * @returns The same as DownloadHandlerTexture.texture 
            */
            public static GetContent ($www: UnityEngine.Networking.UnityWebRequest) : UnityEngine.Texture2D
            public constructor ()
            public constructor ($readable: boolean)
        }
    }
    namespace System.Net {
        class EndPoint extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get AddressFamily(): System.Net.Sockets.AddressFamily;
            public Serialize () : System.Net.SocketAddress
            public Create ($socketAddress: System.Net.SocketAddress) : System.Net.EndPoint
        }
        enum SecurityProtocolType
        { SystemDefault = 0, Ssl3 = 48, Tls = 192, Tls11 = 768, Tls12 = 3072 }
        enum AuthenticationSchemes
        { None = 0, Digest = 1, Negotiate = 2, Ntlm = 4, Basic = 8, Anonymous = 32768, IntegratedWindowsAuthentication = 6 }
        interface AuthenticationSchemeSelector
        { 
        (httpRequest: System.Net.HttpListenerRequest) : System.Net.AuthenticationSchemes; 
        Invoke?: (httpRequest: System.Net.HttpListenerRequest) => System.Net.AuthenticationSchemes;
        }
        var AuthenticationSchemeSelector: { new (func: (httpRequest: System.Net.HttpListenerRequest) => System.Net.AuthenticationSchemes): AuthenticationSchemeSelector; }
        class HttpListenerRequest extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get AcceptTypes(): System.Array$1<string>;
            public get ClientCertificateError(): number;
            public get ContentEncoding(): System.Text.Encoding;
            public get ContentLength64(): bigint;
            public get ContentType(): string;
            public get Cookies(): System.Net.CookieCollection;
            public get HasEntityBody(): boolean;
            public get Headers(): System.Collections.Specialized.NameValueCollection;
            public get HttpMethod(): string;
            public get InputStream(): System.IO.Stream;
            public get IsAuthenticated(): boolean;
            public get IsLocal(): boolean;
            public get IsSecureConnection(): boolean;
            public get KeepAlive(): boolean;
            public get LocalEndPoint(): System.Net.IPEndPoint;
            public get ProtocolVersion(): System.Version;
            public get QueryString(): System.Collections.Specialized.NameValueCollection;
            public get RawUrl(): string;
            public get RemoteEndPoint(): System.Net.IPEndPoint;
            public get RequestTraceIdentifier(): System.Guid;
            public get Url(): System.Uri;
            public get UrlReferrer(): System.Uri;
            public get UserAgent(): string;
            public get UserHostAddress(): string;
            public get UserHostName(): string;
            public get UserLanguages(): System.Array$1<string>;
            public get ServiceName(): string;
            public get TransportContext(): System.Net.TransportContext;
            public get IsWebSocketRequest(): boolean;
            public BeginGetClientCertificate ($requestCallback: System.AsyncCallback, $state: any) : System.IAsyncResult
            public EndGetClientCertificate ($asyncResult: System.IAsyncResult) : System.Security.Cryptography.X509Certificates.X509Certificate2
            public GetClientCertificate () : System.Security.Cryptography.X509Certificates.X509Certificate2
            public GetClientCertificateAsync () : System.Threading.Tasks.Task$1<System.Security.Cryptography.X509Certificates.X509Certificate2>
        }
        class Authorization extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Message(): string;
            public get ConnectionGroupId(): string;
            public get Complete(): boolean;
            public get ProtectionRealm(): System.Array$1<string>;
            public set ProtectionRealm(value: System.Array$1<string>);
            public get MutuallyAuthenticated(): boolean;
            public set MutuallyAuthenticated(value: boolean);
            public constructor ($token: string)
            public constructor ($token: string, $finished: boolean)
            public constructor ($token: string, $finished: boolean, $connectionGroupId: string)
            public constructor ()
        }
        class CredentialCache extends System.Object implements System.Net.ICredentials, System.Collections.IEnumerable, System.Net.ICredentialsByHost
        {
            protected [__keep_incompatibility]: never;
            public static get DefaultCredentials(): System.Net.ICredentials;
            public static get DefaultNetworkCredentials(): System.Net.NetworkCredential;
            public Add ($uriPrefix: System.Uri, $authType: string, $cred: System.Net.NetworkCredential) : void
            public Add ($host: string, $port: number, $authenticationType: string, $credential: System.Net.NetworkCredential) : void
            public Remove ($uriPrefix: System.Uri, $authType: string) : void
            public Remove ($host: string, $port: number, $authenticationType: string) : void
            public GetCredential ($uriPrefix: System.Uri, $authType: string) : System.Net.NetworkCredential
            public GetCredential ($host: string, $port: number, $authenticationType: string) : System.Net.NetworkCredential
            public GetEnumerator () : System.Collections.IEnumerator
            public constructor ()
            public GetCredential ($uri: System.Uri, $authType: string) : System.Net.NetworkCredential
        }
        interface ICredentials
        {
            GetCredential ($uri: System.Uri, $authType: string) : System.Net.NetworkCredential
        }
        interface ICredentialsByHost
        {
            GetCredential ($host: string, $port: number, $authenticationType: string) : System.Net.NetworkCredential
        }
        class NetworkCredential extends System.Object implements System.Net.ICredentials, System.Net.ICredentialsByHost
        {
            protected [__keep_incompatibility]: never;
            public get UserName(): string;
            public set UserName(value: string);
            public get Password(): string;
            public set Password(value: string);
            public get SecurePassword(): System.Security.SecureString;
            public set SecurePassword(value: System.Security.SecureString);
            public get Domain(): string;
            public set Domain(value: string);
            public GetCredential ($uri: System.Uri, $authType: string) : System.Net.NetworkCredential
            public GetCredential ($host: string, $port: number, $authenticationType: string) : System.Net.NetworkCredential
            public constructor ()
            public constructor ($userName: string, $password: string)
            public constructor ($userName: string, $password: System.Security.SecureString)
            public constructor ($userName: string, $password: string, $domain: string)
            public constructor ($userName: string, $password: System.Security.SecureString, $domain: string)
        }
        class DnsEndPoint extends System.Net.EndPoint
        {
            protected [__keep_incompatibility]: never;
            public get Host(): string;
            public get AddressFamily(): System.Net.Sockets.AddressFamily;
            public get Port(): number;
            public constructor ($host: string, $port: number)
            public constructor ($host: string, $port: number, $addressFamily: System.Net.Sockets.AddressFamily)
            public constructor ()
        }
        class SocketAddress extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Family(): System.Net.Sockets.AddressFamily;
            public get Size(): number;
            public get_Item ($offset: number) : number
            public set_Item ($offset: number, $value: number) : void
            public constructor ($family: System.Net.Sockets.AddressFamily)
            public constructor ($family: System.Net.Sockets.AddressFamily, $size: number)
            public constructor ()
        }
        enum FtpStatusCode
        { Undefined = 0, RestartMarker = 110, ServiceTemporarilyNotAvailable = 120, DataAlreadyOpen = 125, OpeningData = 150, CommandOK = 200, CommandExtraneous = 202, DirectoryStatus = 212, FileStatus = 213, SystemType = 215, SendUserCommand = 220, ClosingControl = 221, ClosingData = 226, EnteringPassive = 227, LoggedInProceed = 230, ServerWantsSecureSession = 234, FileActionOK = 250, PathnameCreated = 257, SendPasswordCommand = 331, NeedLoginAccount = 332, FileCommandPending = 350, ServiceNotAvailable = 421, CantOpenData = 425, ConnectionClosed = 426, ActionNotTakenFileUnavailableOrBusy = 450, ActionAbortedLocalProcessingError = 451, ActionNotTakenInsufficientSpace = 452, CommandSyntaxError = 500, ArgumentSyntaxError = 501, CommandNotImplemented = 502, BadCommandSequence = 503, NotLoggedIn = 530, AccountNeeded = 532, ActionNotTakenFileUnavailable = 550, ActionAbortedUnknownPageType = 551, FileActionAborted = 552, ActionNotTakenFilenameNotAllowed = 553 }
        class GlobalProxySelection extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get Select(): System.Net.IWebProxy;
            public static set Select(value: System.Net.IWebProxy);
            public static GetEmptyWebProxy () : System.Net.IWebProxy
            public constructor ()
        }
        interface IWebProxy
        {
            Credentials : System.Net.ICredentials
            GetProxy ($destination: System.Uri) : System.Uri
            IsBypassed ($host: System.Uri) : boolean
        }
        class HttpListenerException extends System.ComponentModel.Win32Exception implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get ErrorCode(): number;
            public constructor ()
            public constructor ($errorCode: number)
            public constructor ($errorCode: number, $message: string)
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        enum HttpRequestHeader
        { CacheControl = 0, Connection = 1, Date = 2, KeepAlive = 3, Pragma = 4, Trailer = 5, TransferEncoding = 6, Upgrade = 7, Via = 8, Warning = 9, Allow = 10, ContentLength = 11, ContentType = 12, ContentEncoding = 13, ContentLanguage = 14, ContentLocation = 15, ContentMd5 = 16, ContentRange = 17, Expires = 18, LastModified = 19, Accept = 20, AcceptCharset = 21, AcceptEncoding = 22, AcceptLanguage = 23, Authorization = 24, Cookie = 25, Expect = 26, From = 27, Host = 28, IfMatch = 29, IfModifiedSince = 30, IfNoneMatch = 31, IfRange = 32, IfUnmodifiedSince = 33, MaxForwards = 34, ProxyAuthorization = 35, Referer = 36, Range = 37, Te = 38, Translate = 39, UserAgent = 40 }
        enum HttpResponseHeader
        { CacheControl = 0, Connection = 1, Date = 2, KeepAlive = 3, Pragma = 4, Trailer = 5, TransferEncoding = 6, Upgrade = 7, Via = 8, Warning = 9, Allow = 10, ContentLength = 11, ContentType = 12, ContentEncoding = 13, ContentLanguage = 14, ContentLocation = 15, ContentMd5 = 16, ContentRange = 17, Expires = 18, LastModified = 19, AcceptRanges = 20, Age = 21, ETag = 22, Location = 23, ProxyAuthenticate = 24, RetryAfter = 25, Server = 26, SetCookie = 27, Vary = 28, WwwAuthenticate = 29 }
        enum HttpStatusCode
        { Continue = 100, SwitchingProtocols = 101, OK = 200, Created = 201, Accepted = 202, NonAuthoritativeInformation = 203, NoContent = 204, ResetContent = 205, PartialContent = 206, MultipleChoices = 300, Ambiguous = 300, MovedPermanently = 301, Moved = 301, Found = 302, Redirect = 302, SeeOther = 303, RedirectMethod = 303, NotModified = 304, UseProxy = 305, Unused = 306, TemporaryRedirect = 307, RedirectKeepVerb = 307, BadRequest = 400, Unauthorized = 401, PaymentRequired = 402, Forbidden = 403, NotFound = 404, MethodNotAllowed = 405, NotAcceptable = 406, ProxyAuthenticationRequired = 407, RequestTimeout = 408, Conflict = 409, Gone = 410, LengthRequired = 411, PreconditionFailed = 412, RequestEntityTooLarge = 413, RequestUriTooLong = 414, UnsupportedMediaType = 415, RequestedRangeNotSatisfiable = 416, ExpectationFailed = 417, UpgradeRequired = 426, InternalServerError = 500, NotImplemented = 501, BadGateway = 502, ServiceUnavailable = 503, GatewayTimeout = 504, HttpVersionNotSupported = 505 }
        class HttpVersion extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Version10 : System.Version
            public static Version11 : System.Version
            public constructor ()
        }
        interface IAuthenticationModule
        {
            CanPreAuthenticate : boolean
            AuthenticationType : string
            Authenticate ($challenge: string, $request: System.Net.WebRequest, $credentials: System.Net.ICredentials) : System.Net.Authorization
            PreAuthenticate ($request: System.Net.WebRequest, $credentials: System.Net.ICredentials) : System.Net.Authorization
        }
        class WebRequest extends System.MarshalByRefObject implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public static get DefaultCachePolicy(): System.Net.Cache.RequestCachePolicy;
            public static set DefaultCachePolicy(value: System.Net.Cache.RequestCachePolicy);
            public get CachePolicy(): System.Net.Cache.RequestCachePolicy;
            public set CachePolicy(value: System.Net.Cache.RequestCachePolicy);
            public get Method(): string;
            public set Method(value: string);
            public get RequestUri(): System.Uri;
            public get ConnectionGroupName(): string;
            public set ConnectionGroupName(value: string);
            public get Headers(): System.Net.WebHeaderCollection;
            public set Headers(value: System.Net.WebHeaderCollection);
            public get ContentLength(): bigint;
            public set ContentLength(value: bigint);
            public get ContentType(): string;
            public set ContentType(value: string);
            public get Credentials(): System.Net.ICredentials;
            public set Credentials(value: System.Net.ICredentials);
            public get UseDefaultCredentials(): boolean;
            public set UseDefaultCredentials(value: boolean);
            public get Proxy(): System.Net.IWebProxy;
            public set Proxy(value: System.Net.IWebProxy);
            public get PreAuthenticate(): boolean;
            public set PreAuthenticate(value: boolean);
            public get Timeout(): number;
            public set Timeout(value: number);
            public get AuthenticationLevel(): System.Net.Security.AuthenticationLevel;
            public set AuthenticationLevel(value: System.Net.Security.AuthenticationLevel);
            public get ImpersonationLevel(): System.Security.Principal.TokenImpersonationLevel;
            public set ImpersonationLevel(value: System.Security.Principal.TokenImpersonationLevel);
            public static get DefaultWebProxy(): System.Net.IWebProxy;
            public static set DefaultWebProxy(value: System.Net.IWebProxy);
            public static Create ($requestUriString: string) : System.Net.WebRequest
            public static Create ($requestUri: System.Uri) : System.Net.WebRequest
            public static CreateDefault ($requestUri: System.Uri) : System.Net.WebRequest
            public static CreateHttp ($requestUriString: string) : System.Net.HttpWebRequest
            public static CreateHttp ($requestUri: System.Uri) : System.Net.HttpWebRequest
            public static RegisterPrefix ($prefix: string, $creator: System.Net.IWebRequestCreate) : boolean
            public GetRequestStream () : System.IO.Stream
            public GetResponse () : System.Net.WebResponse
            public BeginGetResponse ($callback: System.AsyncCallback, $state: any) : System.IAsyncResult
            public EndGetResponse ($asyncResult: System.IAsyncResult) : System.Net.WebResponse
            public BeginGetRequestStream ($callback: System.AsyncCallback, $state: any) : System.IAsyncResult
            public EndGetRequestStream ($asyncResult: System.IAsyncResult) : System.IO.Stream
            public GetRequestStreamAsync () : System.Threading.Tasks.Task$1<System.IO.Stream>
            public GetResponseAsync () : System.Threading.Tasks.Task$1<System.Net.WebResponse>
            public Abort () : void
            public static GetSystemWebProxy () : System.Net.IWebProxy
        }
        interface ICertificatePolicy
        {
            CheckValidationResult ($srvPoint: System.Net.ServicePoint, $certificate: System.Security.Cryptography.X509Certificates.X509Certificate, $request: System.Net.WebRequest, $certificateProblem: number) : boolean
        }
        class ServicePoint extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Address(): System.Uri;
            public get BindIPEndPointDelegate(): System.Net.BindIPEndPoint;
            public set BindIPEndPointDelegate(value: System.Net.BindIPEndPoint);
            public get ConnectionLeaseTimeout(): number;
            public set ConnectionLeaseTimeout(value: number);
            public get ConnectionLimit(): number;
            public set ConnectionLimit(value: number);
            public get ConnectionName(): string;
            public get CurrentConnections(): number;
            public get IdleSince(): Date;
            public get MaxIdleTime(): number;
            public set MaxIdleTime(value: number);
            public get ProtocolVersion(): System.Version;
            public get ReceiveBufferSize(): number;
            public set ReceiveBufferSize(value: number);
            public get SupportsPipelining(): boolean;
            public get Expect100Continue(): boolean;
            public set Expect100Continue(value: boolean);
            public get UseNagleAlgorithm(): boolean;
            public set UseNagleAlgorithm(value: boolean);
            public get Certificate(): System.Security.Cryptography.X509Certificates.X509Certificate;
            public get ClientCertificate(): System.Security.Cryptography.X509Certificates.X509Certificate;
            public SetTcpKeepAlive ($enabled: boolean, $keepAliveTime: number, $keepAliveInterval: number) : void
            public CloseConnectionGroup ($connectionGroupName: string) : boolean
        }
        class IPAddress extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Any : System.Net.IPAddress
            public static Loopback : System.Net.IPAddress
            public static Broadcast : System.Net.IPAddress
            public static None : System.Net.IPAddress
            public static IPv6Any : System.Net.IPAddress
            public static IPv6Loopback : System.Net.IPAddress
            public static IPv6None : System.Net.IPAddress
            public get AddressFamily(): System.Net.Sockets.AddressFamily;
            public get ScopeId(): bigint;
            public set ScopeId(value: bigint);
            public get IsIPv6Multicast(): boolean;
            public get IsIPv6LinkLocal(): boolean;
            public get IsIPv6SiteLocal(): boolean;
            public get IsIPv6Teredo(): boolean;
            public get IsIPv4MappedToIPv6(): boolean;
            public static TryParse ($ipString: string, $address: $Ref<System.Net.IPAddress>) : boolean
            public static Parse ($ipString: string) : System.Net.IPAddress
            public GetAddressBytes () : System.Array$1<number>
            public static HostToNetworkOrder ($host: bigint) : bigint
            public static HostToNetworkOrder ($host: number) : number
            public static NetworkToHostOrder ($network: bigint) : bigint
            public static NetworkToHostOrder ($network: number) : number
            public static IsLoopback ($address: System.Net.IPAddress) : boolean
            public MapToIPv6 () : System.Net.IPAddress
            public MapToIPv4 () : System.Net.IPAddress
            public constructor ($newAddress: bigint)
            public constructor ($address: System.Array$1<number>, $scopeid: bigint)
            public constructor ($address: System.Array$1<number>)
            public constructor ()
        }
        class IPEndPoint extends System.Net.EndPoint
        {
            protected [__keep_incompatibility]: never;
            public static MinPort : number
            public static MaxPort : number
            public get AddressFamily(): System.Net.Sockets.AddressFamily;
            public get Address(): System.Net.IPAddress;
            public set Address(value: System.Net.IPAddress);
            public get Port(): number;
            public set Port(value: number);
            public constructor ($address: bigint, $port: number)
            public constructor ($address: System.Net.IPAddress, $port: number)
            public constructor ()
        }
        class IPHostEntry extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get HostName(): string;
            public set HostName(value: string);
            public get Aliases(): System.Array$1<string>;
            public set Aliases(value: System.Array$1<string>);
            public get AddressList(): System.Array$1<System.Net.IPAddress>;
            public set AddressList(value: System.Array$1<System.Net.IPAddress>);
            public constructor ()
        }
        interface IWebRequestCreate
        {
            Create ($uri: System.Uri) : System.Net.WebRequest
        }
        interface HttpContinueDelegate
        { 
        (StatusCode: number, httpHeaders: System.Net.WebHeaderCollection) : void; 
        Invoke?: (StatusCode: number, httpHeaders: System.Net.WebHeaderCollection) => void;
        }
        var HttpContinueDelegate: { new (func: (StatusCode: number, httpHeaders: System.Net.WebHeaderCollection) => void): HttpContinueDelegate; }
        class WebHeaderCollection extends System.Collections.Specialized.NameValueCollection implements System.Collections.IEnumerable, System.Runtime.Serialization.IDeserializationCallback, System.Collections.ICollection, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Count(): number;
            public get Keys(): System.Collections.Specialized.NameObjectCollectionBase.KeysCollection;
            public get AllKeys(): System.Array$1<string>;
            public get_Item ($header: System.Net.HttpRequestHeader) : string
            public set_Item ($header: System.Net.HttpRequestHeader, $value: string) : void
            public get_Item ($header: System.Net.HttpResponseHeader) : string
            public set_Item ($header: System.Net.HttpResponseHeader, $value: string) : void
            public Add ($header: System.Net.HttpRequestHeader, $value: string) : void
            public Add ($header: System.Net.HttpResponseHeader, $value: string) : void
            public Set ($header: System.Net.HttpRequestHeader, $value: string) : void
            public Set ($header: System.Net.HttpResponseHeader, $value: string) : void
            public Remove ($header: System.Net.HttpRequestHeader) : void
            public Remove ($header: System.Net.HttpResponseHeader) : void
            public Add ($name: string, $value: string) : void
            public Add ($header: string) : void
            public Set ($name: string, $value: string) : void
            public Remove ($name: string) : void
            public ToByteArray () : System.Array$1<number>
            public static IsRestricted ($headerName: string) : boolean
            public static IsRestricted ($headerName: string, $response: boolean) : boolean
            public constructor ()
        }
        enum NetworkAccess
        { Accept = 128, Connect = 64 }
        class ProtocolViolationException extends System.InvalidOperationException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
        }
        class TransportContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public GetChannelBinding ($kind: System.Security.Authentication.ExtendedProtection.ChannelBindingKind) : System.Security.Authentication.ExtendedProtection.ChannelBinding
            public GetTlsTokenBindings () : System.Collections.Generic.IEnumerable$1<System.Security.Authentication.ExtendedProtection.TokenBinding>
        }
        enum TransportType
        { Udp = 1, Connectionless = 1, Tcp = 2, ConnectionOriented = 2, All = 3 }
        class WebException extends System.InvalidOperationException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Status(): System.Net.WebExceptionStatus;
            public get Response(): System.Net.WebResponse;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
            public constructor ($message: string, $status: System.Net.WebExceptionStatus)
            public constructor ($message: string, $innerException: System.Exception, $status: System.Net.WebExceptionStatus, $response: System.Net.WebResponse)
        }
        enum WebExceptionStatus
        { Success = 0, NameResolutionFailure = 1, ConnectFailure = 2, ReceiveFailure = 3, SendFailure = 4, PipelineFailure = 5, RequestCanceled = 6, ProtocolError = 7, ConnectionClosed = 8, TrustFailure = 9, SecureChannelFailure = 10, ServerProtocolViolation = 11, KeepAliveFailure = 12, Pending = 13, Timeout = 14, ProxyNameResolutionFailure = 15, UnknownError = 16, MessageLengthLimitExceeded = 17, CacheEntryNotFound = 18, RequestProhibitedByCachePolicy = 19, RequestProhibitedByProxy = 20 }
        class WebResponse extends System.MarshalByRefObject implements System.IDisposable, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get IsFromCache(): boolean;
            public get IsMutuallyAuthenticated(): boolean;
            public get ContentLength(): bigint;
            public set ContentLength(value: bigint);
            public get ContentType(): string;
            public set ContentType(value: string);
            public get ResponseUri(): System.Uri;
            public get Headers(): System.Net.WebHeaderCollection;
            public get SupportsHeaders(): boolean;
            public Close () : void
            public Dispose () : void
            public GetResponseStream () : System.IO.Stream
        }
        class WebPermissionAttribute extends System.Security.Permissions.CodeAccessSecurityAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Connect(): string;
            public set Connect(value: string);
            public get Accept(): string;
            public set Accept(value: string);
            public get ConnectPattern(): string;
            public set ConnectPattern(value: string);
            public get AcceptPattern(): string;
            public set AcceptPattern(value: string);
            public constructor ($action: System.Security.Permissions.SecurityAction)
            public constructor ()
        }
        class WebPermission extends System.Security.CodeAccessPermission implements System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.IStackWalk, System.Security.Permissions.IUnrestrictedPermission
        {
            protected [__keep_incompatibility]: never;
            public get ConnectList(): System.Collections.IEnumerator;
            public get AcceptList(): System.Collections.IEnumerator;
            public AddPermission ($access: System.Net.NetworkAccess, $uriString: string) : void
            public AddPermission ($access: System.Net.NetworkAccess, $uriRegex: System.Text.RegularExpressions.Regex) : void
            public IsUnrestricted () : boolean
            public constructor ($state: System.Security.Permissions.PermissionState)
            public constructor ()
            public constructor ($access: System.Net.NetworkAccess, $uriRegex: System.Text.RegularExpressions.Regex)
            public constructor ($access: System.Net.NetworkAccess, $uriString: string)
        }
        class HttpWebRequest extends System.Net.WebRequest implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Accept(): string;
            public set Accept(value: string);
            public get Address(): System.Uri;
            public get AllowAutoRedirect(): boolean;
            public set AllowAutoRedirect(value: boolean);
            public get AllowWriteStreamBuffering(): boolean;
            public set AllowWriteStreamBuffering(value: boolean);
            public get AllowReadStreamBuffering(): boolean;
            public set AllowReadStreamBuffering(value: boolean);
            public get AutomaticDecompression(): System.Net.DecompressionMethods;
            public set AutomaticDecompression(value: System.Net.DecompressionMethods);
            public get ClientCertificates(): System.Security.Cryptography.X509Certificates.X509CertificateCollection;
            public set ClientCertificates(value: System.Security.Cryptography.X509Certificates.X509CertificateCollection);
            public get Connection(): string;
            public set Connection(value: string);
            public get ConnectionGroupName(): string;
            public set ConnectionGroupName(value: string);
            public get ContentLength(): bigint;
            public set ContentLength(value: bigint);
            public get ContentType(): string;
            public set ContentType(value: string);
            public get ContinueDelegate(): System.Net.HttpContinueDelegate;
            public set ContinueDelegate(value: System.Net.HttpContinueDelegate);
            public get CookieContainer(): System.Net.CookieContainer;
            public set CookieContainer(value: System.Net.CookieContainer);
            public get Credentials(): System.Net.ICredentials;
            public set Credentials(value: System.Net.ICredentials);
            public get Date(): Date;
            public set Date(value: Date);
            public static get DefaultCachePolicy(): System.Net.Cache.RequestCachePolicy;
            public static set DefaultCachePolicy(value: System.Net.Cache.RequestCachePolicy);
            public static get DefaultMaximumErrorResponseLength(): number;
            public static set DefaultMaximumErrorResponseLength(value: number);
            public get Expect(): string;
            public set Expect(value: string);
            public get HaveResponse(): boolean;
            public get Headers(): System.Net.WebHeaderCollection;
            public set Headers(value: System.Net.WebHeaderCollection);
            public get Host(): string;
            public set Host(value: string);
            public get IfModifiedSince(): Date;
            public set IfModifiedSince(value: Date);
            public get KeepAlive(): boolean;
            public set KeepAlive(value: boolean);
            public get MaximumAutomaticRedirections(): number;
            public set MaximumAutomaticRedirections(value: number);
            public get MaximumResponseHeadersLength(): number;
            public set MaximumResponseHeadersLength(value: number);
            public static get DefaultMaximumResponseHeadersLength(): number;
            public static set DefaultMaximumResponseHeadersLength(value: number);
            public get ReadWriteTimeout(): number;
            public set ReadWriteTimeout(value: number);
            public get ContinueTimeout(): number;
            public set ContinueTimeout(value: number);
            public get MediaType(): string;
            public set MediaType(value: string);
            public get Method(): string;
            public set Method(value: string);
            public get Pipelined(): boolean;
            public set Pipelined(value: boolean);
            public get PreAuthenticate(): boolean;
            public set PreAuthenticate(value: boolean);
            public get ProtocolVersion(): System.Version;
            public set ProtocolVersion(value: System.Version);
            public get Proxy(): System.Net.IWebProxy;
            public set Proxy(value: System.Net.IWebProxy);
            public get Referer(): string;
            public set Referer(value: string);
            public get RequestUri(): System.Uri;
            public get SendChunked(): boolean;
            public set SendChunked(value: boolean);
            public get ServicePoint(): System.Net.ServicePoint;
            public get SupportsCookieContainer(): boolean;
            public get Timeout(): number;
            public set Timeout(value: number);
            public get TransferEncoding(): string;
            public set TransferEncoding(value: string);
            public get UseDefaultCredentials(): boolean;
            public set UseDefaultCredentials(value: boolean);
            public get UserAgent(): string;
            public set UserAgent(value: string);
            public get UnsafeAuthenticatedConnectionSharing(): boolean;
            public set UnsafeAuthenticatedConnectionSharing(value: boolean);
            public get ServerCertificateValidationCallback(): System.Net.Security.RemoteCertificateValidationCallback;
            public set ServerCertificateValidationCallback(value: System.Net.Security.RemoteCertificateValidationCallback);
            public AddRange ($range: number) : void
            public AddRange ($from: number, $to: number) : void
            public AddRange ($rangeSpecifier: string, $range: number) : void
            public AddRange ($rangeSpecifier: string, $from: number, $to: number) : void
            public AddRange ($range: bigint) : void
            public AddRange ($from: bigint, $to: bigint) : void
            public AddRange ($rangeSpecifier: string, $range: bigint) : void
            public AddRange ($rangeSpecifier: string, $from: bigint, $to: bigint) : void
            public EndGetRequestStream ($asyncResult: System.IAsyncResult) : System.IO.Stream
            public GetRequestStream () : System.IO.Stream
            public GetRequestStream ($context: $Ref<System.Net.TransportContext>) : System.IO.Stream
            public EndGetRequestStream ($asyncResult: System.IAsyncResult, $context: $Ref<System.Net.TransportContext>) : System.IO.Stream
        }
        class WebRequestMethods extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class WebUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static HtmlEncode ($value: string) : string
            public static HtmlEncode ($value: string, $output: System.IO.TextWriter) : void
            public static HtmlDecode ($value: string) : string
            public static HtmlDecode ($value: string, $output: System.IO.TextWriter) : void
            public static UrlEncode ($value: string) : string
            public static UrlEncodeToBytes ($value: System.Array$1<number>, $offset: number, $count: number) : System.Array$1<number>
            public static UrlDecode ($encodedValue: string) : string
            public static UrlDecodeToBytes ($encodedValue: System.Array$1<number>, $offset: number, $count: number) : System.Array$1<number>
        }
        class WriteStreamClosedEventArgs extends System.EventArgs
        {
            protected [__keep_incompatibility]: never;
        }
        interface WriteStreamClosedEventHandler
        { 
        (sender: any, e: System.Net.WriteStreamClosedEventArgs) : void; 
        Invoke?: (sender: any, e: System.Net.WriteStreamClosedEventArgs) => void;
        }
        var WriteStreamClosedEventHandler: { new (func: (sender: any, e: System.Net.WriteStreamClosedEventArgs) => void): WriteStreamClosedEventHandler; }
        class Cookie extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Comment(): string;
            public set Comment(value: string);
            public get CommentUri(): System.Uri;
            public set CommentUri(value: System.Uri);
            public get HttpOnly(): boolean;
            public set HttpOnly(value: boolean);
            public get Discard(): boolean;
            public set Discard(value: boolean);
            public get Domain(): string;
            public set Domain(value: string);
            public get Expired(): boolean;
            public set Expired(value: boolean);
            public get Expires(): Date;
            public set Expires(value: Date);
            public get Name(): string;
            public set Name(value: string);
            public get Path(): string;
            public set Path(value: string);
            public get Port(): string;
            public set Port(value: string);
            public get Secure(): boolean;
            public set Secure(value: boolean);
            public get TimeStamp(): Date;
            public get Value(): string;
            public set Value(value: string);
            public get Version(): number;
            public set Version(value: number);
            public constructor ()
            public constructor ($name: string, $value: string)
            public constructor ($name: string, $value: string, $path: string)
            public constructor ($name: string, $value: string, $path: string, $domain: string)
        }
        class CookieCollection extends System.Object implements System.Collections.IEnumerable, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
            public get IsReadOnly(): boolean;
            public get Count(): number;
            public get IsSynchronized(): boolean;
            public get SyncRoot(): any;
            public get_Item ($index: number) : System.Net.Cookie
            public get_Item ($name: string) : System.Net.Cookie
            public Add ($cookie: System.Net.Cookie) : void
            public Add ($cookies: System.Net.CookieCollection) : void
            public CopyTo ($array: System.Array, $index: number) : void
            public CopyTo ($array: System.Array$1<System.Net.Cookie>, $index: number) : void
            public GetEnumerator () : System.Collections.IEnumerator
            public constructor ()
        }
        class CookieContainer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static DefaultCookieLimit : number
            public static DefaultPerDomainCookieLimit : number
            public static DefaultCookieLengthLimit : number
            public get Capacity(): number;
            public set Capacity(value: number);
            public get Count(): number;
            public get MaxCookieSize(): number;
            public set MaxCookieSize(value: number);
            public get PerDomainCapacity(): number;
            public set PerDomainCapacity(value: number);
            public Add ($cookie: System.Net.Cookie) : void
            public Add ($cookies: System.Net.CookieCollection) : void
            public Add ($uri: System.Uri, $cookie: System.Net.Cookie) : void
            public Add ($uri: System.Uri, $cookies: System.Net.CookieCollection) : void
            public GetCookies ($uri: System.Uri) : System.Net.CookieCollection
            public GetCookieHeader ($uri: System.Uri) : string
            public SetCookies ($uri: System.Uri, $cookieHeader: string) : void
            public constructor ()
            public constructor ($capacity: number)
            public constructor ($capacity: number, $perDomainCapacity: number, $maxCookieSize: number)
        }
        class CookieException extends System.FormatException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class FileWebRequest extends System.Net.WebRequest implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get ConnectionGroupName(): string;
            public set ConnectionGroupName(value: string);
            public get ContentLength(): bigint;
            public set ContentLength(value: bigint);
            public get ContentType(): string;
            public set ContentType(value: string);
            public get Credentials(): System.Net.ICredentials;
            public set Credentials(value: System.Net.ICredentials);
            public get Headers(): System.Net.WebHeaderCollection;
            public get Method(): string;
            public set Method(value: string);
            public get PreAuthenticate(): boolean;
            public set PreAuthenticate(value: boolean);
            public get Proxy(): System.Net.IWebProxy;
            public set Proxy(value: System.Net.IWebProxy);
            public get Timeout(): number;
            public set Timeout(value: number);
            public get RequestUri(): System.Uri;
            public get UseDefaultCredentials(): boolean;
            public set UseDefaultCredentials(value: boolean);
        }
        class FileWebResponse extends System.Net.WebResponse implements System.Net.ICloseEx, System.IDisposable, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get ContentLength(): bigint;
            public get ContentType(): string;
            public get Headers(): System.Net.WebHeaderCollection;
            public get SupportsHeaders(): boolean;
            public get ResponseUri(): System.Uri;
        }
        interface ICloseEx
        {
        }
        class WebClient extends System.ComponentModel.Component implements System.ComponentModel.IComponent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get Encoding(): System.Text.Encoding;
            public set Encoding(value: System.Text.Encoding);
            public get BaseAddress(): string;
            public set BaseAddress(value: string);
            public get Credentials(): System.Net.ICredentials;
            public set Credentials(value: System.Net.ICredentials);
            public get UseDefaultCredentials(): boolean;
            public set UseDefaultCredentials(value: boolean);
            public get Headers(): System.Net.WebHeaderCollection;
            public set Headers(value: System.Net.WebHeaderCollection);
            public get QueryString(): System.Collections.Specialized.NameValueCollection;
            public set QueryString(value: System.Collections.Specialized.NameValueCollection);
            public get ResponseHeaders(): System.Net.WebHeaderCollection;
            public get Proxy(): System.Net.IWebProxy;
            public set Proxy(value: System.Net.IWebProxy);
            public get CachePolicy(): System.Net.Cache.RequestCachePolicy;
            public set CachePolicy(value: System.Net.Cache.RequestCachePolicy);
            public get IsBusy(): boolean;
            public add_WriteStreamClosed ($value: System.Net.WriteStreamClosedEventHandler) : void
            public remove_WriteStreamClosed ($value: System.Net.WriteStreamClosedEventHandler) : void
            public DownloadData ($address: string) : System.Array$1<number>
            public DownloadData ($address: System.Uri) : System.Array$1<number>
            public DownloadFile ($address: string, $fileName: string) : void
            public DownloadFile ($address: System.Uri, $fileName: string) : void
            public OpenRead ($address: string) : System.IO.Stream
            public OpenRead ($address: System.Uri) : System.IO.Stream
            public OpenWrite ($address: string) : System.IO.Stream
            public OpenWrite ($address: System.Uri) : System.IO.Stream
            public OpenWrite ($address: string, $method: string) : System.IO.Stream
            public OpenWrite ($address: System.Uri, $method: string) : System.IO.Stream
            public UploadData ($address: string, $data: System.Array$1<number>) : System.Array$1<number>
            public UploadData ($address: System.Uri, $data: System.Array$1<number>) : System.Array$1<number>
            public UploadData ($address: string, $method: string, $data: System.Array$1<number>) : System.Array$1<number>
            public UploadData ($address: System.Uri, $method: string, $data: System.Array$1<number>) : System.Array$1<number>
            public UploadFile ($address: string, $fileName: string) : System.Array$1<number>
            public UploadFile ($address: System.Uri, $fileName: string) : System.Array$1<number>
            public UploadFile ($address: string, $method: string, $fileName: string) : System.Array$1<number>
            public UploadFile ($address: System.Uri, $method: string, $fileName: string) : System.Array$1<number>
            public UploadValues ($address: string, $data: System.Collections.Specialized.NameValueCollection) : System.Array$1<number>
            public UploadValues ($address: System.Uri, $data: System.Collections.Specialized.NameValueCollection) : System.Array$1<number>
            public UploadValues ($address: string, $method: string, $data: System.Collections.Specialized.NameValueCollection) : System.Array$1<number>
            public UploadValues ($address: System.Uri, $method: string, $data: System.Collections.Specialized.NameValueCollection) : System.Array$1<number>
            public UploadString ($address: string, $data: string) : string
            public UploadString ($address: System.Uri, $data: string) : string
            public UploadString ($address: string, $method: string, $data: string) : string
            public UploadString ($address: System.Uri, $method: string, $data: string) : string
            public DownloadString ($address: string) : string
            public DownloadString ($address: System.Uri) : string
            public add_OpenReadCompleted ($value: System.Net.OpenReadCompletedEventHandler) : void
            public remove_OpenReadCompleted ($value: System.Net.OpenReadCompletedEventHandler) : void
            public OpenReadAsync ($address: System.Uri) : void
            public OpenReadAsync ($address: System.Uri, $userToken: any) : void
            public add_OpenWriteCompleted ($value: System.Net.OpenWriteCompletedEventHandler) : void
            public remove_OpenWriteCompleted ($value: System.Net.OpenWriteCompletedEventHandler) : void
            public OpenWriteAsync ($address: System.Uri) : void
            public OpenWriteAsync ($address: System.Uri, $method: string) : void
            public OpenWriteAsync ($address: System.Uri, $method: string, $userToken: any) : void
            public add_DownloadStringCompleted ($value: System.Net.DownloadStringCompletedEventHandler) : void
            public remove_DownloadStringCompleted ($value: System.Net.DownloadStringCompletedEventHandler) : void
            public DownloadStringAsync ($address: System.Uri) : void
            public DownloadStringAsync ($address: System.Uri, $userToken: any) : void
            public add_DownloadDataCompleted ($value: System.Net.DownloadDataCompletedEventHandler) : void
            public remove_DownloadDataCompleted ($value: System.Net.DownloadDataCompletedEventHandler) : void
            public DownloadDataAsync ($address: System.Uri) : void
            public DownloadDataAsync ($address: System.Uri, $userToken: any) : void
            public add_DownloadFileCompleted ($value: System.ComponentModel.AsyncCompletedEventHandler) : void
            public remove_DownloadFileCompleted ($value: System.ComponentModel.AsyncCompletedEventHandler) : void
            public DownloadFileAsync ($address: System.Uri, $fileName: string) : void
            public DownloadFileAsync ($address: System.Uri, $fileName: string, $userToken: any) : void
            public add_UploadStringCompleted ($value: System.Net.UploadStringCompletedEventHandler) : void
            public remove_UploadStringCompleted ($value: System.Net.UploadStringCompletedEventHandler) : void
            public UploadStringAsync ($address: System.Uri, $data: string) : void
            public UploadStringAsync ($address: System.Uri, $method: string, $data: string) : void
            public UploadStringAsync ($address: System.Uri, $method: string, $data: string, $userToken: any) : void
            public add_UploadDataCompleted ($value: System.Net.UploadDataCompletedEventHandler) : void
            public remove_UploadDataCompleted ($value: System.Net.UploadDataCompletedEventHandler) : void
            public UploadDataAsync ($address: System.Uri, $data: System.Array$1<number>) : void
            public UploadDataAsync ($address: System.Uri, $method: string, $data: System.Array$1<number>) : void
            public UploadDataAsync ($address: System.Uri, $method: string, $data: System.Array$1<number>, $userToken: any) : void
            public add_UploadFileCompleted ($value: System.Net.UploadFileCompletedEventHandler) : void
            public remove_UploadFileCompleted ($value: System.Net.UploadFileCompletedEventHandler) : void
            public UploadFileAsync ($address: System.Uri, $fileName: string) : void
            public UploadFileAsync ($address: System.Uri, $method: string, $fileName: string) : void
            public UploadFileAsync ($address: System.Uri, $method: string, $fileName: string, $userToken: any) : void
            public add_UploadValuesCompleted ($value: System.Net.UploadValuesCompletedEventHandler) : void
            public remove_UploadValuesCompleted ($value: System.Net.UploadValuesCompletedEventHandler) : void
            public UploadValuesAsync ($address: System.Uri, $data: System.Collections.Specialized.NameValueCollection) : void
            public UploadValuesAsync ($address: System.Uri, $method: string, $data: System.Collections.Specialized.NameValueCollection) : void
            public UploadValuesAsync ($address: System.Uri, $method: string, $data: System.Collections.Specialized.NameValueCollection, $userToken: any) : void
            public CancelAsync () : void
            public DownloadStringTaskAsync ($address: string) : System.Threading.Tasks.Task$1<string>
            public DownloadStringTaskAsync ($address: System.Uri) : System.Threading.Tasks.Task$1<string>
            public OpenReadTaskAsync ($address: string) : System.Threading.Tasks.Task$1<System.IO.Stream>
            public OpenReadTaskAsync ($address: System.Uri) : System.Threading.Tasks.Task$1<System.IO.Stream>
            public OpenWriteTaskAsync ($address: string) : System.Threading.Tasks.Task$1<System.IO.Stream>
            public OpenWriteTaskAsync ($address: System.Uri) : System.Threading.Tasks.Task$1<System.IO.Stream>
            public OpenWriteTaskAsync ($address: string, $method: string) : System.Threading.Tasks.Task$1<System.IO.Stream>
            public OpenWriteTaskAsync ($address: System.Uri, $method: string) : System.Threading.Tasks.Task$1<System.IO.Stream>
            public UploadStringTaskAsync ($address: string, $data: string) : System.Threading.Tasks.Task$1<string>
            public UploadStringTaskAsync ($address: System.Uri, $data: string) : System.Threading.Tasks.Task$1<string>
            public UploadStringTaskAsync ($address: string, $method: string, $data: string) : System.Threading.Tasks.Task$1<string>
            public UploadStringTaskAsync ($address: System.Uri, $method: string, $data: string) : System.Threading.Tasks.Task$1<string>
            public DownloadDataTaskAsync ($address: string) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public DownloadDataTaskAsync ($address: System.Uri) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public DownloadFileTaskAsync ($address: string, $fileName: string) : $Task<any>
            public DownloadFileTaskAsync ($address: System.Uri, $fileName: string) : $Task<any>
            public UploadDataTaskAsync ($address: string, $data: System.Array$1<number>) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public UploadDataTaskAsync ($address: System.Uri, $data: System.Array$1<number>) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public UploadDataTaskAsync ($address: string, $method: string, $data: System.Array$1<number>) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public UploadDataTaskAsync ($address: System.Uri, $method: string, $data: System.Array$1<number>) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public UploadFileTaskAsync ($address: string, $fileName: string) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public UploadFileTaskAsync ($address: System.Uri, $fileName: string) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public UploadFileTaskAsync ($address: string, $method: string, $fileName: string) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public UploadFileTaskAsync ($address: System.Uri, $method: string, $fileName: string) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public UploadValuesTaskAsync ($address: string, $data: System.Collections.Specialized.NameValueCollection) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public UploadValuesTaskAsync ($address: string, $method: string, $data: System.Collections.Specialized.NameValueCollection) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public UploadValuesTaskAsync ($address: System.Uri, $data: System.Collections.Specialized.NameValueCollection) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public UploadValuesTaskAsync ($address: System.Uri, $method: string, $data: System.Collections.Specialized.NameValueCollection) : System.Threading.Tasks.Task$1<System.Array$1<number>>
            public add_DownloadProgressChanged ($value: System.Net.DownloadProgressChangedEventHandler) : void
            public remove_DownloadProgressChanged ($value: System.Net.DownloadProgressChangedEventHandler) : void
            public add_UploadProgressChanged ($value: System.Net.UploadProgressChangedEventHandler) : void
            public remove_UploadProgressChanged ($value: System.Net.UploadProgressChangedEventHandler) : void
            public constructor ()
        }
        interface OpenReadCompletedEventHandler
        { 
        (sender: any, e: System.Net.OpenReadCompletedEventArgs) : void; 
        Invoke?: (sender: any, e: System.Net.OpenReadCompletedEventArgs) => void;
        }
        var OpenReadCompletedEventHandler: { new (func: (sender: any, e: System.Net.OpenReadCompletedEventArgs) => void): OpenReadCompletedEventHandler; }
        class OpenReadCompletedEventArgs extends System.ComponentModel.AsyncCompletedEventArgs
        {
            protected [__keep_incompatibility]: never;
            public get Result(): System.IO.Stream;
        }
        interface OpenWriteCompletedEventHandler
        { 
        (sender: any, e: System.Net.OpenWriteCompletedEventArgs) : void; 
        Invoke?: (sender: any, e: System.Net.OpenWriteCompletedEventArgs) => void;
        }
        var OpenWriteCompletedEventHandler: { new (func: (sender: any, e: System.Net.OpenWriteCompletedEventArgs) => void): OpenWriteCompletedEventHandler; }
        class OpenWriteCompletedEventArgs extends System.ComponentModel.AsyncCompletedEventArgs
        {
            protected [__keep_incompatibility]: never;
            public get Result(): System.IO.Stream;
        }
        interface DownloadStringCompletedEventHandler
        { 
        (sender: any, e: System.Net.DownloadStringCompletedEventArgs) : void; 
        Invoke?: (sender: any, e: System.Net.DownloadStringCompletedEventArgs) => void;
        }
        var DownloadStringCompletedEventHandler: { new (func: (sender: any, e: System.Net.DownloadStringCompletedEventArgs) => void): DownloadStringCompletedEventHandler; }
        class DownloadStringCompletedEventArgs extends System.ComponentModel.AsyncCompletedEventArgs
        {
            protected [__keep_incompatibility]: never;
            public get Result(): string;
        }
        interface DownloadDataCompletedEventHandler
        { 
        (sender: any, e: System.Net.DownloadDataCompletedEventArgs) : void; 
        Invoke?: (sender: any, e: System.Net.DownloadDataCompletedEventArgs) => void;
        }
        var DownloadDataCompletedEventHandler: { new (func: (sender: any, e: System.Net.DownloadDataCompletedEventArgs) => void): DownloadDataCompletedEventHandler; }
        class DownloadDataCompletedEventArgs extends System.ComponentModel.AsyncCompletedEventArgs
        {
            protected [__keep_incompatibility]: never;
            public get Result(): System.Array$1<number>;
        }
        interface UploadStringCompletedEventHandler
        { 
        (sender: any, e: System.Net.UploadStringCompletedEventArgs) : void; 
        Invoke?: (sender: any, e: System.Net.UploadStringCompletedEventArgs) => void;
        }
        var UploadStringCompletedEventHandler: { new (func: (sender: any, e: System.Net.UploadStringCompletedEventArgs) => void): UploadStringCompletedEventHandler; }
        class UploadStringCompletedEventArgs extends System.ComponentModel.AsyncCompletedEventArgs
        {
            protected [__keep_incompatibility]: never;
            public get Result(): string;
        }
        interface UploadDataCompletedEventHandler
        { 
        (sender: any, e: System.Net.UploadDataCompletedEventArgs) : void; 
        Invoke?: (sender: any, e: System.Net.UploadDataCompletedEventArgs) => void;
        }
        var UploadDataCompletedEventHandler: { new (func: (sender: any, e: System.Net.UploadDataCompletedEventArgs) => void): UploadDataCompletedEventHandler; }
        class UploadDataCompletedEventArgs extends System.ComponentModel.AsyncCompletedEventArgs
        {
            protected [__keep_incompatibility]: never;
            public get Result(): System.Array$1<number>;
        }
        interface UploadFileCompletedEventHandler
        { 
        (sender: any, e: System.Net.UploadFileCompletedEventArgs) : void; 
        Invoke?: (sender: any, e: System.Net.UploadFileCompletedEventArgs) => void;
        }
        var UploadFileCompletedEventHandler: { new (func: (sender: any, e: System.Net.UploadFileCompletedEventArgs) => void): UploadFileCompletedEventHandler; }
        class UploadFileCompletedEventArgs extends System.ComponentModel.AsyncCompletedEventArgs
        {
            protected [__keep_incompatibility]: never;
            public get Result(): System.Array$1<number>;
        }
        interface UploadValuesCompletedEventHandler
        { 
        (sender: any, e: System.Net.UploadValuesCompletedEventArgs) : void; 
        Invoke?: (sender: any, e: System.Net.UploadValuesCompletedEventArgs) => void;
        }
        var UploadValuesCompletedEventHandler: { new (func: (sender: any, e: System.Net.UploadValuesCompletedEventArgs) => void): UploadValuesCompletedEventHandler; }
        class UploadValuesCompletedEventArgs extends System.ComponentModel.AsyncCompletedEventArgs
        {
            protected [__keep_incompatibility]: never;
            public get Result(): System.Array$1<number>;
        }
        interface DownloadProgressChangedEventHandler
        { 
        (sender: any, e: System.Net.DownloadProgressChangedEventArgs) : void; 
        Invoke?: (sender: any, e: System.Net.DownloadProgressChangedEventArgs) => void;
        }
        var DownloadProgressChangedEventHandler: { new (func: (sender: any, e: System.Net.DownloadProgressChangedEventArgs) => void): DownloadProgressChangedEventHandler; }
        class DownloadProgressChangedEventArgs extends System.ComponentModel.ProgressChangedEventArgs
        {
            protected [__keep_incompatibility]: never;
            public get BytesReceived(): bigint;
            public get TotalBytesToReceive(): bigint;
        }
        interface UploadProgressChangedEventHandler
        { 
        (sender: any, e: System.Net.UploadProgressChangedEventArgs) : void; 
        Invoke?: (sender: any, e: System.Net.UploadProgressChangedEventArgs) => void;
        }
        var UploadProgressChangedEventHandler: { new (func: (sender: any, e: System.Net.UploadProgressChangedEventArgs) => void): UploadProgressChangedEventHandler; }
        class UploadProgressChangedEventArgs extends System.ComponentModel.ProgressChangedEventArgs
        {
            protected [__keep_incompatibility]: never;
            public get BytesReceived(): bigint;
            public get TotalBytesToReceive(): bigint;
            public get BytesSent(): bigint;
            public get TotalBytesToSend(): bigint;
        }
        class WebProxy extends System.Object implements System.Net.IAutoWebProxy, System.Net.IWebProxy, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get Address(): System.Uri;
            public set Address(value: System.Uri);
            public get BypassProxyOnLocal(): boolean;
            public set BypassProxyOnLocal(value: boolean);
            public get BypassList(): System.Array$1<string>;
            public set BypassList(value: System.Array$1<string>);
            public get Credentials(): System.Net.ICredentials;
            public set Credentials(value: System.Net.ICredentials);
            public get UseDefaultCredentials(): boolean;
            public set UseDefaultCredentials(value: boolean);
            public get BypassArrayList(): System.Collections.ArrayList;
            public GetProxy ($destination: System.Uri) : System.Uri
            public IsBypassed ($host: System.Uri) : boolean
            public static CreateDefaultProxy () : System.Net.IWebProxy
            public constructor ()
            public constructor ($Address: System.Uri)
            public constructor ($Address: System.Uri, $BypassOnLocal: boolean)
            public constructor ($Address: System.Uri, $BypassOnLocal: boolean, $BypassList: System.Array$1<string>)
            public constructor ($Address: System.Uri, $BypassOnLocal: boolean, $BypassList: System.Array$1<string>, $Credentials: System.Net.ICredentials)
            public constructor ($Host: string, $Port: number)
            public constructor ($Address: string)
            public constructor ($Address: string, $BypassOnLocal: boolean)
            public constructor ($Address: string, $BypassOnLocal: boolean, $BypassList: System.Array$1<string>)
            public constructor ($Address: string, $BypassOnLocal: boolean, $BypassList: System.Array$1<string>, $Credentials: System.Net.ICredentials)
        }
        interface IAutoWebProxy extends System.Net.IWebProxy
        {
            Credentials : System.Net.ICredentials
            GetProxy ($destination: System.Uri) : System.Uri
            IsBypassed ($host: System.Uri) : boolean
        }
        class AuthenticationManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get CredentialPolicy(): System.Net.ICredentialPolicy;
            public static set CredentialPolicy(value: System.Net.ICredentialPolicy);
            public static get CustomTargetNameDictionary(): System.Collections.Specialized.StringDictionary;
            public static get RegisteredModules(): System.Collections.IEnumerator;
            public static Authenticate ($challenge: string, $request: System.Net.WebRequest, $credentials: System.Net.ICredentials) : System.Net.Authorization
            public static PreAuthenticate ($request: System.Net.WebRequest, $credentials: System.Net.ICredentials) : System.Net.Authorization
            public static Register ($authenticationModule: System.Net.IAuthenticationModule) : void
            public static Unregister ($authenticationModule: System.Net.IAuthenticationModule) : void
            public static Unregister ($authenticationScheme: string) : void
        }
        interface ICredentialPolicy
        {
            ShouldSendCredential ($challengeUri: System.Uri, $request: System.Net.WebRequest, $credential: System.Net.NetworkCredential, $authenticationModule: System.Net.IAuthenticationModule) : boolean
        }
        interface BindIPEndPoint
        { 
        (servicePoint: System.Net.ServicePoint, remoteEndPoint: System.Net.IPEndPoint, retryCount: number) : System.Net.IPEndPoint; 
        Invoke?: (servicePoint: System.Net.ServicePoint, remoteEndPoint: System.Net.IPEndPoint, retryCount: number) => System.Net.IPEndPoint;
        }
        var BindIPEndPoint: { new (func: (servicePoint: System.Net.ServicePoint, remoteEndPoint: System.Net.IPEndPoint, retryCount: number) => System.Net.IPEndPoint): BindIPEndPoint; }
        enum DecompressionMethods
        { None = 0, GZip = 1, Deflate = 2 }
        class Dns extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static BeginGetHostAddresses ($hostNameOrAddress: string, $requestCallback: System.AsyncCallback, $state: any) : System.IAsyncResult
            public static BeginGetHostEntry ($hostNameOrAddress: string, $requestCallback: System.AsyncCallback, $stateObject: any) : System.IAsyncResult
            public static BeginGetHostEntry ($address: System.Net.IPAddress, $requestCallback: System.AsyncCallback, $stateObject: any) : System.IAsyncResult
            public static EndGetHostAddresses ($asyncResult: System.IAsyncResult) : System.Array$1<System.Net.IPAddress>
            public static EndGetHostEntry ($asyncResult: System.IAsyncResult) : System.Net.IPHostEntry
            public static GetHostEntry ($hostNameOrAddress: string) : System.Net.IPHostEntry
            public static GetHostEntry ($address: System.Net.IPAddress) : System.Net.IPHostEntry
            public static GetHostAddresses ($hostNameOrAddress: string) : System.Array$1<System.Net.IPAddress>
            public static GetHostName () : string
            public static GetHostAddressesAsync ($hostNameOrAddress: string) : System.Threading.Tasks.Task$1<System.Array$1<System.Net.IPAddress>>
            public static GetHostEntryAsync ($address: System.Net.IPAddress) : System.Threading.Tasks.Task$1<System.Net.IPHostEntry>
            public static GetHostEntryAsync ($hostNameOrAddress: string) : System.Threading.Tasks.Task$1<System.Net.IPHostEntry>
        }
        class DnsPermission extends System.Security.CodeAccessPermission implements System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.IStackWalk, System.Security.Permissions.IUnrestrictedPermission
        {
            protected [__keep_incompatibility]: never;
            public IsUnrestricted () : boolean
            public constructor ($state: System.Security.Permissions.PermissionState)
            public constructor ()
        }
        class DnsPermissionAttribute extends System.Security.Permissions.CodeAccessSecurityAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($action: System.Security.Permissions.SecurityAction)
            public constructor ()
        }
        class EndpointPermission extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Hostname(): string;
            public get Port(): number;
            public get Transport(): System.Net.TransportType;
        }
        class FtpWebRequest extends System.Net.WebRequest implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get ClientCertificates(): System.Security.Cryptography.X509Certificates.X509CertificateCollection;
            public set ClientCertificates(value: System.Security.Cryptography.X509Certificates.X509CertificateCollection);
            public get ConnectionGroupName(): string;
            public set ConnectionGroupName(value: string);
            public get ContentType(): string;
            public set ContentType(value: string);
            public get ContentLength(): bigint;
            public set ContentLength(value: bigint);
            public get ContentOffset(): bigint;
            public set ContentOffset(value: bigint);
            public get Credentials(): System.Net.ICredentials;
            public set Credentials(value: System.Net.ICredentials);
            public static get DefaultCachePolicy(): System.Net.Cache.RequestCachePolicy;
            public static set DefaultCachePolicy(value: System.Net.Cache.RequestCachePolicy);
            public get EnableSsl(): boolean;
            public set EnableSsl(value: boolean);
            public get Headers(): System.Net.WebHeaderCollection;
            public set Headers(value: System.Net.WebHeaderCollection);
            public get KeepAlive(): boolean;
            public set KeepAlive(value: boolean);
            public get Method(): string;
            public set Method(value: string);
            public get PreAuthenticate(): boolean;
            public set PreAuthenticate(value: boolean);
            public get Proxy(): System.Net.IWebProxy;
            public set Proxy(value: System.Net.IWebProxy);
            public get ReadWriteTimeout(): number;
            public set ReadWriteTimeout(value: number);
            public get RenameTo(): string;
            public set RenameTo(value: string);
            public get RequestUri(): System.Uri;
            public get ServicePoint(): System.Net.ServicePoint;
            public get UsePassive(): boolean;
            public set UsePassive(value: boolean);
            public get UseDefaultCredentials(): boolean;
            public set UseDefaultCredentials(value: boolean);
            public get UseBinary(): boolean;
            public set UseBinary(value: boolean);
            public get Timeout(): number;
            public set Timeout(value: number);
        }
        class FtpWebResponse extends System.Net.WebResponse implements System.IDisposable, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get ContentLength(): bigint;
            public get Headers(): System.Net.WebHeaderCollection;
            public get ResponseUri(): System.Uri;
            public get LastModified(): Date;
            public get BannerMessage(): string;
            public get WelcomeMessage(): string;
            public get ExitMessage(): string;
            public get StatusCode(): System.Net.FtpStatusCode;
            public get SupportsHeaders(): boolean;
            public get StatusDescription(): string;
        }
        class HttpListener extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get AuthenticationSchemes(): System.Net.AuthenticationSchemes;
            public set AuthenticationSchemes(value: System.Net.AuthenticationSchemes);
            public get AuthenticationSchemeSelectorDelegate(): System.Net.AuthenticationSchemeSelector;
            public set AuthenticationSchemeSelectorDelegate(value: System.Net.AuthenticationSchemeSelector);
            public get ExtendedProtectionSelectorDelegate(): System.Net.HttpListener.ExtendedProtectionSelector;
            public set ExtendedProtectionSelectorDelegate(value: System.Net.HttpListener.ExtendedProtectionSelector);
            public get IgnoreWriteExceptions(): boolean;
            public set IgnoreWriteExceptions(value: boolean);
            public get IsListening(): boolean;
            public static get IsSupported(): boolean;
            public get Prefixes(): System.Net.HttpListenerPrefixCollection;
            public get TimeoutManager(): System.Net.HttpListenerTimeoutManager;
            public get ExtendedProtectionPolicy(): System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy;
            public set ExtendedProtectionPolicy(value: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy);
            public get DefaultServiceNames(): System.Security.Authentication.ExtendedProtection.ServiceNameCollection;
            public get Realm(): string;
            public set Realm(value: string);
            public get UnsafeConnectionNtlmAuthentication(): boolean;
            public set UnsafeConnectionNtlmAuthentication(value: boolean);
            public Abort () : void
            public Close () : void
            public BeginGetContext ($callback: System.AsyncCallback, $state: any) : System.IAsyncResult
            public EndGetContext ($asyncResult: System.IAsyncResult) : System.Net.HttpListenerContext
            public GetContext () : System.Net.HttpListenerContext
            public Start () : void
            public Stop () : void
            public GetContextAsync () : System.Threading.Tasks.Task$1<System.Net.HttpListenerContext>
            public constructor ()
            public Dispose () : void
        }
        class HttpListenerPrefixCollection extends System.Object implements System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<string>, System.Collections.Generic.IEnumerable$1<string>
        {
            protected [__keep_incompatibility]: never;
            public get Count(): number;
            public get IsReadOnly(): boolean;
            public get IsSynchronized(): boolean;
            public Add ($uriPrefix: string) : void
            public Clear () : void
            public Contains ($uriPrefix: string) : boolean
            public CopyTo ($array: System.Array$1<string>, $offset: number) : void
            public CopyTo ($array: System.Array, $offset: number) : void
            public GetEnumerator () : System.Collections.Generic.IEnumerator$1<string>
            public Remove ($uriPrefix: string) : boolean
        }
        class HttpListenerTimeoutManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get EntityBody(): System.TimeSpan;
            public set EntityBody(value: System.TimeSpan);
            public get DrainEntityBody(): System.TimeSpan;
            public set DrainEntityBody(value: System.TimeSpan);
            public get RequestQueue(): System.TimeSpan;
            public set RequestQueue(value: System.TimeSpan);
            public get IdleConnection(): System.TimeSpan;
            public set IdleConnection(value: System.TimeSpan);
            public get HeaderWait(): System.TimeSpan;
            public set HeaderWait(value: System.TimeSpan);
            public get MinSendBytesPerSecond(): bigint;
            public set MinSendBytesPerSecond(value: bigint);
            public constructor ()
        }
        class HttpListenerContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Request(): System.Net.HttpListenerRequest;
            public get Response(): System.Net.HttpListenerResponse;
            public get User(): System.Security.Principal.IPrincipal;
            public AcceptWebSocketAsync ($subProtocol: string) : System.Threading.Tasks.Task$1<System.Net.WebSockets.HttpListenerWebSocketContext>
            public AcceptWebSocketAsync ($subProtocol: string, $keepAliveInterval: System.TimeSpan) : System.Threading.Tasks.Task$1<System.Net.WebSockets.HttpListenerWebSocketContext>
            public AcceptWebSocketAsync ($subProtocol: string, $receiveBufferSize: number, $keepAliveInterval: System.TimeSpan) : System.Threading.Tasks.Task$1<System.Net.WebSockets.HttpListenerWebSocketContext>
            public AcceptWebSocketAsync ($subProtocol: string, $receiveBufferSize: number, $keepAliveInterval: System.TimeSpan, $internalBuffer: System.ArraySegment$1<number>) : System.Threading.Tasks.Task$1<System.Net.WebSockets.HttpListenerWebSocketContext>
        }
        class HttpListenerBasicIdentity extends System.Security.Principal.GenericIdentity implements System.Security.Principal.IIdentity
        {
            protected [__keep_incompatibility]: never;
            public get Password(): string;
            public constructor ($username: string, $password: string)
            public constructor ()
        }
        class HttpListenerResponse extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get ContentEncoding(): System.Text.Encoding;
            public set ContentEncoding(value: System.Text.Encoding);
            public get ContentLength64(): bigint;
            public set ContentLength64(value: bigint);
            public get ContentType(): string;
            public set ContentType(value: string);
            public get Cookies(): System.Net.CookieCollection;
            public set Cookies(value: System.Net.CookieCollection);
            public get Headers(): System.Net.WebHeaderCollection;
            public set Headers(value: System.Net.WebHeaderCollection);
            public get KeepAlive(): boolean;
            public set KeepAlive(value: boolean);
            public get OutputStream(): System.IO.Stream;
            public get ProtocolVersion(): System.Version;
            public set ProtocolVersion(value: System.Version);
            public get RedirectLocation(): string;
            public set RedirectLocation(value: string);
            public get SendChunked(): boolean;
            public set SendChunked(value: boolean);
            public get StatusCode(): number;
            public set StatusCode(value: number);
            public get StatusDescription(): string;
            public set StatusDescription(value: string);
            public Abort () : void
            public AddHeader ($name: string, $value: string) : void
            public AppendCookie ($cookie: System.Net.Cookie) : void
            public AppendHeader ($name: string, $value: string) : void
            public Close () : void
            public Close ($responseEntity: System.Array$1<number>, $willBlock: boolean) : void
            public CopyFrom ($templateResponse: System.Net.HttpListenerResponse) : void
            public Redirect ($url: string) : void
            public SetCookie ($cookie: System.Net.Cookie) : void
            public Dispose () : void
        }
        class HttpWebResponse extends System.Net.WebResponse implements System.IDisposable, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
            public get CharacterSet(): string;
            public get ContentEncoding(): string;
            public get ContentLength(): bigint;
            public get ContentType(): string;
            public get Cookies(): System.Net.CookieCollection;
            public set Cookies(value: System.Net.CookieCollection);
            public get Headers(): System.Net.WebHeaderCollection;
            public get IsMutuallyAuthenticated(): boolean;
            public get LastModified(): Date;
            public get Method(): string;
            public get ProtocolVersion(): System.Version;
            public get ResponseUri(): System.Uri;
            public get Server(): string;
            public get StatusCode(): System.Net.HttpStatusCode;
            public get StatusDescription(): string;
            public get SupportsHeaders(): boolean;
            public GetResponseHeader ($headerName: string) : string
        }
        interface IWebProxyScript
        {
            Close () : void
            Load ($scriptLocation: System.Uri, $script: string, $helperType: System.Type) : boolean
            Run ($url: string, $host: string) : string
        }
        class ServicePointManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static DefaultNonPersistentConnectionLimit : number
            public static DefaultPersistentConnectionLimit : number
            public static get CheckCertificateRevocationList(): boolean;
            public static set CheckCertificateRevocationList(value: boolean);
            public static get DefaultConnectionLimit(): number;
            public static set DefaultConnectionLimit(value: number);
            public static get DnsRefreshTimeout(): number;
            public static set DnsRefreshTimeout(value: number);
            public static get EnableDnsRoundRobin(): boolean;
            public static set EnableDnsRoundRobin(value: boolean);
            public static get MaxServicePointIdleTime(): number;
            public static set MaxServicePointIdleTime(value: number);
            public static get MaxServicePoints(): number;
            public static set MaxServicePoints(value: number);
            public static get ReusePort(): boolean;
            public static set ReusePort(value: boolean);
            public static get SecurityProtocol(): System.Net.SecurityProtocolType;
            public static set SecurityProtocol(value: System.Net.SecurityProtocolType);
            public static get ServerCertificateValidationCallback(): System.Net.Security.RemoteCertificateValidationCallback;
            public static set ServerCertificateValidationCallback(value: System.Net.Security.RemoteCertificateValidationCallback);
            public static get EncryptionPolicy(): System.Net.Security.EncryptionPolicy;
            public static get Expect100Continue(): boolean;
            public static set Expect100Continue(value: boolean);
            public static get UseNagleAlgorithm(): boolean;
            public static set UseNagleAlgorithm(value: boolean);
            public static SetTcpKeepAlive ($enabled: boolean, $keepAliveTime: number, $keepAliveInterval: number) : void
            public static FindServicePoint ($address: System.Uri) : System.Net.ServicePoint
            public static FindServicePoint ($uriString: string, $proxy: System.Net.IWebProxy) : System.Net.ServicePoint
            public static FindServicePoint ($address: System.Uri, $proxy: System.Net.IWebProxy) : System.Net.ServicePoint
        }
        class SocketPermission extends System.Security.CodeAccessPermission implements System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.IStackWalk, System.Security.Permissions.IUnrestrictedPermission
        {
            protected [__keep_incompatibility]: never;
            public static AllPorts : number
            public get AcceptList(): System.Collections.IEnumerator;
            public get ConnectList(): System.Collections.IEnumerator;
            public AddPermission ($access: System.Net.NetworkAccess, $transport: System.Net.TransportType, $hostName: string, $portNumber: number) : void
            public IsUnrestricted () : boolean
            public constructor ($state: System.Security.Permissions.PermissionState)
            public constructor ($access: System.Net.NetworkAccess, $transport: System.Net.TransportType, $hostName: string, $portNumber: number)
            public constructor ()
        }
        class SocketPermissionAttribute extends System.Security.Permissions.CodeAccessSecurityAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get Access(): string;
            public set Access(value: string);
            public get Host(): string;
            public set Host(value: string);
            public get Port(): string;
            public set Port(value: string);
            public get Transport(): string;
            public set Transport(value: string);
            public constructor ($action: System.Security.Permissions.SecurityAction)
            public constructor ()
        }
    }
    namespace UnityEngine.Networking.Types {
        /** Network ID, used for match making.
        */
        enum NetworkID
        { Invalid = 18446744073709551615 }
        /** Identifies a specific game instance.
        */
        enum SourceID
        { Invalid = 18446744073709551615 }
        /** The NodeID is the ID used in Relay matches to track nodes in a network.
        */
        enum NodeID
        { Invalid = 0 }
        /** The AppID identifies the application on the Unity Cloud or UNET servers.
        */
        enum AppID
        { Invalid = 18446744073709551615 }
        /** Access token used to authenticate a client session for the purposes of allowing or disallowing match operations requested by that client.
        */
        class NetworkAccessToken extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.RemoteSettings {
        interface UpdatedEventHandler
        { 
        () : void; 
        Invoke?: () => void;
        }
        var UpdatedEventHandler: { new (func: () => void): UpdatedEventHandler; }
    }
    namespace UnityEditor {
        class ActiveEditorTracker extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get activeEditors(): System.Array$1<UnityEditor.Editor>;
            public get isDirty(): boolean;
            public get isLocked(): boolean;
            public set isLocked(value: boolean);
            public get inspectorMode(): UnityEditor.InspectorMode;
            public set inspectorMode(value: UnityEditor.InspectorMode);
            public get hasComponentsWhichCannotBeMultiEdited(): boolean;
            public static get sharedTracker(): UnityEditor.ActiveEditorTracker;
            public Destroy () : void
            public GetVisible ($index: number) : number
            public SetVisible ($index: number, $visible: number) : void
            public ClearDirty () : void
            public RebuildIfNecessary () : void
            public ForceRebuild () : void
            public VerifyModifiedMonoBehaviours () : void
            public static HasCustomEditor ($obj: UnityEngine.Object) : boolean
            public constructor ()
        }
        /** Derive from this base class to create a custom inspector or editor for your custom object.
        */
        class Editor extends UnityEngine.ScriptableObject implements UnityEditor.IPreviewable, UnityEditor.IToolModeOwner
        {
            protected [__keep_incompatibility]: never;
            /** The object being inspected.
            */
            public get target(): UnityEngine.Object;
            public set target(value: UnityEngine.Object);
            /** An array of all the object being inspected.
            */
            public get targets(): System.Array$1<UnityEngine.Object>;
            /** A SerializedObject representing the object or objects being inspected.
            */
            public get serializedObject(): UnityEditor.SerializedObject;
            /** Make a custom editor for targetObject or targetObjects with a context object.
            */
            public static CreateEditorWithContext ($targetObjects: System.Array$1<UnityEngine.Object>, $context: UnityEngine.Object, $editorType: System.Type) : UnityEditor.Editor
            public static CreateEditorWithContext ($targetObjects: System.Array$1<UnityEngine.Object>, $context: UnityEngine.Object) : UnityEditor.Editor
            /** Creates a cached editor using a context object.
            */
            public static CreateCachedEditorWithContext ($targetObject: UnityEngine.Object, $context: UnityEngine.Object, $editorType: System.Type, $previousEditor: $Ref<UnityEditor.Editor>) : void
            /** Creates a cached editor using a context object.
            */
            public static CreateCachedEditorWithContext ($targetObjects: System.Array$1<UnityEngine.Object>, $context: UnityEngine.Object, $editorType: System.Type, $previousEditor: $Ref<UnityEditor.Editor>) : void
            /** On return previousEditor is an editor for targetObject or targetObjects. The function either returns if the editor is already tracking the objects, or destroys the previous editor and creates a new one.
            * @param obj The object the editor is tracking.
            * @param editorType The requested editor type. Set to null for the default editor for the object.
            * @param previousEditor The previous editor for the object. After returning from CreateCachedEditor previousEditor is an editor for the targetObject or targetObjects.
            * @param objects The objects the editor is tracking.
            */
            public static CreateCachedEditor ($targetObject: UnityEngine.Object, $editorType: System.Type, $previousEditor: $Ref<UnityEditor.Editor>) : void
            /** On return previousEditor is an editor for targetObject or targetObjects. The function either returns if the editor is already tracking the objects, or destroys the previous editor and creates a new one.
            * @param obj The object the editor is tracking.
            * @param editorType The requested editor type. Set to null for the default editor for the object.
            * @param previousEditor The previous editor for the object. After returning from CreateCachedEditor previousEditor is an editor for the targetObject or targetObjects.
            * @param objects The objects the editor is tracking.
            */
            public static CreateCachedEditor ($targetObjects: System.Array$1<UnityEngine.Object>, $editorType: System.Type, $previousEditor: $Ref<UnityEditor.Editor>) : void
            /** Make a custom editor for targetObject or targetObjects.
            * @param objects All objects must be of the same type.
            */
            public static CreateEditor ($targetObject: UnityEngine.Object) : UnityEditor.Editor
            /** Make a custom editor for targetObject or targetObjects.
            * @param objects All objects must be of the same type.
            */
            public static CreateEditor ($targetObject: UnityEngine.Object, $editorType: System.Type) : UnityEditor.Editor
            /** Make a custom editor for targetObject or targetObjects.
            * @param objects All objects must be of the same type.
            */
            public static CreateEditor ($targetObjects: System.Array$1<UnityEngine.Object>) : UnityEditor.Editor
            /** Make a custom editor for targetObject or targetObjects.
            * @param objects All objects must be of the same type.
            */
            public static CreateEditor ($targetObjects: System.Array$1<UnityEngine.Object>, $editorType: System.Type) : UnityEditor.Editor
            public DrawDefaultInspector () : boolean
            public Repaint () : void
            public OnInspectorGUI () : void
            public CreateInspectorGUI () : UnityEngine.UIElements.VisualElement
            public RequiresConstantRepaint () : boolean
            public static add_finishedDefaultHeaderGUI ($value: System.Action$1<UnityEditor.Editor>) : void
            public static remove_finishedDefaultHeaderGUI ($value: System.Action$1<UnityEditor.Editor>) : void
            public DrawHeader () : void
            /** Draws the inspector GUI with a foldout header for target.
            * @param target The object to display the Inspector for.
            * @param editor The reference to a variable of type Editor.
            */
            public static DrawFoldoutInspector ($target: UnityEngine.Object, $editor: $Ref<UnityEditor.Editor>) : void
            public HasPreviewGUI () : boolean
            public GetPreviewTitle () : UnityEngine.GUIContent
            /** Override this method if you want to render a static preview.
            * @param assetPath The asset to operate on.
            * @param subAssets An array of all Assets at assetPath.
            * @param width Width of the created texture.
            * @param height Height of the created texture.
            * @returns Generated texture or null. 
            */
            public RenderStaticPreview ($assetPath: string, $subAssets: System.Array$1<UnityEngine.Object>, $width: number, $height: number) : UnityEngine.Texture2D
            /** Implement to create your own custom preview for the preview area of the inspector, the headers of the primary editor, and the object selector.
            * @param r Rectangle in which to draw the preview.
            * @param background Background image.
            */
            public OnPreviewGUI ($r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            /** Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.
            * @param r Rectangle in which to draw the preview.
            * @param background Background image.
            */
            public OnInteractivePreviewGUI ($r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            public OnPreviewSettings () : void
            public GetInfoString () : string
            /** The first entry point for Preview Drawing.
            * @param previewPosition The available area to draw the preview.
            */
            public DrawPreview ($previewArea: UnityEngine.Rect) : void
            public ReloadPreviewInstances () : void
            public UseDefaultMargins () : boolean
            public Initialize ($targets: System.Array$1<UnityEngine.Object>) : void
            public MoveNextTarget () : boolean
            public ResetTarget () : void
            public constructor ()
        }
        enum InspectorMode
        { Normal = 0, Debug = 1, DebugInternal = 2 }
        /** Helpers for builtin arrays.
        */
        class ArrayUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** This class has event dispatchers for assembly reload events.
        */
        class AssemblyReloadEvents extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_beforeAssemblyReload ($value: UnityEditor.AssemblyReloadEvents.AssemblyReloadCallback) : void
            public static remove_beforeAssemblyReload ($value: UnityEditor.AssemblyReloadEvents.AssemblyReloadCallback) : void
            public static add_afterAssemblyReload ($value: UnityEditor.AssemblyReloadEvents.AssemblyReloadCallback) : void
            public static remove_afterAssemblyReload ($value: UnityEditor.AssemblyReloadEvents.AssemblyReloadCallback) : void
        }
        /** Result of Asset delete operation
        */
        enum AssetDeleteResult
        { DidNotDelete = 0, FailedDelete = 1, DidDelete = 2 }
        /** Result of Asset move
        */
        enum AssetMoveResult
        { DidNotMove = 0, FailedMove = 1, DidMove = 2 }
        /** AssetPostprocessor lets you hook into the import pipeline and run scripts prior or after importing assets.
        */
        class AssetPostprocessor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The path name of the asset being imported.
            */
            public get assetPath(): string;
            public set assetPath(value: string);
            /** The import context.
            */
            public get context(): UnityEditor.Experimental.AssetImporters.AssetImportContext;
            /** Reference to the asset importer.
            */
            public get assetImporter(): UnityEditor.AssetImporter;
            /** Logs an import warning to the console.
            */
            public LogWarning ($warning: string) : void
            /** Logs an import warning to the console.
            */
            public LogWarning ($warning: string, $context: UnityEngine.Object) : void
            /** Logs an import error message to the console.
            */
            public LogError ($warning: string) : void
            /** Logs an import error message to the console.
            */
            public LogError ($warning: string, $context: UnityEngine.Object) : void
            public GetVersion () : number
            public GetPostprocessOrder () : number
            public constructor ()
        }
        /** Base class from which asset importers for specific asset types derive.
        */
        class AssetImporter extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The path name of the asset for this importer. (Read Only)
            */
            public get assetPath(): string;
            /** The value is true when no meta file is provided with the imported asset.
            */
            public get importSettingsMissing(): boolean;
            public get assetTimeStamp(): bigint;
            /** Get or set any user data.
            */
            public get userData(): string;
            public set userData(value: string);
            /** Get or set the AssetBundle name.
            */
            public get assetBundleName(): string;
            public set assetBundleName(value: string);
            /** Get or set the AssetBundle variant.
            */
            public get assetBundleVariant(): string;
            public set assetBundleVariant(value: string);
            /** Set the AssetBundle name and variant.
            * @param assetBundleName AssetBundle name.
            * @param assetBundleVariant AssetBundle variant.
            */
            public SetAssetBundleNameAndVariant ($assetBundleName: string, $assetBundleVariant: string) : void
            /** Retrieves the asset importer for the asset at path.
            */
            public static GetAtPath ($path: string) : UnityEditor.AssetImporter
            public SaveAndReimport () : void
            public AddRemap ($identifier: UnityEditor.AssetImporter.SourceAssetIdentifier, $externalObject: UnityEngine.Object) : void
            public RemoveRemap ($identifier: UnityEditor.AssetImporter.SourceAssetIdentifier) : boolean
            public GetExternalObjectMap () : System.Collections.Generic.Dictionary$2<UnityEditor.AssetImporter.SourceAssetIdentifier, UnityEngine.Object>
            /** Checks if the AssetImporter supports remapping the given asset type.
            * @param type The type of asset to check.
            * @returns Returns true if the importer supports remapping the given type. Otherwise, returns false. 
            */
            public SupportsRemappedAssetType ($type: System.Type) : boolean
            public constructor ()
        }
        /** Building options. Multiple options can be combined together.
        */
        enum BuildOptions
        { None = 0, Development = 1, AutoRunPlayer = 4, ShowBuiltPlayer = 8, BuildAdditionalStreamedScenes = 16, AcceptExternalModificationsToPlayer = 32, InstallInBuildFolder = 64, WebPlayerOfflineDeployment = 128, ConnectWithProfiler = 256, AllowDebugging = 512, SymlinkLibraries = 1024, UncompressedAssetBundle = 2048, StripDebugSymbols = 0, CompressTextures = 0, ConnectToHost = 4096, EnableHeadlessMode = 16384, BuildScriptsOnly = 32768, PatchPackage = 65536, Il2CPP = 0, ForceEnableAssertions = 131072, CompressWithLz4 = 262144, CompressWithLz4HC = 524288, ForceOptimizeScriptCompilation = 0, ComputeCRC = 1048576, StrictMode = 2097152, IncludeTestAssemblies = 4194304, NoUniqueIdentifier = 8388608, WaitForPlayerConnection = 33554432, EnableCodeCoverage = 67108864, EnableDeepProfilingSupport = 268435456 }
        /** Asset Bundle building options.
        */
        enum BuildAssetBundleOptions
        { None = 0, UncompressedAssetBundle = 1, CollectDependencies = 2, CompleteAssets = 4, DisableWriteTypeTree = 8, DeterministicAssetBundle = 16, ForceRebuildAssetBundle = 32, IgnoreTypeTreeChanges = 64, AppendHashToAssetBundleName = 128, ChunkBasedCompression = 256, StrictMode = 512, DryRunBuild = 1024, DisableLoadAssetByFileName = 4096, DisableLoadAssetByFileNameWithExtension = 8192, AssetBundleStripUnityVersion = 32768 }
        /** AssetBundle building map entry.
        */
        class AssetBundleBuild extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** AssetBundle name.
            */
            public assetBundleName : string
            /** AssetBundle variant.
            */
            public assetBundleVariant : string
            /** Asset names which belong to the given AssetBundle.
            */
            public assetNames : System.Array$1<string>
            /** Addressable name used to load an asset.
            */
            public addressableNames : System.Array$1<string>
        }
        /** Provide various options to control the behavior of BuildPipeline.BuildPlayer.
        */
        class BuildPlayerOptions extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The Scenes to be included in the build. If empty, the currently open Scene will be built. Paths are relative to the project folder (AssetsMyLevelsMyScene.unity).
            */
            public get scenes(): System.Array$1<string>;
            public set scenes(value: System.Array$1<string>);
            /** The path where the application will be built.
            */
            public get locationPathName(): string;
            public set locationPathName(value: string);
            /** The path to an manifest file describing all of the asset bundles used in the build (optional).
            */
            public get assetBundleManifestPath(): string;
            public set assetBundleManifestPath(value: string);
            /** The BuildTargetGroup to build.
            */
            public get targetGroup(): UnityEditor.BuildTargetGroup;
            public set targetGroup(value: UnityEditor.BuildTargetGroup);
            /** The BuildTarget to build.
            */
            public get target(): UnityEditor.BuildTarget;
            public set target(value: UnityEditor.BuildTarget);
            /** Additional BuildOptions, like whether to run the built player.
            */
            public get options(): UnityEditor.BuildOptions;
            public set options(value: UnityEditor.BuildOptions);
        }
        /** Build target group.
        */
        enum BuildTargetGroup
        { Unknown = 0, Standalone = 1, WebPlayer = 2, iPhone = 4, iOS = 4, PS3 = 5, XBOX360 = 6, Android = 7, WebGL = 13, WSA = 14, Metro = 14, WP8 = 15, BlackBerry = 16, Tizen = 17, PSP2 = 18, PS4 = 19, PSM = 20, XboxOne = 21, SamsungTV = 22, N3DS = 23, WiiU = 24, tvOS = 25, Facebook = 26, Switch = 27, Lumin = 28, Stadia = 29 }
        /** Target build platform.
        */
        enum BuildTarget
        { StandaloneOSX = 2, StandaloneOSXUniversal = 3, StandaloneOSXIntel = 4, StandaloneWindows = 5, WebPlayer = 6, WebPlayerStreamed = 7, iOS = 9, PS3 = 10, XBOX360 = 11, Android = 13, StandaloneLinux = 17, StandaloneWindows64 = 19, WebGL = 20, WSAPlayer = 21, StandaloneLinux64 = 24, StandaloneLinuxUniversal = 25, WP8Player = 26, StandaloneOSXIntel64 = 27, BlackBerry = 28, Tizen = 29, PSP2 = 30, PS4 = 31, PSM = 32, XboxOne = 33, SamsungTV = 34, N3DS = 35, WiiU = 36, tvOS = 37, Switch = 38, Lumin = 39, Stadia = 40, iPhone = -1, BB10 = -1, MetroPlayer = -1, NoTarget = -2 }
        /** Lets you programmatically build players or AssetBundles which can be loaded from the web.
        */
        class BuildPipeline extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Is a player currently being built?
            */
            public static get isBuildingPlayer(): boolean;
            public static GetBuildTargetGroup ($platform: UnityEditor.BuildTarget) : UnityEditor.BuildTargetGroup
            /** Builds a player. These overloads are still supported, but will be replaced. Please use BuildPlayer (BuildPlayerOptions buildPlayerOptions)  instead.
            * @param scenes The Scenes to include in the build. If empty, the build only includes the currently open Scene. Paths are relative to the project folder (AssetsMyLevelsMyScene.unity).
            * @param locationPathName The path where the application will be built.
            * @param target The BuildTarget to build.
            * @param options Additional BuildOptions, like whether to run the built player.
            * @returns An error message if an error occurred. 
            */
            public static BuildPlayer ($levels: System.Array$1<UnityEditor.EditorBuildSettingsScene>, $locationPathName: string, $target: UnityEditor.BuildTarget, $options: UnityEditor.BuildOptions) : UnityEditor.Build.Reporting.BuildReport
            /** Builds a player. These overloads are still supported, but will be replaced. Please use BuildPlayer (BuildPlayerOptions buildPlayerOptions)  instead.
            * @param scenes The Scenes to include in the build. If empty, the build only includes the currently open Scene. Paths are relative to the project folder (AssetsMyLevelsMyScene.unity).
            * @param locationPathName The path where the application will be built.
            * @param target The BuildTarget to build.
            * @param options Additional BuildOptions, like whether to run the built player.
            * @returns An error message if an error occurred. 
            */
            public static BuildPlayer ($levels: System.Array$1<string>, $locationPathName: string, $target: UnityEditor.BuildTarget, $options: UnityEditor.BuildOptions) : UnityEditor.Build.Reporting.BuildReport
            /** Builds a player.
            * @param buildPlayerOptions Provide various options to control the behavior of BuildPipeline.BuildPlayer.
            * @returns A BuildReport giving build process information. 
            */
            public static BuildPlayer ($buildPlayerOptions: UnityEditor.BuildPlayerOptions) : UnityEditor.Build.Reporting.BuildReport
            /** Build all AssetBundles specified in the editor.
            * @param outputPath Output path for the AssetBundles.
            * @param assetBundleOptions AssetBundle building options.
            * @param targetPlatform Chosen target build platform.
            * @returns The manifest listing all AssetBundles included in this build. 
            */
            public static BuildAssetBundles ($outputPath: string, $assetBundleOptions: UnityEditor.BuildAssetBundleOptions, $targetPlatform: UnityEditor.BuildTarget) : UnityEngine.AssetBundleManifest
            /** Build AssetBundles from a building map.
            * @param outputPath Output path for the AssetBundles.
            * @param builds AssetBundle building map.
            * @param assetBundleOptions AssetBundle building options.
            * @param targetPlatform Target build platform.
            * @returns The manifest listing all AssetBundles included in this build. 
            */
            public static BuildAssetBundles ($outputPath: string, $builds: System.Array$1<UnityEditor.AssetBundleBuild>, $assetBundleOptions: UnityEditor.BuildAssetBundleOptions, $targetPlatform: UnityEditor.BuildTarget) : UnityEngine.AssetBundleManifest
            /** Extract the crc checksum for the given AssetBundle.
            */
            public static GetCRCForAssetBundle ($targetPath: string, $crc: $Ref<number>) : boolean
            /** Extract the hash for the given AssetBundle.
            */
            public static GetHashForAssetBundle ($targetPath: string, $hash: $Ref<UnityEngine.Hash128>) : boolean
            /** Returns true if the specified build target is currently available in the Editor.
            * @param buildTargetGroup build target group
            * @param target build target
            */
            public static IsBuildTargetSupported ($buildTargetGroup: UnityEditor.BuildTargetGroup, $target: UnityEditor.BuildTarget) : boolean
            /** Returns the path of a player directory. For ex., Editor\Data\PlaybackEngines\AndroidPlayer.
            In some cases the player directory path can be affected by BuildOptions.Development.
            * @param target Build target.
            * @param options Build options.
            * @param buildTargetGroup Build target group.
            */
            public static GetPlaybackEngineDirectory ($target: UnityEditor.BuildTarget, $options: UnityEditor.BuildOptions) : string
            /** Returns the path of a player directory. For ex., Editor\Data\PlaybackEngines\AndroidPlayer.
            In some cases the player directory path can be affected by BuildOptions.Development.
            * @param target Build target.
            * @param options Build options.
            * @param buildTargetGroup Build target group.
            */
            public static GetPlaybackEngineDirectory ($buildTargetGroup: UnityEditor.BuildTargetGroup, $target: UnityEditor.BuildTarget, $options: UnityEditor.BuildOptions) : string
            public constructor ()
        }
        /** This class is used for entries in the Scenes list, as displayed in the window. This class contains the Scene path of a Scene and an enabled flag that indicates wether the Scene is enabled in the BuildSettings window or not.
        You can use this class in combination with EditorBuildSettings.scenes to populate the list of Scenes included in the build via script. This is useful when creating custom editor scripts to automate your build pipeline.
        See EditorBuildSettings.scenes for an example script.
        */
        class EditorBuildSettingsScene extends System.Object implements System.IComparable
        {
            protected [__keep_incompatibility]: never;
            /** Whether this Scene is enabled in the for an example of how to use this class.
            See Also: EditorBuildSettingsScene, EditorBuildSettings.scenes.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The file path of the Scene as listed in the Editor for an example of how to use this class.
            See Also: EditorBuildSettingsScene, EditorBuildSettings.scenes.
            */
            public get path(): string;
            public set path(value: string);
            public get guid(): UnityEditor.GUID;
            public set guid(value: UnityEditor.GUID);
            public static GetActiveSceneList ($scenes: System.Array$1<UnityEditor.EditorBuildSettingsScene>) : System.Array$1<string>
            public CompareTo ($obj: any) : number
            public constructor ()
            public constructor ($path: string, $enabled: boolean)
            public constructor ($guid: UnityEditor.GUID, $enabled: boolean)
        }
        /** Derive from this class to create an editor window.
        */
        class EditorWindow extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** Retrieves the root visual element of this window hierarchy.
            */
            public get rootVisualElement(): UnityEngine.UIElements.VisualElement;
            /** Checks whether MouseMove events are received in the GUI in this Editor window.
            */
            public get wantsMouseMove(): boolean;
            public set wantsMouseMove(value: boolean);
            /** Checks whether MouseEnterWindow and MouseLeaveWindow events are received in the GUI in this Editor window.
            */
            public get wantsMouseEnterLeaveWindow(): boolean;
            public set wantsMouseEnterLeaveWindow(value: boolean);
            /** Does the window automatically repaint whenever the Scene has changed?
            */
            public get autoRepaintOnSceneChange(): boolean;
            public set autoRepaintOnSceneChange(value: boolean);
            /** Is this window maximized?
            */
            public get maximized(): boolean;
            public set maximized(value: boolean);
            /** The EditorWindow which currently has keyboard focus. (Read Only)
            */
            public static get focusedWindow(): UnityEditor.EditorWindow;
            /** The EditorWindow currently under the mouse cursor. (Read Only)
            */
            public static get mouseOverWindow(): UnityEditor.EditorWindow;
            /** The minimum size of this window.
            */
            public get minSize(): UnityEngine.Vector2;
            public set minSize(value: UnityEngine.Vector2);
            /** The maximum size of this window.
            */
            public get maxSize(): UnityEngine.Vector2;
            public set maxSize(value: UnityEngine.Vector2);
            /** The GUIContent used for drawing the title of EditorWindows.
            */
            public get titleContent(): UnityEngine.GUIContent;
            public set titleContent(value: UnityEngine.GUIContent);
            public get depthBufferBits(): number;
            public set depthBufferBits(value: number);
            /** The desired position of the window in screen space.
            */
            public get position(): UnityEngine.Rect;
            public set position(value: UnityEngine.Rect);
            public BeginWindows () : void
            public EndWindows () : void
            /** Show a notification message.
            * @param notification The contents of the notification message.
            * @param fadeoutWait The duration the notification is displayed. Measured in seconds.
            */
            public ShowNotification ($notification: UnityEngine.GUIContent) : void
            /** Show a notification message.
            * @param notification The contents of the notification message.
            * @param fadeoutWait The duration the notification is displayed. Measured in seconds.
            */
            public ShowNotification ($notification: UnityEngine.GUIContent, $fadeoutWait: number) : void
            public RemoveNotification () : void
            public ShowTab () : void
            public Focus () : void
            public ShowUtility () : void
            public ShowPopup () : void
            public ShowModalUtility () : void
            /** Shows a window with dropdown behaviour and styling.
            * @param buttonRect The button from which the position of the window will be determined (see description).
            * @param windowSize The initial size of the window.
            */
            public ShowAsDropDown ($buttonRect: UnityEngine.Rect, $windowSize: UnityEngine.Vector2) : void
            public Show () : void
            /** Show the EditorWindow window.
            * @param immediateDisplay Immediately display Show.
            */
            public Show ($immediateDisplay: boolean) : void
            public ShowAuxWindow () : void
            public ShowModal () : void
            /** Returns the first EditorWindow of type t which is currently on the screen.
            * @param t The type of the window. Must derive from EditorWindow.
            * @param utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            * @param focus Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).
            */
            public static GetWindow ($t: System.Type, $utility: boolean, $title: string, $focus: boolean) : UnityEditor.EditorWindow
            /** Returns the first EditorWindow of type t which is currently on the screen.
            * @param t The type of the window. Must derive from EditorWindow.
            * @param utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            * @param focus Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).
            */
            public static GetWindow ($t: System.Type, $utility: boolean, $title: string) : UnityEditor.EditorWindow
            /** Returns the first EditorWindow of type t which is currently on the screen.
            * @param t The type of the window. Must derive from EditorWindow.
            * @param utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            * @param focus Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).
            */
            public static GetWindow ($t: System.Type, $utility: boolean) : UnityEditor.EditorWindow
            /** Returns the first EditorWindow of type t which is currently on the screen.
            * @param t The type of the window. Must derive from EditorWindow.
            * @param utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            * @param focus Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).
            */
            public static GetWindow ($t: System.Type) : UnityEditor.EditorWindow
            /** Returns the first EditorWindow of type t which is currently on the screen.
            * @param t The type of the window. Must derive from EditorWindow.
            * @param rect The position on the screen where a newly created window will show.
            * @param utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            */
            public static GetWindowWithRect ($t: System.Type, $rect: UnityEngine.Rect, $utility: boolean, $title: string) : UnityEditor.EditorWindow
            /** Returns the first EditorWindow of type t which is currently on the screen.
            * @param t The type of the window. Must derive from EditorWindow.
            * @param rect The position on the screen where a newly created window will show.
            * @param utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            */
            public static GetWindowWithRect ($t: System.Type, $rect: UnityEngine.Rect, $utility: boolean) : UnityEditor.EditorWindow
            /** Returns the first EditorWindow of type t which is currently on the screen.
            * @param t The type of the window. Must derive from EditorWindow.
            * @param rect The position on the screen where a newly created window will show.
            * @param utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            */
            public static GetWindowWithRect ($t: System.Type, $rect: UnityEngine.Rect) : UnityEditor.EditorWindow
            /** Focuses the first found EditorWindow of specified type if it is open.
            * @param t The type of the window. Must derive from EditorWindow.
            */
            public static FocusWindowIfItsOpen ($t: System.Type) : void
            public Close () : void
            public Repaint () : void
            /** Sends an Event to a window.
            */
            public SendEvent ($e: UnityEngine.Event) : boolean
            public GetExtraPaneTypes () : System.Collections.Generic.IEnumerable$1<System.Type>
            public constructor ()
        }
        /** The default build settings window.
        */
        class BuildPlayerWindow extends UnityEditor.EditorWindow
        {
            protected [__keep_incompatibility]: never;
            public static ShowBuildPlayerWindow () : void
            public static GetPlaybackEngineDownloadURL ($moduleName: string) : string
            public static RegisterGetBuildPlayerOptionsHandler ($func: System.Func$2<UnityEditor.BuildPlayerOptions, UnityEditor.BuildPlayerOptions>) : void
            public static RegisterBuildPlayerHandler ($func: System.Action$1<UnityEditor.BuildPlayerOptions>) : void
            public constructor ()
        }
        /** Base class for Attributes that require a callback index.
        */
        class CallbackOrderAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
        class PostProcessAttribute extends UnityEditor.CallbackOrderAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
        /** DefaultAsset is used for assets that do not have a specific type (yet).
        */
        class DefaultAsset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Visual indication mode for Drag & Drop operation.
        */
        enum DragAndDropVisualMode
        { None = 0, Copy = 1, Link = 2, Move = 16, Generic = 4, Rejected = 32 }
        /** Editor drag & drop operations.
        */
        class DragAndDrop extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** References to Object|objects being dragged.
            */
            public static get objectReferences(): System.Array$1<UnityEngine.Object>;
            public static set objectReferences(value: System.Array$1<UnityEngine.Object>);
            /** The file names being dragged.
            */
            public static get paths(): System.Array$1<string>;
            public static set paths(value: System.Array$1<string>);
            /** Get or set ID of currently active drag and drop control.
            */
            public static get activeControlID(): number;
            public static set activeControlID(value: number);
            /** The visual indication of the drag.
            */
            public static get visualMode(): UnityEditor.DragAndDropVisualMode;
            public static set visualMode(value: UnityEditor.DragAndDropVisualMode);
            public static PrepareStartDrag () : void
            /** Start a drag operation.
            */
            public static StartDrag ($title: string) : void
            /** Get data associated with current drag and drop operation.
            */
            public static GetGenericData ($type: string) : any
            /** Set data associated with current drag and drop operation.
            */
            public static SetGenericData ($type: string, $data: any) : void
            public static AcceptDrag () : void
            public constructor ()
        }
        /** Determines how a gizmo is drawn or picked in the Unity editor.
        */
        enum GizmoType
        { Pickable = 1, NotInSelectionHierarchy = 2, NonSelected = 32, Selected = 4, Active = 8, InSelectionHierarchy = 16, NotSelected = -127, SelectedOrChild = -127 }
        /** The DrawGizmo attribute allows you to supply a gizmo renderer for any Component.
        */
        class DrawGizmo extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public drawnType : System.Type
            public drawOptions : UnityEditor.GizmoType
            public constructor ($gizmo: UnityEditor.GizmoType)
            public constructor ($gizmo: UnityEditor.GizmoType, $drawnGizmoType: System.Type)
            public constructor ()
        }
        /** Main Application class.
        */
        class EditorApplication extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Delegate for OnGUI events for every visible list item in the ProjectWindow.
            */
            public static projectWindowItemOnGUI : UnityEditor.EditorApplication.ProjectWindowItemCallback
            /** Delegate for OnGUI events for every visible list item in the HierarchyWindow.
            */
            public static hierarchyWindowItemOnGUI : UnityEditor.EditorApplication.HierarchyWindowItemCallback
            /** Delegate for generic updates.
            */
            public static update : UnityEditor.EditorApplication.CallbackFunction
            /** Delegate which is called once after all inspectors update.
            */
            public static delayCall : UnityEditor.EditorApplication.CallbackFunction
            /** Callback raised whenever the contents of a window's search box are changed.
            */
            public static searchChanged : UnityEditor.EditorApplication.CallbackFunction
            /** Delegate for changed keyboard modifier keys.
            */
            public static modifierKeysChanged : UnityEditor.EditorApplication.CallbackFunction
            /** Callback raised whenever the user contex-clicks on a property in an Inspector.
            */
            public static contextualPropertyMenu : UnityEditor.EditorApplication.SerializedPropertyCallbackFunction
            /** Is editor currently in play mode?
            */
            public static get isPlaying(): boolean;
            public static set isPlaying(value: boolean);
            /** Is editor either currently in play mode, or about to switch to it? (Read Only)
            */
            public static get isPlayingOrWillChangePlaymode(): boolean;
            /** Is editor currently paused?
            */
            public static get isPaused(): boolean;
            public static set isPaused(value: boolean);
            /** Is editor currently compiling scripts? (Read Only)
            */
            public static get isCompiling(): boolean;
            /** True if the Editor is currently refreshing the AssetDatabase.
            */
            public static get isUpdating(): boolean;
            /** Is editor currently connected to Unity Remote 4 client app.
            */
            public static get isRemoteConnected(): boolean;
            /** Path to the Unity editor contents folder. (Read Only)
            */
            public static get applicationContentsPath(): string;
            /** Returns the path to the Unity editor application. (Read Only)
            */
            public static get applicationPath(): string;
            /** Returns true if the current project was created as a temporary project.
            */
            public static get isTemporaryProject(): boolean;
            /** The time since the editor was started. (Read Only)
            */
            public static get timeSinceStartup(): number;
            /** Open another project.
            * @param projectPath The path of a project to open.
            * @param args Arguments to pass to command line.
            */
            public static OpenProject ($projectPath: string, ...args: string[]) : void
            public static EnterPlaymode () : void
            public static ExitPlaymode () : void
            public static Step () : void
            public static LockReloadAssemblies () : void
            public static UnlockReloadAssemblies () : void
            /** Invokes the menu item in the specified path.
            */
            public static ExecuteMenuItem ($menuItemPath: string) : boolean
            /** Sets the path that Unity should store the current temporary project at, when the project is closed.
            * @param path The path that the current temporary project should be relocated to when closing it.
            */
            public static SetTemporaryProjectKeepPath ($path: string) : void
            /** Exit the Unity editor application.
            */
            public static Exit ($returnValue: number) : void
            public static QueuePlayerLoopUpdate () : void
            public static Beep () : void
            public static RepaintProjectWindow () : void
            public static RepaintAnimationWindow () : void
            public static RepaintHierarchyWindow () : void
            public static DirtyHierarchyWindowSorting () : void
            public static add_wantsToQuit ($value: System.Func$1<boolean>) : void
            public static remove_wantsToQuit ($value: System.Func$1<boolean>) : void
            public static add_quitting ($value: System.Action) : void
            public static remove_quitting ($value: System.Action) : void
            public static add_hierarchyChanged ($value: System.Action) : void
            public static remove_hierarchyChanged ($value: System.Action) : void
            public static add_projectChanged ($value: System.Action) : void
            public static remove_projectChanged ($value: System.Action) : void
            public static add_pauseStateChanged ($value: System.Action$1<UnityEditor.PauseState>) : void
            public static remove_pauseStateChanged ($value: System.Action$1<UnityEditor.PauseState>) : void
            public static add_playModeStateChanged ($value: System.Action$1<UnityEditor.PlayModeStateChange>) : void
            public static remove_playModeStateChanged ($value: System.Action$1<UnityEditor.PlayModeStateChange>) : void
            public constructor ()
        }
        /** GenericMenu lets you create custom context menus and dropdown menus.
        */
        class GenericMenu extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Allow the menu to have multiple items with the same name.
            */
            public get allowDuplicateNames(): boolean;
            public set allowDuplicateNames(value: boolean);
            public AddItem ($content: UnityEngine.GUIContent, $on: boolean, $func: UnityEditor.GenericMenu.MenuFunction) : void
            public AddItem ($content: UnityEngine.GUIContent, $on: boolean, $func: UnityEditor.GenericMenu.MenuFunction2, $userData: any) : void
            /** Add a disabled item to the menu.
            * @param content The GUIContent to display as a disabled menu item.
            */
            public AddDisabledItem ($content: UnityEngine.GUIContent) : void
            /** Add a disabled item to the menu.
            * @param content The GUIContent to display as a disabled menu item.
            * @param on Specifies whether to show that the item is currently activated (i.e. a tick next to the item in the menu).
            */
            public AddDisabledItem ($content: UnityEngine.GUIContent, $on: boolean) : void
            /** Add a seperator item to the menu.
            * @param path The path to the submenu, if adding a separator to a submenu. When adding a separator to the top level of a menu, use an empty string as the path.
            */
            public AddSeparator ($path: string) : void
            public GetItemCount () : number
            public ShowAsContext () : void
            /** Show the menu at the given screen rect.
            * @param position The position at which to show the menu.
            */
            public DropDown ($position: UnityEngine.Rect) : void
            public constructor ()
        }
        /** SerializedProperty and SerializedObject are classes for editing properties on objects in a completely generic way that automatically handles undo and styling UI for Prefabs.
        */
        class SerializedProperty extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** SerializedObject this property belongs to (Read Only).
            */
            public get serializedObject(): UnityEditor.SerializedObject;
            /** A reference to another Object in the Scene. This reference is resolved in the context of the SerializedObject containing the SerializedProperty.
            */
            public get exposedReferenceValue(): UnityEngine.Object;
            public set exposedReferenceValue(value: UnityEngine.Object);
            /** Does this property represent multiple different values due to multi-object editing? (Read Only)
            */
            public get hasMultipleDifferentValues(): boolean;
            /** Nice display name of the property. (Read Only)
            */
            public get displayName(): string;
            /** Name of the property. (Read Only)
            */
            public get name(): string;
            /** Type name of the property. (Read Only)
            */
            public get type(): string;
            /** Type name of the element in an array property. (Read Only)
            */
            public get arrayElementType(): string;
            /** Tooltip of the property. (Read Only)
            */
            public get tooltip(): string;
            /** Nesting depth of the property. (Read Only)
            */
            public get depth(): number;
            /** Full path of the property. (Read Only)
            */
            public get propertyPath(): string;
            /** Is this property editable? (Read Only)
            */
            public get editable(): boolean;
            public get isAnimated(): boolean;
            /** Is this property expanded in the inspector?
            */
            public get isExpanded(): boolean;
            public set isExpanded(value: boolean);
            /** Does it have child properties? (Read Only)
            */
            public get hasChildren(): boolean;
            /** Does it have visible child properties? (Read Only)
            */
            public get hasVisibleChildren(): boolean;
            /** Is property part of a Prefab instance? (Read Only)
            */
            public get isInstantiatedPrefab(): boolean;
            /** Allows you to check whether a property's value is overriden (i.e. different to the Prefab it belongs to).
            */
            public get prefabOverride(): boolean;
            public set prefabOverride(value: boolean);
            /** Allows you to check whether his property is a PrefabUtility.IsDefaultOverride|default override.
            Certain properties on Prefab instances are default overrides.
            See PrefabUtility.IsDefaultOverride for more information.
            */
            public get isDefaultOverride(): boolean;
            /** Type of this property (Read Only).
            */
            public get propertyType(): UnityEditor.SerializedPropertyType;
            /** Value of an integer property.
            */
            public get intValue(): number;
            public set intValue(value: number);
            /** Value of a integer property as a long.
            */
            public get longValue(): bigint;
            public set longValue(value: bigint);
            /** Value of a boolean property.
            */
            public get boolValue(): boolean;
            public set boolValue(value: boolean);
            /** Value of a float property.
            */
            public get floatValue(): number;
            public set floatValue(value: number);
            /** Value of a float property as a double.
            */
            public get doubleValue(): number;
            public set doubleValue(value: number);
            /** Value of a string property.
            */
            public get stringValue(): string;
            public set stringValue(value: string);
            /** Value of a color property.
            */
            public get colorValue(): UnityEngine.Color;
            public set colorValue(value: UnityEngine.Color);
            /** Value of a animation curve property.
            */
            public get animationCurveValue(): UnityEngine.AnimationCurve;
            public set animationCurveValue(value: UnityEngine.AnimationCurve);
            /** Value of an object reference property.
            */
            public get objectReferenceValue(): UnityEngine.Object;
            public set objectReferenceValue(value: UnityEngine.Object);
            public set managedReferenceValue(value: any);
            /** String corresponding to the value of the managed reference object (dynamic) full type string.
            */
            public get managedReferenceFullTypename(): string;
            /** String corresponding to the value of the managed reference field full type string.
            */
            public get managedReferenceFieldTypename(): string;
            public get objectReferenceInstanceIDValue(): number;
            public set objectReferenceInstanceIDValue(value: number);
            /** Enum index of an enum property.
            */
            public get enumValueIndex(): number;
            public set enumValueIndex(value: number);
            /** Names of enumeration of an enum property.
            */
            public get enumNames(): System.Array$1<string>;
            /** Display-friendly names of enumeration of an enum property.
            */
            public get enumDisplayNames(): System.Array$1<string>;
            /** Value of a 2D vector property.
            */
            public get vector2Value(): UnityEngine.Vector2;
            public set vector2Value(value: UnityEngine.Vector2);
            /** Value of a 3D vector property.
            */
            public get vector3Value(): UnityEngine.Vector3;
            public set vector3Value(value: UnityEngine.Vector3);
            /** Value of a 4D vector property.
            */
            public get vector4Value(): UnityEngine.Vector4;
            public set vector4Value(value: UnityEngine.Vector4);
            /** Value of a 2D integer vector property.
            */
            public get vector2IntValue(): UnityEngine.Vector2Int;
            public set vector2IntValue(value: UnityEngine.Vector2Int);
            /** Value of a 3D integer vector property.
            */
            public get vector3IntValue(): UnityEngine.Vector3Int;
            public set vector3IntValue(value: UnityEngine.Vector3Int);
            /** Value of a quaternion property.
            */
            public get quaternionValue(): UnityEngine.Quaternion;
            public set quaternionValue(value: UnityEngine.Quaternion);
            /** Value of a rectangle property.
            */
            public get rectValue(): UnityEngine.Rect;
            public set rectValue(value: UnityEngine.Rect);
            /** Value of a rectangle with integer values property.
            */
            public get rectIntValue(): UnityEngine.RectInt;
            public set rectIntValue(value: UnityEngine.RectInt);
            /** Value of bounds property.
            */
            public get boundsValue(): UnityEngine.Bounds;
            public set boundsValue(value: UnityEngine.Bounds);
            /** Value of bounds with integer values property.
            */
            public get boundsIntValue(): UnityEngine.BoundsInt;
            public set boundsIntValue(value: UnityEngine.BoundsInt);
            /** Is this property an array? (Read Only)
            */
            public get isArray(): boolean;
            /** The number of elements in the array. If the SerializedObject contains multiple objects it will return the smallest number of elements. So it is always possible to iterate through the SerializedObject and only get properties found in all objects.
            */
            public get arraySize(): number;
            public set arraySize(value: number);
            /** Is this property a fixed buffer? (Read Only)
            */
            public get isFixedBuffer(): boolean;
            /** The number of elements in the fixed buffer. (Read Only)
            */
            public get fixedBufferSize(): number;
            public Copy () : UnityEditor.SerializedProperty
            /** Retrieves the SerializedProperty at a relative path to the current property.
            */
            public FindPropertyRelative ($relativePropertyPath: string) : UnityEditor.SerializedProperty
            public GetEnumerator () : System.Collections.IEnumerator
            /** Returns the element at the specified index in the array.
            */
            public GetArrayElementAtIndex ($index: number) : UnityEditor.SerializedProperty
            /** Move to next visible property.
            */
            public NextVisible ($enterChildren: boolean) : boolean
            public ClearArray () : void
            public Dispose () : void
            /** See if contained serialized properties are equal.
            */
            public static EqualContents ($x: UnityEditor.SerializedProperty, $y: UnityEditor.SerializedProperty) : boolean
            /** Compares the data for two SerializedProperties. This method ignores paths and SerializedObjects.
            */
            public static DataEquals ($x: UnityEditor.SerializedProperty, $y: UnityEditor.SerializedProperty) : boolean
            /** Move to next property.
            */
            public Next ($enterChildren: boolean) : boolean
            public Reset () : void
            public CountRemaining () : number
            public CountInProperty () : number
            public DuplicateCommand () : boolean
            public DeleteCommand () : boolean
            public GetEndProperty () : UnityEditor.SerializedProperty
            /** Retrieves the SerializedProperty that defines the end range of this property.
            */
            public GetEndProperty ($includeInvisible: boolean) : UnityEditor.SerializedProperty
            /** Insert an empty element at the specified index in the array.
            */
            public InsertArrayElementAtIndex ($index: number) : void
            /** Delete the element at the specified index in the array.
            */
            public DeleteArrayElementAtIndex ($index: number) : void
            /** Move an array element from srcIndex to dstIndex.
            */
            public MoveArrayElement ($srcIndex: number, $dstIndex: number) : boolean
            /** Returns the element at the specified index in the fixed buffer.
            */
            public GetFixedBufferElementAtIndex ($index: number) : UnityEditor.SerializedProperty
        }
        /** Available scripting runtimes to be used by the Editor and Players.
        */
        enum ScriptingRuntimeVersion
        { Legacy = 0, Latest = 1 }
        /** Enumeration specifying the current pause state of the Editor.
        See Also: PlayModeStateChange, EditorApplication.pauseStateChanged, EditorApplication.isPaused.
        */
        enum PauseState
        { Paused = 0, Unpaused = 1 }
        /** Enumeration specifying a change in the Editor's play mode state.
        See Also: PauseState, EditorApplication.playModeStateChanged, EditorApplication.isPlaying.
        */
        enum PlayModeStateChange
        { EnteredEditMode = 0, ExitingEditMode = 1, EnteredPlayMode = 2, ExitingPlayMode = 3 }
        /** Allows you to initialize an Editor class when Unity loads, and when your scripts are recompiled.
        */
        class InitializeOnLoadAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Allow an editor class method to be initialized when Unity loads without action from the user.
        */
        class InitializeOnLoadMethodAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Allow an editor class method to be initialized when Unity enters Play Mode.
        */
        class InitializeOnEnterPlayModeAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class GUID extends System.ValueType implements System.IComparable, System.IComparable$1<UnityEditor.GUID>, System.IEquatable$1<UnityEditor.GUID>
        {
            protected [__keep_incompatibility]: never;
            public static op_Equality ($x: UnityEditor.GUID, $y: UnityEditor.GUID) : boolean
            public static op_Inequality ($x: UnityEditor.GUID, $y: UnityEditor.GUID) : boolean
            public static op_LessThan ($x: UnityEditor.GUID, $y: UnityEditor.GUID) : boolean
            public static op_GreaterThan ($x: UnityEditor.GUID, $y: UnityEditor.GUID) : boolean
            public Equals ($obj: any) : boolean
            public Equals ($obj: UnityEditor.GUID) : boolean
            public CompareTo ($obj: any) : number
            public CompareTo ($rhs: UnityEditor.GUID) : number
            public Empty () : boolean
            public static TryParse ($hex: string, $result: $Ref<UnityEditor.GUID>) : boolean
            public static Generate () : UnityEditor.GUID
            public constructor ($hexRepresentation: string)
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** This class allows you to modify the Editor for an example of how to use this class.
        See Also: EditorBuildSettingsScene, EditorBuildSettings.scenes.
        */
        class EditorBuildSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The list of Scenes that should be included in the build.
            This is the same list of Scenes that is shown in the window. You can modify this list to set up which Scenes should be included in the build.
            */
            public static get scenes(): System.Array$1<UnityEditor.EditorBuildSettingsScene>;
            public static set scenes(value: System.Array$1<UnityEditor.EditorBuildSettingsScene>);
            public static add_sceneListChanged ($value: System.Action) : void
            public static remove_sceneListChanged ($value: System.Action) : void
            /** Remove a config object reference by name.
            * @param name The name in string format of the config object reference to be removed. This is the name given to the object when the reference is first created. Note: This may be different than the object name as an object can be added multiple times with different names.
            * @returns Returns true if the reference was found and removed, otherwise false. 
            */
            public static RemoveConfigObject ($name: string) : boolean
            public static GetConfigObjectNames () : System.Array$1<string>
            /** Store a reference to a config object by name.  The object must be an asset in the project, otherwise it will not be saved when the editor is restarted or scripts are reloaded.  To avoid name conflicts with other packages, it is recommended that names are qualified by a namespace, i.e. "company.package.name".
            * @param name The name of the object reference in string format. This string name must be unique within your project or the overwrite parameter must be set to true.
            * @param obj Object reference to be stored.  This object must be persisted and not null.
            * @param overwrite Boolean parameter used to specify that you want to overwrite an entry with the same name if one already exists.
            * @returns Throws an exception if the object is null, not persisted, or if there is a name conflict and the overwrite parameter is set to false. 
            */
            public static AddConfigObject ($name: string, $obj: UnityEngine.Object, $overwrite: boolean) : void
        }
        /** These work pretty much like the normal GUI functions - and also have matching implementations in EditorGUILayout.
        */
        class EditorGUI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Makes the following controls give the appearance of editing multiple different values.
            */
            public static get showMixedValue(): boolean;
            public static set showMixedValue(value: boolean);
            /** Is the platform-dependent "action" modifier key held down? (Read Only)
            */
            public static get actionKey(): boolean;
            /** The indent level of the field labels.
            */
            public static get indentLevel(): number;
            public static set indentLevel(value: number);
            /** Move keyboard focus to a named text field and begin editing of the content.
            * @param name Name set using GUI.SetNextControlName.
            */
            public static FocusTextInControl ($name: string) : void
            /** Create a group of controls that can be disabled.
            * @param disabled Boolean specifying if the controls inside the group should be disabled.
            */
            public static BeginDisabledGroup ($disabled: boolean) : void
            public static EndDisabledGroup () : void
            public static BeginChangeCheck () : void
            public static EndChangeCheck () : boolean
            /** Draws a label with a drop shadow.
            * @param position Where to show the label.
            * @param content Text to show
            @style style to use.
            */
            public static DropShadowLabel ($position: UnityEngine.Rect, $text: string) : void
            /** Draws a label with a drop shadow.
            * @param position Where to show the label.
            * @param content Text to show
            @style style to use.
            */
            public static DropShadowLabel ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : void
            /** Draws a label with a drop shadow.
            * @param position Where to show the label.
            * @param content Text to show
            @style style to use.
            */
            public static DropShadowLabel ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Draws a label with a drop shadow.
            * @param position Where to show the label.
            * @param content Text to show
            @style style to use.
            */
            public static DropShadowLabel ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            /** Makes a toggle.
            * @param position Rectangle on the screen to use for the toggle.
            * @param label Optional label in front of the toggle.
            * @param value The shown state of the toggle.
            * @param style Optional GUIStyle.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean) : boolean
            /** Makes a toggle.
            * @param position Rectangle on the screen to use for the toggle.
            * @param label Optional label in front of the toggle.
            * @param value The shown state of the toggle.
            * @param style Optional GUIStyle.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($position: UnityEngine.Rect, $label: string, $value: boolean) : boolean
            /** Makes a toggle.
            * @param position Rectangle on the screen to use for the toggle.
            * @param label Optional label in front of the toggle.
            * @param value The shown state of the toggle.
            * @param style Optional GUIStyle.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a toggle.
            * @param position Rectangle on the screen to use for the toggle.
            * @param label Optional label in front of the toggle.
            * @param value The shown state of the toggle.
            * @param style Optional GUIStyle.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($position: UnityEngine.Rect, $label: string, $value: boolean, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a toggle.
            * @param position Rectangle on the screen to use for the toggle.
            * @param label Optional label in front of the toggle.
            * @param value The shown state of the toggle.
            * @param style Optional GUIStyle.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: boolean) : boolean
            /** Makes a toggle.
            * @param position Rectangle on the screen to use for the toggle.
            * @param label Optional label in front of the toggle.
            * @param value The shown state of the toggle.
            * @param style Optional GUIStyle.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: boolean, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @returns The value that has been set by the user. 
            */
            public static Slider ($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number) : number
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @returns The value that has been set by the user. 
            */
            public static Slider ($position: UnityEngine.Rect, $label: string, $value: number, $leftValue: number, $rightValue: number) : number
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @returns The value that has been set by the user. 
            */
            public static Slider ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $leftValue: number, $rightValue: number) : number
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param property The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            */
            public static Slider ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number) : void
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param property The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            */
            public static Slider ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: string) : void
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param property The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            */
            public static Slider ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: UnityEngine.GUIContent) : void
            /** Makes a slider the user can drag to change an integer value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @returns The value that has been set by the user. 
            */
            public static IntSlider ($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number) : number
            /** Makes a slider the user can drag to change an integer value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @returns The value that has been set by the user. 
            */
            public static IntSlider ($position: UnityEngine.Rect, $label: string, $value: number, $leftValue: number, $rightValue: number) : number
            /** Makes a slider the user can drag to change an integer value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @returns The value that has been set by the user. 
            */
            public static IntSlider ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $leftValue: number, $rightValue: number) : number
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param property The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            */
            public static IntSlider ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number) : void
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param property The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            */
            public static IntSlider ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: string) : void
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param property The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            */
            public static IntSlider ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: UnityEngine.GUIContent) : void
            /** Makes a special slider the user can use to specify a range between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param minValue The lower value of the range the slider shows, passed by reference.
            * @param maxValue The upper value at the range the slider shows, passed by reference.
            * @param minLimit The limit at the left end of the slider.
            * @param maxLimit The limit at the right end of the slider.
            */
            public static MinMaxSlider ($position: UnityEngine.Rect, $label: string, $minValue: $Ref<number>, $maxValue: $Ref<number>, $minLimit: number, $maxLimit: number) : void
            /** Makes a special slider the user can use to specify a range between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param minValue The lower value of the range the slider shows, passed by reference.
            * @param maxValue The upper value at the range the slider shows, passed by reference.
            * @param minLimit The limit at the left end of the slider.
            * @param maxLimit The limit at the right end of the slider.
            */
            public static MinMaxSlider ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $minValue: $Ref<number>, $maxValue: $Ref<number>, $minLimit: number, $maxLimit: number) : void
            /** Makes a special slider the user can use to specify a range between a min and a max.
            * @param position Rectangle on the screen to use for the slider.
            * @param label Optional label in front of the slider.
            * @param minValue The lower value of the range the slider shows, passed by reference.
            * @param maxValue The upper value at the range the slider shows, passed by reference.
            * @param minLimit The limit at the left end of the slider.
            * @param maxLimit The limit at the right end of the slider.
            */
            public static MinMaxSlider ($position: UnityEngine.Rect, $minValue: $Ref<number>, $maxValue: $Ref<number>, $minLimit: number, $maxLimit: number) : void
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param position Rectangle on the screen to use for the enum flags field.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $enumValue: System.Enum) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param position Rectangle on the screen to use for the enum flags field.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $enumValue: System.Enum, $style: UnityEngine.GUIStyle) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param position Rectangle on the screen to use for the enum flags field.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $label: string, $enumValue: System.Enum) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param position Rectangle on the screen to use for the enum flags field.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $label: string, $enumValue: System.Enum, $style: UnityEngine.GUIStyle) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param position Rectangle on the screen to use for the enum flags field.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $enumValue: System.Enum) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param position Rectangle on the screen to use for the enum flags field.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $enumValue: System.Enum, $style: UnityEngine.GUIStyle) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param position Rectangle on the screen to use for the enum flags field.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $enumValue: System.Enum, $includeObsolete: boolean, $style?: UnityEngine.GUIStyle) : System.Enum
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param position Rectangle on the screen to use for the field.
            * @param property The object reference property the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param label Optional label to display in front of the field. Pass GUIContent.none to hide the label.
            */
            public static ObjectField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty) : void
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param position Rectangle on the screen to use for the field.
            * @param property The object reference property the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param label Optional label to display in front of the field. Pass GUIContent.none to hide the label.
            */
            public static ObjectField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param position Rectangle on the screen to use for the field.
            * @param property The object reference property the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param label Optional label to display in front of the field. Pass GUIContent.none to hide the label.
            */
            public static ObjectField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $objType: System.Type) : void
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param position Rectangle on the screen to use for the field.
            * @param property The object reference property the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param label Optional label to display in front of the field. Pass GUIContent.none to hide the label.
            */
            public static ObjectField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $objType: System.Type, $label: UnityEngine.GUIContent) : void
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param obj The object the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param allowSceneObjects Allow assigning Scene objects. See Description for more info.
            * @returns The object that has been set by the user. 
            */
            public static ObjectField ($position: UnityEngine.Rect, $obj: UnityEngine.Object, $objType: System.Type, $allowSceneObjects: boolean) : UnityEngine.Object
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param obj The object the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param allowSceneObjects Allow assigning Scene objects. See Description for more info.
            * @returns The object that has been set by the user. 
            */
            public static ObjectField ($position: UnityEngine.Rect, $label: string, $obj: UnityEngine.Object, $objType: System.Type, $allowSceneObjects: boolean) : UnityEngine.Object
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param obj The object the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param allowSceneObjects Allow assigning Scene objects. See Description for more info.
            * @returns The object that has been set by the user. 
            */
            public static ObjectField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $obj: UnityEngine.Object, $objType: System.Type, $allowSceneObjects: boolean) : UnityEngine.Object
            public static IndentedRect ($source: UnityEngine.Rect) : UnityEngine.Rect
            /** Makes an X and Y field for entering a Vector2.
            * @param position Rectangle on the screen to use for the field.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector2Field ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Makes an X and Y field for entering a Vector2.
            * @param position Rectangle on the screen to use for the field.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector2Field ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Makes an X, Y, and Z field for entering a Vector3.
            * @param position Rectangle on the screen to use for the field.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector3Field ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Makes an X, Y, and Z field for entering a Vector3.
            * @param position Rectangle on the screen to use for the field.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector3Field ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Makes an X, Y, Z, and W field for entering a Vector4.
            * @param position Rectangle on the screen to use for the field.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector4Field ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Vector4) : UnityEngine.Vector4
            public static Vector4Field ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Vector4) : UnityEngine.Vector4
            /** Makes an X and Y integer field for entering a Vector2Int.
            * @param position Rectangle on the screen to use for the field.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector2IntField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            /** Makes an X and Y integer field for entering a Vector2Int.
            * @param position Rectangle on the screen to use for the field.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector2IntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            /** Makes an X, Y, and Z integer field for entering a Vector3Int.
            * @param position Rectangle on the screen to use for the field.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector3IntField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            /** Makes an X, Y, and Z integer field for entering a Vector3Int.
            * @param position Rectangle on the screen to use for the field.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector3IntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            /** Makes an X, Y, W, and H field for entering a Rect.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static RectField ($position: UnityEngine.Rect, $value: UnityEngine.Rect) : UnityEngine.Rect
            /** Makes an X, Y, W, and H field for entering a Rect.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static RectField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Rect) : UnityEngine.Rect
            /** Makes an X, Y, W, and H field for entering a Rect.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static RectField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Rect) : UnityEngine.Rect
            /** Makes an X, Y, W, and H field for entering a RectInt.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static RectIntField ($position: UnityEngine.Rect, $value: UnityEngine.RectInt) : UnityEngine.RectInt
            /** Makes an X, Y, W, and H field for entering a RectInt.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static RectIntField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.RectInt) : UnityEngine.RectInt
            /** Makes an X, Y, W, and H field for entering a RectInt.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static RectIntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.RectInt) : UnityEngine.RectInt
            /** Makes Center and Extents field for entering a Bounds.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static BoundsField ($position: UnityEngine.Rect, $value: UnityEngine.Bounds) : UnityEngine.Bounds
            public static BoundsField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Bounds) : UnityEngine.Bounds
            /** Makes Center and Extents field for entering a Bounds.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static BoundsField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Bounds) : UnityEngine.Bounds
            /** Makes Position and Size field for entering a BoundsInt.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static BoundsIntField ($position: UnityEngine.Rect, $value: UnityEngine.BoundsInt) : UnityEngine.BoundsInt
            /** Makes Position and Size field for entering a BoundsInt.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static BoundsIntField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.BoundsInt) : UnityEngine.BoundsInt
            /** Makes Position and Size field for entering a BoundsInt.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display above the field.
            * @param value The value to edit.
            * @returns The value entered by the user. 
            */
            public static BoundsIntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.BoundsInt) : UnityEngine.BoundsInt
            /** Makes a multi-control with text fields for entering multiple floats in the same line.
            * @param position Rectangle on the screen to use for the float field.
            * @param label Optional label to display in front of the float field.
            * @param subLabels Array with small labels to show in front of each float field. There is room for one letter per field only.
            * @param values Array with the values to edit.
            */
            public static MultiFloatField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $subLabels: System.Array$1<UnityEngine.GUIContent>, $values: System.Array$1<number>) : void
            /** Makes a multi-control with text fields for entering multiple floats in the same line.
            * @param position Rectangle on the screen to use for the float field.
            * @param label Optional label to display in front of the float field.
            * @param subLabels Array with small labels to show in front of each float field. There is room for one letter per field only.
            * @param values Array with the values to edit.
            */
            public static MultiFloatField ($position: UnityEngine.Rect, $subLabels: System.Array$1<UnityEngine.GUIContent>, $values: System.Array$1<number>) : void
            /** Makes a multi-control with text fields for entering multiple integers in the same line.
            * @param position Rectangle on the screen to use for the integer field.
            * @param subLabels Array with small labels to show in front of each int field. There is room for one letter per field only.
            * @param values Array with the values to edit.
            */
            public static MultiIntField ($position: UnityEngine.Rect, $subLabels: System.Array$1<UnityEngine.GUIContent>, $values: System.Array$1<number>) : void
            /** Makes a multi-control with several property fields in the same line.
            * @param position Rectangle on the screen to use for the multi-property field.
            * @param valuesIterator The SerializedProperty of the first property to make a control for.
            * @param label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param subLabels Array with small labels to show in front of each float field. There is room for one letter per field only.
            */
            public static MultiPropertyField ($position: UnityEngine.Rect, $subLabels: System.Array$1<UnityEngine.GUIContent>, $valuesIterator: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            /** Makes a multi-control with several property fields in the same line.
            * @param position Rectangle on the screen to use for the multi-property field.
            * @param valuesIterator The SerializedProperty of the first property to make a control for.
            * @param label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param subLabels Array with small labels to show in front of each float field. There is room for one letter per field only.
            */
            public static MultiPropertyField ($position: UnityEngine.Rect, $subLabels: System.Array$1<UnityEngine.GUIContent>, $valuesIterator: UnityEditor.SerializedProperty) : void
            /** Makes a field for selecting a Color.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param value The color to edit.
            * @param showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @returns The color selected by the user. 
            */
            public static ColorField ($position: UnityEngine.Rect, $value: UnityEngine.Color) : UnityEngine.Color
            /** Makes a field for selecting a Color.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param value The color to edit.
            * @param showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @returns The color selected by the user. 
            */
            public static ColorField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Color) : UnityEngine.Color
            /** Makes a field for selecting a Color.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param value The color to edit.
            * @param showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @returns The color selected by the user. 
            */
            public static ColorField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Color) : UnityEngine.Color
            /** Makes a field for selecting a Color.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param value The color to edit.
            * @param showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @returns The color selected by the user. 
            */
            public static ColorField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Color, $showEyedropper: boolean, $showAlpha: boolean, $hdr: boolean) : UnityEngine.Color
            /** Makes a field for editing an AnimationCurve.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param value The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($position: UnityEngine.Rect, $value: UnityEngine.AnimationCurve) : UnityEngine.AnimationCurve
            /** Makes a field for editing an AnimationCurve.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param value The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.AnimationCurve) : UnityEngine.AnimationCurve
            /** Makes a field for editing an AnimationCurve.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param value The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.AnimationCurve) : UnityEngine.AnimationCurve
            /** Makes a field for editing an AnimationCurve.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param value The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($position: UnityEngine.Rect, $value: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $ranges: UnityEngine.Rect) : UnityEngine.AnimationCurve
            /** Makes a field for editing an AnimationCurve.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param value The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $ranges: UnityEngine.Rect) : UnityEngine.AnimationCurve
            /** Makes a field for editing an AnimationCurve.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param value The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $ranges: UnityEngine.Rect) : UnityEngine.AnimationCurve
            /** Makes a field for editing an AnimationCurve.
            * @param position Rectangle on the screen to use for the field.
            * @param property The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @param label Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.
            */
            public static CurveField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $ranges: UnityEngine.Rect) : void
            /** Makes a field for editing an AnimationCurve.
            * @param position Rectangle on the screen to use for the field.
            * @param property The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @param label Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.
            */
            public static CurveField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $ranges: UnityEngine.Rect, $label: UnityEngine.GUIContent) : void
            public static InspectorTitlebar ($position: UnityEngine.Rect, $targetObjs: System.Array$1<UnityEngine.Object>) : void
            /** Makes an inspector-window-like titlebar.
            * @param position Rectangle on the screen to use for the titlebar.
            * @param foldout The foldout state shown with the arrow.
            * @param targetObj The object (for example a component) that the titlebar is for.
            * @param targetObjs The objects that the titlebar is for.
            * @param expandable Whether this editor should display a foldout arrow in order to toggle the display of its properties.
            * @returns The foldout state selected by the user. 
            */
            public static InspectorTitlebar ($position: UnityEngine.Rect, $foldout: boolean, $targetObj: UnityEngine.Object, $expandable: boolean) : boolean
            /** Makes an inspector-window-like titlebar.
            * @param position Rectangle on the screen to use for the titlebar.
            * @param foldout The foldout state shown with the arrow.
            * @param targetObj The object (for example a component) that the titlebar is for.
            * @param targetObjs The objects that the titlebar is for.
            * @param expandable Whether this editor should display a foldout arrow in order to toggle the display of its properties.
            * @returns The foldout state selected by the user. 
            */
            public static InspectorTitlebar ($position: UnityEngine.Rect, $foldout: boolean, $targetObjs: System.Array$1<UnityEngine.Object>, $expandable: boolean) : boolean
            public static InspectorTitlebar ($position: UnityEngine.Rect, $foldout: boolean, $editor: UnityEditor.Editor) : boolean
            /** Makes a progress bar.
            * @param totalPosition Rectangle on the screen to use in total for both the control.
            * @param value Value that is shown.
            */
            public static ProgressBar ($position: UnityEngine.Rect, $value: number, $text: string) : void
            /** Makes a help box with a message to the user.
            * @param position Rectangle on the screen to draw the help box within.
            * @param message The message text.
            * @param type The type of message.
            */
            public static HelpBox ($position: UnityEngine.Rect, $message: string, $type: UnityEditor.MessageType) : void
            /** Makes a label in front of some control.
            * @param totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param label Label to show in front of the control.
            * @param style Style to use for the label.
            * @returns Rectangle on the screen to use just for the control itself. 
            */
            public static PrefixLabel ($totalPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent) : UnityEngine.Rect
            /** Makes a label in front of some control.
            * @param totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param label Label to show in front of the control.
            * @param style Style to use for the label.
            * @returns Rectangle on the screen to use just for the control itself. 
            */
            public static PrefixLabel ($totalPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Makes a label in front of some control.
            * @param totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param label Label to show in front of the control.
            * @param style Style to use for the label.
            * @returns Rectangle on the screen to use just for the control itself. 
            */
            public static PrefixLabel ($totalPosition: UnityEngine.Rect, $id: number, $label: UnityEngine.GUIContent) : UnityEngine.Rect
            /** Makes a label in front of some control.
            * @param totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param label Label to show in front of the control.
            * @param style Style to use for the label.
            * @returns Rectangle on the screen to use just for the control itself. 
            */
            public static PrefixLabel ($totalPosition: UnityEngine.Rect, $id: number, $label: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Create a Property wrapper, useful for making regular GUI controls work with SerializedProperty.
            * @param totalPosition Rectangle on the screen to use for the control, including label if applicable.
            * @param label Optional label in front of the slider. Use null to use the name from the SerializedProperty. Use GUIContent.none to not display a label.
            * @param property The SerializedProperty to use for the control.
            * @returns The actual label to use for the control. 
            */
            public static BeginProperty ($totalPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent, $property: UnityEditor.SerializedProperty) : UnityEngine.GUIContent
            public static EndProperty () : void
            /** Get the height needed for a PropertyField control.
            * @param property Height of the property area.
            * @param label Descriptive text or image.
            * @param includeChildren Should the returned height include the height of child properties?
            */
            public static GetPropertyHeight ($type: UnityEditor.SerializedPropertyType, $label: UnityEngine.GUIContent) : number
            /** Get whether a SerializedProperty's inspector GUI can be cached.
            * @param property The SerializedProperty in question.
            * @returns Whether the property's inspector GUI can be cached. 
            */
            public static CanCacheInspectorGUI ($property: UnityEditor.SerializedProperty) : boolean
            /** Makes a button that reacts to mouse down, for displaying your own dropdown content.
            * @param position Rectangle on the screen to use for the button.
            * @param content Text, image and tooltip for this button.
            * @param focusType Whether the button should be selectable by keyboard or not.
            * @param style Optional style to use.
            * @returns true when the user clicks the button. 
            */
            public static DropdownButton ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $focusType: UnityEngine.FocusType) : boolean
            /** Makes a button that reacts to mouse down, for displaying your own dropdown content.
            * @param position Rectangle on the screen to use for the button.
            * @param content Text, image and tooltip for this button.
            * @param focusType Whether the button should be selectable by keyboard or not.
            * @param style Optional style to use.
            * @returns true when the user clicks the button. 
            */
            public static DropdownButton ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $focusType: UnityEngine.FocusType, $style: UnityEngine.GUIStyle) : boolean
            /** Draws the alpha channel of a texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param mipLevel What mip-level to sample. If negative, texture will be sampled normally.
            It sets material _Mip property.
            */
            public static DrawTextureAlpha ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number, $mipLevel: number) : void
            /** Draws the alpha channel of a texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param mipLevel What mip-level to sample. If negative, texture will be sampled normally.
            It sets material _Mip property.
            */
            public static DrawTextureAlpha ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Draws the alpha channel of a texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param mipLevel What mip-level to sample. If negative, texture will be sampled normally.
            It sets material _Mip property.
            */
            public static DrawTextureAlpha ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode) : void
            /** Draws the alpha channel of a texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param mipLevel What mip-level to sample. If negative, texture will be sampled normally.
            It sets material _Mip property.
            */
            public static DrawTextureAlpha ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number) : void
            public static DrawTextureTransparent ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number, $mipLevel: number, $colorWriteMask: UnityEngine.Rendering.ColorWriteMask) : void
            public static DrawTextureTransparent ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode) : void
            public static DrawTextureTransparent ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            public static DrawTextureTransparent ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number) : void
            public static DrawTextureTransparent ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number, $mipLevel: number) : void
            /** Draws the texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param mat Material to be used when drawing the texture.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material _Mip property.
            * @param colorWriteMask Specifies which color components of image will get written.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $mat: UnityEngine.Material, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number, $mipLevel: number, $colorWriteMask: UnityEngine.Rendering.ColorWriteMask) : void
            /** Draws the texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param mat Material to be used when drawing the texture.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material _Mip property.
            * @param colorWriteMask Specifies which color components of image will get written.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $mat: UnityEngine.Material, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number, $mipLevel: number) : void
            /** Draws the texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param mat Material to be used when drawing the texture.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material _Mip property.
            * @param colorWriteMask Specifies which color components of image will get written.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $mat: UnityEngine.Material, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number) : void
            /** Draws the texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param mat Material to be used when drawing the texture.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material _Mip property.
            * @param colorWriteMask Specifies which color components of image will get written.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $mat: UnityEngine.Material, $scaleMode: UnityEngine.ScaleMode) : void
            /** Draws the texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param mat Material to be used when drawing the texture.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material _Mip property.
            * @param colorWriteMask Specifies which color components of image will get written.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $mat: UnityEngine.Material) : void
            /** Draws the texture within a rectangle.
            * @param position Rectangle on the screen to draw the texture within.
            * @param image Texture to display.
            * @param mat Material to be used when drawing the texture.
            * @param scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material _Mip property.
            * @param colorWriteMask Specifies which color components of image will get written.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param position Rectangle on the screen to use for the label field.
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: string) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param position Rectangle on the screen to use for the label field.
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: string, $style: UnityEngine.GUIStyle) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param position Rectangle on the screen to use for the label field.
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param position Rectangle on the screen to use for the label field.
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param position Rectangle on the screen to use for the label field.
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: string, $label2: string) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param position Rectangle on the screen to use for the label field.
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: string, $label2: string, $style: UnityEngine.GUIStyle) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param position Rectangle on the screen to use for the label field.
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $label2: UnityEngine.GUIContent) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param position Rectangle on the screen to use for the label field.
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $label2: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            /** Makes a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param position Rectangle on the screen to use for the toggle.
            * @param label Label to display next to the toggle.
            * @param value The value to edit.
            * @param labelStyle Optional GUIStyle to use for the label.
            * @returns The value set by the user. 
            */
            public static ToggleLeft ($position: UnityEngine.Rect, $label: string, $value: boolean) : boolean
            /** Makes a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param position Rectangle on the screen to use for the toggle.
            * @param label Label to display next to the toggle.
            * @param value The value to edit.
            * @param labelStyle Optional GUIStyle to use for the label.
            * @returns The value set by the user. 
            */
            public static ToggleLeft ($position: UnityEngine.Rect, $label: string, $value: boolean, $labelStyle: UnityEngine.GUIStyle) : boolean
            /** Makes a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param position Rectangle on the screen to use for the toggle.
            * @param label Label to display next to the toggle.
            * @param value The value to edit.
            * @param labelStyle Optional GUIStyle to use for the label.
            * @returns The value set by the user. 
            */
            public static ToggleLeft ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: boolean) : boolean
            /** Makes a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param position Rectangle on the screen to use for the toggle.
            * @param label Label to display next to the toggle.
            * @param value The value to edit.
            * @param labelStyle Optional GUIStyle to use for the label.
            * @returns The value set by the user. 
            */
            public static ToggleLeft ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: boolean, $labelStyle: UnityEngine.GUIStyle) : boolean
            /** Makes a text field.
            * @param position Rectangle on the screen to use for the text field.
            * @param label Optional label to display in front of the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextField ($position: UnityEngine.Rect, $text: string) : string
            /** Makes a text field.
            * @param position Rectangle on the screen to use for the text field.
            * @param label Optional label to display in front of the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextField ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a text field.
            * @param position Rectangle on the screen to use for the text field.
            * @param label Optional label to display in front of the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextField ($position: UnityEngine.Rect, $label: string, $text: string) : string
            /** Makes a text field.
            * @param position Rectangle on the screen to use for the text field.
            * @param label Optional label to display in front of the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextField ($position: UnityEngine.Rect, $label: string, $text: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a text field.
            * @param position Rectangle on the screen to use for the text field.
            * @param label Optional label to display in front of the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $text: string) : string
            /** Makes a text field.
            * @param position Rectangle on the screen to use for the text field.
            * @param label Optional label to display in front of the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $text: string, $style: UnityEngine.GUIStyle) : string
            public static DelayedTextField ($position: UnityEngine.Rect, $text: string) : string
            /** Makes a delayed text field.
            * @param position Rectangle on the screen to use for the text field.
            * @param label Optional label to display in front of the int field.
            * @param text The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : string
            public static DelayedTextField ($position: UnityEngine.Rect, $label: string, $text: string) : string
            /** Makes a delayed text field.
            * @param position Rectangle on the screen to use for the text field.
            * @param label Optional label to display in front of the int field.
            * @param text The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($position: UnityEngine.Rect, $label: string, $text: string, $style: UnityEngine.GUIStyle) : string
            public static DelayedTextField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $text: string) : string
            /** Makes a delayed text field.
            * @param position Rectangle on the screen to use for the text field.
            * @param label Optional label to display in front of the int field.
            * @param text The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $text: string, $style: UnityEngine.GUIStyle) : string
            public static DelayedTextField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty) : void
            /** Makes a delayed text field.
            * @param position Rectangle on the screen to use for the text field.
            * @param property The text property to edit.
            * @param label Optional label to display in front of the int field. Pass GUIContent.none to hide label.
            */
            public static DelayedTextField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            public static DelayedTextField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $controlId: number, $text: string) : string
            public static DelayedTextField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $controlId: number, $text: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a text area.
            * @param position Rectangle on the screen to use for the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextArea ($position: UnityEngine.Rect, $text: string) : string
            /** Makes a text area.
            * @param position Rectangle on the screen to use for the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextArea ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a selectable label field. (Useful for showing read-only info that can be copy-pasted.)
            * @param position Rectangle on the screen to use for the label.
            * @param text The text to show.
            * @param style Optional GUIStyle.
            */
            public static SelectableLabel ($position: UnityEngine.Rect, $text: string) : void
            /** Makes a selectable label field. (Useful for showing read-only info that can be copy-pasted.)
            * @param position Rectangle on the screen to use for the label.
            * @param text The text to show.
            * @param style Optional GUIStyle.
            */
            public static SelectableLabel ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Makes a text field where the user can enter a password.
            * @param position Rectangle on the screen to use for the password field.
            * @param label Optional label to display in front of the password field.
            * @param password The password to edit.
            * @param style Optional GUIStyle.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $password: string) : string
            /** Makes a text field where the user can enter a password.
            * @param position Rectangle on the screen to use for the password field.
            * @param label Optional label to display in front of the password field.
            * @param password The password to edit.
            * @param style Optional GUIStyle.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $password: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a text field where the user can enter a password.
            * @param position Rectangle on the screen to use for the password field.
            * @param label Optional label to display in front of the password field.
            * @param password The password to edit.
            * @param style Optional GUIStyle.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $label: string, $password: string) : string
            /** Makes a text field where the user can enter a password.
            * @param position Rectangle on the screen to use for the password field.
            * @param label Optional label to display in front of the password field.
            * @param password The password to edit.
            * @param style Optional GUIStyle.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $label: string, $password: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a text field where the user can enter a password.
            * @param position Rectangle on the screen to use for the password field.
            * @param label Optional label to display in front of the password field.
            * @param password The password to edit.
            * @param style Optional GUIStyle.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $password: string) : string
            /** Makes a text field where the user can enter a password.
            * @param position Rectangle on the screen to use for the password field.
            * @param label Optional label to display in front of the password field.
            * @param password The password to edit.
            * @param style Optional GUIStyle.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $password: string, $style: UnityEngine.GUIStyle) : string
            public static FloatField ($position: UnityEngine.Rect, $value: number) : number
            /** Makes a text field for entering floats.
            * @param position Rectangle on the screen to use for the float field.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static FloatField ($position: UnityEngine.Rect, $value: number, $style: UnityEngine.GUIStyle) : number
            public static FloatField ($position: UnityEngine.Rect, $label: string, $value: number) : number
            /** Makes a text field for entering floats.
            * @param position Rectangle on the screen to use for the float field.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static FloatField ($position: UnityEngine.Rect, $label: string, $value: number, $style: UnityEngine.GUIStyle) : number
            public static FloatField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number) : number
            /** Makes a text field for entering floats.
            * @param position Rectangle on the screen to use for the float field.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static FloatField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedFloatField ($position: UnityEngine.Rect, $value: number) : number
            /** Makes a delayed text field for entering floats.
            * @param position Rectangle on the screen to use for the float field.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($position: UnityEngine.Rect, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedFloatField ($position: UnityEngine.Rect, $label: string, $value: number) : number
            /** Makes a delayed text field for entering floats.
            * @param position Rectangle on the screen to use for the float field.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($position: UnityEngine.Rect, $label: string, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedFloatField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number) : number
            /** Makes a delayed text field for entering floats.
            * @param position Rectangle on the screen to use for the float field.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedFloatField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty) : void
            /** Makes a delayed text field for entering floats.
            * @param position Rectangle on the screen to use for the float field.
            * @param property The float property to edit.
            * @param label Optional label to display in front of the float field. Pass GUIContent.none to hide label.
            */
            public static DelayedFloatField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            public static DoubleField ($position: UnityEngine.Rect, $value: number) : number
            /** Makes a text field for entering doubles.
            * @param position Rectangle on the screen to use for the double field.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($position: UnityEngine.Rect, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DoubleField ($position: UnityEngine.Rect, $label: string, $value: number) : number
            /** Makes a text field for entering doubles.
            * @param position Rectangle on the screen to use for the double field.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($position: UnityEngine.Rect, $label: string, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DoubleField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number) : number
            /** Makes a text field for entering doubles.
            * @param position Rectangle on the screen to use for the double field.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedDoubleField ($position: UnityEngine.Rect, $value: number) : number
            /** Makes a delayed text field for entering doubles.
            * @param position Rectangle on the screen to use for the double field.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($position: UnityEngine.Rect, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedDoubleField ($position: UnityEngine.Rect, $label: string, $value: number) : number
            /** Makes a delayed text field for entering doubles.
            * @param position Rectangle on the screen to use for the double field.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($position: UnityEngine.Rect, $label: string, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedDoubleField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number) : number
            /** Makes a delayed text field for entering doubles.
            * @param position Rectangle on the screen to use for the double field.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle) : number
            /** Makes a text field for entering integers.
            * @param position Rectangle on the screen to use for the int field.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static IntField ($position: UnityEngine.Rect, $value: number) : number
            /** Makes a text field for entering integers.
            * @param position Rectangle on the screen to use for the int field.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static IntField ($position: UnityEngine.Rect, $value: number, $style: UnityEngine.GUIStyle) : number
            /** Makes a text field for entering integers.
            * @param position Rectangle on the screen to use for the int field.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static IntField ($position: UnityEngine.Rect, $label: string, $value: number) : number
            /** Makes a text field for entering integers.
            * @param position Rectangle on the screen to use for the int field.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static IntField ($position: UnityEngine.Rect, $label: string, $value: number, $style: UnityEngine.GUIStyle) : number
            /** Makes a text field for entering integers.
            * @param position Rectangle on the screen to use for the int field.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static IntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number) : number
            /** Makes a text field for entering integers.
            * @param position Rectangle on the screen to use for the int field.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static IntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedIntField ($position: UnityEngine.Rect, $value: number) : number
            /** Makes a delayed text field for entering integers.
            * @param position Rectangle on the screen to use for the int field.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($position: UnityEngine.Rect, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedIntField ($position: UnityEngine.Rect, $label: string, $value: number) : number
            /** Makes a delayed text field for entering integers.
            * @param position Rectangle on the screen to use for the int field.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($position: UnityEngine.Rect, $label: string, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedIntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number) : number
            /** Makes a delayed text field for entering integers.
            * @param position Rectangle on the screen to use for the int field.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedIntField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty) : void
            /** The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.
            * @param position Rectangle on the screen to use for the int field.
            * @param property The int property to edit.
            * @param label Optional label to display in front of the int field. Pass GUIContent.none to hide label.
            */
            public static DelayedIntField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            /** Makes a text field for entering long integers.
            * @param position Rectangle on the screen to use for the long field.
            * @param label Optional label to display in front of the long field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static LongField ($position: UnityEngine.Rect, $value: bigint) : bigint
            public static LongField ($position: UnityEngine.Rect, $value: bigint, $style: UnityEngine.GUIStyle) : bigint
            /** Makes a text field for entering long integers.
            * @param position Rectangle on the screen to use for the long field.
            * @param label Optional label to display in front of the long field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static LongField ($position: UnityEngine.Rect, $label: string, $value: bigint) : bigint
            /** Makes a text field for entering long integers.
            * @param position Rectangle on the screen to use for the long field.
            * @param label Optional label to display in front of the long field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static LongField ($position: UnityEngine.Rect, $label: string, $value: bigint, $style: UnityEngine.GUIStyle) : bigint
            /** Makes a text field for entering long integers.
            * @param position Rectangle on the screen to use for the long field.
            * @param label Optional label to display in front of the long field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static LongField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: bigint) : bigint
            /** Makes a text field for entering long integers.
            * @param position Rectangle on the screen to use for the long field.
            * @param label Optional label to display in front of the long field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static LongField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: bigint, $style: UnityEngine.GUIStyle) : bigint
            /** Makes a generic popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $selectedIndex: number, $displayedOptions: System.Array$1<string>) : number
            /** Makes a generic popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $selectedIndex: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle) : number
            /** Makes a generic popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>) : number
            /** Makes a generic popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle) : number
            /** Makes a generic popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $label: string, $selectedIndex: number, $displayedOptions: System.Array$1<string>) : number
            /** Makes a generic popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $label: string, $selectedIndex: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle) : number
            /** Makes a generic popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>) : number
            /** Makes a generic popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle) : number
            /** Makes an enum popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selected The enum option the field shows.
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($position: UnityEngine.Rect, $selected: System.Enum) : System.Enum
            /** Makes an enum popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selected The enum option the field shows.
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($position: UnityEngine.Rect, $selected: System.Enum, $style: UnityEngine.GUIStyle) : System.Enum
            /** Makes an enum popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selected The enum option the field shows.
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($position: UnityEngine.Rect, $label: string, $selected: System.Enum) : System.Enum
            /** Makes an enum popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selected The enum option the field shows.
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($position: UnityEngine.Rect, $label: string, $selected: System.Enum, $style: UnityEngine.GUIStyle) : System.Enum
            /** Makes an enum popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selected The enum option the field shows.
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selected: System.Enum) : System.Enum
            /** Makes an enum popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selected The enum option the field shows.
            * @param style Optional GUIStyle.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selected: System.Enum, $style: UnityEngine.GUIStyle) : System.Enum
            public static EnumPopup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selected: System.Enum, $checkEnabled: System.Func$2<System.Enum, boolean>, $includeObsolete?: boolean, $style?: UnityEngine.GUIStyle) : System.Enum
            /** Makes an integer popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>) : number
            /** Makes an integer popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle) : number
            /** Makes an integer popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>) : number
            /** Makes an integer popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle) : number
            /** Makes an integer popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>) : number
            /** Makes an integer popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle) : number
            /** * @param position Rectangle on the screen to use for the field.
            * @param property The SerializedProperty to use for the control.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option. If optionValues a direct   mapping of selectedValue to displayedOptions is assumed.
            * @param label Optional label in front of the field.
            */
            public static IntPopup ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>) : void
            /** * @param position Rectangle on the screen to use for the field.
            * @param property The SerializedProperty to use for the control.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option. If optionValues a direct   mapping of selectedValue to displayedOptions is assumed.
            * @param label Optional label in front of the field.
            */
            public static IntPopup ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, $label: UnityEngine.GUIContent) : void
            /** Makes an integer popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $label: string, $selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>) : number
            /** Makes an integer popup selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $label: string, $selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle) : number
            /** Makes a tag selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param tag The tag the field shows.
            * @param style Optional GUIStyle.
            * @returns The tag selected by the user. 
            */
            public static TagField ($position: UnityEngine.Rect, $tag: string) : string
            /** Makes a tag selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param tag The tag the field shows.
            * @param style Optional GUIStyle.
            * @returns The tag selected by the user. 
            */
            public static TagField ($position: UnityEngine.Rect, $tag: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a tag selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param tag The tag the field shows.
            * @param style Optional GUIStyle.
            * @returns The tag selected by the user. 
            */
            public static TagField ($position: UnityEngine.Rect, $label: string, $tag: string) : string
            /** Makes a tag selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param tag The tag the field shows.
            * @param style Optional GUIStyle.
            * @returns The tag selected by the user. 
            */
            public static TagField ($position: UnityEngine.Rect, $label: string, $tag: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a tag selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param tag The tag the field shows.
            * @param style Optional GUIStyle.
            * @returns The tag selected by the user. 
            */
            public static TagField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $tag: string) : string
            /** Makes a tag selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param tag The tag the field shows.
            * @param style Optional GUIStyle.
            * @returns The tag selected by the user. 
            */
            public static TagField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $tag: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a layer selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param layer The layer shown in the field.
            * @param style Optional GUIStyle.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($position: UnityEngine.Rect, $layer: number) : number
            /** Makes a layer selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param layer The layer shown in the field.
            * @param style Optional GUIStyle.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($position: UnityEngine.Rect, $layer: number, $style: UnityEngine.GUIStyle) : number
            /** Makes a layer selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param layer The layer shown in the field.
            * @param style Optional GUIStyle.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($position: UnityEngine.Rect, $label: string, $layer: number) : number
            /** Makes a layer selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param layer The layer shown in the field.
            * @param style Optional GUIStyle.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($position: UnityEngine.Rect, $label: string, $layer: number, $style: UnityEngine.GUIStyle) : number
            /** Makes a layer selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param layer The layer shown in the field.
            * @param style Optional GUIStyle.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $layer: number) : number
            /** Makes a layer selection field.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label in front of the field.
            * @param layer The layer shown in the field.
            * @param style Optional GUIStyle.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $layer: number, $style: UnityEngine.GUIStyle) : number
            /** Makes a field for masks.
            * @param position Rectangle on the screen to use for this control.
            * @param label Label for the field.
            * @param mask The current mask to display.
            * @param displayedOption A string array containing the labels for each flag.
            * @param style Optional GUIStyle.
            * @param displayedOptions A string array containing the labels for each flag.
            * @returns The value modified by the user. 
            */
            public static MaskField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $mask: number, $displayedOptions: System.Array$1<string>) : number
            /** Makes a field for masks.
            * @param position Rectangle on the screen to use for this control.
            * @param label Label for the field.
            * @param mask The current mask to display.
            * @param displayedOption A string array containing the labels for each flag.
            * @param style Optional GUIStyle.
            * @param displayedOptions A string array containing the labels for each flag.
            * @returns The value modified by the user. 
            */
            public static MaskField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $mask: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle) : number
            /** Makes a field for masks.
            * @param position Rectangle on the screen to use for this control.
            * @param label Label for the field.
            * @param mask The current mask to display.
            * @param displayedOption A string array containing the labels for each flag.
            * @param style Optional GUIStyle.
            * @param displayedOptions A string array containing the labels for each flag.
            * @returns The value modified by the user. 
            */
            public static MaskField ($position: UnityEngine.Rect, $label: string, $mask: number, $displayedOptions: System.Array$1<string>) : number
            /** Makes a field for masks.
            * @param position Rectangle on the screen to use for this control.
            * @param label Label for the field.
            * @param mask The current mask to display.
            * @param displayedOption A string array containing the labels for each flag.
            * @param style Optional GUIStyle.
            * @param displayedOptions A string array containing the labels for each flag.
            * @returns The value modified by the user. 
            */
            public static MaskField ($position: UnityEngine.Rect, $label: string, $mask: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle) : number
            /** Makes a field for masks.
            * @param position Rectangle on the screen to use for this control.
            * @param label Label for the field.
            * @param mask The current mask to display.
            * @param displayedOption A string array containing the labels for each flag.
            * @param style Optional GUIStyle.
            * @param displayedOptions A string array containing the labels for each flag.
            * @returns The value modified by the user. 
            */
            public static MaskField ($position: UnityEngine.Rect, $mask: number, $displayedOptions: System.Array$1<string>) : number
            /** Makes a field for masks.
            * @param position Rectangle on the screen to use for this control.
            * @param label Label for the field.
            * @param mask The current mask to display.
            * @param displayedOption A string array containing the labels for each flag.
            * @param style Optional GUIStyle.
            * @param displayedOptions A string array containing the labels for each flag.
            * @returns The value modified by the user. 
            */
            public static MaskField ($position: UnityEngine.Rect, $mask: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle) : number
            /** Makes a label with a foldout arrow to the left of it.
            * @param position Rectangle on the screen to use for the arrow and label.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: string) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param position Rectangle on the screen to use for the arrow and label.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: string, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param position Rectangle on the screen to use for the arrow and label.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: string, $toggleOnLabelClick: boolean) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param position Rectangle on the screen to use for the arrow and label.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: string, $toggleOnLabelClick: boolean, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param position Rectangle on the screen to use for the arrow and label.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: UnityEngine.GUIContent) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param position Rectangle on the screen to use for the arrow and label.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param position Rectangle on the screen to use for the arrow and label.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: UnityEngine.GUIContent, $toggleOnLabelClick: boolean) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param position Rectangle on the screen to use for the arrow and label.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: UnityEngine.GUIContent, $toggleOnLabelClick: boolean, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a label for some control.
            * @param totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param labelPosition Rectangle on the screen to use for the label.
            * @param label Label to show for the control.
            * @param id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param style Optional GUIStyle to use for the label.
            */
            public static HandlePrefixLabel ($totalPosition: UnityEngine.Rect, $labelPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent, $id: number) : void
            /** Makes a label for some control.
            * @param totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param labelPosition Rectangle on the screen to use for the label.
            * @param label Label to show for the control.
            * @param id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param style Optional GUIStyle to use for the label.
            */
            public static HandlePrefixLabel ($totalPosition: UnityEngine.Rect, $labelPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent) : void
            /** Makes a label for some control.
            * @param totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param labelPosition Rectangle on the screen to use for the label.
            * @param label Label to show for the control.
            * @param id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param style Optional GUIStyle to use for the label.
            */
            public static HandlePrefixLabel ($totalPosition: UnityEngine.Rect, $labelPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent, $id: number, $style: UnityEngine.GUIStyle) : void
            /** Get the height needed for a PropertyField control.
            * @param property Height of the property area.
            * @param label Descriptive text or image.
            * @param includeChildren Should the returned height include the height of child properties?
            */
            public static GetPropertyHeight ($property: UnityEditor.SerializedProperty, $includeChildren: boolean) : number
            /** Get the height needed for a PropertyField control.
            * @param property Height of the property area.
            * @param label Descriptive text or image.
            * @param includeChildren Should the returned height include the height of child properties?
            */
            public static GetPropertyHeight ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : number
            /** Get the height needed for a PropertyField control.
            * @param property Height of the property area.
            * @param label Descriptive text or image.
            * @param includeChildren Should the returned height include the height of child properties?
            */
            public static GetPropertyHeight ($property: UnityEditor.SerializedProperty) : number
            /** Get the height needed for a PropertyField control.
            * @param property Height of the property area.
            * @param label Descriptive text or image.
            * @param includeChildren Should the returned height include the height of child properties?
            */
            public static GetPropertyHeight ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, $includeChildren: boolean) : number
            public static PropertyField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty) : boolean
            /** Use this to make a field for a SerializedProperty in the Editor.
            * @param position Rectangle on the screen to use for the property field.
            * @param property The SerializedProperty to make a field for.
            * @param label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param includeChildren If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).
            * @returns True if the property has children and is expanded and includeChildren was set to false; otherwise false. 
            */
            public static PropertyField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $includeChildren: boolean) : boolean
            public static PropertyField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : boolean
            /** Use this to make a field for a SerializedProperty in the Editor.
            * @param position Rectangle on the screen to use for the property field.
            * @param property The SerializedProperty to make a field for.
            * @param label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param includeChildren If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).
            * @returns True if the property has children and is expanded and includeChildren was set to false; otherwise false. 
            */
            public static PropertyField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, $includeChildren: boolean) : boolean
            public static BeginFoldoutHeaderGroup ($position: UnityEngine.Rect, $foldout: boolean, $content: string, $style?: UnityEngine.GUIStyle, $menuAction?: System.Action$1<UnityEngine.Rect>, $menuIcon?: UnityEngine.GUIStyle) : boolean
            public static BeginFoldoutHeaderGroup ($position: UnityEngine.Rect, $foldout: boolean, $content: UnityEngine.GUIContent, $style?: UnityEngine.GUIStyle, $menuAction?: System.Action$1<UnityEngine.Rect>, $menuIcon?: UnityEngine.GUIStyle) : boolean
            public static EndFoldoutHeaderGroup () : void
            /** Makes a field for editing a Gradient.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param gradient The gradient to edit.
            * @param hdr Display the HDR Gradient Editor.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($position: UnityEngine.Rect, $gradient: UnityEngine.Gradient) : UnityEngine.Gradient
            /** Makes a field for editing a Gradient.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param gradient The gradient to edit.
            * @param hdr Display the HDR Gradient Editor.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($position: UnityEngine.Rect, $label: string, $gradient: UnityEngine.Gradient) : UnityEngine.Gradient
            /** Makes a field for editing a Gradient.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param gradient The gradient to edit.
            * @param hdr Display the HDR Gradient Editor.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $gradient: UnityEngine.Gradient) : UnityEngine.Gradient
            /** Makes a field for editing a Gradient.
            * @param position Rectangle on the screen to use for the field.
            * @param label Optional label to display in front of the field.
            * @param gradient The gradient to edit.
            * @param hdr Display the HDR Gradient Editor.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $gradient: UnityEngine.Gradient, $hdr: boolean) : UnityEngine.Gradient
            /** Draws a filled rectangle of color at the specified position and size within the current editor window.
            * @param rect The position and size of the rectangle to draw.
            * @param color The color of the rectange.
            */
            public static DrawRect ($rect: UnityEngine.Rect, $color: UnityEngine.Color) : void
            public constructor ()
        }
        /** Used as input to ColorField to configure the HDR color ranges in the ColorPicker.
        */
        class ColorPickerHDRConfig extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Minimum allowed color component value when using the ColorPicker.
            */
            public minBrightness : number
            /** Maximum allowed color component value when using the ColorPicker.
            */
            public maxBrightness : number
            /** Minimum exposure value allowed in the Color Picker.
            */
            public minExposureValue : number
            /** Maximum exposure value allowed in the Color Picker.
            */
            public maxExposureValue : number
            public constructor ($minBrightness: number, $maxBrightness: number, $minExposureValue: number, $maxExposureValue: number)
            public constructor ()
        }
        /** User message types.
        */
        enum MessageType
        { None = 0, Info = 1, Warning = 2, Error = 3 }
        /** Type of a SerializedProperty.
        */
        enum SerializedPropertyType
        { Generic = -1, Integer = 0, Boolean = 1, Float = 2, String = 3, Color = 4, ObjectReference = 5, LayerMask = 6, Enum = 7, Vector2 = 8, Vector3 = 9, Vector4 = 10, Rect = 11, ArraySize = 12, Character = 13, AnimationCurve = 14, Bounds = 15, Gradient = 16, Quaternion = 17, ExposedReference = 18, FixedBufferSize = 19, Vector2Int = 20, Vector3Int = 21, RectInt = 22, BoundsInt = 23, ManagedReference = 24 }
        /** Auto laid out version of EditorGUI.
        */
        class EditorGUILayout extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Make a label with a foldout arrow to the left of it.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Specifies whether clicking the label toggles the foldout state. The default value is false. Set to true to include the label in the clickable area.
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($foldout: boolean, $content: string) : boolean
            /** Make a label with a foldout arrow to the left of it.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Specifies whether clicking the label toggles the foldout state. The default value is false. Set to true to include the label in the clickable area.
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($foldout: boolean, $content: string, $style: UnityEngine.GUIStyle) : boolean
            /** Make a label with a foldout arrow to the left of it.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Specifies whether clicking the label toggles the foldout state. The default value is false. Set to true to include the label in the clickable area.
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($foldout: boolean, $content: UnityEngine.GUIContent) : boolean
            /** Make a label with a foldout arrow to the left of it.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Specifies whether clicking the label toggles the foldout state. The default value is false. Set to true to include the label in the clickable area.
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($foldout: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : boolean
            public static Foldout ($foldout: boolean, $content: string, $toggleOnLabelClick: boolean) : boolean
            /** Make a label with a foldout arrow to the left of it.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Specifies whether clicking the label toggles the foldout state. The default value is false. Set to true to include the label in the clickable area.
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($foldout: boolean, $content: string, $toggleOnLabelClick: boolean, $style: UnityEngine.GUIStyle) : boolean
            public static Foldout ($foldout: boolean, $content: UnityEngine.GUIContent, $toggleOnLabelClick: boolean) : boolean
            /** Make a label with a foldout arrow to the left of it.
            * @param foldout The shown foldout state.
            * @param content The label to show.
            * @param style Optional GUIStyle.
            * @param toggleOnLabelClick Specifies whether clicking the label toggles the foldout state. The default value is false. Set to true to include the label in the clickable area.
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($foldout: boolean, $content: UnityEngine.GUIContent, $toggleOnLabelClick: boolean, $style: UnityEngine.GUIStyle) : boolean
            /** Make a label in front of some control.
            * @param label Label to show to the left of the control.
            */
            public static PrefixLabel ($label: string) : void
            /** Make a label in front of some control.
            * @param label Label to show to the left of the control.
            */
            public static PrefixLabel ($label: string, $followingStyle: UnityEngine.GUIStyle) : void
            /** Make a label in front of some control.
            * @param label Label to show to the left of the control.
            */
            public static PrefixLabel ($label: string, $followingStyle: UnityEngine.GUIStyle, $labelStyle: UnityEngine.GUIStyle) : void
            /** Make a label in front of some control.
            * @param label Label to show to the left of the control.
            */
            public static PrefixLabel ($label: UnityEngine.GUIContent) : void
            /** Make a label in front of some control.
            * @param label Label to show to the left of the control.
            */
            public static PrefixLabel ($label: UnityEngine.GUIContent, $followingStyle: UnityEngine.GUIStyle) : void
            /** Make a label in front of some control.
            * @param label Label to show to the left of the control.
            */
            public static PrefixLabel ($label: UnityEngine.GUIContent, $followingStyle: UnityEngine.GUIStyle, $labelStyle: UnityEngine.GUIStyle) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: string, $label2: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: string, $label2: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: UnityEngine.GUIContent, $label2: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param label Label in front of the label field.
            * @param label2 The label to show to the right.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: UnityEngine.GUIContent, $label2: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a toggle.
            * @param label Optional label in front of the toggle.
            * @param value The shown state of the toggle.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($value: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle.
            * @param label Optional label in front of the toggle.
            * @param value The shown state of the toggle.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($label: string, $value: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle.
            * @param label Optional label in front of the toggle.
            * @param value The shown state of the toggle.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($label: UnityEngine.GUIContent, $value: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle.
            * @param label Optional label in front of the toggle.
            * @param value The shown state of the toggle.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($value: boolean, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle.
            * @param label Optional label in front of the toggle.
            * @param value The shown state of the toggle.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($label: string, $value: boolean, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle.
            * @param label Optional label in front of the toggle.
            * @param value The shown state of the toggle.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($label: UnityEngine.GUIContent, $value: boolean, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param label Label to display next to the toggle.
            * @param value The value to edit.
            * @param labelStyle Optional GUIStyle to use for the label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ToggleLeft ($label: string, $value: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param label Label to display next to the toggle.
            * @param value The value to edit.
            * @param labelStyle Optional GUIStyle to use for the label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ToggleLeft ($label: UnityEngine.GUIContent, $value: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param label Label to display next to the toggle.
            * @param value The value to edit.
            * @param labelStyle Optional GUIStyle to use for the label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ToggleLeft ($label: string, $value: boolean, $labelStyle: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param label Label to display next to the toggle.
            * @param value The value to edit.
            * @param labelStyle Optional GUIStyle to use for the label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ToggleLeft ($label: UnityEngine.GUIContent, $value: boolean, $labelStyle: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a text field.
            * @param label Optional label to display in front of the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextField ($text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field.
            * @param label Optional label to display in front of the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextField ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field.
            * @param label Optional label to display in front of the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextField ($label: string, $text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field.
            * @param label Optional label to display in front of the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextField ($label: string, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field.
            * @param label Optional label to display in front of the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextField ($label: UnityEngine.GUIContent, $text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field.
            * @param label Optional label to display in front of the text field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextField ($label: UnityEngine.GUIContent, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param label Optional label to display in front of the int field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param label Optional label to display in front of the int field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param label Optional label to display in front of the int field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($label: string, $text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param label Optional label to display in front of the int field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($label: string, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param label Optional label to display in front of the int field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($label: UnityEngine.GUIContent, $text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param label Optional label to display in front of the int field.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($label: UnityEngine.GUIContent, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param property The text property to edit.
            * @param label Optional label to display in front of the int field. Pass GUIContent.none to hide label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static DelayedTextField ($property: UnityEditor.SerializedProperty, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a delayed text field.
            * @param property The text property to edit.
            * @param label Optional label to display in front of the int field. Pass GUIContent.none to hide label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static DelayedTextField ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a text area.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextArea ($text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text area.
            * @param text The text to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextArea ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)
            * @param text The text to show.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static SelectableLabel ($text: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)
            * @param text The text to show.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static SelectableLabel ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a text field where the user can enter a password.
            * @param label Optional label to display in front of the password field.
            * @param password The password to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($password: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param label Optional label to display in front of the password field.
            * @param password The password to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($password: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param label Optional label to display in front of the password field.
            * @param password The password to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($label: string, $password: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param label Optional label to display in front of the password field.
            * @param password The password to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($label: string, $password: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param label Optional label to display in front of the password field.
            * @param password The password to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($label: UnityEngine.GUIContent, $password: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param label Optional label to display in front of the password field.
            * @param password The password to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($label: UnityEngine.GUIContent, $password: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field for entering float values.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static FloatField ($value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering float values.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static FloatField ($value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering float values.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static FloatField ($label: string, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering float values.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static FloatField ($label: string, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering float values.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static FloatField ($label: UnityEngine.GUIContent, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering float values.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static FloatField ($label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($label: string, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($label: string, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($label: UnityEngine.GUIContent, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param label Optional label to display in front of the float field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param property The float property to edit.
            * @param label Optional label to display in front of the float field. Pass GUIContent.none to hide label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static DelayedFloatField ($property: UnityEditor.SerializedProperty, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a delayed text field for entering floats.
            * @param property The float property to edit.
            * @param label Optional label to display in front of the float field. Pass GUIContent.none to hide label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static DelayedFloatField ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a text field for entering double values.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering double values.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering double values.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($label: string, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering double values.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($label: string, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering double values.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($label: UnityEngine.GUIContent, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering double values.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering doubles.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options 
            An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering doubles.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options 
            An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering doubles.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options 
            An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($label: string, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering doubles.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options 
            An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($label: string, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering doubles.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options 
            An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($label: UnityEngine.GUIContent, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering doubles.
            * @param label Optional label to display in front of the double field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options 
            An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering integers.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static IntField ($value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering integers.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static IntField ($value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering integers.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static IntField ($label: string, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering integers.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static IntField ($label: string, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering integers.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static IntField ($label: UnityEngine.GUIContent, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering integers.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static IntField ($label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($label: string, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($label: string, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($label: UnityEngine.GUIContent, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param label Optional label to display in front of the int field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param property The int property to edit.
            * @param label Optional label to display in front of the int field. Pass GUIContent.none to hide label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static DelayedIntField ($property: UnityEditor.SerializedProperty, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a delayed text field for entering integers.
            * @param property The int property to edit.
            * @param label Optional label to display in front of the int field. Pass GUIContent.none to hide label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static DelayedIntField ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a text field for entering long integers.
            * @param label Optional label to display in front of the long field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static LongField ($value: bigint, ...options: UnityEngine.GUILayoutOption[]) : bigint
            /** Make a text field for entering long integers.
            * @param label Optional label to display in front of the long field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static LongField ($value: bigint, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : bigint
            /** Make a text field for entering long integers.
            * @param label Optional label to display in front of the long field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static LongField ($label: string, $value: bigint, ...options: UnityEngine.GUILayoutOption[]) : bigint
            /** Make a text field for entering long integers.
            * @param label Optional label to display in front of the long field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static LongField ($label: string, $value: bigint, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : bigint
            /** Make a text field for entering long integers.
            * @param label Optional label to display in front of the long field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static LongField ($label: UnityEngine.GUIContent, $value: bigint, ...options: UnityEngine.GUILayoutOption[]) : bigint
            /** Make a text field for entering long integers.
            * @param label Optional label to display in front of the long field.
            * @param value The value to edit.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static LongField ($label: UnityEngine.GUIContent, $value: bigint, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : bigint
            /** Make a slider the user can drag to change a value between a min and a max.
            * @param label Optional label in front of the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value that has been set by the user. 
            */
            public static Slider ($value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a slider the user can drag to change a value between a min and a max.
            * @param label Optional label in front of the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value that has been set by the user. 
            */
            public static Slider ($label: string, $value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a slider the user can drag to change a value between a min and a max.
            * @param label Optional label in front of the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value that has been set by the user. 
            */
            public static Slider ($label: UnityEngine.GUIContent, $value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a slider the user can drag to change a value between a min and a max.
            * @param label Optional label in front of the slider.
            * @param property The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Slider ($property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a slider the user can drag to change a value between a min and a max.
            * @param label Optional label in front of the slider.
            * @param property The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Slider ($property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a slider the user can drag to change a value between a min and a max.
            * @param label Optional label in front of the slider.
            * @param property The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Slider ($property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a slider the user can drag to change an integer value between a min and a max.
            * @param label Optional label in front of the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value that has been set by the user. 
            */
            public static IntSlider ($value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a slider the user can drag to change an integer value between a min and a max.
            * @param label Optional label in front of the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value that has been set by the user. 
            */
            public static IntSlider ($label: string, $value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a slider the user can drag to change an integer value between a min and a max.
            * @param label Optional label in front of the slider.
            * @param value The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value that has been set by the user. 
            */
            public static IntSlider ($label: UnityEngine.GUIContent, $value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a slider the user can drag to change an integer value between a min and a max.
            * @param label Optional label in front of the slider.
            * @param property The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static IntSlider ($property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a slider the user can drag to change an integer value between a min and a max.
            * @param label Optional label in front of the slider.
            * @param property The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static IntSlider ($property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a slider the user can drag to change an integer value between a min and a max.
            * @param label Optional label in front of the slider.
            * @param property The value the slider shows. This determines the position of the draggable thumb.
            * @param leftValue The value at the left end of the slider.
            * @param rightValue The value at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static IntSlider ($property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a special slider the user can use to specify a range between a min and a max.
            * @param label Optional label in front of the slider.
            * @param minValue The lower value of the range the slider shows, passed by reference.
            * @param maxValue The upper value at the range the slider shows, passed by reference.
            * @param minLimit The limit at the left end of the slider.
            * @param maxLimit The limit at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static MinMaxSlider ($minValue: $Ref<number>, $maxValue: $Ref<number>, $minLimit: number, $maxLimit: number, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a special slider the user can use to specify a range between a min and a max.
            * @param label Optional label in front of the slider.
            * @param minValue The lower value of the range the slider shows, passed by reference.
            * @param maxValue The upper value at the range the slider shows, passed by reference.
            * @param minLimit The limit at the left end of the slider.
            * @param maxLimit The limit at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static MinMaxSlider ($label: string, $minValue: $Ref<number>, $maxValue: $Ref<number>, $minLimit: number, $maxLimit: number, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a special slider the user can use to specify a range between a min and a max.
            * @param label Optional label in front of the slider.
            * @param minValue The lower value of the range the slider shows, passed by reference.
            * @param maxValue The upper value at the range the slider shows, passed by reference.
            * @param minLimit The limit at the left end of the slider.
            * @param maxLimit The limit at the right end of the slider.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static MinMaxSlider ($label: UnityEngine.GUIContent, $minValue: $Ref<number>, $maxValue: $Ref<number>, $minLimit: number, $maxLimit: number, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a generic popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($selectedIndex: number, $displayedOptions: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($selectedIndex: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($label: string, $selectedIndex: number, $displayedOptions: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            public static Popup ($label: UnityEngine.GUIContent, $selectedIndex: number, $displayedOptions: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($label: string, $selectedIndex: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($label: UnityEngine.GUIContent, $selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedIndex The index of the option the field shows.
            * @param displayedOptions An array with the options shown in the popup.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($label: UnityEngine.GUIContent, $selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an enum popup selection field.
            * @param label Optional label in front of the field.
            * @param selected The enum option the field shows.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($selected: System.Enum, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make an enum popup selection field.
            * @param label Optional label in front of the field.
            * @param selected The enum option the field shows.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($selected: System.Enum, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make an enum popup selection field.
            * @param label Optional label in front of the field.
            * @param selected The enum option the field shows.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($label: string, $selected: System.Enum, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make an enum popup selection field.
            * @param label Optional label in front of the field.
            * @param selected The enum option the field shows.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($label: string, $selected: System.Enum, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make an enum popup selection field.
            * @param label Optional label in front of the field.
            * @param selected The enum option the field shows.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($label: UnityEngine.GUIContent, $selected: System.Enum, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make an enum popup selection field.
            * @param label Optional label in front of the field.
            * @param selected The enum option the field shows.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($label: UnityEngine.GUIContent, $selected: System.Enum, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            public static EnumPopup ($label: UnityEngine.GUIContent, $selected: System.Enum, $checkEnabled: System.Func$2<System.Enum, boolean>, $includeObsolete: boolean, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            public static EnumPopup ($label: UnityEngine.GUIContent, $selected: System.Enum, $checkEnabled: System.Func$2<System.Enum, boolean>, $includeObsolete: boolean, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make an integer popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($label: string, $selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($label: string, $selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($label: UnityEngine.GUIContent, $selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param label Optional label in front of the field.
            * @param selectedValue The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($label: UnityEngine.GUIContent, $selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param property The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option.
            * @param label Optional label in front of the field.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static IntPopup ($property: UnityEditor.SerializedProperty, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an integer popup selection field.
            * @param property The value of the option the field shows.
            * @param displayedOptions An array with the displayed options the user can choose from.
            * @param optionValues An array with the values for each option.
            * @param label Optional label in front of the field.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static IntPopup ($property: UnityEditor.SerializedProperty, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a tag selection field.
            * @param label Optional label in front of the field.
            * @param tag The tag the field shows.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The tag selected by the user. 
            */
            public static TagField ($tag: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a tag selection field.
            * @param label Optional label in front of the field.
            * @param tag The tag the field shows.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The tag selected by the user. 
            */
            public static TagField ($tag: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a tag selection field.
            * @param label Optional label in front of the field.
            * @param tag The tag the field shows.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The tag selected by the user. 
            */
            public static TagField ($label: string, $tag: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a tag selection field.
            * @param label Optional label in front of the field.
            * @param tag The tag the field shows.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The tag selected by the user. 
            */
            public static TagField ($label: string, $tag: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a tag selection field.
            * @param label Optional label in front of the field.
            * @param tag The tag the field shows.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The tag selected by the user. 
            */
            public static TagField ($label: UnityEngine.GUIContent, $tag: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a tag selection field.
            * @param label Optional label in front of the field.
            * @param tag The tag the field shows.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The tag selected by the user. 
            */
            public static TagField ($label: UnityEngine.GUIContent, $tag: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a layer selection field.
            * @param label Optional label in front of the field.
            * @param layer The layer shown in the field.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($layer: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a layer selection field.
            * @param label Optional label in front of the field.
            * @param layer The layer shown in the field.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($layer: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a layer selection field.
            * @param label Optional label in front of the field.
            * @param layer The layer shown in the field.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($label: string, $layer: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a layer selection field.
            * @param label Optional label in front of the field.
            * @param layer The layer shown in the field.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($label: string, $layer: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a layer selection field.
            * @param label Optional label in front of the field.
            * @param layer The layer shown in the field.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($label: UnityEngine.GUIContent, $layer: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a layer selection field.
            * @param label Optional label in front of the field.
            * @param layer The layer shown in the field.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($label: UnityEngine.GUIContent, $layer: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a field for masks.
            * @param label Prefix label of the field.
            * @param mask The current mask to display.
            * @param displayedOption A string array containing the labels for each flag.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value modified by the user. 
            */
            public static MaskField ($label: UnityEngine.GUIContent, $mask: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a field for masks.
            * @param label Prefix label of the field.
            * @param mask The current mask to display.
            * @param displayedOption A string array containing the labels for each flag.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value modified by the user. 
            */
            public static MaskField ($label: string, $mask: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a field for masks.
            * @param label Prefix label of the field.
            * @param mask The current mask to display.
            * @param displayedOption A string array containing the labels for each flag.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value modified by the user. 
            */
            public static MaskField ($label: UnityEngine.GUIContent, $mask: number, $displayedOptions: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a field for masks.
            * @param label Prefix label of the field.
            * @param mask The current mask to display.
            * @param displayedOption A string array containing the labels for each flag.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value modified by the user. 
            */
            public static MaskField ($label: string, $mask: number, $displayedOptions: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a field for masks.
            * @param label Prefix label of the field.
            * @param mask The current mask to display.
            * @param displayedOption A string array containing the labels for each flag.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value modified by the user. 
            */
            public static MaskField ($mask: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a field for masks.
            * @param label Prefix label of the field.
            * @param mask The current mask to display.
            * @param displayedOption A string array containing the labels for each flag.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value modified by the user. 
            */
            public static MaskField ($mask: number, $displayedOptions: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($enumValue: System.Enum, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($enumValue: System.Enum, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($label: string, $enumValue: System.Enum, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($label: string, $enumValue: System.Enum, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($label: UnityEngine.GUIContent, $enumValue: System.Enum, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($label: UnityEngine.GUIContent, $enumValue: System.Enum, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($label: UnityEngine.GUIContent, $enumValue: System.Enum, $includeObsolete: boolean, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param label Optional label to display in front of the enum flags field.
            * @param enumValue Enum flags value.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($label: UnityEngine.GUIContent, $enumValue: System.Enum, $includeObsolete: boolean, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make a field to receive any object type.
            * @param label Optional label in front of the field.
            * @param obj The object the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param allowSceneObjects Allow assigning Scene objects. See Description for more info.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The object that has been set by the user. 
            */
            public static ObjectField ($obj: UnityEngine.Object, $objType: System.Type, $allowSceneObjects: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Object
            /** Make a field to receive any object type.
            * @param label Optional label in front of the field.
            * @param obj The object the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param allowSceneObjects Allow assigning Scene objects. See Description for more info.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The object that has been set by the user. 
            */
            public static ObjectField ($label: string, $obj: UnityEngine.Object, $objType: System.Type, $allowSceneObjects: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Object
            /** Make a field to receive any object type.
            * @param label Optional label in front of the field.
            * @param obj The object the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param allowSceneObjects Allow assigning Scene objects. See Description for more info.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The object that has been set by the user. 
            */
            public static ObjectField ($label: UnityEngine.GUIContent, $obj: UnityEngine.Object, $objType: System.Type, $allowSceneObjects: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Object
            /** Make a field to receive any object type.
            * @param property The object reference property the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param label Optional label in front of the field. Pass GUIContent.none to hide the label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ObjectField ($property: UnityEditor.SerializedProperty, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a field to receive any object type.
            * @param property The object reference property the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param label Optional label in front of the field. Pass GUIContent.none to hide the label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ObjectField ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a field to receive any object type.
            * @param property The object reference property the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param label Optional label in front of the field. Pass GUIContent.none to hide the label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ObjectField ($property: UnityEditor.SerializedProperty, $objType: System.Type, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a field to receive any object type.
            * @param property The object reference property the field shows.
            * @param objType The type of the objects that can be assigned.
            * @param label Optional label in front of the field. Pass GUIContent.none to hide the label.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ObjectField ($property: UnityEditor.SerializedProperty, $objType: System.Type, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an X & Y field for entering a Vector2.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            * @returns The value entered by the user. 
            */
            public static Vector2Field ($label: string, $value: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Make an X & Y field for entering a Vector2.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            * @returns The value entered by the user. 
            */
            public static Vector2Field ($label: UnityEngine.GUIContent, $value: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Make an X, Y & Z field for entering a Vector3.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector3Field ($label: string, $value: UnityEngine.Vector3, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector3
            /** Make an X, Y & Z field for entering a Vector3.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector3Field ($label: UnityEngine.GUIContent, $value: UnityEngine.Vector3, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector3
            /** Make an X, Y, Z & W field for entering a Vector4.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector4Field ($label: string, $value: UnityEngine.Vector4, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector4
            public static Vector4Field ($label: UnityEngine.GUIContent, $value: UnityEngine.Vector4, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector4
            /** Make an X & Y integer field for entering a Vector2Int.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector2IntField ($label: string, $value: UnityEngine.Vector2Int, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2Int
            /** Make an X & Y integer field for entering a Vector2Int.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector2IntField ($label: UnityEngine.GUIContent, $value: UnityEngine.Vector2Int, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2Int
            /** Make an X, Y & Z integer field for entering a Vector3Int.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector3IntField ($label: string, $value: UnityEngine.Vector3Int, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector3Int
            /** Make an X, Y & Z integer field for entering a Vector3Int.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector3IntField ($label: UnityEngine.GUIContent, $value: UnityEngine.Vector3Int, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector3Int
            /** Make an X, Y, W & H field for entering a Rect.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static RectField ($value: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Make an X, Y, W & H field for entering a Rect.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static RectField ($label: string, $value: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Make an X, Y, W & H field for entering a Rect.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static RectField ($label: UnityEngine.GUIContent, $value: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Make an X, Y, W & H field for entering a RectInt.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static RectIntField ($value: UnityEngine.RectInt, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.RectInt
            /** Make an X, Y, W & H field for entering a RectInt.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static RectIntField ($label: string, $value: UnityEngine.RectInt, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.RectInt
            /** Make an X, Y, W & H field for entering a RectInt.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static RectIntField ($label: UnityEngine.GUIContent, $value: UnityEngine.RectInt, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.RectInt
            /** Make Center & Extents field for entering a Bounds.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static BoundsField ($value: UnityEngine.Bounds, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Bounds
            /** Make Center & Extents field for entering a Bounds.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static BoundsField ($label: string, $value: UnityEngine.Bounds, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Bounds
            /** Make Center & Extents field for entering a Bounds.
            * @param label Label to display above the field.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static BoundsField ($label: UnityEngine.GUIContent, $value: UnityEngine.Bounds, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Bounds
            /** Make Position & Size field for entering a BoundsInt.
            * @param label Make Position & Size field for entering a Bounds.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static BoundsIntField ($value: UnityEngine.BoundsInt, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.BoundsInt
            /** Make Position & Size field for entering a BoundsInt.
            * @param label Make Position & Size field for entering a Bounds.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static BoundsIntField ($label: string, $value: UnityEngine.BoundsInt, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.BoundsInt
            /** Make Position & Size field for entering a BoundsInt.
            * @param label Make Position & Size field for entering a Bounds.
            * @param value The value to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static BoundsIntField ($label: UnityEngine.GUIContent, $value: UnityEngine.BoundsInt, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.BoundsInt
            /** Make a field for selecting a Color.
            * @param label Optional label to display in front of the field.
            * @param value The color to edit.
            * @param showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The color selected by the user. 
            */
            public static ColorField ($value: UnityEngine.Color, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Color
            /** Make a field for selecting a Color.
            * @param label Optional label to display in front of the field.
            * @param value The color to edit.
            * @param showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The color selected by the user. 
            */
            public static ColorField ($label: string, $value: UnityEngine.Color, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Color
            /** Make a field for selecting a Color.
            * @param label Optional label to display in front of the field.
            * @param value The color to edit.
            * @param showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The color selected by the user. 
            */
            public static ColorField ($label: UnityEngine.GUIContent, $value: UnityEngine.Color, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Color
            /** Make a field for selecting a Color.
            * @param label Optional label to display in front of the field.
            * @param value The color to edit.
            * @param showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The color selected by the user. 
            */
            public static ColorField ($label: UnityEngine.GUIContent, $value: UnityEngine.Color, $showEyedropper: boolean, $showAlpha: boolean, $hdr: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Color
            /** Make a field for editing an AnimationCurve.
            * @param label Optional label to display in front of the field.
            * @param value The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($value: UnityEngine.AnimationCurve, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.AnimationCurve
            /** Make a field for editing an AnimationCurve.
            * @param label Optional label to display in front of the field.
            * @param value The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($label: string, $value: UnityEngine.AnimationCurve, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.AnimationCurve
            /** Make a field for editing an AnimationCurve.
            * @param label Optional label to display in front of the field.
            * @param value The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($label: UnityEngine.GUIContent, $value: UnityEngine.AnimationCurve, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.AnimationCurve
            /** Make a field for editing an AnimationCurve.
            * @param label Optional label to display in front of the field.
            * @param value The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($value: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $ranges: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.AnimationCurve
            /** Make a field for editing an AnimationCurve.
            * @param label Optional label to display in front of the field.
            * @param value The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($label: string, $value: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $ranges: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.AnimationCurve
            /** Make a field for editing an AnimationCurve.
            * @param label Optional label to display in front of the field.
            * @param value The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($label: UnityEngine.GUIContent, $value: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $ranges: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.AnimationCurve
            /** Make a field for editing an AnimationCurve.
            * @param property The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param label Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.
            */
            public static CurveField ($property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $ranges: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a field for editing an AnimationCurve.
            * @param property The curve to edit.
            * @param color The color to show the curve with.
            * @param ranges Optional rectangle that the curve is restrained within.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param label Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.
            */
            public static CurveField ($property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $ranges: UnityEngine.Rect, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an inspector-window-like titlebar.
            * @param foldout The foldout state shown with the arrow.
            * @param targetObj The object (for example a component) or objects that the titlebar is for.
            * @returns The foldout state selected by the user. 
            */
            public static InspectorTitlebar ($foldout: boolean, $targetObj: UnityEngine.Object) : boolean
            public static InspectorTitlebar ($foldout: boolean, $targetObj: UnityEngine.Object, $expandable: boolean) : boolean
            /** Make an inspector-window-like titlebar.
            * @param foldout The foldout state shown with the arrow.
            * @param targetObj The object (for example a component) or objects that the titlebar is for.
            * @returns The foldout state selected by the user. 
            */
            public static InspectorTitlebar ($foldout: boolean, $targetObjs: System.Array$1<UnityEngine.Object>) : boolean
            public static InspectorTitlebar ($foldout: boolean, $targetObjs: System.Array$1<UnityEngine.Object>, $expandable: boolean) : boolean
            public static InspectorTitlebar ($foldout: boolean, $editor: UnityEditor.Editor) : boolean
            public static InspectorTitlebar ($targetObjs: System.Array$1<UnityEngine.Object>) : void
            /** Make a help box with a message to the user.
            * @param message The message text.
            * @param type The type of message.
            * @param wide If true, the box will cover the whole width of the window; otherwise it will cover the controls part only.
            */
            public static HelpBox ($message: string, $type: UnityEditor.MessageType) : void
            /** Make a help box with a message to the user.
            * @param message The message text.
            * @param type The type of message.
            * @param wide If true, the box will cover the whole width of the window; otherwise it will cover the controls part only.
            */
            public static HelpBox ($message: string, $type: UnityEditor.MessageType, $wide: boolean) : void
            public static HelpBox ($content: UnityEngine.GUIContent, $wide?: boolean) : void
            public static Space () : void
            public static Space ($width: number) : void
            public static Space ($width: number, $expand: boolean) : void
            public static Separator () : void
            /** Begin a vertical group with a toggle to enable or disable all the controls within at once.
            * @param label Label to show above the toggled controls.
            * @param toggle Enabled state of the toggle group.
            * @returns The enabled state selected by the user. 
            */
            public static BeginToggleGroup ($label: string, $toggle: boolean) : boolean
            /** Begin a vertical group with a toggle to enable or disable all the controls within at once.
            * @param label Label to show above the toggled controls.
            * @param toggle Enabled state of the toggle group.
            * @returns The enabled state selected by the user. 
            */
            public static BeginToggleGroup ($label: UnityEngine.GUIContent, $toggle: boolean) : boolean
            public static EndToggleGroup () : void
            /** Begin a horizontal group and get its rect back.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal (...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Begin a horizontal group and get its rect back.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal ($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static EndHorizontal () : void
            /** Begin a vertical group and get its rect back.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties.
            Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical (...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Begin a vertical group and get its rect back.
            * @param style Optional GUIStyle.
            * @param options An optional list of layout options that specify extra layout properties.
            Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical ($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            public static EndVertical () : void
            /** Begin an automatically laid out scrollview.
            * @param scrollPosition The position to use display.
            * @param alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param scrollPosition The position to use display.
            * @param alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param scrollPosition The position to use display.
            * @param alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param scrollPosition The position to use display.
            * @param alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, $background: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            public static EndScrollView () : void
            /** Make a field for SerializedProperty.
            * @param property The SerializedProperty to make a field for.
            * @param label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param includeChildren If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns True if the property has children and is expanded and includeChildren was set to false; otherwise false. 
            */
            public static PropertyField ($property: UnityEditor.SerializedProperty, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a field for SerializedProperty.
            * @param property The SerializedProperty to make a field for.
            * @param label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param includeChildren If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns True if the property has children and is expanded and includeChildren was set to false; otherwise false. 
            */
            public static PropertyField ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a field for SerializedProperty.
            * @param property The SerializedProperty to make a field for.
            * @param label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param includeChildren If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns True if the property has children and is expanded and includeChildren was set to false; otherwise false. 
            */
            public static PropertyField ($property: UnityEditor.SerializedProperty, $includeChildren: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a field for SerializedProperty.
            * @param property The SerializedProperty to make a field for.
            * @param label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param includeChildren If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns True if the property has children and is expanded and includeChildren was set to false; otherwise false. 
            */
            public static PropertyField ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, $includeChildren: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Get a rect for an Editor control.
            * @param hasLabel Optional boolean to specify if the control has a label. Default is true.
            * @param height The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.
            * @param style Optional GUIStyle to use for the control.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static GetControlRect (...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Get a rect for an Editor control.
            * @param hasLabel Optional boolean to specify if the control has a label. Default is true.
            * @param height The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.
            * @param style Optional GUIStyle to use for the control.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static GetControlRect ($hasLabel: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Get a rect for an Editor control.
            * @param hasLabel Optional boolean to specify if the control has a label. Default is true.
            * @param height The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.
            * @param style Optional GUIStyle to use for the control.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static GetControlRect ($hasLabel: boolean, $height: number, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Get a rect for an Editor control.
            * @param hasLabel Optional boolean to specify if the control has a label. Default is true.
            * @param height The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.
            * @param style Optional GUIStyle to use for the control.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static GetControlRect ($hasLabel: boolean, $height: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Begins a group that can be be hidden/shown and the transition will be animated.
            * @param value A value between 0 and 1, 0 being hidden, and 1 being fully visible.
            * @returns If the group is visible or not. 
            */
            public static BeginFadeGroup ($value: number) : boolean
            public static EndFadeGroup () : void
            public static BeginBuildTargetSelectionGrouping () : UnityEditor.BuildTargetGroup
            public static EndBuildTargetSelectionGrouping () : void
            /** Make a button that reacts to mouse down, for displaying your own dropdown content.
            * @param content Text, image and tooltip for this button.
            * @param focusType Whether the button should be selectable by keyboard or not.
            * @param style Optional style to use.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the user clicks the button. 
            */
            public static DropdownButton ($content: UnityEngine.GUIContent, $focusType: UnityEngine.FocusType, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a button that reacts to mouse down, for displaying your own dropdown content.
            * @param content Text, image and tooltip for this button.
            * @param focusType Whether the button should be selectable by keyboard or not.
            * @param style Optional style to use.
            * @param options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the user clicks the button. 
            */
            public static DropdownButton ($content: UnityEngine.GUIContent, $focusType: UnityEngine.FocusType, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            public static BeginFoldoutHeaderGroup ($foldout: boolean, $content: string, $style?: UnityEngine.GUIStyle, $menuAction?: System.Action$1<UnityEngine.Rect>, $menuIcon?: UnityEngine.GUIStyle) : boolean
            public static BeginFoldoutHeaderGroup ($foldout: boolean, $content: UnityEngine.GUIContent, $style?: UnityEngine.GUIStyle, $menuAction?: System.Action$1<UnityEngine.Rect>, $menuIcon?: UnityEngine.GUIStyle) : boolean
            public static EndFoldoutHeaderGroup () : void
            /** Make a field for editing a Gradient.
            * @param label Optional label to display in front of the field.
            * @param value The gradient to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($value: UnityEngine.Gradient, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Gradient
            /** Make a field for editing a Gradient.
            * @param label Optional label to display in front of the field.
            * @param value The gradient to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($label: string, $value: UnityEngine.Gradient, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Gradient
            /** Make a field for editing a Gradient.
            * @param label Optional label to display in front of the field.
            * @param value The gradient to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($label: UnityEngine.GUIContent, $value: UnityEngine.Gradient, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Gradient
            /** Make a field for editing a Gradient.
            * @param label Optional label to display in front of the field.
            * @param value The gradient to edit.
            * @param options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($label: UnityEngine.GUIContent, $value: UnityEngine.Gradient, $hdr: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Gradient
            public static Knob ($knobSize: UnityEngine.Vector2, $value: number, $minValue: number, $maxValue: number, $unit: string, $backgroundColor: UnityEngine.Color, $activeColor: UnityEngine.Color, $showValue: boolean, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Makes a toolbar populated with the collection of editor tools that match the EditorToolAttribute of the target object.
            * @param target The target object.
            * @param content An optional prefix label.
            */
            public static EditorToolbarForTarget ($target: UnityEngine.Object) : void
            /** Makes a toolbar populated with the collection of editor tools that match the EditorToolAttribute of the target object.
            * @param target The target object.
            * @param content An optional prefix label.
            */
            public static EditorToolbarForTarget ($content: UnityEngine.GUIContent, $target: UnityEngine.Object) : void
            /** Makes a toolbar populated with the specified collection of editor tools.
            * @param tools The collection of editor tools for the toolbar.
            */
            public static EditorToolbar (...tools: UnityEditor.EditorTools.EditorTool[]) : void
            public static EditorToolbar ($tools: System.Collections.Generic.IList$1<UnityEditor.EditorTools.EditorTool>) : void
            public constructor ()
        }
        /** Custom mouse cursor shapes used with EditorGUIUtility.AddCursorRect.
        */
        enum MouseCursor
        { Arrow = 0, Text = 1, ResizeVertical = 2, ResizeHorizontal = 3, Link = 4, SlideArrow = 5, ResizeUpRight = 6, ResizeUpLeft = 7, MoveArrow = 8, RotateArrow = 9, ScaleArrow = 10, ArrowPlus = 11, ArrowMinus = 12, Pan = 13, Orbit = 14, Zoom = 15, FPS = 16, CustomCursor = 17, SplitResizeUpDown = 18, SplitResizeLeftRight = 19 }
        /** Enum that selects which skin to return from EditorGUIUtility.GetBuiltinSkin.
        */
        enum EditorSkin
        { Game = 0, Inspector = 1, Scene = 2 }
        /** Miscellaneous helper stuff for EditorGUI.
        */
        class EditorGUIUtility extends UnityEngine.GUIUtility
        {
            protected [__keep_incompatibility]: never;
            /** Get a white texture.
            */
            public static get whiteTexture(): UnityEngine.Texture2D;
            /** The system copy buffer.
            */
            public static get systemCopyBuffer(): string;
            public static set systemCopyBuffer(value: string);
            /** The scale of GUI points relative to screen pixels for the current view
            This value is the number of screen pixels per point of interface space. For instance, 2.0 on retina displays. Note that the value may differ from one view to the next if the views are on monitors with different UI scales.
            */
            public static get pixelsPerPoint(): number;
            /** Get the height used for a single Editor control such as a one-line EditorGUI.TextField or EditorGUI.Popup.
            */
            public static get singleLineHeight(): number;
            /** Get the height used by default for vertical spacing between controls.
            */
            public static get standardVerticalSpacing(): number;
            /** Is the user currently using the pro skin? (Read Only)
            */
            public static get isProSkin(): boolean;
            /** Is a text field currently editing text?
            */
            public static get editingTextField(): boolean;
            public static set editingTextField(value: boolean);
            /** True if a text field currently has focused and the text in it is selected.
            */
            public static get textFieldHasSelection(): boolean;
            /** Is the Editor GUI is hierarchy mode?
            */
            public static get hierarchyMode(): boolean;
            public static set hierarchyMode(value: boolean);
            /** Is the Editor GUI currently in wide mode?
            */
            public static get wideMode(): boolean;
            public static set wideMode(value: boolean);
            /** The width of the GUI area for the current EditorWindow or other view.
            */
            public static get currentViewWidth(): number;
            /** The width in pixels reserved for labels of Editor GUI controls.
            */
            public static get labelWidth(): number;
            public static set labelWidth(value: number);
            /** The minimum width in pixels reserved for the fields of Editor GUI controls.
            */
            public static get fieldWidth(): number;
            public static set fieldWidth(value: number);
            public static SerializeMainMenuToString () : string
            public static SetMenuLocalizationTestMode ($onoff: boolean) : void
            /** Set icons rendered as part of GUIContent to be rendered at a specific size.
            */
            public static SetIconSize ($size: UnityEngine.Vector2) : void
            public static SetWantsMouseJumping ($wantz: number) : void
            /** Check if any enabled camera can render to a particular display.
            * @param displayIndex Display index.
            * @returns True if a camera will render to the display. 
            */
            public static IsDisplayReferencedByCameras ($displayIndex: number) : boolean
            /** Send an input event into the game.
            */
            public static QueueGameViewInputEvent ($evt: UnityEngine.Event) : void
            /** Converts a position from point to pixel space.
            * @param rect A GUI position in point space.
            * @returns The same position in pixel space. 
            */
            public static PointsToPixels ($rect: UnityEngine.Rect) : UnityEngine.Rect
            /** Convert a Rect from pixel space to point space.
            * @param rect A GUI rect measured in pixels.
            * @returns A rect representing the same area in points. 
            */
            public static PixelsToPoints ($rect: UnityEngine.Rect) : UnityEngine.Rect
            /** Convert a Rect from point space to pixel space.
            * @param position A GUI rect measured in points.
            * @returns A rect representing the same area in pixels. 
            */
            public static PointsToPixels ($position: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Convert a position from pixel to point space.
            * @param position A GUI position in pixel space.
            * @returns A vector representing the same position in point space. 
            */
            public static PixelsToPoints ($position: UnityEngine.Vector2) : UnityEngine.Vector2
            public static GetFlowLayoutedRects ($rect: UnityEngine.Rect, $style: UnityEngine.GUIStyle, $horizontalSpacing: number, $verticalSpacing: number, $items: System.Collections.Generic.List$1<string>) : System.Collections.Generic.List$1<UnityEngine.Rect>
            /** Get a texture from its source filename.
            */
            public static FindTexture ($name: string) : UnityEngine.Texture2D
            public static TrTextContent ($key: string, $text: string, $tooltip: string, $icon: UnityEngine.Texture) : UnityEngine.GUIContent
            public static TrTextContent ($text: string, $tooltip?: string, $icon?: UnityEngine.Texture) : UnityEngine.GUIContent
            public static TrTextContent ($text: string, $tooltip: string, $iconName: string) : UnityEngine.GUIContent
            public static TrTextContent ($text: string, $icon: UnityEngine.Texture) : UnityEngine.GUIContent
            public static TrTextContentWithIcon ($text: string, $icon: UnityEngine.Texture) : UnityEngine.GUIContent
            public static TrTextContentWithIcon ($text: string, $iconName: string) : UnityEngine.GUIContent
            public static TrTextContentWithIcon ($text: string, $tooltip: string, $iconName: string) : UnityEngine.GUIContent
            public static TrTextContentWithIcon ($text: string, $tooltip: string, $icon: UnityEngine.Texture) : UnityEngine.GUIContent
            public static TrTextContentWithIcon ($text: string, $tooltip: string, $messageType: UnityEditor.MessageType) : UnityEngine.GUIContent
            public static TrTextContentWithIcon ($text: string, $messageType: UnityEditor.MessageType) : UnityEngine.GUIContent
            public static TrIconContent ($iconName: string, $tooltip?: string) : UnityEngine.GUIContent
            public static TrIconContent ($icon: UnityEngine.Texture, $tooltip?: string) : UnityEngine.GUIContent
            public static TrTempContent ($t: string) : UnityEngine.GUIContent
            public static TrTempContent ($texts: System.Array$1<string>) : System.Array$1<UnityEngine.GUIContent>
            public static TrTempContent ($texts: System.Array$1<string>, $tooltips: System.Array$1<string>) : System.Array$1<UnityEngine.GUIContent>
            /** Fetch the GUIContent from the Unity builtin resources with the given name.
            * @param name Name of the desired icon.
            * @param text Tooltip for hovering over the icon.
            */
            public static IconContent ($name: string) : UnityEngine.GUIContent
            /** Fetch the GUIContent from the Unity builtin resources with the given name.
            * @param name Name of the desired icon.
            * @param text Tooltip for hovering over the icon.
            */
            public static IconContent ($name: string, $text: string) : UnityEngine.GUIContent
            /** Return a GUIContent object with the name and icon of an Object.
            */
            public static ObjectContent ($obj: UnityEngine.Object, $type: System.Type) : UnityEngine.GUIContent
            /** Does a given class have per-object thumbnails?
            */
            public static HasObjectThumbnail ($objType: System.Type) : boolean
            public static GetIconSize () : UnityEngine.Vector2
            /** Get one of the built-in GUI skins, which can be the game view, inspector or Scene view skin as chosen by the parameter.
            */
            public static GetBuiltinSkin ($skin: UnityEditor.EditorSkin) : UnityEngine.GUISkin
            /** Load a required built-in resource.
            */
            public static LoadRequired ($path: string) : UnityEngine.Object
            /** Load a built-in resource.
            */
            public static Load ($path: string) : UnityEngine.Object
            /** Ping an object in the Scene like clicking it in an inspector.
            * @param obj The object to be pinged.
            */
            public static PingObject ($obj: UnityEngine.Object) : void
            /** Ping an object in the Scene like clicking it in an inspector.
            * @param obj The object to be pinged.
            */
            public static PingObject ($targetInstanceID: number) : void
            /** Creates an event that can be sent to another window.
            * @param commandName The command to be sent.
            */
            public static CommandEvent ($commandName: string) : UnityEngine.Event
            /** Draw a color swatch.
            * @param position The rectangle to draw the color swatch within.
            * @param color The color to draw.
            */
            public static DrawColorSwatch ($position: UnityEngine.Rect, $color: UnityEngine.Color) : void
            /** Draw a curve swatch.
            * @param position The rectangle to draw the color swatch within.
            * @param curve The curve to draw.
            * @param property The curve to draw as a SerializedProperty.
            * @param color The color to draw the curve with.
            * @param bgColor The color to draw the background with.
            * @param curveRanges Optional parameter to specify the range of the curve which should be included in swatch.
            */
            public static DrawCurveSwatch ($position: UnityEngine.Rect, $curve: UnityEngine.AnimationCurve, $property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $bgColor: UnityEngine.Color) : void
            public static DrawCurveSwatch ($position: UnityEngine.Rect, $curve: UnityEngine.AnimationCurve, $property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $bgColor: UnityEngine.Color, $topFillColor: UnityEngine.Color, $bottomFillColor: UnityEngine.Color) : void
            public static DrawCurveSwatch ($position: UnityEngine.Rect, $curve: UnityEngine.AnimationCurve, $property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $bgColor: UnityEngine.Color, $topFillColor: UnityEngine.Color, $bottomFillColor: UnityEngine.Color, $curveRanges: UnityEngine.Rect) : void
            /** Draw a curve swatch.
            * @param position The rectangle to draw the color swatch within.
            * @param curve The curve to draw.
            * @param property The curve to draw as a SerializedProperty.
            * @param color The color to draw the curve with.
            * @param bgColor The color to draw the background with.
            * @param curveRanges Optional parameter to specify the range of the curve which should be included in swatch.
            */
            public static DrawCurveSwatch ($position: UnityEngine.Rect, $curve: UnityEngine.AnimationCurve, $property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $bgColor: UnityEngine.Color, $curveRanges: UnityEngine.Rect) : void
            /** Draw swatch with a filled region between two SerializedProperty curves.
            */
            public static DrawRegionSwatch ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $property2: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $bgColor: UnityEngine.Color, $curveRanges: UnityEngine.Rect) : void
            /** Draw swatch with a filled region between two curves.
            */
            public static DrawRegionSwatch ($position: UnityEngine.Rect, $curve: UnityEngine.AnimationCurve, $curve2: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $bgColor: UnityEngine.Color, $curveRanges: UnityEngine.Rect) : void
            /** Add a custom mouse pointer to a control.
            * @param position The rectangle the control should be shown within.
            * @param mouse The mouse cursor to use.
            * @param controlID ID of a target control.
            */
            public static AddCursorRect ($position: UnityEngine.Rect, $mouse: UnityEditor.MouseCursor) : void
            /** Add a custom mouse pointer to a control.
            * @param position The rectangle the control should be shown within.
            * @param mouse The mouse cursor to use.
            * @param controlID ID of a target control.
            */
            public static AddCursorRect ($position: UnityEngine.Rect, $mouse: UnityEditor.MouseCursor, $controlID: number) : void
            public static GetObjectPickerObject () : UnityEngine.Object
            public static GetObjectPickerControlID () : number
            public constructor ()
        }
        /** SessionState is a Key-Value Store intended for storing and retrieving Editor session state that should survive assembly reloading.
        */
        class SessionState extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Store a Boolean value.
            */
            public static SetBool ($key: string, $value: boolean) : void
            /** Retrieve a Boolean value.
            */
            public static GetBool ($key: string, $defaultValue: boolean) : boolean
            /** Erase a Boolean entry in the key-value store.
            */
            public static EraseBool ($key: string) : void
            /** Store a Float value.
            */
            public static SetFloat ($key: string, $value: number) : void
            /** Retrieve a Float value.
            */
            public static GetFloat ($key: string, $defaultValue: number) : number
            /** Erase a Float entry in the key-value store.
            */
            public static EraseFloat ($key: string) : void
            /** Store an Integer value.
            */
            public static SetInt ($key: string, $value: number) : void
            /** Retrieve an Integer value.
            */
            public static GetInt ($key: string, $defaultValue: number) : number
            /** Erase an Integer entry in the key-value store.
            */
            public static EraseInt ($key: string) : void
            /** Store a String value.
            */
            public static SetString ($key: string, $value: string) : void
            /** Retrieve a String value.
            */
            public static GetString ($key: string, $defaultValue: string) : string
            /** Erase a String entry in the key-value store.
            */
            public static EraseString ($key: string) : void
            /** Store a Vector3.
            */
            public static SetVector3 ($key: string, $value: UnityEngine.Vector3) : void
            /** Retrieve a Vector3.
            */
            public static GetVector3 ($key: string, $defaultValue: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Erase a Vector3 entry in the key-value store.
            */
            public static EraseVector3 ($key: string) : void
            /** Erase an Integer array entry in the key-value store.
            */
            public static EraseIntArray ($key: string) : void
            /** Store an Integer array.
            */
            public static SetIntArray ($key: string, $value: System.Array$1<number>) : void
            /** Retrieve an Integer array.
            */
            public static GetIntArray ($key: string, $defaultValue: System.Array$1<number>) : System.Array$1<number>
            public constructor ()
        }
        /** Stores and accesses Unity editor preferences.
        */
        class EditorPrefs extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Sets the value of the preference identified by key as an integer.
            * @param key Name of key to write integer to.
            * @param value Value of the integer to write into the storage.
            */
            public static SetInt ($key: string, $value: number) : void
            /** Returns the value corresponding to key in the preference file if it exists.
            * @param key Name of key to read integer from.
            * @param defaultValue Integer value to return if the key is not in the storage.
            * @returns The value stored in the preference file. 
            */
            public static GetInt ($key: string, $defaultValue: number) : number
            /** Returns the value corresponding to key in the preference file if it exists.
            * @param key Name of key to read integer from.
            * @param defaultValue Integer value to return if the key is not in the storage.
            * @returns The value stored in the preference file. 
            */
            public static GetInt ($key: string) : number
            /** Sets the float value of the preference identified by key.
            * @param key Name of key to write float into.
            * @param value Float value to write into the storage.
            */
            public static SetFloat ($key: string, $value: number) : void
            /** Returns the float value corresponding to key if it exists in the preference file.
            * @param key Name of key to read float from.
            * @param defaultValue Float value to return if the key is not in the storage.
            * @returns The float value stored in the preference file or the defaultValue id the
            requested float does not exist. 
            */
            public static GetFloat ($key: string, $defaultValue: number) : number
            /** Returns the float value corresponding to key if it exists in the preference file.
            * @param key Name of key to read float from.
            * @param defaultValue Float value to return if the key is not in the storage.
            * @returns The float value stored in the preference file or the defaultValue id the
            requested float does not exist. 
            */
            public static GetFloat ($key: string) : number
            /** Sets the value of the preference identified by key. Note that EditorPrefs does not support null strings and will store an empty string instead.
            */
            public static SetString ($key: string, $value: string) : void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetString ($key: string, $defaultValue: string) : string
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetString ($key: string) : string
            /** Sets the value of the preference identified by key.
            */
            public static SetBool ($key: string, $value: boolean) : void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetBool ($key: string, $defaultValue: boolean) : boolean
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetBool ($key: string) : boolean
            /** Returns true if key exists in the preferences file.
            * @param key Name of key to check for.
            * @returns The existence or not of the key. 
            */
            public static HasKey ($key: string) : boolean
            /** Removes key and its corresponding value from the preferences.
            */
            public static DeleteKey ($key: string) : void
            public static DeleteAll () : void
            public constructor ()
        }
        enum SerializationMode
        { Mixed = 0, ForceBinary = 1, ForceText = 2 }
        enum EditorBehaviorMode
        { Mode3D = 0, Mode2D = 1 }
        /** Sprite Packer mode for the current project.
        */
        enum SpritePackerMode
        { Disabled = 0, BuildTimeOnly = 1, AlwaysOn = 2, BuildTimeOnlyAtlas = 3, AlwaysOnAtlas = 4 }
        enum LineEndingsMode
        { OSNative = 0, Unix = 1, Windows = 2 }
        /** Selects the Assetpipeline mode to use.
        */
        enum AssetPipelineMode
        { Version1 = 0, Version2 = 1 }
        /** Selects the cache server configuration mode.
        */
        enum CacheServerMode
        { AsPreferences = 0, Enabled = 1, Disabled = 2 }
        /** Determines the flags for the Enter Play Mode Options in the Unity Editor.
        */
        enum EnterPlayModeOptions
        { None = 0, DisableDomainReload = 1, DisableSceneReload = 2 }
        class ExternalVersionControl extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public static Disabled : string
            public static AutoDetect : string
            public static Generic : string
            public static op_Implicit ($d: UnityEditor.ExternalVersionControl) : string
            public static op_Implicit ($d: string) : UnityEditor.ExternalVersionControl
            public constructor ($value: string)
            public constructor ()
        }
        class EditorSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            public static get unityRemoteDevice(): string;
            public static set unityRemoteDevice(value: string);
            public static get unityRemoteCompression(): string;
            public static set unityRemoteCompression(value: string);
            public static get unityRemoteResolution(): string;
            public static set unityRemoteResolution(value: string);
            public static get unityRemoteJoystickSource(): string;
            public static set unityRemoteJoystickSource(value: string);
            public static get externalVersionControl(): string;
            public static set externalVersionControl(value: string);
            public static get serializationMode(): UnityEditor.SerializationMode;
            public static set serializationMode(value: UnityEditor.SerializationMode);
            public static get lineEndingsForNewScripts(): UnityEditor.LineEndingsMode;
            public static set lineEndingsForNewScripts(value: UnityEditor.LineEndingsMode);
            public static get defaultBehaviorMode(): UnityEditor.EditorBehaviorMode;
            public static set defaultBehaviorMode(value: UnityEditor.EditorBehaviorMode);
            public static get prefabRegularEnvironment(): UnityEditor.SceneAsset;
            public static set prefabRegularEnvironment(value: UnityEditor.SceneAsset);
            public static get prefabUIEnvironment(): UnityEditor.SceneAsset;
            public static set prefabUIEnvironment(value: UnityEditor.SceneAsset);
            public static get spritePackerMode(): UnityEditor.SpritePackerMode;
            public static set spritePackerMode(value: UnityEditor.SpritePackerMode);
            public static get spritePackerPaddingPower(): number;
            public static set spritePackerPaddingPower(value: number);
            public static get etcTextureCompressorBehavior(): number;
            public static set etcTextureCompressorBehavior(value: number);
            public static get etcTextureFastCompressor(): number;
            public static set etcTextureFastCompressor(value: number);
            public static get etcTextureNormalCompressor(): number;
            public static set etcTextureNormalCompressor(value: number);
            public static get etcTextureBestCompressor(): number;
            public static set etcTextureBestCompressor(value: number);
            public static get enableTextureStreamingInEditMode(): boolean;
            public static set enableTextureStreamingInEditMode(value: boolean);
            public static get enableTextureStreamingInPlayMode(): boolean;
            public static set enableTextureStreamingInPlayMode(value: boolean);
            public static get asyncShaderCompilation(): boolean;
            public static set asyncShaderCompilation(value: boolean);
            public static get projectGenerationUserExtensions(): System.Array$1<string>;
            public static set projectGenerationUserExtensions(value: System.Array$1<string>);
            public static get projectGenerationBuiltinExtensions(): System.Array$1<string>;
            public static get projectGenerationRootNamespace(): string;
            public static set projectGenerationRootNamespace(value: string);
            public static get useLegacyProbeSampleCount(): boolean;
            public static set useLegacyProbeSampleCount(value: boolean);
            public static get enterPlayModeOptionsEnabled(): boolean;
            public static set enterPlayModeOptionsEnabled(value: boolean);
            public static get enterPlayModeOptions(): UnityEditor.EnterPlayModeOptions;
            public static set enterPlayModeOptions(value: UnityEditor.EnterPlayModeOptions);
            public static get assetPipelineMode(): UnityEditor.AssetPipelineMode;
            public static set assetPipelineMode(value: UnityEditor.AssetPipelineMode);
            public static get cacheServerMode(): UnityEditor.CacheServerMode;
            public static set cacheServerMode(value: UnityEditor.CacheServerMode);
            public static get cacheServerEndpoint(): string;
            public static set cacheServerEndpoint(value: string);
            public static get cacheServerNamespacePrefix(): string;
            public static set cacheServerNamespacePrefix(value: string);
            public static get cacheServerEnableDownload(): boolean;
            public static set cacheServerEnableDownload(value: boolean);
            public static get cacheServerEnableUpload(): boolean;
            public static set cacheServerEnableUpload(value: boolean);
        }
        /** SceneAsset is used to reference Scene objects in the Editor.
        */
        class SceneAsset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Type of build to generate.
        */
        enum PS4BuildSubtarget
        { PCHosted = 0, Package = 1, Iso = 2 }
        enum PS4HardwareTarget
        { BaseOnly = 0, NeoAndBase = 1, ProAndBase = 1 }
        /** Target Xbox build type.
        */
        enum XboxBuildSubtarget
        { Development = 0, Master = 1, Debug = 2 }
        enum XboxOneDeployMethod
        { Push = 0, Pull = 1, RunFromPC = 2, Package = 3, PackageStreaming = 4 }
        enum XboxOneDeployDrive
        { Default = 0, Retail = 1, Development = 2, Ext1 = 3, Ext2 = 4, Ext3 = 5, Ext4 = 6, Ext5 = 7, Ext6 = 8, Ext7 = 9 }
        enum AndroidBuildSubtarget
        { Generic = -1, DXT = -1, PVRTC = -1, ATC = -1, ETC = -1, ETC2 = -1, ASTC = -1 }
        /** Compressed texture format for target build platform.
        */
        enum MobileTextureSubtarget
        { Generic = 0, DXT = 1, PVRTC = 2, ATC = 3, ETC = 4, ETC2 = 5, ASTC = 6 }
        /** This enumeration has values for different qualities to decompress ETC2 textures on Android devices that don't support the ETC2 texture format.
        */
        enum AndroidETC2Fallback
        { Quality32Bit = 0, Quality16Bit = 1, Quality32BitDownscaled = 2 }
        /** Target device type for a Windows Store application to run on.
        */
        enum WSASubtarget
        { AnyDevice = 0, PC = 1, Mobile = 2, HoloLens = 3 }
        enum WSASDK
        { SDK80 = 0, SDK81 = 1, PhoneSDK81 = 2, UniversalSDK81 = 3, UWP = 4 }
        /** Determines the output build type when building to Universal Windows Platform.
        */
        enum WSAUWPBuildType
        { XAML = 0, D3D = 1, ExecutableOnly = 2 }
        /** Specifies the Windows device to deploy and launch the UWP app on when using Build and Run from the Editor.
        */
        enum WSABuildAndRunDeployTarget
        { LocalMachine = 0, WindowsPhone = 1, DevicePortal = 2 }
        /** Build configurations for Windows Store Visual Studio solutions.
        */
        enum WSABuildType
        { Debug = 0, Release = 1, Master = 2 }
        /** Build configurations for the generated Xcode project.
        */
        enum iOSBuildType
        { Debug = 0, Release = 1 }
        /** Type of Android build system.
        */
        enum AndroidBuildSystem
        { Internal = 0, Gradle = 1, ADT = 2, VisualStudio = 3 }
        /** Build configurations for the generated project.
        */
        enum AndroidBuildType
        { Debug = 0, Development = 1, Release = 2 }
        /** How to minify the java code of your binary.
        */
        enum AndroidMinification
        { None = 0, Proguard = 1, Gradle = 2 }
        /** User build settings for the Editor
        */
        class EditorUserBuildSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The currently selected build target group.
            */
            public static get selectedBuildTargetGroup(): UnityEditor.BuildTargetGroup;
            public static set selectedBuildTargetGroup(value: UnityEditor.BuildTargetGroup);
            /** The currently selected target for a standalone build.
            */
            public static get selectedStandaloneTarget(): UnityEditor.BuildTarget;
            public static set selectedStandaloneTarget(value: UnityEditor.BuildTarget);
            /** PS4 Build Subtarget.
            */
            public static get ps4BuildSubtarget(): UnityEditor.PS4BuildSubtarget;
            public static set ps4BuildSubtarget(value: UnityEditor.PS4BuildSubtarget);
            /** Specifies which version of PS4 hardware to target.
            */
            public static get ps4HardwareTarget(): UnityEditor.PS4HardwareTarget;
            public static set ps4HardwareTarget(value: UnityEditor.PS4HardwareTarget);
            /** Are null references actively validated?
            */
            public static get explicitNullChecks(): boolean;
            public static set explicitNullChecks(value: boolean);
            /** Are divide by zero's actively validated?
            */
            public static get explicitDivideByZeroChecks(): boolean;
            public static set explicitDivideByZeroChecks(value: boolean);
            /** Are array bounds actively validated?
            */
            public static get explicitArrayBoundsChecks(): boolean;
            public static set explicitArrayBoundsChecks(value: boolean);
            /** Build submission materials.
            */
            public static get needSubmissionMaterials(): boolean;
            public static set needSubmissionMaterials(value: boolean);
            /** Build data compressed with PSArc.
            */
            public static get compressWithPsArc(): boolean;
            public static set compressWithPsArc(value: boolean);
            /** Force installation of package, even if error.
            */
            public static get forceInstallation(): boolean;
            public static set forceInstallation(value: boolean);
            /** Places the package on the outer edge of the disk.
            */
            public static get movePackageToDiscOuterEdge(): boolean;
            public static set movePackageToDiscOuterEdge(value: boolean);
            /** Compress files in package.
            */
            public static get compressFilesInPackage(): boolean;
            public static set compressFilesInPackage(value: boolean);
            /** Whether the standalone player is built in headless mode.
            */
            public static get enableHeadlessMode(): boolean;
            public static set enableHeadlessMode(value: boolean);
            /** Is build script only enabled.
            */
            public static get buildScriptsOnly(): boolean;
            public static set buildScriptsOnly(value: boolean);
            /** Xbox Build subtarget.
            */
            public static get xboxBuildSubtarget(): UnityEditor.XboxBuildSubtarget;
            public static set xboxBuildSubtarget(value: UnityEditor.XboxBuildSubtarget);
            /** When building an Xbox One Streaming Install package (makepkg.exe) The layout generation code in Unity will assign each Scene and associated assets to individual chunks. Unity will mark Scene 0 as being part of the launch range, IE the set of chunks required to launch the game, you may include additional Scenes in this launch range if you desire, this specifies a range of Scenes (starting at 0) to be included in the launch set. 
            */
            public static get streamingInstallLaunchRange(): number;
            public static set streamingInstallLaunchRange(value: number);
            /** The currently selected Xbox One Deploy Method.
            */
            public static get xboxOneDeployMethod(): UnityEditor.XboxOneDeployMethod;
            public static set xboxOneDeployMethod(value: UnityEditor.XboxOneDeployMethod);
            /** The currently selected Xbox One Deploy Drive.
            */
            public static get xboxOneDeployDrive(): UnityEditor.XboxOneDeployDrive;
            public static set xboxOneDeployDrive(value: UnityEditor.XboxOneDeployDrive);
            public static get xboxOneAdditionalDebugPorts(): string;
            public static set xboxOneAdditionalDebugPorts(value: string);
            /** Sets the XBox to reboot and redeploy when the deployment fails.
            */
            public static get xboxOneRebootIfDeployFailsAndRetry(): boolean;
            public static set xboxOneRebootIfDeployFailsAndRetry(value: boolean);
            /** Android platform options.
            */
            public static get androidBuildSubtarget(): UnityEditor.MobileTextureSubtarget;
            public static set androidBuildSubtarget(value: UnityEditor.MobileTextureSubtarget);
            /** ETC2 texture decompression fallback on Android devices that don't support ETC2.
            */
            public static get androidETC2Fallback(): UnityEditor.AndroidETC2Fallback;
            public static set androidETC2Fallback(value: UnityEditor.AndroidETC2Fallback);
            public static get androidBuildSystem(): UnityEditor.AndroidBuildSystem;
            public static set androidBuildSystem(value: UnityEditor.AndroidBuildSystem);
            public static get androidBuildType(): UnityEditor.AndroidBuildType;
            public static set androidBuildType(value: UnityEditor.AndroidBuildType);
            public static get androidDebugMinification(): UnityEditor.AndroidMinification;
            public static set androidDebugMinification(value: UnityEditor.AndroidMinification);
            public static get androidReleaseMinification(): UnityEditor.AndroidMinification;
            public static set androidReleaseMinification(value: UnityEditor.AndroidMinification);
            /** Set to true to create a symbols.zip file in the same location as the .apk or .aab file.
            */
            public static get androidCreateSymbolsZip(): boolean;
            public static set androidCreateSymbolsZip(value: boolean);
            /** Sets and gets target device type for the application to run on when building to Windows Store platform.
            */
            public static get wsaSubtarget(): UnityEditor.WSASubtarget;
            public static set wsaSubtarget(value: UnityEditor.WSASubtarget);
            /** The build type for the Universal Windows Platform.
            */
            public static get wsaUWPBuildType(): UnityEditor.WSAUWPBuildType;
            public static set wsaUWPBuildType(value: UnityEditor.WSAUWPBuildType);
            /** Sets and gets target UWP SDK to build Windows Store application against.
            */
            public static get wsaUWPSDK(): string;
            public static set wsaUWPSDK(value: string);
            public static get wsaMinUWPSDK(): string;
            public static set wsaMinUWPSDK(value: string);
            public static get wsaArchitecture(): string;
            public static set wsaArchitecture(value: string);
            /** Sets and gets Visual Studio version to build Windows Store application with.
            */
            public static get wsaUWPVisualStudioVersion(): string;
            public static set wsaUWPVisualStudioVersion(value: string);
            /** Specifies the Windows DevicePortal connection address of the device to deploy and launch the UWP app on when using Build and Run.
            */
            public static get windowsDevicePortalAddress(): string;
            public static set windowsDevicePortalAddress(value: string);
            /** Specifies the Windows DevicePortal username for the device to deploy and launch the UWP app on when using Build and Run.
            */
            public static get windowsDevicePortalUsername(): string;
            public static set windowsDevicePortalUsername(value: string);
            /** Specifies the Windows DevicePortal password for the device to deploy and launch the UWP app on when using Build and Run.
            */
            public static get windowsDevicePortalPassword(): string;
            public static set windowsDevicePortalPassword(value: string);
            /** Sets and gets the Windows device to launch the UWP app when using Build and Run.
            */
            public static get wsaBuildAndRunDeployTarget(): UnityEditor.WSABuildAndRunDeployTarget;
            public static set wsaBuildAndRunDeployTarget(value: UnityEditor.WSABuildAndRunDeployTarget);
            /** The currently active build target.
            */
            public static get activeBuildTarget(): UnityEditor.BuildTarget;
            /** DEFINE directives for the compiler.
            */
            public static get activeScriptCompilationDefines(): System.Array$1<string>;
            /** Enables a development build.
            */
            public static get development(): boolean;
            public static set development(value: boolean);
            /** Start the player with a connection to the profiler.
            */
            public static get connectProfiler(): boolean;
            public static set connectProfiler(value: boolean);
            /** Enables Deep Profiling support in the player.
            */
            public static get buildWithDeepProfilingSupport(): boolean;
            public static set buildWithDeepProfilingSupport(value: boolean);
            /** Enable source-level debuggers to connect.
            */
            public static get allowDebugging(): boolean;
            public static set allowDebugging(value: boolean);
            /** Sets the Player to wait for player connection on player start.
            */
            public static get waitForPlayerConnection(): boolean;
            public static set waitForPlayerConnection(value: boolean);
            /** Export Android Project for use with Android Studio/Gradle.
            */
            public static get exportAsGoogleAndroidProject(): boolean;
            public static set exportAsGoogleAndroidProject(value: boolean);
            /** Set to true to build an Android App Bundle (aab file) instead of an apk. The default value is false.
            */
            public static get buildAppBundle(): boolean;
            public static set buildAppBundle(value: boolean);
            /** Symlink runtime libraries with an iOS Xcode project.
            */
            public static get symlinkLibraries(): boolean;
            public static set symlinkLibraries(value: boolean);
            /** Scheme with which the project will be run in Xcode.
            */
            public static get iOSBuildConfigType(): UnityEditor.iOSBuildType;
            public static set iOSBuildConfigType(value: UnityEditor.iOSBuildType);
            public static get switchCreateSolutionFile(): boolean;
            public static set switchCreateSolutionFile(value: boolean);
            public static get switchCreateRomFile(): boolean;
            public static set switchCreateRomFile(value: boolean);
            public static get switchNVNGraphicsDebugger(): boolean;
            public static set switchNVNGraphicsDebugger(value: boolean);
            public static get switchNVNShaderDebugging(): boolean;
            public static set switchNVNShaderDebugging(value: boolean);
            public static get switchNVNDrawValidation(): boolean;
            public static set switchNVNDrawValidation(value: boolean);
            public static get switchEnableHeapInspector(): boolean;
            public static set switchEnableHeapInspector(value: boolean);
            public static get switchEnableDebugPad(): boolean;
            public static set switchEnableDebugPad(value: boolean);
            public static get switchRedirectWritesToHostMount(): boolean;
            public static set switchRedirectWritesToHostMount(value: boolean);
            /** Place the built player in the build folder.
            */
            public static get installInBuildFolder(): boolean;
            public static set installInBuildFolder(value: boolean);
            /** Instructs the player to wait for managed debugger to attach before executing any script code.
            */
            public static get waitForManagedDebugger(): boolean;
            public static set waitForManagedDebugger(value: boolean);
            /** Select a new build target to be active.
            * @param target Target build platform.
            * @param targetGroup Build target group.
            * @returns True if the build target was successfully switched, false otherwise (for example, if license checks fail, files are missing, or if the user has cancelled the operation via the UI). 
            */
            public static SwitchActiveBuildTarget ($targetGroup: UnityEditor.BuildTargetGroup, $target: UnityEditor.BuildTarget) : boolean
            /** Select a new build target to be active during the next Editor update.
            * @param targetGroup Target build platform.
            * @param target Build target group.
            * @returns True if the build target was successfully switched, false otherwise (for example, if license checks fail, files are missing, or if the user has cancelled the operation via the UI). 
            */
            public static SwitchActiveBuildTargetAsync ($targetGroup: UnityEditor.BuildTargetGroup, $target: UnityEditor.BuildTarget) : boolean
            /** Get the current location for the build.
            */
            public static GetBuildLocation ($target: UnityEditor.BuildTarget) : string
            /** Set a new location for the build.
            */
            public static SetBuildLocation ($target: UnityEditor.BuildTarget, $location: string) : void
            /** Set platform specifc Editor setting.
            * @param platformName The name of the platform.
            * @param name The name of the setting.
            * @param value Setting value.
            */
            public static SetPlatformSettings ($platformName: string, $name: string, $value: string) : void
            public static SetPlatformSettings ($buildTargetGroup: string, $buildTarget: string, $name: string, $value: string) : void
            /** Returns value for platform specifc Editor setting.
            * @param platformName The name of the platform.
            * @param name The name of the setting.
            */
            public static GetPlatformSettings ($platformName: string, $name: string) : string
            public static GetPlatformSettings ($buildTargetGroup: string, $platformName: string, $name: string) : string
        }
        /** Behavior of semantic merge.
        */
        enum SemanticMergeMode
        { Off = 0, Premerge = 1, Ask = 2 }
        class EditorUserSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            public static get AutomaticAdd(): boolean;
            public static set AutomaticAdd(value: boolean);
            public static get WorkOffline(): boolean;
            public static set WorkOffline(value: boolean);
            public static get showFailedCheckout(): boolean;
            public static set showFailedCheckout(value: boolean);
            public static get overwriteFailedCheckoutAssets(): boolean;
            public static set overwriteFailedCheckoutAssets(value: boolean);
            public static get overlayIcons(): boolean;
            public static set overlayIcons(value: boolean);
            public static get allowAsyncStatusUpdate(): boolean;
            public static set allowAsyncStatusUpdate(value: boolean);
            public static get semanticMergeMode(): UnityEditor.SemanticMergeMode;
            public static set semanticMergeMode(value: UnityEditor.SemanticMergeMode);
            public static GetConfigValue ($name: string) : string
            public static SetConfigValue ($name: string, $value: string) : void
        }
        /** Editor utility functions.
        */
        class EditorUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get audioMasterMute(): boolean;
            public static set audioMasterMute(value: boolean);
            /** True if there are any compilation error messages in the log.
            */
            public static get scriptCompilationFailed(): boolean;
            /** Displays the "open file" dialog and returns the selected path name.
            */
            public static OpenFilePanel ($title: string, $directory: string, $extension: string) : string
            /** Displays the "open file" dialog and returns the selected path name.
            * @param title Title for dialog.
            * @param directory Default directory.
            * @param filters File extensions in form { "Image files", "png,jpg,jpeg", "All files", "*" }.
            */
            public static OpenFilePanelWithFilters ($title: string, $directory: string, $filters: System.Array$1<string>) : string
            public static RevealInFinder ($path: string) : void
            /** This method displays a modal dialog.
            * @param title The title of the message box.
            * @param message The text of the message.
            * @param ok Label displayed on the OK dialog button.
            * @param cancel Label displayed on the Cancel dialog button.
            * @returns Returns true if the user clicks the OK button. Returns false otherwise. 
            */
            public static DisplayDialog ($title: string, $message: string, $ok: string, $cancel: string) : boolean
            /** This method displays a modal dialog.
            * @param title The title of the message box.
            * @param message The text of the message.
            * @param ok Label displayed on the OK dialog button.
            * @param cancel Label displayed on the Cancel dialog button.
            * @returns Returns true if the user clicks the OK button. Returns false otherwise. 
            */
            public static DisplayDialog ($title: string, $message: string, $ok: string) : boolean
            /** Displays a modal dialog with three buttons.
            * @param title Title for dialog.
            * @param message Purpose for the dialog.
            * @param ok Dialog function chosen.
            * @param cancel Close dialog with no operation.
            * @param alt Choose alternative dialog purpose.
            * @returns Returns the id of the chosen button. The ids are 0, 1 or 2 corresponding to the ok, cancel and alt buttons respectively. 
            */
            public static DisplayDialogComplex ($title: string, $message: string, $ok: string, $cancel: string, $alt: string) : number
            /** Displays the "open folder" dialog and returns the selected path name.
            */
            public static OpenFolderPanel ($title: string, $folder: string, $defaultName: string) : string
            /** Displays the "save folder" dialog and returns the selected path name.
            */
            public static SaveFolderPanel ($title: string, $folder: string, $defaultName: string) : string
            public static WarnPrefab ($target: UnityEngine.Object, $title: string, $warning: string, $okButton: string) : boolean
            /** Determines if an object is stored on disk.
            */
            public static IsPersistent ($target: UnityEngine.Object) : boolean
            /** Displays the "save file" dialog and returns the selected path name.
            */
            public static SaveFilePanel ($title: string, $directory: string, $defaultName: string, $extension: string) : string
            /** Human-like sorting.
            */
            public static NaturalCompare ($a: string, $b: string) : number
            /** Translates an instance ID to a reference to an object.
            */
            public static InstanceIDToObject ($instanceID: number) : UnityEngine.Object
            /** Compress a texture.
            */
            public static CompressTexture ($texture: UnityEngine.Texture2D, $format: UnityEngine.TextureFormat, $quality: number) : void
            /** Compress a cubemap texture.
            */
            public static CompressCubemapTexture ($texture: UnityEngine.Cubemap, $format: UnityEngine.TextureFormat, $quality: number) : void
            /** Marks target object as dirty. (Only suitable for non-scene objects).
            * @param target The object to mark as dirty.
            */
            public static SetDirty ($target: UnityEngine.Object) : void
            /** Clear target's dirty flag.
            */
            public static ClearDirty ($target: UnityEngine.Object) : void
            public static InvokeDiffTool ($leftTitle: string, $leftFile: string, $rightTitle: string, $rightFile: string, $ancestorTitle: string, $ancestorFile: string) : string
            /** Copy all settings of a Unity Object.
            */
            public static CopySerialized ($source: UnityEngine.Object, $dest: UnityEngine.Object) : void
            /** Copies the serializable fields from one managed object to another.
            * @param source The object to copy data from.
            * @param dest The object to copy data to.
            */
            public static CopySerializedManagedFieldsOnly ($source: any, $dest: any) : void
            /** Calculates and returns a list of all assets the assets listed in roots depend on.
            */
            public static CollectDependencies ($roots: System.Array$1<UnityEngine.Object>) : System.Array$1<UnityEngine.Object>
            /** Collect all objects in the hierarchy rooted at each of the given objects.
            * @param roots Array of objects where the search will start.
            * @returns Array of objects heirarchically attached to the search array. 
            */
            public static CollectDeepHierarchy ($roots: System.Array$1<UnityEngine.Object>) : System.Array$1<UnityEngine.Object>
            public static FormatBytes ($bytes: bigint) : string
            /** Displays or updates a progress bar.
            */
            public static DisplayProgressBar ($title: string, $info: string, $progress: number) : void
            /** Displays or updates a progress bar that has a cancel button.
            */
            public static DisplayCancelableProgressBar ($title: string, $info: string, $progress: number) : boolean
            public static ClearProgressBar () : void
            /** Is the object enabled (0 disabled, 1 enabled, -1 has no enabled button).
            */
            public static GetObjectEnabled ($target: UnityEngine.Object) : number
            /** Set the enabled state of the object.
            */
            public static SetObjectEnabled ($target: UnityEngine.Object, $enabled: boolean) : void
            /** Set the Scene View selected display mode for this Renderer.
            */
            public static SetSelectedRenderState ($renderer: UnityEngine.Renderer, $renderState: UnityEditor.EditorSelectedRenderState) : void
            public static OpenWithDefaultApp ($fileName: string) : void
            /** Sets this camera to allow animation of materials in the Editor.
            */
            public static SetCameraAnimateMaterials ($camera: UnityEngine.Camera, $animate: boolean) : void
            /** Sets the global time for this camera to use when rendering.
            */
            public static SetCameraAnimateMaterialsTime ($camera: UnityEngine.Camera, $time: number) : void
            /** Updates the global shader properties to use when rendering.
            * @param time Time to use. -1 to disable.
            */
            public static UpdateGlobalShaderProperties ($time: number) : void
            /** Returns an integer that indicates the number of times the specified object's serialized properties have changed.
            * @param instanceID The object's instance ID.
            * @param target The object.
            */
            public static GetDirtyCount ($instanceID: number) : number
            /** Returns an integer that indicates the number of times the specified object's serialized properties have changed.
            * @param instanceID The object's instance ID.
            * @param target The object.
            */
            public static GetDirtyCount ($target: UnityEngine.Object) : number
            /** Gets a boolean value that indicates whether the specified object has changed since the last time it was saved.
            * @param instanceID The object's instance ID.
            * @param target The object.
            * @returns True if the object has changed; otherwise false. 
            */
            public static IsDirty ($instanceID: number) : boolean
            /** Gets a boolean value that indicates whether the specified object has changed since the last time it was saved.
            * @param instanceID The object's instance ID.
            * @param target The object.
            * @returns True if the object has changed; otherwise false. 
            */
            public static IsDirty ($target: UnityEngine.Object) : boolean
            public static FocusProjectWindow () : void
            public static RequestScriptReload () : void
            public static LoadWindowLayout ($path: string) : boolean
            /** Compress a texture.
            */
            public static CompressTexture ($texture: UnityEngine.Texture2D, $format: UnityEngine.TextureFormat, $quality: UnityEditor.TextureCompressionQuality) : void
            /** Compress a cubemap texture.
            */
            public static CompressCubemapTexture ($texture: UnityEngine.Cubemap, $format: UnityEngine.TextureFormat, $quality: UnityEditor.TextureCompressionQuality) : void
            /** Displays the "save file" dialog in the Assets folder of the project and returns the selected path name.
            */
            public static SaveFilePanelInProject ($title: string, $defaultName: string, $extension: string, $message: string) : string
            public static SaveFilePanelInProject ($title: string, $defaultName: string, $extension: string, $message: string, $path: string) : string
            /** Copy all settings of a Unity Object to a second Object if they differ.
            */
            public static CopySerializedIfDifferent ($source: UnityEngine.Object, $dest: UnityEngine.Object) : void
            public static UnloadUnusedAssetsImmediate () : void
            public static UnloadUnusedAssetsImmediate ($includeMonoReferencesAsRoots: boolean) : void
            /** This method displays a modal dialog that lets the user opt-out of being shown the current dialog box again.
            * @param dialogOptOutDecisionType The type of opt-out decision a user can make.
            * @param dialogOptOutDecisionStorageKey The unique key setting to store the decision under.
            * @returns true if the user previously opted out of seeing the dialog associated with dialogOptOutDecisionStorageKey. Returns false if the user did not yet opt out. 
            */
            public static GetDialogOptOutDecision ($dialogOptOutDecisionType: UnityEditor.DialogOptOutDecisionType, $dialogOptOutDecisionStorageKey: string) : boolean
            /** This method displays a modal dialog that lets the user opt-out of being shown the current dialog box again.
            * @param dialogOptOutDecisionType The type of opt-out decision a user can make.
            * @param dialogOptOutDecisionStorageKey The unique key setting to store the decision under.
            * @param optOutDecision The unique key setting to store the decision under.
            */
            public static SetDialogOptOutDecision ($dialogOptOutDecisionType: UnityEditor.DialogOptOutDecisionType, $dialogOptOutDecisionStorageKey: string, $optOutDecision: boolean) : void
            /** This method displays a modal dialog that lets the user opt-out of being shown the current dialog box again.
            * @param title The title of the message box.
            * @param message The text of the message.
            * @param ok Label displayed on the OK dialog button.
            * @param cancel Label displayed on the Cancel dialog button.
            * @param dialogOptOutDecisionType The type of opt-out decision a user can make.
            * @param dialogOptOutDecisionStorageKey The unique key setting to store the decision under.
            * @returns true if the user clicks the ok button, or previously opted out. Returns false if the user cancels or closes the dialog without making a decision. 
            */
            public static DisplayDialog ($title: string, $message: string, $ok: string, $dialogOptOutDecisionType: UnityEditor.DialogOptOutDecisionType, $dialogOptOutDecisionStorageKey: string) : boolean
            /** This method displays a modal dialog that lets the user opt-out of being shown the current dialog box again.
            * @param title The title of the message box.
            * @param message The text of the message.
            * @param ok Label displayed on the OK dialog button.
            * @param cancel Label displayed on the Cancel dialog button.
            * @param dialogOptOutDecisionType The type of opt-out decision a user can make.
            * @param dialogOptOutDecisionStorageKey The unique key setting to store the decision under.
            * @returns true if the user clicks the ok button, or previously opted out. Returns false if the user cancels or closes the dialog without making a decision. 
            */
            public static DisplayDialog ($title: string, $message: string, $ok: string, $cancel: string, $dialogOptOutDecisionType: UnityEditor.DialogOptOutDecisionType, $dialogOptOutDecisionStorageKey: string) : boolean
            /** Displays a popup menu.
            */
            public static DisplayPopupMenu ($position: UnityEngine.Rect, $menuItemPath: string, $command: UnityEditor.MenuCommand) : void
            public static DisplayCustomMenu ($position: UnityEngine.Rect, $options: System.Array$1<UnityEngine.GUIContent>, $selected: number, $callback: UnityEditor.EditorUtility.SelectMenuItemFunction, $userData: any) : void
            public static DisplayCustomMenu ($position: UnityEngine.Rect, $options: System.Array$1<UnityEngine.GUIContent>, $selected: number, $callback: UnityEditor.EditorUtility.SelectMenuItemFunction, $userData: any, $showHotkey: boolean) : void
            public static DisplayCustomMenu ($position: UnityEngine.Rect, $options: System.Array$1<UnityEngine.GUIContent>, $checkEnabled: System.Func$2<number, boolean>, $selected: number, $callback: UnityEditor.EditorUtility.SelectMenuItemFunction, $userData: any, $showHotkey?: boolean) : void
            /** Returns a text for a number of bytes.
            */
            public static FormatBytes ($bytes: number) : string
            /** Creates a game object with HideFlags and specified components.
            */
            public static CreateGameObjectWithHideFlags ($name: string, $flags: UnityEngine.HideFlags, ...components: System.Type[]) : UnityEngine.GameObject
            public static CompileCSharp ($sources: System.Array$1<string>, $references: System.Array$1<string>, $defines: System.Array$1<string>, $outputFile: string) : System.Array$1<string>
            public static DisplayCustomMenuWithSeparators ($position: UnityEngine.Rect, $options: System.Array$1<string>, $enabled: System.Array$1<boolean>, $separator: System.Array$1<boolean>, $selected: System.Array$1<number>, $callback: UnityEditor.EditorUtility.SelectMenuItemFunction, $userData: any) : void
            public constructor ()
        }
        /** The editor selected render mode for Scene View selection.
        */
        enum EditorSelectedRenderState
        { Hidden = 0, Wireframe = 1, Highlight = 2 }
        /** Compression Quality.
        */
        enum TextureCompressionQuality
        { Fast = 0, Normal = 50, Best = 100 }
        /** The type of opt-out decision a user can make.
        */
        enum DialogOptOutDecisionType
        { ForThisMachine = 0, ForThisSession = 1 }
        /** Used to extract the context for a MenuItem.
        */
        class MenuCommand extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Context is the object that is the target of a menu command.
            */
            public context : UnityEngine.Object
            /** An integer for passing custom information to a menu item.
            */
            public userData : number
            public constructor ($inContext: UnityEngine.Object, $inUserData: number)
            public constructor ($inContext: UnityEngine.Object)
            public constructor ()
        }
        /** Flags for the PrefabUtility.ReplacePrefab function.
        */
        enum ReplacePrefabOptions
        { Default = 0, ConnectToPrefab = 1, ReplaceNameBased = 2 }
        /** The type of a Prefab object as returned by PrefabUtility.GetPrefabType.
        */
        enum PrefabType
        { None = 0, Prefab = 1, ModelPrefab = 2, PrefabInstance = 3, ModelPrefabInstance = 4, MissingPrefabInstance = 5, DisconnectedPrefabInstance = 6, DisconnectedModelPrefabInstance = 7 }
        /** The mode of interaction, user or automated, that an API method is called with.
        */
        enum InteractionMode
        { AutomatedAction = 0, UserAction = 1 }
        /** Export package option. Multiple options can be combined together using the | operator.
        */
        enum ExportPackageOptions
        { Default = 0, Interactive = 1, Recurse = 2, IncludeDependencies = 4, IncludeLibraryAssets = 8 }
        /** Lets you do move, copy, delete operations over files or directories.
        */
        class FileUtil extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Deletes a file or a directory given a path.
            */
            public static DeleteFileOrDirectory ($path: string) : boolean
            /** Copies a file or a directory.
            */
            public static CopyFileOrDirectory ($source: string, $dest: string) : void
            /** Copies the file or directory.
            */
            public static CopyFileOrDirectoryFollowSymlinks ($source: string, $dest: string) : void
            /** Moves a file or a directory from a given path to another path.
            */
            public static MoveFileOrDirectory ($source: string, $dest: string) : void
            public static GetUniqueTempPathInProject () : string
            public static GetProjectRelativePath ($path: string) : string
            /** Replaces a file.
            */
            public static ReplaceFile ($src: string, $dst: string) : void
            /** Replaces a directory.
            */
            public static ReplaceDirectory ($src: string, $dst: string) : void
            public constructor ()
        }
        /** GameObject utility functions.
        */
        class GameObjectUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Gets the StaticEditorFlags of the GameObject specified.
            * @param go The GameObject whose flags you are interested in.
            * @returns The static editor flags of the GameObject specified. 
            */
            public static GetStaticEditorFlags ($go: UnityEngine.GameObject) : UnityEditor.StaticEditorFlags
            /** Sets the StaticEditorFlags of the specified GameObject.
            * @param go The GameObject whose Static Editor Flags you want to set.
            * @param flags The StaticEditorFlags to set on the GameObject.
            */
            public static SetStaticEditorFlags ($go: UnityEngine.GameObject, $flags: UnityEditor.StaticEditorFlags) : void
            /** Returns true if the passed in StaticEditorFlags are set on the GameObject specified.
            * @param go The GameObject to check.
            * @param flags The flags you want to check.
            * @returns Whether the GameObject's static flags match the flags specified. 
            */
            public static AreStaticEditorFlagsSet ($go: UnityEngine.GameObject, $flags: UnityEditor.StaticEditorFlags) : boolean
            /** Get the navmesh area index for the GameObject.
            * @param go The GameObject to query.
            * @returns NavMesh area index. 
            */
            public static GetNavMeshArea ($go: UnityEngine.GameObject) : number
            /** Set the navmesh area for the gameobject.
            * @param go GameObject to modify.
            * @param areaIndex NavMesh area index to set.
            */
            public static SetNavMeshArea ($go: UnityEngine.GameObject, $areaIndex: number) : void
            /** Get the navmesh area index from the area name.
            * @param name NavMesh area name to query.
            * @returns The NavMesh area index. If there is no NavMesh area with the requested name, the return value is -1. 
            */
            public static GetNavMeshAreaFromName ($name: string) : number
            public static GetNavMeshAreaNames () : System.Array$1<string>
            /** You can use this method before instantiating a new sibling, or before parenting one GameObject to another, to ensure the new child GameObject has a unique name compared to its siblings in the hierarchy.
            * @param parent Target parent for a new GameObject. Null means root level.
            * @param name Requested name for a new GameObject.
            * @returns Unique name for a new GameObject. 
            */
            public static GetUniqueNameForSibling ($parent: UnityEngine.Transform, $name: string) : string
            /** You can use this method after parenting one GameObject to another to ensure the child GameObject has a unique name compared to its siblings in the hierarchy.
            * @param self The GameObject whose name you want to ensure is unique.
            */
            public static EnsureUniqueNameForSibling ($self: UnityEngine.GameObject) : void
            /** Sets the parent and gives the child the same layer and position.
            * @param child The GameObject that should have a new parent set.
            * @param parent The GameObject that the child should get as a parent and have position and layer copied from. If null, this function does nothing.
            */
            public static SetParentAndAlign ($child: UnityEngine.GameObject, $parent: UnityEngine.GameObject) : void
            /** Gets the number of MonoBehaviours with a missing script for the given GameObject.
            * @param go GameObject to query.
            * @returns The number of MonoBehaviours with a missing script. 
            */
            public static GetMonoBehavioursWithMissingScriptCount ($go: UnityEngine.GameObject) : number
            /** Removes the MonoBehaviours with a missing script from the given GameObject.
            * @param go The GameObject to remove MonoBehaviours with a missing script from.
            * @returns The number of MonoBehaviours with a missing script that were removed. 
            */
            public static RemoveMonoBehavioursWithMissingScript ($go: UnityEngine.GameObject) : number
            public constructor ()
        }
        /** Describes which Unity systems consider the GameObject as static, and include the GameObject in their precomputations in the Unity Editor.
        */
        enum StaticEditorFlags
        { ContributeGI = 1, OccluderStatic = 2, OccludeeStatic = 16, BatchingStatic = 4, NavigationStatic = 8, OffMeshLinkGeneration = 32, ReflectionProbeStatic = 64, LightmapStatic = 1 }
        /** Struct providing an API for stable, project-global object identifiers.
        */
        class GlobalObjectId extends System.ValueType implements System.IEquatable$1<UnityEditor.GlobalObjectId>
        {
            protected [__keep_incompatibility]: never;
            /** The local file ID of the object.
            */
            public get targetObjectId(): bigint;
            /** The prefab instance id of the object.
            */
            public get targetPrefabId(): bigint;
            /** The GUID for the asset to which this object belongs.
            */
            public get assetGUID(): UnityEditor.GUID;
            /** The identifier type represented as an integer.
            */
            public get identifierType(): number;
            /** Converts an Object reference to a GlobalObjectId.
            * @param targetObject The Object to be converted.
            * @returns The converted GlobalObjectId. If the conversion is unsuccessful, the GlobalObjectId is set to the default null ID: "GlobalObjectId_V1-0-00000000000000000000000000000000-0-0". 
            */
            public static GetGlobalObjectIdSlow ($targetObject: UnityEngine.Object) : UnityEditor.GlobalObjectId
            /** Creates an array of GlobalObjectIds based on an array of Objects.
            * @param objects Array of Objects to convert.
            * @param outputIdentifiers Resulting array of GlobalObjectIds.
            */
            public static GetGlobalObjectIdsSlow ($objects: System.Array$1<UnityEngine.Object>, $outputIdentifiers: System.Array$1<UnityEditor.GlobalObjectId>) : void
            /** Check equality between two GlobalObjectIds.
            */
            public Equals ($other: UnityEditor.GlobalObjectId) : boolean
            /** Parses the string representation of a GlobalObjectId into a GlobalObjectId struct.
            * @param stringValue The string representation of a GlobalObjectId.
            Example: "GlobalObjectId_V1-2-74c253e3f16be4776bb2d88e01f77c8a-902906726-0".
            * @param id The GlobalObjectId struct for the parsed values.
            * @returns Returns true if the string representation is successfully parsed. Otherwise, returns false. 
            */
            public static TryParse ($stringValue: string, $id: $Ref<UnityEditor.GlobalObjectId>) : boolean
            /** Converts a GlobalObjectId to an Object reference.
            * @param id The GlobalObjectId to lookup.
            * @returns If the GlobalObjectId is found, this method returns the converted Object reference. Returns null if the GlobalObjectId is not found. 
            */
            public static GlobalObjectIdentifierToObjectSlow ($id: UnityEditor.GlobalObjectId) : UnityEngine.Object
            /** Creates an array of Objects based on an array of GlobalObjectIds.
            * @param identifiers Array of GlobalObjectIds to convert.
            * @param outputObjects Resulting array of Object references.
            */
            public static GlobalObjectIdentifiersToObjectsSlow ($identifiers: System.Array$1<UnityEditor.GlobalObjectId>, $outputObjects: System.Array$1<UnityEngine.Object>) : void
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        /** Helper functions for Scene View style 3D GUI.
        */
        class HandleUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Get standard acceleration for dragging values (Read Only).
            */
            public static get acceleration(): number;
            /** Get nice mouse delta to use for dragging a float value (Read Only).
            */
            public static get niceMouseDelta(): number;
            /** Get nice mouse delta to use for zooming (Read Only).
            */
            public static get niceMouseDeltaZoom(): number;
            public static get nearestControl(): number;
            public static set nearestControl(value: number);
            public static get handleMaterial(): UnityEngine.Material;
            /** Calculate distance between a point and a Bezier curve.
            */
            public static DistancePointBezier ($point: UnityEngine.Vector3, $startPosition: UnityEngine.Vector3, $endPosition: UnityEngine.Vector3, $startTangent: UnityEngine.Vector3, $endTangent: UnityEngine.Vector3) : number
            /** Map a mouse drag onto a movement along a line in 3D space.
            * @param src The source point of the drag.
            * @param dest The destination point of the drag.
            * @param srcPosition The 3D position the dragged object had at src ray.
            * @param constraintDir 3D direction of constrained movement.
            * @returns The distance travelled along constraintDir. 
            */
            public static CalcLineTranslation ($src: UnityEngine.Vector2, $dest: UnityEngine.Vector2, $srcPosition: UnityEngine.Vector3, $constraintDir: UnityEngine.Vector3) : number
            /** Returns the parameter for the projection of the point on the given line.
            */
            public static PointOnLineParameter ($point: UnityEngine.Vector3, $linePoint: UnityEngine.Vector3, $lineDirection: UnityEngine.Vector3) : number
            /** Project point onto a line.
            */
            public static ProjectPointLine ($point: UnityEngine.Vector3, $lineStart: UnityEngine.Vector3, $lineEnd: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Calculate distance between a point and a line.
            */
            public static DistancePointLine ($point: UnityEngine.Vector3, $lineStart: UnityEngine.Vector3, $lineEnd: UnityEngine.Vector3) : number
            /** Pixel distance from mouse pointer to line.
            */
            public static DistanceToLine ($p1: UnityEngine.Vector3, $p2: UnityEngine.Vector3) : number
            /** Pixel distance from mouse pointer to camera facing circle.
            */
            public static DistanceToCircle ($position: UnityEngine.Vector3, $radius: number) : number
            /** Pixel distance from mouse pointer to a rectangle on screen.
            */
            public static DistanceToRectangle ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number) : number
            /** Distance from a point p in 2d to a line defined by two points a and b.
            */
            public static DistancePointToLine ($p: UnityEngine.Vector2, $a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : number
            /** Distance from a point p in 2d to a line segment defined by two points a and b.
            */
            public static DistancePointToLineSegment ($p: UnityEngine.Vector2, $a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : number
            /** Pixel distance from mouse pointer to a 3D disc.
            */
            public static DistanceToDisc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $radius: number) : number
            /** Get the point on an disc (in 3D space) which is closest to the current mouse position.
            */
            public static ClosestPointToDisc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $radius: number) : UnityEngine.Vector3
            /** Pixel distance from mouse pointer to a 3D section of a disc.
            */
            public static DistanceToArc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $from: UnityEngine.Vector3, $angle: number, $radius: number) : number
            /** Get the point on an arc (in 3D space) which is closest to the current mouse position.
            */
            public static ClosestPointToArc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $from: UnityEngine.Vector3, $angle: number, $radius: number) : UnityEngine.Vector3
            /** Pixel distance from mouse pointer to a polyline.
            */
            public static DistanceToPolyLine (...points: UnityEngine.Vector3[]) : number
            /** Get the point on a polyline (in 3D space) which is closest to the current mouse position.
            */
            public static ClosestPointToPolyLine (...vertices: UnityEngine.Vector3[]) : UnityEngine.Vector3
            /** Record a distance measurement from a handle.
            */
            public static AddControl ($controlId: number, $distance: number) : void
            /** Add the ID for a default control. This will be picked if nothing else is.
            */
            public static AddDefaultControl ($controlId: number) : void
            /** Get world space size of a manipulator handle at given position.
            * @param position The position of the handle in 3d space.
            * @returns A constant screen-size for the handle, based on the distance between from the supplied handle's position to the camera. 
            */
            public static GetHandleSize ($position: UnityEngine.Vector3) : number
            /** Convert a world space point to a 2D GUI position.
            * @param world Point in world space.
            */
            public static WorldToGUIPoint ($world: UnityEngine.Vector3) : UnityEngine.Vector2
            /** Convert a world space point to a 2D GUI position.
            * @param world Point in world space.
            * @returns A Vector3 where the x and y values relate to the 2D GUI position. The z value is the distance in world units from the camera. 
            */
            public static WorldToGUIPointWithDepth ($world: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Converts a 2D GUI position to screen pixel coordinates.
            */
            public static GUIPointToScreenPixelCoordinate ($guiPoint: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Convert 2D GUI position to a world space ray.
            */
            public static GUIPointToWorldRay ($position: UnityEngine.Vector2) : UnityEngine.Ray
            /** Calculate a rectangle to display a 2D GUI element near a projected point in 3D space.
            * @param position The world-space position to use.
            * @param content The content to make room for.
            * @param style The style to use. The style's alignment.
            */
            public static WorldPointToSizedRect ($position: UnityEngine.Vector3, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Pick GameObjects that lie within a specified screen rectangle.
            * @param rect An screen rectangle specified with pixel coordinates.
            */
            public static PickRectObjects ($rect: UnityEngine.Rect) : System.Array$1<UnityEngine.GameObject>
            public static PickRectObjects ($rect: UnityEngine.Rect, $selectPrefabRootsOnly: boolean) : System.Array$1<UnityEngine.GameObject>
            /** Pick game object closest to specified position.
            * @param selectPrefabRoot Select Prefab.
            * @param materialIndex Returns index into material array of the Renderer component that is closest to specified position.
            */
            public static PickGameObject ($position: UnityEngine.Vector2, $materialIndex: $Ref<number>) : UnityEngine.GameObject
            public static PickGameObject ($position: UnityEngine.Vector2, $ignore: System.Array$1<UnityEngine.GameObject>, $materialIndex: $Ref<number>) : UnityEngine.GameObject
            /** Pick game object closest to specified position.
            * @param selectPrefabRoot Select Prefab.
            * @param materialIndex Returns index into material array of the Renderer component that is closest to specified position.
            */
            public static PickGameObject ($position: UnityEngine.Vector2, $selectPrefabRoot: boolean) : UnityEngine.GameObject
            public static PickGameObject ($position: UnityEngine.Vector2, $selectPrefabRoot: boolean, $ignore: System.Array$1<UnityEngine.GameObject>) : UnityEngine.GameObject
            /** Store all camera settings.
            */
            public static PushCamera ($camera: UnityEngine.Camera) : void
            /** Retrieve all camera settings.
            */
            public static PopCamera ($camera: UnityEngine.Camera) : void
            /** Casts ray against the Scene and report if an object lies in its path.
            * @returns A boxed RaycastHit, null if nothing hit it. 
            */
            public static RaySnap ($ray: UnityEngine.Ray) : any
            public static Repaint () : void
            public constructor ()
        }
        /** Custom 3D GUI controls and drawing in the Scene view.
        */
        class Handles extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Are handles lit?
            */
            public static get lighting(): boolean;
            public static set lighting(value: boolean);
            /** Colors of the handles.
            */
            public static get color(): UnityEngine.Color;
            public static set color(value: UnityEngine.Color);
            /** zTest of the handles.
            */
            public static get zTest(): UnityEngine.Rendering.CompareFunction;
            public static set zTest(value: UnityEngine.Rendering.CompareFunction);
            /** Matrix for all handle operations.
            */
            public static get matrix(): UnityEngine.Matrix4x4;
            public static set matrix(value: UnityEngine.Matrix4x4);
            /** The inverse of the matrix for all handle operations.
            */
            public static get inverseMatrix(): UnityEngine.Matrix4x4;
            /** Color to use for handles that manipulates the X coordinate of something.
            */
            public static get xAxisColor(): UnityEngine.Color;
            /** Color to use for handles that manipulates the Y coordinate of something.
            */
            public static get yAxisColor(): UnityEngine.Color;
            /** Color to use for handles that manipulates the Z coordinate of something.
            */
            public static get zAxisColor(): UnityEngine.Color;
            /** Color to use for handles that represent the center of something.
            */
            public static get centerColor(): UnityEngine.Color;
            /** Color to use for the currently active handle.
            */
            public static get selectedColor(): UnityEngine.Color;
            /** Color to use to highlight an unselected handle currently under the mouse pointer.
            */
            public static get preselectionColor(): UnityEngine.Color;
            /** Soft color to use for for general things.
            */
            public static get secondaryColor(): UnityEngine.Color;
            /** Setup viewport and stuff for a current camera.
            */
            public get currentCamera(): UnityEngine.Camera;
            public set currentCamera(value: UnityEngine.Camera);
            /** Draw a line going through the list of points.
            */
            public static DrawPolyLine (...points: UnityEngine.Vector3[]) : void
            /** Draw a line from p1 to p2.
            */
            public static DrawLine ($p1: UnityEngine.Vector3, $p2: UnityEngine.Vector3) : void
            /** Draw a list of line segments.
            * @param lineSegments A list of pairs of points that represent the start and end of line segments.
            */
            public static DrawLines ($lineSegments: System.Array$1<UnityEngine.Vector3>) : void
            /** Draw a list of indexed line segments.
            * @param points A list of points.
            * @param segmentIndices A list of pairs of indices to the start and end points of the line segments.
            */
            public static DrawLines ($points: System.Array$1<UnityEngine.Vector3>, $segmentIndices: System.Array$1<number>) : void
            /** Draw a dotted line from p1 to p2.
            * @param p1 The start point.
            * @param p2 The end point.
            * @param screenSpaceSize The size in pixels for the lengths of the line segments and the gaps between them.
            */
            public static DrawDottedLine ($p1: UnityEngine.Vector3, $p2: UnityEngine.Vector3, $screenSpaceSize: number) : void
            /** Draw a list of dotted line segments.
            * @param lineSegments A list of pairs of points that represent the start and end of line segments.
            * @param screenSpaceSize The size in pixels for the lengths of the line segments and the gaps between them.
            */
            public static DrawDottedLines ($lineSegments: System.Array$1<UnityEngine.Vector3>, $screenSpaceSize: number) : void
            /** Draw a list of indexed dotted line segments.
            * @param points A list of points.
            * @param segmentIndices A list of pairs of indices to the start and end points of the line segments.
            * @param screenSpaceSize The size in pixels for the lengths of the line segments and the gaps between them.
            */
            public static DrawDottedLines ($points: System.Array$1<UnityEngine.Vector3>, $segmentIndices: System.Array$1<number>, $screenSpaceSize: number) : void
            /** Draw a wireframe box with center and size.
            */
            public static DrawWireCube ($center: UnityEngine.Vector3, $size: UnityEngine.Vector3) : void
            public static ShouldRenderGizmos () : boolean
            public static DrawGizmos ($camera: UnityEngine.Camera) : void
            /** Make a 3D disc that can be dragged with the mouse.
            * @param id Control id of the handle.
            * @param rotation The rotation of the disc.
            * @param position The center of the disc.
            * @param axis The axis to rotate around.
            * @param size The size of the disc in world space.
            * @param cutoffPlane If true, only the front-facing half of the circle is draw / draggable. This is useful when you have many overlapping rotation axes (like in the default rotate tool) to avoid clutter.
            * @param snap The grid size to snap to.
            * @returns The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static Disc ($id: number, $rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3, $axis: UnityEngine.Vector3, $size: number, $cutoffPlane: boolean, $snap: number) : UnityEngine.Quaternion
            /** Make an unconstrained rotation handle.
            * @param id Control id of the handle.
            * @param rotation Orientation of the handle.
            * @param position Center of the handle in 3D space.
            * @param size The size of the handle.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            * @returns The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static FreeRotateHandle ($id: number, $rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3, $size: number) : UnityEngine.Quaternion
            /** Make a 3D slider that moves along one axis.
            * @param position The position of the current point in the space of Handles.matrix.
            * @param direction The direction axis of the slider in the space of Handles.matrix.
            * @param size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param snap The snap increment. See Handles.SnapValue.
            * @param capFunction The function to call for doing the actual drawing. By default it is Handles.ArrowHandleCap, but any function that has the same signature can be used.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the position value passed into the function. 
            */
            public static Slider ($position: UnityEngine.Vector3, $direction: UnityEngine.Vector3) : UnityEngine.Vector3
            public static Slider ($position: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $size: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number) : UnityEngine.Vector3
            public static Slider ($controlID: number, $position: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $size: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number) : UnityEngine.Vector3
            public static Slider ($controlID: number, $position: UnityEngine.Vector3, $offset: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $size: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number) : UnityEngine.Vector3
            public static FreeMoveHandle ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $snap: UnityEngine.Vector3, $capFunction: UnityEditor.Handles.CapFunction) : UnityEngine.Vector3
            public static FreeMoveHandle ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $snap: UnityEngine.Vector3, $capFunction: UnityEditor.Handles.CapFunction) : UnityEngine.Vector3
            public static ScaleValueHandle ($value: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number) : number
            public static ScaleValueHandle ($controlID: number, $value: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number) : number
            public static Button ($position: UnityEngine.Vector3, $direction: UnityEngine.Quaternion, $size: number, $pickSize: number, $capFunction: UnityEditor.Handles.CapFunction) : boolean
            /** Draw a cube handle. Pass this into handle functions.
            * @param controlID The control ID for the handle.
            * @param position The position of the handle in the space of Handles.matrix.
            * @param rotation The rotation of the handle in the space of Handles.matrix.
            * @param size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static CubeHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a sphere handle. Pass this into handle functions.
            * @param controlID The control ID for the handle.
            * @param position The position of the handle in the space of Handles.matrix.
            * @param rotation The rotation of the handle in the space of Handles.matrix.
            * @param eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            * @param size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            */
            public static SphereHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a cone handle. Pass this into handle functions.
            * @param controlID The control ID for the handle.
            * @param position The position of the handle in the space of Handles.matrix.
            * @param rotation The rotation of the handle in the space of Handles.matrix.
            * @param size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static ConeHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a cylinder handle. Pass this into handle functions.
            * @param controlID The control ID for the handle.
            * @param position The position of the handle in the space of Handles.matrix.
            * @param rotation The rotation of the handle in the space of Handles.matrix.
            * @param size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static CylinderHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a rectangle handle. Pass this into handle functions.
            * @param controlID The control ID for the handle.
            * @param position The position of the handle in the space of Handles.matrix.
            * @param rotation The rotation of the handle in the space of Handles.matrix.
            * @param size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static RectangleHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a dot handle. Pass this into handle functions.
            * @param controlID The control ID for the handle.
            * @param position The position of the handle in the space of Handles.matrix.
            * @param rotation The rotation of the handle in the space of Handles.matrix.
            * @param size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static DotHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a circle handle. Pass this into handle functions.
            * @param controlID The control ID for the handle.
            * @param position The position of the handle in the space of Handles.matrix.
            * @param rotation The rotation of the handle in the space of Handles.matrix.
            * @param size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static CircleHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw an arrow like those used by the move tool.
            * @param controlID The control ID for the handle.
            * @param position The position of the handle in the space of Handles.matrix.
            * @param rotation The rotation of the handle in the space of Handles.matrix.
            * @param size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static ArrowHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a camera facing selection frame.
            */
            public static DrawSelectionFrame ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Make a position handle.
            * @param position Center of the handle in 3D space.
            * @param rotation Orientation of the handle in 3D space.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static PositionHandle ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : UnityEngine.Vector3
            /** Make a Scene view rotation handle.
            * @param rotation Orientation of the handle.
            * @param position Center of the handle in 3D space.
            * @returns The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static RotationHandle ($rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3) : UnityEngine.Quaternion
            /** Make a Scene view scale handle.
            * @param scale Scale to modify.
            * @param position The position of the handle.
            * @param rotation The rotation of the handle.
            * @param size Allows you to scale the size of the handle on-scren.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static ScaleHandle ($scale: UnityEngine.Vector3, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number) : UnityEngine.Vector3
            /** Make a Scene view radius handle.
            * @param rotation Orientation of the handle.
            * @param position Center of the handle in 3D space.
            * @param radius Radius to modify.
            * @param handlesOnly Whether to omit the circular outline of the radius and only draw the point handles.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles. 
            */
            public static RadiusHandle ($rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3, $radius: number, $handlesOnly: boolean) : number
            /** Make a Scene view radius handle.
            * @param rotation Orientation of the handle.
            * @param position Center of the handle in 3D space.
            * @param radius Radius to modify.
            * @param handlesOnly Whether to omit the circular outline of the radius and only draw the point handles.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles. 
            */
            public static RadiusHandle ($rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3, $radius: number) : number
            public static Slider2D ($id: number, $handlePos: UnityEngine.Vector3, $offset: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: UnityEngine.Vector2) : UnityEngine.Vector3
            public static Slider2D ($id: number, $handlePos: UnityEngine.Vector3, $offset: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: UnityEngine.Vector2, $drawHelper: boolean) : UnityEngine.Vector3
            public static Slider2D ($handlePos: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: UnityEngine.Vector2) : UnityEngine.Vector3
            public static Slider2D ($handlePos: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: UnityEngine.Vector2, $drawHelper: boolean) : UnityEngine.Vector3
            public static Slider2D ($id: number, $handlePos: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: UnityEngine.Vector2) : UnityEngine.Vector3
            public static Slider2D ($id: number, $handlePos: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: UnityEngine.Vector2, $drawHelper: boolean) : UnityEngine.Vector3
            public static Slider2D ($handlePos: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number) : UnityEngine.Vector3
            public static Slider2D ($handlePos: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number, $drawHelper: boolean) : UnityEngine.Vector3
            /** Make an unconstrained rotation handle.
            * @param id Control id of the handle.
            * @param rotation Orientation of the handle.
            * @param position Center of the handle in 3D space.
            * @param size The size of the handle.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            * @returns The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static FreeRotateHandle ($rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3, $size: number) : UnityEngine.Quaternion
            /** Make a directional scale slider.
            * @param scale The value the user can modify.
            * @param position The position of the handle in the space of Handles.matrix.
            * @param direction The direction of the handle in the space of Handles.matrix.
            * @param rotation The rotation of the handle in the space of Handles.matrix.
            * @param size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param snap The snap increment. See Handles.SnapValue.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static ScaleSlider ($scale: number, $position: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $snap: number) : number
            /** Make a 3D disc that can be dragged with the mouse.
            * @param id Control id of the handle.
            * @param rotation The rotation of the disc.
            * @param position The center of the disc.
            * @param axis The axis to rotate around.
            * @param size The size of the disc in world space.
            * @param cutoffPlane If true, only the front-facing half of the circle is draw / draggable. This is useful when you have many overlapping rotation axes (like in the default rotate tool) to avoid clutter.
            * @param snap The grid size to snap to.
            * @returns The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static Disc ($rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3, $axis: UnityEngine.Vector3, $size: number, $cutoffPlane: boolean, $snap: number) : UnityEngine.Quaternion
            /** Rounds value to the closest multiple of snap if snapping is active. Note that snap can only be positive.
            * @param value The value to snap.
            * @param snap The increment to snap to.
            * @returns If snapping is active, rounds value to the closest multiple of snap (snap can only be positive). 
            */
            public static SnapValue ($value: number, $snap: number) : number
            /** Rounds value to the closest multiple of snap if snapping is active. Note that snap can only be positive.
            * @param value The value to snap.
            * @param snap The increment to snap to.
            * @returns If snapping is active, rounds value to the closest multiple of snap (snap can only be positive). 
            */
            public static SnapValue ($value: UnityEngine.Vector2, $snap: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Rounds value to the closest multiple of snap if snapping is active. Note that snap can only be positive.
            * @param value The value to snap.
            * @param snap The increment to snap to.
            * @returns If snapping is active, rounds value to the closest multiple of snap (snap can only be positive). 
            */
            public static SnapValue ($value: UnityEngine.Vector3, $snap: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Rounds each Transform.position to the closest multiple of EditorSnap.move.
            * @param transforms The transforms to snap.
            * @param axis The axes on which to apply snapping.
            */
            public static SnapToGrid ($transforms: System.Array$1<UnityEngine.Transform>, $axis?: UnityEngine.SnapAxis) : void
            public static SelectionFrame ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number) : void
            /** Draw anti-aliased line specified with point array and width.
            * @param lineTex The AA texture used for rendering.
            * @param width The width of the line.
            * @param points List of points to build the line from.
            */
            public static DrawAAPolyLine (...points: UnityEngine.Vector3[]) : void
            /** Draw anti-aliased line specified with point array and width.
            * @param lineTex The AA texture used for rendering.
            * @param width The width of the line.
            * @param points List of points to build the line from.
            */
            public static DrawAAPolyLine ($width: number, ...points: UnityEngine.Vector3[]) : void
            /** Draw anti-aliased line specified with point array and width.
            * @param lineTex The AA texture used for rendering.
            * @param width The width of the line.
            * @param points List of points to build the line from.
            */
            public static DrawAAPolyLine ($lineTex: UnityEngine.Texture2D, ...points: UnityEngine.Vector3[]) : void
            /** Draw anti-aliased line specified with point array and width.
            * @param lineTex The AA texture used for rendering.
            * @param width The width of the line.
            * @param points List of points to build the line from.
            */
            public static DrawAAPolyLine ($width: number, $actualNumberOfPoints: number, ...points: UnityEngine.Vector3[]) : void
            /** Draw anti-aliased line specified with point array and width.
            * @param lineTex The AA texture used for rendering.
            * @param width The width of the line.
            * @param points List of points to build the line from.
            */
            public static DrawAAPolyLine ($lineTex: UnityEngine.Texture2D, $width: number, ...points: UnityEngine.Vector3[]) : void
            /** Draw anti-aliased convex polygon specified with point array.
            * @param points List of points describing the convex polygon.
            */
            public static DrawAAConvexPolygon (...points: UnityEngine.Vector3[]) : void
            /** Draw textured bezier line through start and end points with the given tangents.
            * @param startPosition The start point of the bezier line.
            * @param endPosition The end point of the bezier line.
            * @param startTangent The start tangent of the bezier line.
            * @param endTangent The end tangent of the bezier line.
            * @param color The color to use for the bezier line.
            * @param texture The texture to use for drawing the bezier line.
            * @param width The width of the bezier line.
            */
            public static DrawBezier ($startPosition: UnityEngine.Vector3, $endPosition: UnityEngine.Vector3, $startTangent: UnityEngine.Vector3, $endTangent: UnityEngine.Vector3, $color: UnityEngine.Color, $texture: UnityEngine.Texture2D, $width: number) : void
            /** Draw the outline of a flat disc in 3D space.
            * @param center The center of the disc.
            * @param normal The normal of the disc.
            * @param radius The radius of the disc.
            */
            public static DrawWireDisc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $radius: number) : void
            /** Draw a circular arc in 3D space.
            * @param center The center of the circle.
            * @param normal The normal of the circle.
            * @param from The direction of the point on the circle circumference, relative to the center, where the arc begins.
            * @param angle The angle of the arc, in degrees.
            * @param radius The radius of the circle
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            */
            public static DrawWireArc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $from: UnityEngine.Vector3, $angle: number, $radius: number) : void
            public static DrawSolidRectangleWithOutline ($rectangle: UnityEngine.Rect, $faceColor: UnityEngine.Color, $outlineColor: UnityEngine.Color) : void
            /** Draw a solid outlined rectangle in 3D space.
            * @param verts The 4 vertices of the rectangle in world coordinates.
            * @param faceColor The color of the rectangle's face.
            * @param outlineColor The outline color of the rectangle.
            */
            public static DrawSolidRectangleWithOutline ($verts: System.Array$1<UnityEngine.Vector3>, $faceColor: UnityEngine.Color, $outlineColor: UnityEngine.Color) : void
            /** Draw a solid flat disc in 3D space.
            * @param center The center of the dics.
            * @param normal The normal of the disc.
            * @param radius The radius of the dics
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            */
            public static DrawSolidDisc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $radius: number) : void
            /** Draw a circular sector (pie piece) in 3D space.
            * @param center The center of the circle.
            * @param normal The normal of the circle.
            * @param from The direction of the point on the circumference, relative to the center, where the sector begins.
            * @param angle The angle of the sector, in degrees.
            * @param radius The radius of the circle
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            */
            public static DrawSolidArc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $from: UnityEngine.Vector3, $angle: number, $radius: number) : void
            /** Make a text label positioned in 3D space.
            * @param position Position in 3D space as seen from the current handle camera.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            */
            public static Label ($position: UnityEngine.Vector3, $text: string) : void
            /** Make a text label positioned in 3D space.
            * @param position Position in 3D space as seen from the current handle camera.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            */
            public static Label ($position: UnityEngine.Vector3, $image: UnityEngine.Texture) : void
            /** Make a text label positioned in 3D space.
            * @param position Position in 3D space as seen from the current handle camera.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            */
            public static Label ($position: UnityEngine.Vector3, $content: UnityEngine.GUIContent) : void
            /** Make a text label positioned in 3D space.
            * @param position Position in 3D space as seen from the current handle camera.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            */
            public static Label ($position: UnityEngine.Vector3, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Make a text label positioned in 3D space.
            * @param position Position in 3D space as seen from the current handle camera.
            * @param text Text to display on the label.
            * @param image Texture to display on the label.
            * @param content Text, image and tooltip for this label.
            * @param style The style to use. If left out, the label style from the current GUISkin is used.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            */
            public static Label ($position: UnityEngine.Vector3, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            public static GetMainGameViewSize () : UnityEngine.Vector2
            /** Clears the camera.
            * @param position Where in the Scene to clear.
            * @param camera The camera to clear.
            */
            public static ClearCamera ($position: UnityEngine.Rect, $camera: UnityEngine.Camera) : void
            /** Draws a camera inside a rectangle.
            * @param position The area to draw the camera within in GUI coordinates.
            * @param camera The camera to draw.
            * @param drawMode How the camera is drawn (textured, wireframe, etc.).
            */
            public static DrawCamera ($position: UnityEngine.Rect, $camera: UnityEngine.Camera) : void
            /** Draws a camera inside a rectangle.
            * @param position The area to draw the camera within in GUI coordinates.
            * @param camera The camera to draw.
            * @param drawMode How the camera is drawn (textured, wireframe, etc.).
            */
            public static DrawCamera ($position: UnityEngine.Rect, $camera: UnityEngine.Camera, $drawMode: UnityEditor.DrawCameraMode) : void
            /** Set the current camera so all Handles and Gizmos are draw with its settings.
            */
            public static SetCamera ($camera: UnityEngine.Camera) : void
            /** Set the current camera so all Handles and Gizmos are draw with its settings.
            */
            public static SetCamera ($position: UnityEngine.Rect, $camera: UnityEngine.Camera) : void
            public static BeginGUI () : void
            public static EndGUI () : void
            /** Retuns an array of points to representing the bezier curve.
            */
            public static MakeBezierPoints ($startPosition: UnityEngine.Vector3, $endPosition: UnityEngine.Vector3, $startTangent: UnityEngine.Vector3, $endTangent: UnityEngine.Vector3, $division: number) : System.Array$1<UnityEngine.Vector3>
            public static DoPositionHandle ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : UnityEngine.Vector3
            public static DoRotationHandle ($rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3) : UnityEngine.Quaternion
            public static DoScaleHandle ($scale: UnityEngine.Vector3, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number) : UnityEngine.Vector3
            /** Creates a transform handle.
            * @param position Position of the handle.
            * @param rotation Orientation of the handle.
            * @param scale Scale value to modify.
            * @param uniformScale Uniform scale value to modify.
            */
            public static TransformHandle ($position: $Ref<UnityEngine.Vector3>, $rotation: $Ref<UnityEngine.Quaternion>, $scale: $Ref<UnityEngine.Vector3>) : void
            public static TransformHandle ($position: $Ref<UnityEngine.Vector3>, $rotation: UnityEngine.Quaternion, $scale: $Ref<UnityEngine.Vector3>) : void
            public static TransformHandle ($position: UnityEngine.Vector3, $rotation: $Ref<UnityEngine.Quaternion>, $scale: $Ref<UnityEngine.Vector3>) : void
            /** Creates a transform handle.
            * @param position Position of the handle.
            * @param rotation Orientation of the handle.
            * @param scale Scale value to modify.
            * @param uniformScale Uniform scale value to modify.
            */
            public static TransformHandle ($position: $Ref<UnityEngine.Vector3>, $rotation: $Ref<UnityEngine.Quaternion>, $uniformScale: $Ref<number>) : void
            public static TransformHandle ($position: $Ref<UnityEngine.Vector3>, $rotation: UnityEngine.Quaternion, $uniformScale: $Ref<number>) : void
            public static TransformHandle ($position: UnityEngine.Vector3, $rotation: $Ref<UnityEngine.Quaternion>, $uniformScale: $Ref<number>) : void
            /** Creates a transform handle.
            * @param position Position of the handle.
            * @param rotation Orientation of the handle.
            * @param scale Scale value to modify.
            * @param uniformScale Uniform scale value to modify.
            */
            public static TransformHandle ($position: $Ref<UnityEngine.Vector3>, $rotation: $Ref<UnityEngine.Quaternion>) : void
            public constructor ()
        }
        /** Drawing modes for Handles.DrawCamera.
        */
        enum DrawCameraMode
        { UserDefined = -2147483648, Normal = -1, Textured = 0, Wireframe = 1, TexturedWire = 2, ShadowCascades = 3, RenderPaths = 4, AlphaChannel = 5, Overdraw = 6, Mipmaps = 7, DeferredDiffuse = 8, DeferredSpecular = 9, DeferredSmoothness = 10, DeferredNormal = 11, Charting = -12, RealtimeCharting = 12, Systems = 13, Albedo = -14, RealtimeAlbedo = 14, Emissive = -15, RealtimeEmissive = 15, Irradiance = -16, RealtimeIndirect = 16, Directionality = -17, RealtimeDirectionality = 17, Baked = -18, BakedLightmap = 18, Clustering = 19, LitClustering = 20, ValidateAlbedo = 21, ValidateMetalSpecular = 22, ShadowMasks = 23, LightOverlap = 24, BakedAlbedo = 25, BakedEmissive = 26, BakedDirectionality = 27, BakedTexelValidity = 28, BakedIndices = 29, BakedCharting = 30, SpriteMask = 31, BakedUVOverlap = 32, TextureStreaming = 33, BakedLightmapCulling = 34 }
        /** Helper class to access Unity documentation.
        */
        class Help extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Is there a help page for this object?
            */
            public static HasHelpForObject ($obj: UnityEngine.Object) : boolean
            /** Get the URL for this object's documentation.
            * @param obj The object to retrieve documentation for.
            * @returns The documentation URL for the object. Note that this could use the http: or file: schemas. 
            */
            public static GetHelpURLForObject ($obj: UnityEngine.Object) : string
            /** Show help page for this object.
            */
            public static ShowHelpForObject ($obj: UnityEngine.Object) : void
            /** Show a help page.
            */
            public static ShowHelpPage ($page: string) : void
            /** Open url in the default web browser.
            */
            public static BrowseURL ($url: string) : void
            public constructor ()
        }
        interface IHasCustomMenu
        {
            /** Adds your custom menu items to an Editor Window.
            */
            AddItemsToMenu ($menu: UnityEditor.GenericMenu) : void
        }
        /** Describes information and value of a single shader property.
        */
        class MaterialProperty extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Material objects being edited by this property (Read Only).
            */
            public get targets(): System.Array$1<UnityEngine.Object>;
            /** Type of the property (Read Only).
            */
            public get type(): UnityEditor.MaterialProperty.PropType;
            /** Name of the property (Read Only).
            */
            public get name(): string;
            /** Display name of the property (Read Only).
            */
            public get displayName(): string;
            /** Flags that control how property is displayed (Read Only).
            */
            public get flags(): UnityEditor.MaterialProperty.PropFlags;
            /** Texture dimension (2D, Cubemap etc.) of the property (Read Only).
            */
            public get textureDimension(): UnityEngine.Rendering.TextureDimension;
            /** Min/max limits of a ranged float property (Read Only).
            */
            public get rangeLimits(): UnityEngine.Vector2;
            /** Does this property have multiple different values? (Read Only)
            */
            public get hasMixedValue(): boolean;
            public get applyPropertyCallback(): UnityEditor.MaterialProperty.ApplyPropertyCallback;
            public set applyPropertyCallback(value: UnityEditor.MaterialProperty.ApplyPropertyCallback);
            /** Color value of the property.
            */
            public get colorValue(): UnityEngine.Color;
            public set colorValue(value: UnityEngine.Color);
            /** Vector value of the property.
            */
            public get vectorValue(): UnityEngine.Vector4;
            public set vectorValue(value: UnityEngine.Vector4);
            /** Float vaue of the property.
            */
            public get floatValue(): number;
            public set floatValue(value: number);
            /** Texture value of the property.
            */
            public get textureValue(): UnityEngine.Texture;
            public set textureValue(value: UnityEngine.Texture);
            public get textureScaleAndOffset(): UnityEngine.Vector4;
            public set textureScaleAndOffset(value: UnityEngine.Vector4);
            public ReadFromMaterialPropertyBlock ($block: UnityEngine.MaterialPropertyBlock) : void
            public WriteToMaterialPropertyBlock ($materialblock: UnityEngine.MaterialPropertyBlock, $changedPropertyMask: number) : void
            public constructor ()
        }
        /** Menu class to manipulate the menu item.
        */
        class Menu extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Set the check status of the given menu.
            */
            public static SetChecked ($menuPath: string, $isChecked: boolean) : void
            /** Get the check status of the given menu.
            */
            public static GetChecked ($menuPath: string) : boolean
            public constructor ()
        }
        /** The MenuItem attribute allows you to add menu items to the main menu and inspector context menus.
        */
        class MenuItem extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public menuItem : string
            public validate : boolean
            public priority : number
            public constructor ($itemName: string)
            public constructor ($itemName: string, $isValidateFunction: boolean)
            public constructor ($itemName: string, $isValidateFunction: boolean, $priority: number)
            public constructor ()
        }
        /** Various utilities for mesh manipulation.
        */
        class MeshUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Optimizes the Mesh data to improve rendering performance.
            */
            public static Optimize ($mesh: UnityEngine.Mesh) : void
            /** Change the mesh compression setting for a mesh.
            * @param mesh The mesh to set the compression mode for.
            * @param compression The compression mode to set.
            */
            public static SetMeshCompression ($mesh: UnityEngine.Mesh, $compression: UnityEditor.ModelImporterMeshCompression) : void
            /** Returns the mesh compression setting for a Mesh.
            * @param mesh The mesh to get information on.
            */
            public static GetMeshCompression ($mesh: UnityEngine.Mesh) : UnityEditor.ModelImporterMeshCompression
            /** Will insert per-triangle uv2 in mesh and handle vertex splitting etc.
            */
            public static SetPerTriangleUV2 ($src: UnityEngine.Mesh, $triUV: System.Array$1<UnityEngine.Vector2>) : void
            public constructor ()
        }
        /** Mesh compression options for ModelImporter.
        */
        enum ModelImporterMeshCompression
        { Off = 0, Low = 1, Medium = 2, High = 3 }
        /** Representation of Script assets.
        */
        class MonoScript extends UnityEngine.TextAsset
        {
            protected [__keep_incompatibility]: never;
            public GetClass () : System.Type
            /** Returns the MonoScript object containing specified MonoBehaviour.
            * @param behaviour The MonoBehaviour whose MonoScript should be returned.
            */
            public static FromMonoBehaviour ($behaviour: UnityEngine.MonoBehaviour) : UnityEditor.MonoScript
            /** Returns the MonoScript object containing specified ScriptableObject.
            * @param scriptableObject The ScriptableObject whose MonoScript should be returned.
            */
            public static FromScriptableObject ($scriptableObject: UnityEngine.ScriptableObject) : UnityEditor.MonoScript
            public constructor ()
        }
        /** Use the DefaultObject to create a new UnityEngine.Object in the editor.
        */
        class ObjectFactory extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_componentWasAdded ($value: System.Action$1<UnityEngine.Component>) : void
            public static remove_componentWasAdded ($value: System.Action$1<UnityEngine.Component>) : void
            /** Create a new instance of the given type.
            * @param type The type of instance to create.
            */
            public static CreateInstance ($type: System.Type) : UnityEngine.Object
            /** Creates a new component and adds it to the specified GameObject.
            * @param gameObject The GameObject to add the new component to.
            * @param type The type of component to create and add to the GameObject.
            * @returns Returns the component that was created and added to the GameObject. 
            */
            public static AddComponent ($gameObject: UnityEngine.GameObject, $type: System.Type) : UnityEngine.Component
            /** Creates a new GameObject.
            * @param name Name of the GameObject.
            * @param types The optional types to add to the GameObject when created.
            * @param scene Scene where the GameObject should be created.
            * @param hideFlags HideFlags to assign to the GameObject.
            * @returns Returns the GameObject that was created. 
            */
            public static CreateGameObject ($scene: UnityEngine.SceneManagement.Scene, $hideFlags: UnityEngine.HideFlags, $name: string, ...types: System.Type[]) : UnityEngine.GameObject
            /** Creates a new GameObject.
            * @param name Name of the GameObject.
            * @param types The optional types to add to the GameObject when created.
            * @param scene Scene where the GameObject should be created.
            * @param hideFlags HideFlags to assign to the GameObject.
            * @returns Returns the GameObject that was created. 
            */
            public static CreateGameObject ($name: string, ...types: System.Type[]) : UnityEngine.GameObject
            /** Creates a GameObject primitive.
            * @param type The type of primitive to create.
            */
            public static CreatePrimitive ($type: UnityEngine.PrimitiveType) : UnityEngine.GameObject
        }
        /** Helper class for constructing displayable names for objects.
        */
        class ObjectNames extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Make a displayable name for a variable.
            */
            public static NicifyVariableName ($name: string) : string
            /** Class name of an object.
            */
            public static GetClassName ($obj: UnityEngine.Object) : string
            /** Drag and drop title for an object.
            */
            public static GetDragAndDropTitle ($obj: UnityEngine.Object) : string
            /** Sets the name of an Object.
            */
            public static SetNameSmart ($obj: UnityEngine.Object, $name: string) : void
            /** Make a unique name using the provided name as a base.
            If the target name is in the provided list of existing names, a unique name is generated by appending the next available numerical increment.
            * @param existingNames A list of pre-existing names.
            * @param name Desired name to be used as is, or as a base.
            * @returns A name not found in the list of pre-existing names. 
            */
            public static GetUniqueName ($existingNames: System.Array$1<string>, $name: string) : string
            /** Inspector title for an object.
            */
            public static GetInspectorTitle ($obj: UnityEngine.Object) : string
            public constructor ()
        }
        class PackageInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public packagePath : string
            public jsonInfo : string
            public iconURL : string
        }
        /** Resolution dialog setting.
        */
        enum ResolutionDialogSetting
        { Disabled = 0, Enabled = 1, HiddenByDefault = 2 }
        /** Scripting implementation (backend).
        */
        enum ScriptingImplementation
        { Mono2x = 0, IL2CPP = 1, WinRTDotNET = 2 }
        /** C++ compiler configuration used when compiling IL2CPP generated code.
        */
        enum Il2CppCompilerConfiguration
        { Debug = 0, Release = 1, Master = 2 }
        /** Aspect ratio.
        */
        enum AspectRatio
        { AspectOthers = 0, Aspect4by3 = 1, Aspect5by4 = 2, Aspect16by10 = 3, Aspect16by9 = 4 }
        /** Mac fullscreen mode.
        */
        enum MacFullscreenMode
        { CaptureDisplay = 0, FullscreenWindow = 1, FullscreenWindowWithDockAndMenuBar = 2 }
        /** Direct3D 9 fullscreen mode.
        */
        enum D3D9FullscreenMode
        { ExclusiveMode = 0, FullscreenWindow = 1 }
        /** Direct3D 11 fullscreen mode.
        */
        enum D3D11FullscreenMode
        { ExclusiveMode = 0, FullscreenWindow = 1 }
        /** Enum used to specify what stereo rendering path to use.
        */
        enum StereoRenderingPath
        { MultiPass = 0, SinglePass = 1, Instancing = 2 }
        /** Managed code stripping level.
        */
        enum StrippingLevel
        { Disabled = 0, StripAssemblies = 1, StripByteCode = 2, UseMicroMSCorlib = 3 }
        /** Script call optimization level.
        */
        enum ScriptCallOptimizationLevel
        { SlowAndSafe = 0, FastButNoExceptions = 1 }
        /** Default mobile device orientation.
        */
        enum UIOrientation
        { Portrait = 0, PortraitUpsideDown = 1, LandscapeRight = 2, LandscapeLeft = 3, AutoRotation = 4 }
        /** .NET API compatibility level.
        */
        enum ApiCompatibilityLevel
        { NET_2_0 = 1, NET_2_0_Subset = 2, NET_4_6 = 3, NET_Web = 4, NET_Micro = 5, NET_Standard_2_0 = 6 }
        /** Defines how aggressively Unity strips unused managed (C#) code.
        */
        enum ManagedStrippingLevel
        { Disabled = 0, Low = 1, Medium = 2, High = 3 }
        /** The behavior in case of unhandled .NET exception.
        */
        enum ActionOnDotNetUnhandledException
        { SilentExit = 0, Crash = 1 }
        /** The style of builtin splash screen to use.
        */
        enum SplashScreenStyle
        { Light = 0, Dark = 1 }
        /** Enum used to specify the graphics jobs mode to use.
        */
        enum GraphicsJobMode
        { Native = 0, Legacy = 1 }
        /** Icon kind.
        */
        enum IconKind
        { Any = -1, Application = 0, Settings = 1, Notification = 2, Spotlight = 3, Store = 4 }
        /** Player Settings is where you define various parameters for the final game that you will build in Unity. Some of these values are used in the Resolution Dialog that launches when you open a standalone game.
        */
        class PlayerSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The name of your company.
            */
            public static get companyName(): string;
            public static set companyName(value: string);
            /** The name of your product.
            */
            public static get productName(): string;
            public static set productName(value: string);
            public static get productGUID(): System.Guid;
            /** Set the rendering color space for the current project.
            */
            public static get colorSpace(): UnityEngine.ColorSpace;
            public static set colorSpace(value: UnityEngine.ColorSpace);
            /** Default horizontal dimension of stand-alone player window.
            */
            public static get defaultScreenWidth(): number;
            public static set defaultScreenWidth(value: number);
            /** Default vertical dimension of stand-alone player window.
            */
            public static get defaultScreenHeight(): number;
            public static set defaultScreenHeight(value: number);
            /** Default horizontal dimension of web player window.
            */
            public static get defaultWebScreenWidth(): number;
            public static set defaultWebScreenWidth(value: number);
            /** Default vertical dimension of web player window.
            */
            public static get defaultWebScreenHeight(): number;
            public static set defaultWebScreenHeight(value: number);
            public static get defaultIsNativeResolution(): boolean;
            public static set defaultIsNativeResolution(value: boolean);
            /** Enable Retina support for macOS.
            */
            public static get macRetinaSupport(): boolean;
            public static set macRetinaSupport(value: boolean);
            /** If enabled, your game will continue to run after lost focus.
            */
            public static get runInBackground(): boolean;
            public static set runInBackground(value: boolean);
            /** Defines if fullscreen games should darken secondary displays.
            */
            public static get captureSingleScreen(): boolean;
            public static set captureSingleScreen(value: boolean);
            /** Write a log file with debugging information.
            */
            public static get usePlayerLog(): boolean;
            public static set usePlayerLog(value: boolean);
            /** Use resizable window in standalone player builds.
            */
            public static get resizableWindow(): boolean;
            public static set resizableWindow(value: boolean);
            /** Pre bake collision meshes on player build.
            */
            public static get bakeCollisionMeshes(): boolean;
            public static set bakeCollisionMeshes(value: boolean);
            /** Enable receipt validation for the Mac App Store.
            */
            public static get useMacAppStoreValidation(): boolean;
            public static set useMacAppStoreValidation(value: boolean);
            /** Platform agnostic setting to define fullscreen behavior. Not all platforms support all modes.
            */
            public static get fullScreenMode(): UnityEngine.FullScreenMode;
            public static set fullScreenMode(value: UnityEngine.FullScreenMode);
            /** Active stereo rendering path
            */
            public static get stereoRenderingPath(): UnityEditor.StereoRenderingPath;
            public static set stereoRenderingPath(value: UnityEditor.StereoRenderingPath);
            /** Enable frame timing statistics.
            */
            public static get enableFrameTimingStats(): boolean;
            public static set enableFrameTimingStats(value: boolean);
            /** Switch display to HDR mode (if available).
            */
            public static get useHDRDisplay(): boolean;
            public static set useHDRDisplay(value: boolean);
            /** The number of bits in each color channel for swap chain buffers. (Direct3D 11 and Direct3D 12 mode).
            */
            public static get D3DHDRBitDepth(): UnityEngine.D3DHDRDisplayBitDepth;
            public static set D3DHDRBitDepth(value: UnityEngine.D3DHDRDisplayBitDepth);
            /** On Windows, show the application in the background if Fullscreen Windowed mode is used.
            */
            public static get visibleInBackground(): boolean;
            public static set visibleInBackground(value: boolean);
            /** If enabled, allows the user to switch between full screen and windowed mode using OS specific keyboard short cuts.
            */
            public static get allowFullscreenSwitch(): boolean;
            public static set allowFullscreenSwitch(value: boolean);
            /** Restrict standalone players to a single concurrent running instance.
            */
            public static get forceSingleInstance(): boolean;
            public static set forceSingleInstance(value: boolean);
            /** Use DXGI Flip Model Swapchain for D3D11
            */
            public static get useFlipModelSwapchain(): boolean;
            public static set useFlipModelSwapchain(value: boolean);
            public static get openGLRequireES31(): boolean;
            public static set openGLRequireES31(value: boolean);
            public static get openGLRequireES31AEP(): boolean;
            public static set openGLRequireES31AEP(value: boolean);
            public static get openGLRequireES32(): boolean;
            public static set openGLRequireES32(value: boolean);
            /** Virtual Reality specific splash screen.
            */
            public static get virtualRealitySplashScreen(): UnityEngine.Texture2D;
            public static set virtualRealitySplashScreen(value: UnityEngine.Texture2D);
            /** Allow 'unsafe' C# code code to be compiled for predefined assemblies.
            */
            public static get allowUnsafeCode(): boolean;
            public static set allowUnsafeCode(value: boolean);
            /** Allows you to enable or disable incremental mode for garbage collection.
            */
            public static get gcIncremental(): boolean;
            public static set gcIncremental(value: boolean);
            /** Password used for interacting with the Android Keystore.
            */
            public static get keystorePass(): string;
            public static set keystorePass(value: string);
            /** Password for the key used for signing an Android application.
            */
            public static get keyaliasPass(): string;
            public static set keyaliasPass(value: string);
            /** Enable GPU skinning on capable platforms.
            */
            public static get gpuSkinning(): boolean;
            public static set gpuSkinning(value: boolean);
            /** Enable graphics jobs (multi threaded rendering).
            */
            public static get graphicsJobs(): boolean;
            public static set graphicsJobs(value: boolean);
            /** Selects the graphics job mode to use on platforms that support both Native and Legacy graphics jobs.
            */
            public static get graphicsJobMode(): UnityEditor.GraphicsJobMode;
            public static set graphicsJobMode(value: UnityEditor.GraphicsJobMode);
            public static get xboxPIXTextureCapture(): boolean;
            /** Xbox 360 Avatars.
            */
            public static get xboxEnableAvatar(): boolean;
            public static get xboxOneResolution(): number;
            /** Enables internal profiler.
            */
            public static get enableInternalProfiler(): boolean;
            public static set enableInternalProfiler(value: boolean);
            /** Sets the crash behavior on .NET unhandled exception.
            */
            public static get actionOnDotNetUnhandledException(): UnityEditor.ActionOnDotNetUnhandledException;
            public static set actionOnDotNetUnhandledException(value: UnityEditor.ActionOnDotNetUnhandledException);
            /** Are ObjC uncaught exceptions logged?
            */
            public static get logObjCUncaughtExceptions(): boolean;
            public static set logObjCUncaughtExceptions(value: boolean);
            /** Enables CrashReport API.
            */
            public static get enableCrashReportAPI(): boolean;
            public static set enableCrashReportAPI(value: boolean);
            /** The application identifier for the currently selected build target.
            */
            public static get applicationIdentifier(): string;
            public static set applicationIdentifier(value: string);
            /** Application bundle version shared between iOS & Android platforms.
            */
            public static get bundleVersion(): string;
            public static set bundleVersion(value: string);
            /** Returns if status bar should be hidden. Supported on iOS only; on Android, the status bar is always hidden.
            */
            public static get statusBarHidden(): boolean;
            public static set statusBarHidden(value: boolean);
            /** Remove unused Engine code from your build (IL2CPP-only).
            */
            public static get stripEngineCode(): boolean;
            public static set stripEngineCode(value: boolean);
            /** Default screen orientation for mobiles.
            */
            public static get defaultInterfaceOrientation(): UnityEditor.UIOrientation;
            public static set defaultInterfaceOrientation(value: UnityEditor.UIOrientation);
            /** Is auto-rotation to portrait supported?
            */
            public static get allowedAutorotateToPortrait(): boolean;
            public static set allowedAutorotateToPortrait(value: boolean);
            /** Is auto-rotation to portrait upside-down supported?
            */
            public static get allowedAutorotateToPortraitUpsideDown(): boolean;
            public static set allowedAutorotateToPortraitUpsideDown(value: boolean);
            /** Is auto-rotation to landscape right supported?
            */
            public static get allowedAutorotateToLandscapeRight(): boolean;
            public static set allowedAutorotateToLandscapeRight(value: boolean);
            /** Is auto-rotation to landscape left supported?
            */
            public static get allowedAutorotateToLandscapeLeft(): boolean;
            public static set allowedAutorotateToLandscapeLeft(value: boolean);
            /** Let the OS autorotate the screen as the device orientation changes.
            */
            public static get useAnimatedAutorotation(): boolean;
            public static set useAnimatedAutorotation(value: boolean);
            /** 32-bit Display Buffer is used.
            */
            public static get use32BitDisplayBuffer(): boolean;
            public static set use32BitDisplayBuffer(value: boolean);
            /** When enabled, preserves the alpha value in the framebuffer to support rendering over native UI on Android.
            */
            public static get preserveFramebufferAlpha(): boolean;
            public static set preserveFramebufferAlpha(value: boolean);
            /** Should unused Mesh components be excluded from game build?
            */
            public static get stripUnusedMeshComponents(): boolean;
            public static set stripUnusedMeshComponents(value: boolean);
            /** Is the advanced version being used?
            */
            public static get advancedLicense(): boolean;
            /** Additional AOT compilation options. Shared by AOT platforms.
            */
            public static get aotOptions(): string;
            public static set aotOptions(value: string);
            /** The default cursor for your application.
            */
            public static get defaultCursor(): UnityEngine.Texture2D;
            public static set defaultCursor(value: UnityEngine.Texture2D);
            /** Default cursor's click position in pixels from the top left corner of the cursor image.
            */
            public static get cursorHotspot(): UnityEngine.Vector2;
            public static set cursorHotspot(value: UnityEngine.Vector2);
            /** Accelerometer update frequency.
            */
            public static get accelerometerFrequency(): number;
            public static set accelerometerFrequency(value: number);
            /** Is multi-threaded rendering enabled?
            */
            public static get MTRendering(): boolean;
            public static set MTRendering(value: boolean);
            /** Stops or allows audio from other applications to play in the background while your Unity application is running.
            */
            public static get muteOtherAudioSources(): boolean;
            public static set muteOtherAudioSources(value: boolean);
            /** Defines whether the BlendShape weight range in SkinnedMeshRenderers is clamped.
            */
            public static get legacyClampBlendShapeWeights(): boolean;
            public static set legacyClampBlendShapeWeights(value: boolean);
            /** Enables Metal API validation in the Editor.
            */
            public static get enableMetalAPIValidation(): boolean;
            public static set enableMetalAPIValidation(value: boolean);
            /** Enables Graphics.SetSRGBWrite() on Vulkan renderer.
            */
            public static get vulkanEnableSetSRGBWrite(): boolean;
            public static set vulkanEnableSetSRGBWrite(value: boolean);
            /** Set number of swapchain buffers to be used with Vulkan renderer
            */
            public static get vulkanNumSwapchainBuffers(): number;
            public static set vulkanNumSwapchainBuffers(value: number);
            /** Delays acquiring the swapchain image until after the frame is rendered.
            */
            public static get vulkanEnableLateAcquireNextImage(): boolean;
            public static set vulkanEnableLateAcquireNextImage(value: boolean);
            /** Enable 360 Stereo Capture support on the current build target.
            */
            public static get enable360StereoCapture(): boolean;
            public static set enable360StereoCapture(value: boolean);
            /** Returns whether or not the specified aspect ratio is enabled.
            */
            public static HasAspectRatio ($aspectRatio: UnityEditor.AspectRatio) : boolean
            /** Enables the specified aspect ratio.
            */
            public static SetAspectRatio ($aspectRatio: UnityEditor.AspectRatio, $enable: boolean) : void
            public static GetPreloadedAssets () : System.Array$1<UnityEngine.Object>
            /** Assigns the assets that will be loaded at start up in the player and be kept alive until the player terminates.
            */
            public static SetPreloadedAssets ($assets: System.Array$1<UnityEngine.Object>) : void
            /** Get graphics APIs to be used on a build platform.
            * @param platform Platform to get APIs for.
            * @returns Array of graphics APIs. 
            */
            public static GetGraphicsAPIs ($platform: UnityEditor.BuildTarget) : System.Array$1<UnityEngine.Rendering.GraphicsDeviceType>
            /** Sets the graphics APIs used on a build platform.
            * @param platform Platform to set APIs for.
            * @param apis Array of graphics APIs.
            */
            public static SetGraphicsAPIs ($platform: UnityEditor.BuildTarget, $apis: System.Array$1<UnityEngine.Rendering.GraphicsDeviceType>) : void
            /** Is a build platform using automatic graphics API choice?
            * @param platform Platform to get the flag for.
            * @returns Should best available graphics API be used. 
            */
            public static GetUseDefaultGraphicsAPIs ($platform: UnityEditor.BuildTarget) : boolean
            /** Should a build platform use automatic graphics API choice.
            * @param platform Platform to set the flag for.
            * @param automatic Should best available graphics API be used?
            */
            public static SetUseDefaultGraphicsAPIs ($platform: UnityEditor.BuildTarget, $automatic: boolean) : void
            /** Get user-specified symbols for script compilation for the given build target group.
            */
            public static GetScriptingDefineSymbolsForGroup ($targetGroup: UnityEditor.BuildTargetGroup) : string
            /** Set user-specified symbols for script compilation for the given build target group.
            * @param targetGroup The name of the group of devices.
            * @param defines Symbols for this group separated by semicolons.
            */
            public static SetScriptingDefineSymbolsForGroup ($targetGroup: UnityEditor.BuildTargetGroup, $defines: string) : void
            /** Gets the BuildTargetPlatformGroup architecture.
            */
            public static GetArchitecture ($targetGroup: UnityEditor.BuildTargetGroup) : number
            /** Sets the BuildTargetPlatformGroup architecture.
            */
            public static SetArchitecture ($targetGroup: UnityEditor.BuildTargetGroup, $architecture: number) : void
            /** Gets the scripting framework for a BuildTargetPlatformGroup.
            */
            public static GetScriptingBackend ($targetGroup: UnityEditor.BuildTargetGroup) : UnityEditor.ScriptingImplementation
            /** Set the application identifier for the specified platform.
            */
            public static SetApplicationIdentifier ($targetGroup: UnityEditor.BuildTargetGroup, $identifier: string) : void
            /** Get the application identifier for the specified platform.
            */
            public static GetApplicationIdentifier ($targetGroup: UnityEditor.BuildTargetGroup) : string
            /** Sets the scripting framework for a BuildTargetPlatformGroup.
            */
            public static SetScriptingBackend ($targetGroup: UnityEditor.BuildTargetGroup, $backend: UnityEditor.ScriptingImplementation) : void
            /** Returns the default ScriptingImplementation used for the given platform group.
            * @param targetGroup The platform group to retrieve the scripting backend for.
            * @returns A ScriptingImplementation object that describes the default scripting backend used on that platform. 
            */
            public static GetDefaultScriptingBackend ($targetGroup: UnityEditor.BuildTargetGroup) : UnityEditor.ScriptingImplementation
            /** Sets compiler configuration used when compiling generated C++ code for a particular BuildTargetGroup.
            * @param targetGroup Build target group.
            * @param configuration Compiler configuration.
            */
            public static SetIl2CppCompilerConfiguration ($targetGroup: UnityEditor.BuildTargetGroup, $configuration: UnityEditor.Il2CppCompilerConfiguration) : void
            /** Gets compiler configuration used when compiling generated C++ code for a particular BuildTargetGroup.
            * @param targetGroup Build target group.
            * @returns Compiler configuration. 
            */
            public static GetIl2CppCompilerConfiguration ($targetGroup: UnityEditor.BuildTargetGroup) : UnityEditor.Il2CppCompilerConfiguration
            /** Does IL2CPP platform use incremental build?
            */
            public static GetIncrementalIl2CppBuild ($targetGroup: UnityEditor.BuildTargetGroup) : boolean
            /** Sets incremental build flag.
            */
            public static SetIncrementalIl2CppBuild ($targetGroup: UnityEditor.BuildTargetGroup, $enabled: boolean) : void
            public static GetAdditionalIl2CppArgs () : string
            /** IL2CPP build arguments.
            */
            public static SetAdditionalIl2CppArgs ($additionalArgs: string) : void
            public static GetWsaHolographicRemotingEnabled () : boolean
            public static SetWsaHolographicRemotingEnabled ($enabled: boolean) : void
            /** Sets the managed code stripping level for specified BuildTargetGroup.
            * @param BuildTargetGroup The platform build target group whose stripping level you want to set.
            * @param ManagedStrippingLevel The desired managed code stripping level.
            */
            public static SetManagedStrippingLevel ($targetGroup: UnityEditor.BuildTargetGroup, $level: UnityEditor.ManagedStrippingLevel) : void
            /** Returns the ManagedStrippingLevel used for the given platform group.
            * @param targetGroup The target platform group whose code stripping level you want to retrieve.
            * @returns The managed code stripping level set for the specified build target platform group. 
            */
            public static GetManagedStrippingLevel ($targetGroup: UnityEditor.BuildTargetGroup) : UnityEditor.ManagedStrippingLevel
            /** Gets .NET API compatibility level for specified BuildTargetGroup.
            */
            public static GetApiCompatibilityLevel ($buildTargetGroup: UnityEditor.BuildTargetGroup) : UnityEditor.ApiCompatibilityLevel
            /** Sets .NET API compatibility level for specified BuildTargetGroup.
            */
            public static SetApiCompatibilityLevel ($buildTargetGroup: UnityEditor.BuildTargetGroup, $value: UnityEditor.ApiCompatibilityLevel) : void
            /** Enable or disable multithreaded rendering option for mobile platform.
            * @param targetGroup Mobile platform (Only iOS, tvOS and Android).
            */
            public static SetMobileMTRendering ($targetGroup: UnityEditor.BuildTargetGroup, $enable: boolean) : void
            /** Check if multithreaded rendering option for mobile platform is enabled.
            * @param targetGroup Mobile platform (Only iOS, tvOS and Android).
            * @returns Return true if multithreaded rendering option for targetGroup platform is enabled. 
            */
            public static GetMobileMTRendering ($targetGroup: UnityEditor.BuildTargetGroup) : boolean
            /** Get stack trace logging options.
            */
            public static GetStackTraceLogType ($logType: UnityEngine.LogType) : UnityEngine.StackTraceLogType
            /** Set stack trace logging options.
            Note: calling this function will implicitly call Application.SetStackTraceLogType.
            */
            public static SetStackTraceLogType ($logType: UnityEngine.LogType, $stackTraceType: UnityEngine.StackTraceLogType) : void
            /** Returns the list of available icon slots for the specified platform and  PlatformIconKind|kind.
            * @param platform The full list of platforms that support this API and the supported icon kinds can be found in PlatformIconKind|icon kinds.
            * @param kind Each platform supports a different set of PlatformIconKind|icon kinds. These can be found in the specific platform namespace (for example iOSPlatformIconKind.
            */
            public static GetPlatformIcons ($platform: UnityEditor.BuildTargetGroup, $kind: UnityEditor.PlatformIconKind) : System.Array$1<UnityEditor.PlatformIcon>
            /** Assign a list of icons for the specified platform and icon kind.
            * @param type Each platform supports a different set of PlatformIconKind|icon kinds. These can be found in the specific platform namespace (for example iOSPlatformIconKind).
            * @param platform The full list of platforms that support this API the supported  kinds can be found in PlatformIconKind|icon kinds.
            * @param icons All available PlatformIcon slots must be retrieved with GetPlatformIcons.
            */
            public static SetPlatformIcons ($platform: UnityEditor.BuildTargetGroup, $kind: UnityEditor.PlatformIconKind, $icons: System.Array$1<UnityEditor.PlatformIcon>) : void
            /** Retrieve all icon kinds supported by the specified platform.
            */
            public static GetSupportedIconKindsForPlatform ($platform: UnityEditor.BuildTargetGroup) : System.Array$1<UnityEditor.PlatformIconKind>
            /** Assign a list of icons for the specified platform.
            */
            public static SetIconsForTargetGroup ($platform: UnityEditor.BuildTargetGroup, $icons: System.Array$1<UnityEngine.Texture2D>, $kind: UnityEditor.IconKind) : void
            /** Assign a list of icons for the specified platform.
            */
            public static SetIconsForTargetGroup ($platform: UnityEditor.BuildTargetGroup, $icons: System.Array$1<UnityEngine.Texture2D>) : void
            /** Returns the list of assigned icons for the specified platform.
            */
            public static GetIconsForTargetGroup ($platform: UnityEditor.BuildTargetGroup, $kind: UnityEditor.IconKind) : System.Array$1<UnityEngine.Texture2D>
            /** Returns the list of assigned icons for the specified platform.
            */
            public static GetIconsForTargetGroup ($platform: UnityEditor.BuildTargetGroup) : System.Array$1<UnityEngine.Texture2D>
            /** Returns a list of icon sizes for the specified platform.
            */
            public static GetIconSizesForTargetGroup ($platform: UnityEditor.BuildTargetGroup, $kind: UnityEditor.IconKind) : System.Array$1<number>
            /** Returns a list of icon sizes for the specified platform.
            */
            public static GetIconSizesForTargetGroup ($platform: UnityEditor.BuildTargetGroup) : System.Array$1<number>
        }
        enum TargetGlesGraphics
        { OpenGLES_1_x = 0, OpenGLES_2_0 = 1, OpenGLES_3_0 = 2, Automatic = -1 }
        enum TargetIOSGraphics
        { OpenGLES_2_0 = 2, OpenGLES_3_0 = 3, Metal = 4, Automatic = -1 }
        /** Icon slot container.
        */
        class PlatformIcon extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The number of texture layers the icon slot currently contains.
            */
            public get layerCount(): number;
            public set layerCount(value: number);
            /** The maximum number of texture layers required by the icon slot.
            */
            public get maxLayerCount(): number;
            /** The minimum number of texture layers required by the icon slot.
            */
            public get minLayerCount(): number;
            /** The width of the icon in pixels.
            */
            public get width(): number;
            /** The height of the icon in pixels.
            */
            public get height(): number;
            /** The PlatformIconKind is specific to the target platform.
            */
            public get kind(): UnityEditor.PlatformIconKind;
            /** Retrieve the texture which is currently assigned to the specified layer.
            * @param layer Cannot be larger than PlatformIcon.maxLayerCount.
            */
            public GetTexture ($layer?: number) : UnityEngine.Texture2D
            public GetTextures () : System.Array$1<UnityEngine.Texture2D>
            /** Assign a texture to the specified layer.
            * @param layer Cannot be larger than PlatformIcon.maxLayerCount.
            */
            public SetTexture ($texture: UnityEngine.Texture2D, $layer?: number) : void
            /** Assign all available icon layers.
            * @param textures Must be an array of size PlatformIcon.maxLayerCount.
            */
            public SetTextures (...textures: UnityEngine.Texture2D[]) : void
        }
        /** Icon kind wrapper.
        */
        class PlatformIconKind extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Target Android device architecture.
        */
        enum AndroidTargetDevice
        { FAT = 0, ARMv7 = 3 }
        enum iOSTargetResolution
        { Native = 0, ResolutionAutoPerformance = 3, ResolutionAutoQuality = 4, Resolution320p = 5, Resolution640p = 6, Resolution768p = 7 }
        /** Supported iOS deployment versions.
        */
        enum iOSTargetOSVersion
        { iOS_4_0 = 10, iOS_4_1 = 12, iOS_4_2 = 14, iOS_4_3 = 16, iOS_5_0 = 18, iOS_5_1 = 20, iOS_6_0 = 22, iOS_7_0 = 24, iOS_7_1 = 26, iOS_8_0 = 28, iOS_8_1 = 30, Unknown = 999 }
        enum iOSSystemGestureDeferMode
        { None = 0, TopEdge = 1, LeftEdge = 2, BottomEdge = 4, RightEdge = 8, All = 15 }
        /** Android CPU architecture.
        */
        enum AndroidArchitecture
        { None = 0, ARMv7 = 1, ARM64 = 2, All = 4294967295 }
        /** Supported Android SDK versions.
        */
        enum AndroidSdkVersions
        { AndroidApiLevelAuto = 0, AndroidApiLevel16 = 16, AndroidApiLevel17 = 17, AndroidApiLevel18 = 18, AndroidApiLevel19 = 19, AndroidApiLevel21 = 21, AndroidApiLevel22 = 22, AndroidApiLevel23 = 23, AndroidApiLevel24 = 24, AndroidApiLevel25 = 25, AndroidApiLevel26 = 26, AndroidApiLevel27 = 27, AndroidApiLevel28 = 28 }
        /** Preferred application install location.
        */
        enum AndroidPreferredInstallLocation
        { Auto = 0, PreferExternal = 1, ForceInternal = 2 }
        /** Application should show ActivityIndicator when loading.
        */
        enum AndroidShowActivityIndicatorOnLoading
        { Large = 0, InversedLarge = 1, Small = 2, InversedSmall = 3, DontShow = -1 }
        /** Gamepad support level for Android TV.
        */
        enum AndroidGamepadSupportLevel
        { SupportsDPad = 0, SupportsGamepad = 1, RequiresGamepad = 2 }
        /** Android splash screen scale modes.
        */
        enum AndroidSplashScreenScale
        { Center = 0, ScaleToFit = 1, ScaleToFill = 2 }
        /** Describes the method for how content is displayed on the screen.
        */
        enum AndroidBlitType
        { Always = 0, Never = 1, Auto = 2 }
        /** Apple Mobile CPU architecture.
        */
        enum AppleMobileArchitecture
        { ARMv7 = 0, ARM64 = 1, Universal = 2 }
        /** Supported iOS SDK versions.
        */
        enum iOSSdkVersion
        { DeviceSDK = 988, SimulatorSDK = 989 }
        /** Target iOS device.
        */
        enum iOSTargetDevice
        { iPhoneOnly = 0, iPadOnly = 1, iPhoneAndiPad = 2 }
        /** Activity Indicator on loading.
        */
        enum iOSShowActivityIndicatorOnLoading
        { WhiteLarge = 0, White = 1, Gray = 2, DontShow = -1 }
        /** iOS status bar style.
        */
        enum iOSStatusBarStyle
        { Default = 0, LightContent = 1, BlackTranslucent = -1, BlackOpaque = -1 }
        /** Application behavior when entering background.
        */
        enum iOSAppInBackgroundBehavior
        { Custom = -1, Suspend = 0, Exit = 1 }
        /** Background modes supported by the application corresponding to project settings in Xcode.
        */
        enum iOSBackgroundMode
        { None = 0, Audio = 1, Location = 2, VOIP = 4, NewsstandContent = 8, ExternalAccessory = 16, BluetoothCentral = 32, BluetoothPeripheral = 64, Fetch = 128, RemoteNotification = 256 }
        /** iOS launch screen settings.
        */
        enum iOSLaunchScreenImageType
        { iPhonePortraitImage = 0, iPhoneLandscapeImage = 1, iPadImage = 2 }
        /** iOS launch screen settings.
        */
        enum iOSLaunchScreenType
        { Default = 0, ImageAndBackgroundRelative = 1, ImageAndBackgroundConstant = 4, CustomXib = 2, None = 3 }
        /** The type of the iOS provisioning profile if manual signing is used.
        */
        enum ProvisioningProfileType
        { Automatic = 0, Development = 1, Distribution = 2 }
        /** A device requirement description used for configuration of App Slicing.
        */
        class iOSDeviceRequirement extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The values of the device requirement description.
            */
            public get values(): System.Collections.Generic.IDictionary$2<string, string>;
            public constructor ()
        }
        /** Supported tvOS SDK versions.
        */
        enum tvOSSdkVersion
        { Device = 0, Simulator = 1 }
        /** Supported tvOS deployment versions.
        */
        enum tvOSTargetOSVersion
        { Unknown = 0, tvOS_9_0 = 900, tvOS_9_1 = 901 }
        /** Options for Exception support in WebGL.
        */
        enum WebGLExceptionSupport
        { None = 0, ExplicitlyThrownExceptionsOnly = 1, FullWithoutStacktrace = 2, FullWithStacktrace = 3 }
        /** An enum containing different compression types.
        */
        enum WebGLCompressionFormat
        { Brotli = 0, Gzip = 1, Disabled = 2 }
        /** The build format options available when building to WebGL.
        */
        enum WebGLLinkerTarget
        { Asm = 0, Wasm = 1, Both = 2 }
        enum XboxOneEncryptionLevel
        { None = 0, DevkitCompatible = 1, FullEncryption = 2 }
        enum XboxOnePackageUpdateGranularity
        { Chunk = 1, File = 2 }
        enum XboxOneLoggingLevel
        { AllLogging = 4, WarningsAndErrors = 2, ErrorsOnly = 1 }
        /** Represents different C# compilers that can be used to compile C# scripts.
        */
        enum ScriptCompiler
        { Mono = 0, Roslyn = 1 }
        /** AssetModificationProcessor lets you hook into saving of serialized assets and
        scenes which are edited inside Unity.
        */
        class AssetModificationProcessor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class SaveAssetsProcessor extends UnityEditor.AssetModificationProcessor
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class ScriptableSingleton$1<T> extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
        }
        /** Manages Scene Visibility in the editor.
        */
        class SceneVisibilityManager extends UnityEditor.ScriptableSingleton$1<UnityEditor.SceneVisibilityManager>
        {
            protected [__keep_incompatibility]: never;
            public static add_visibilityChanged ($value: System.Action) : void
            public static remove_visibilityChanged ($value: System.Action) : void
            public static add_pickingChanged ($value: System.Action) : void
            public static remove_pickingChanged ($value: System.Action) : void
            public HideAll () : void
            public DisableAllPicking () : void
            /** Shows a GameObject, or an array of GameObjects, and its descendants.
            * @param gameObject GameObject to show.
            * @param gameObjects Array of GameObjects to show.
            * @param includeDescendants Whether to include descendants.
            */
            public Show ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Hides a GameObject, or an Array of GameObjects,  and their descendants.
            * @param gameObject GameObject to hide.
            * @param gameObjects Array of GameObjects to hide.
            * @param includeDescendants Whether to also hide descendants.
            */
            public Hide ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Disables picking on a GameObject, or an Array of GameObjects, and their descendants.
            * @param gameObject GameObject on which to disable picking.
            * @param includeDescendants Whether to include descendants.
            * @param gameObjects Array of GameObjects on which to disable picking.
            */
            public DisablePicking ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Enables picking on a GameObject, or an array of GameObjects, and its descendants.
            * @param includeDescendants Whether to include descendants.
            * @param gameObject GameObject on which to enable picking.
            * @param gameObjects Array of GameObjects on which to enable picking.
            */
            public EnablePicking ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            public ShowAll () : void
            public EnableAllPicking () : void
            /** Shows all GameObjects in scene.
            * @param scene Scene containing GameObjects to show.
            */
            public Show ($scene: UnityEngine.SceneManagement.Scene) : void
            /** Enables picking on all GameObjects in a Scene.
            * @param scene Scene containing GameObjects on which to enable picking.
            */
            public EnablePicking ($scene: UnityEngine.SceneManagement.Scene) : void
            /** Hides all GameObjects in a scene.
            * @param scene Scene containing GameObjects to hide.
            */
            public Hide ($scene: UnityEngine.SceneManagement.Scene) : void
            /** Disables picking on all GameObjects in a Scene.
            * @param scene Scene containing GameObjects on which to disable picking.
            */
            public DisablePicking ($scene: UnityEngine.SceneManagement.Scene) : void
            /** Checks the hidden state of a GameObject and, optionally, its descendants.
            * @param gameObject GameObject to check.
            * @param includeDescendants Specify true to check the GameObject and all its descendants. Set to false to check the GameObject.
            * @returns When includeDescendants is true, this method returns true when the GameObject and all its descendants are hidden. When includeDescendants is false, this method returns true when the GameObject is hidden. 
            */
            public IsHidden ($gameObject: UnityEngine.GameObject, $includeDescendants?: boolean) : boolean
            /** Checks the picking state of a GameObject and, optionally, its descendants.
            * @param gameObject GameObject to check.
            * @param includeDescendants Specify true to check the GameObject and all its descendants. Set to false to check the GameObject.
            * @returns When includeDescendants is true, this method returns true when the GameObject and all its descendants have picking disabled. When includeDescendants is false, this method returns true when the GameObject has picking disabled. 
            */
            public IsPickingDisabled ($gameObject: UnityEngine.GameObject, $includeDescendants?: boolean) : boolean
            /** Checks whether root GameObjects, and all their descendants, are hidden in a Scene.
            * @param scene Scene to check.
            * @returns Returns true if all root GameObjects of the Scene and all their descendants are hidden. 
            */
            public AreAllDescendantsHidden ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Checks whether all the descendants of a GameObject have picking disabled.
            * @param scene Scene to check.
            * @returns Returns true if all descendants have picking disabled. 
            */
            public IsPickingDisabledOnAllDescendants ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Checks whether any descendants are hidden.
            * @param scene Scene to check.
            * @returns Returns true when at least one hidden descendant is found. 
            */
            public AreAnyDescendantsHidden ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Checks whether any descendants have picking disabled.
            * @param scene Scene to check.
            * @returns Returns true when at least one descendant with picking disabled is found. 
            */
            public IsPickingDisabledOnAnyDescendant ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Shows a GameObject, or an array of GameObjects, and its descendants.
            * @param gameObject GameObject to show.
            * @param gameObjects Array of GameObjects to show.
            * @param includeDescendants Whether to include descendants.
            */
            public Show ($gameObjects: System.Array$1<UnityEngine.GameObject>, $includeDescendants: boolean) : void
            /** Hides a GameObject, or an Array of GameObjects,  and their descendants.
            * @param gameObject GameObject to hide.
            * @param gameObjects Array of GameObjects to hide.
            * @param includeDescendants Whether to also hide descendants.
            */
            public Hide ($gameObjects: System.Array$1<UnityEngine.GameObject>, $includeDescendants: boolean) : void
            /** Disables picking on a GameObject, or an Array of GameObjects, and their descendants.
            * @param gameObject GameObject on which to disable picking.
            * @param includeDescendants Whether to include descendants.
            * @param gameObjects Array of GameObjects on which to disable picking.
            */
            public DisablePicking ($gameObjects: System.Array$1<UnityEngine.GameObject>, $includeDescendants: boolean) : void
            /** Enables picking on a GameObject, or an array of GameObjects, and its descendants.
            * @param includeDescendants Whether to include descendants.
            * @param gameObject GameObject on which to enable picking.
            * @param gameObjects Array of GameObjects on which to enable picking.
            */
            public EnablePicking ($gameObjects: System.Array$1<UnityEngine.GameObject>, $includeDescendants: boolean) : void
            /** Isolates a GameObject and its descendants.
            * @param gameObject GameObject to isolate.
            * @param includeDescendants Whether to include descendants.
            */
            public Isolate ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Isolates an Array of GameObjects and their descendants.
            * @param gameObjects Array of GameObjects to isolate.
            * @param includeDescendants Whether to include descendants.
            */
            public Isolate ($gameObjects: System.Array$1<UnityEngine.GameObject>, $includeDescendants: boolean) : void
            /** Toggles the visible state of a GameObject.
            * @param gameObject GameObject on which to toggle visibility.
            * @param includeDescendants Whether to include descendants.
            */
            public ToggleVisibility ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Toggles the picking ability of a GameObject.
            * @param gameObject GameObject on which to toggle picking ability.
            * @param includeDescendants Whether to include descendants.
            */
            public TogglePicking ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Checks whether all the descendants of a GameObject are hidden.
            * @param gameObject GameObject to check.
            * @returns Returns true if all descendants are hidden. 
            */
            public AreAllDescendantsHidden ($gameObject: UnityEngine.GameObject) : boolean
            /** Checks whether all the descendants are visible.
            * @param gameObject GameObject to check.
            * @returns Returns true if all descendants of the GameObject are visible. 
            */
            public AreAllDescendantsVisible ($gameObject: UnityEngine.GameObject) : boolean
            /** Checks whether root GameObjects, and all their descendants, have picking disabled in a scene.
            * @param gameObject GameObject to check.
            * @returns Returns true if all root GameObjects of the Scene and all their descendants have picking disabled. 
            */
            public IsPickingDisabledOnAllDescendants ($gameObject: UnityEngine.GameObject) : boolean
            /** Checks whether all the descendants are pickable.
            * @param gameObject GameObject on which to do the check.
            * @returns Returns true if all descendants of the GameObject are pickable. 
            */
            public IsPickingEnabledOnAllDescendants ($gameObject: UnityEngine.GameObject) : boolean
            public IsCurrentStageIsolated () : boolean
            public ExitIsolation () : void
            public constructor ()
        }
        /** Derive from this class to create an editor wizard.
        */
        class ScriptableWizard extends UnityEditor.EditorWindow
        {
            protected [__keep_incompatibility]: never;
            /** Allows you to set the help text of the wizard.
            */
            public get helpString(): string;
            public set helpString(value: string);
            /** Allows you to set the error text of the wizard.
            */
            public get errorString(): string;
            public set errorString(value: string);
            /** Allows you to set the text shown on the create button of the wizard.
            */
            public get createButtonName(): string;
            public set createButtonName(value: string);
            /** Allows you to set the text shown on the optional other button of the wizard. Leave this parameter out to leave the button out.
            */
            public get otherButtonName(): string;
            public set otherButtonName(value: string);
            /** Allows you to enable and disable the wizard create button, so that the user can not click it.
            */
            public get isValid(): boolean;
            public set isValid(value: boolean);
            public static DisplayWizard ($title: string, $klass: System.Type, $createButtonName: string) : UnityEditor.ScriptableWizard
            public static DisplayWizard ($title: string, $klass: System.Type) : UnityEditor.ScriptableWizard
            /** Creates a wizard.
            * @param title The title shown at the top of the wizard window.
            * @param klass The class implementing the wizard. It has to derive from ScriptableWizard.
            * @param createButtonName The text shown on the create button.
            * @param otherButtonName The text shown on the optional other button. Leave this parameter out to leave the button out.
            * @returns The wizard. 
            */
            public static DisplayWizard ($title: string, $klass: System.Type, $createButtonName: string, $otherButtonName: string) : UnityEditor.ScriptableWizard
            public constructor ()
        }
        /** SelectionMode can be used to tweak the selection returned by Selection.GetTransforms.
        */
        enum SelectionMode
        { Unfiltered = 0, TopLevel = 1, Deep = 2, ExcludePrefab = 4, Editable = 8, Assets = 16, DeepAssets = 32, OnlyUserModifiable = 8 }
        /** Access to the selection in the editor.
        */
        class Selection extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Delegate callback triggered when currently active/selected item has changed.
            */
            public static selectionChanged : System.Action
            /** Returns the top level selection, excluding Prefabs.
            */
            public static get transforms(): System.Array$1<UnityEngine.Transform>;
            /** Returns the active transform. (The one shown in the inspector).
            */
            public static get activeTransform(): UnityEngine.Transform;
            public static set activeTransform(value: UnityEngine.Transform);
            /** Returns the actual game object selection. Includes Prefabs, non-modifiable objects.
            */
            public static get gameObjects(): System.Array$1<UnityEngine.GameObject>;
            /** Returns the active game object. (The one shown in the inspector).
            */
            public static get activeGameObject(): UnityEngine.GameObject;
            public static set activeGameObject(value: UnityEngine.GameObject);
            /** Returns the actual object selection. Includes Prefabs, non-modifiable objects.
            */
            public static get activeObject(): UnityEngine.Object;
            public static set activeObject(value: UnityEngine.Object);
            /** Returns the current context object, as was set via SetActiveObjectWithContext.
            */
            public static get activeContext(): UnityEngine.Object;
            /** Returns the instanceID of the actual object selection. Includes Prefabs, non-modifiable objects.
            */
            public static get activeInstanceID(): number;
            public static set activeInstanceID(value: number);
            /** The actual unfiltered selection from the Scene.
            */
            public static get objects(): System.Array$1<UnityEngine.Object>;
            public static set objects(value: System.Array$1<UnityEngine.Object>);
            /** The actual unfiltered selection from the Scene returned as instance ids instead of objects.
            */
            public static get instanceIDs(): System.Array$1<number>;
            public static set instanceIDs(value: System.Array$1<number>);
            /** Returns the guids of the selected assets.
            */
            public static get assetGUIDs(): System.Array$1<string>;
            /** Returns whether an object is contained in the current selection.
            */
            public static Contains ($instanceID: number) : boolean
            /** Selects an object with a context.
            * @param obj Object being selected (will be equal activeObject).
            * @param context Context object.
            */
            public static SetActiveObjectWithContext ($obj: UnityEngine.Object, $context: UnityEngine.Object) : void
            /** Allows for fine grained control of the selection type using the SelectionMode bitmask.
            * @param mode Options for refining the selection.
            */
            public static GetTransforms ($mode: UnityEditor.SelectionMode) : System.Array$1<UnityEngine.Transform>
            /** Returns whether an object is contained in the current selection.
            */
            public static Contains ($obj: UnityEngine.Object) : boolean
            /** Returns the current selection filtered by type and mode.
            * @param type Only objects of this type will be retrieved.
            * @param mode Further options to refine the selection.
            */
            public static GetFiltered ($type: System.Type, $mode: UnityEditor.SelectionMode) : System.Array$1<UnityEngine.Object>
            public constructor ()
        }
        /** SerializedObject and SerializedProperty are classes for editing serialized fields on Object|Unity objects in a completely generic way. These classes automatically handle dirtying individual serialized fields so they will be processed by the Undo system and styled correctly for Prefab overrides when drawn in the Inspector.
        */
        class SerializedObject extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** The inspected object (Read Only).
            */
            public get targetObject(): UnityEngine.Object;
            /** The inspected objects (Read Only).
            */
            public get targetObjects(): System.Array$1<UnityEngine.Object>;
            /** The context used to store and resolve ExposedReference types. This is set by the SerializedObject constructor.
            */
            public get context(): UnityEngine.Object;
            /** Is true when the SerializedObject has a modified property that has not been applied.
            */
            public get hasModifiedProperties(): boolean;
            /** Does the serialized object represents multiple objects due to multi-object editing? (Read Only)
            */
            public get isEditingMultipleObjects(): boolean;
            /** Defines the maximum size beyond which arrays cannot be edited when multiple objects are selected.
            */
            public get maxArraySizeForMultiEditing(): number;
            public set maxArraySizeForMultiEditing(value: number);
            public Dispose () : void
            public GetIterator () : UnityEditor.SerializedProperty
            /** Find serialized property by name.
            */
            public FindProperty ($propertyPath: string) : UnityEditor.SerializedProperty
            public ApplyModifiedProperties () : boolean
            public SetIsDifferentCacheDirty () : void
            public Update () : void
            public UpdateIfRequiredOrScript () : boolean
            public ApplyModifiedPropertiesWithoutUndo () : boolean
            /** Copies a value from a SerializedProperty to the corresponding serialized property on the serialized object.
            */
            public CopyFromSerializedProperty ($prop: UnityEditor.SerializedProperty) : void
            /** Copies a changed value from a SerializedProperty to the corresponding serialized property on the serialized object.
            */
            public CopyFromSerializedPropertyIfDifferent ($prop: UnityEditor.SerializedProperty) : boolean
            public constructor ($obj: UnityEngine.Object)
            public constructor ($obj: UnityEngine.Object, $context: UnityEngine.Object)
            public constructor ($objs: System.Array$1<UnityEngine.Object>)
            public constructor ($objs: System.Array$1<UnityEngine.Object>, $context: UnityEngine.Object)
            public constructor ()
        }
        /** Contains the following information about a shader:
        -If the shader has compilation errors.
        -If the shader is supported on the currently selected platform.
        -The name of the shader.
        */
        class ShaderInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The name of the shader.
            */
            public get name(): string;
            /** True if the shader is supported on the currently selected platform.
            */
            public get supported(): boolean;
            /** True if the shader has compilation errors.
            */
            public get hasErrors(): boolean;
        }
        /** Contains information about messages generated by Unity's Shader Compiler.
        */
        class ShaderMessage extends System.ValueType implements System.IEquatable$1<UnityEditor.ShaderMessage>
        {
            protected [__keep_incompatibility]: never;
            /** The message returned by the Unity Shader Compiler.
            */
            public get message(): string;
            /** An (optional) detailed message returned from the Unity Shader Compiler.
            */
            public get messageDetails(): string;
            /** The source file where the shader message was found.
            */
            public get file(): string;
            /** The line of code where the shader message was found.
            */
            public get line(): number;
            /** The specific platform where the Unity Shader Compiler discovered the message.
            */
            public get platform(): UnityEditor.Rendering.ShaderCompilerPlatform;
            /** Indicates the severity of the message returned from the Unity Shader Compiler.
            */
            public get severity(): UnityEditor.Rendering.ShaderCompilerMessageSeverity;
            /** Compares two ShaderMessage on an element-by-element basis.
            * @returns True if all fields of the message are equal, otherwise false. 
            */
            public Equals ($other: UnityEditor.ShaderMessage) : boolean
            /** Compares two ShaderMessage on an element-by-element basis.
            * @returns True if all fields of the message are equal, otherwise false. 
            */
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEditor.ShaderMessage, $right: UnityEditor.ShaderMessage) : boolean
            public static op_Inequality ($left: UnityEditor.ShaderMessage, $right: UnityEditor.ShaderMessage) : boolean
            public constructor ($msg: string, $sev?: UnityEditor.Rendering.ShaderCompilerMessageSeverity)
            public static Equals ($objA: any, $objB: any) : boolean
            public constructor ()
        }
        /** Utility functions to assist with working with shaders from the editor.
        */
        class ShaderUtil extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Does the current hardware support render textues.
            */
            public static get hardwareSupportsRectRenderTexture(): boolean;
            /** When true, the Editor is compiling some Shaders asynchronously at the point of query.
            */
            public static get anythingCompiling(): boolean;
            /** When true, asynchronous Shader compilation is allowed at the current call site.
            */
            public static get allowAsyncCompilation(): boolean;
            public static set allowAsyncCompilation(value: boolean);
            /** Determines whether the specified Shader contains a valid Procedural Instancing variant.
            * @param s The Shader to check.
            * @returns Returns true if the Shader has a valid Procedural Instancing variant. Returns false otherwise. 
            */
            public static HasProceduralInstancing ($s: UnityEngine.Shader) : boolean
            /** Returns the number of errors and warnings generated by the Unity Shader Compiler for the given Shader.
            * @param s The Shader instance to check for messages.
            * @returns The number of errors and warnings generated by the Unity Shader Compiler. 
            */
            public static GetShaderMessageCount ($s: UnityEngine.Shader) : number
            /** Returns each error and warning generated by the Unity Shader Compiler for the given Shader.
            * @param s The Shader instance to check for messages.
            * @returns An array of ShaderMessage structs containing the generated messages. 
            */
            public static GetShaderMessages ($s: UnityEngine.Shader) : System.Array$1<UnityEditor.ShaderMessage>
            /** Clear compile time messages for the given shader.
            */
            public static ClearShaderMessages ($s: UnityEngine.Shader) : void
            /** Returns the number of errors and warnings generated by the Unity Shader Compiler for the given ComputeShader.
            * @param s The ComputeShader instance to check for messages.
            * @returns The number of errors and warnings generated by the Unity Shader Compiler. 
            */
            public static GetComputeShaderMessageCount ($s: UnityEngine.ComputeShader) : number
            /** Returns each error and warning generated by the Unity Shader Compiler for the given ComputeShader.
            * @param s The ComputeShader instance to check for messages.
            * @returns An array of ShaderMessage structs containing the generated messages. 
            */
            public static GetComputeShaderMessages ($s: UnityEngine.ComputeShader) : System.Array$1<UnityEditor.ShaderMessage>
            /** Returns the number of errors and warnings generated by the Shader Compiler for the given RayTracingShader.
            * @param s The RayTracingShader instance to check for messages.
            * @returns The number of errors and warnings generated by the Shader Compiler. 
            */
            public static GetRayTracingShaderMessageCount ($s: UnityEngine.Experimental.Rendering.RayTracingShader) : number
            /** Returns each error and warning generated by the Shader Compiler for the given RayTracingShader.
            * @param s The RayTracingShader instance to check for messages.
            * @returns An array of ShaderMessage structs containing the generated messages. 
            */
            public static GetRayTracingShaderMessages ($s: UnityEngine.Experimental.Rendering.RayTracingShader) : System.Array$1<UnityEditor.ShaderMessage>
            /** Returns the number of ray generation Shaders defined whitin a given RayTracingShader.
            * @param s The RayTracingShader instance.
            * @returns The number of ray generation Shaders defined in the RayTracingShader instance passed as argument. 
            */
            public static GetRayGenerationShaderCount ($s: UnityEngine.Experimental.Rendering.RayTracingShader) : number
            /** Returns the name of a user-defined ray generation Shader from within a RayTracingShader.
            * @param s The RayTracingShader instance.
            * @param shaderIndex The ray generation Shader index for which to retrieve the name. The ray generation Shaders defined in a RayTracingShader are sorted alphabetically by the Shader compiler.
            * @returns The name of the ray generation Shader at the index passed using the "shaderIndex" argument. 
            */
            public static GetRayGenerationShaderName ($s: UnityEngine.Experimental.Rendering.RayTracingShader, $shaderIndex: number) : string
            /** Returns the number of miss Shaders defined whitin a given RayTracingShader.
            * @param s The RayTracingShader instance.
            * @returns The number of miss Shaders defined in the RayTracingShader instance passed as argument. 
            */
            public static GetMissShaderCount ($s: UnityEngine.Experimental.Rendering.RayTracingShader) : number
            /** Returns the name of a user-defined miss Shader from within a RayTracingShader.
            * @param s The RayTracingShader instance.
            * @param shaderIndex The miss Shader index for which to retrieve the name. The miss Shaders defined in a RayTracingShader are sorted alphabetically by the Shader compiler.
            * @returns The name of the miss Shader at the index passed using the "shaderIndex" argument. 
            */
            public static GetMissShaderName ($s: UnityEngine.Experimental.Rendering.RayTracingShader, $shaderIndex: number) : string
            /** Returns the ray payload size of a user-defined miss Shader from within a RayTracingShader.
            * @param s The RayTracingShader instance.
            * @param shaderIndex The miss Shader index for which to retrieve the ray payload size.
            * @returns The ray payload size in bytes. 
            */
            public static GetMissShaderRayPayloadSize ($s: UnityEngine.Experimental.Rendering.RayTracingShader, $shaderIndex: number) : number
            /** Returns the number of callable Shaders defined whitin a given RayTracingShader.
            * @param s The RayTracingShader instance.
            * @returns The number of callable Shaders defined in the RayTracingShader instance passed as argument. 
            */
            public static GetCallableShaderCount ($s: UnityEngine.Experimental.Rendering.RayTracingShader) : number
            /** Returns the name of a user-defined callable Shader from within a RayTracingShader.
            * @param s The RayTracingShader instance.
            * @param shaderIndex The callable Shader index for which to retrieve the name. The callable Shaders defined in a RayTracingShader are sorted alphabetically by the Shader compiler.
            * @returns The name of the callable Shader at the index passed using the "shaderIndex" argument. 
            */
            public static GetCallableShaderName ($s: UnityEngine.Experimental.Rendering.RayTracingShader, $shaderIndex: number) : string
            /** Returns the parameter size of a user-defined callable Shader from within a RayTracingShader.
            * @param s The RayTracingShader instance.
            * @param shaderIndex The callable Shader index for which to retrieve the parameter size.
            * @returns The parameter size in bytes. 
            */
            public static GetCallableShaderParamSize ($s: UnityEngine.Experimental.Rendering.RayTracingShader, $shaderIndex: number) : number
            /** Clears all internally-cached data that was generated for the given shader, such as errors and compilation info.
            */
            public static ClearCachedData ($s: UnityEngine.Shader) : void
            public static CreateShaderAsset ($source: string, $compileInitialShaderVariants: boolean) : UnityEngine.Shader
            public static CreateShaderAsset ($source: string) : UnityEngine.Shader
            /** Replaces the existing source code in the specified shader with the source code in the supplied string. The override provides a boolean that specifies whether the shader should be recompiled.
            * @param source A string that contains a shader written in code.
            * @param compileInitialShaderVariants Set to true to compile the code contained in the source string; otherwise false.
            * @param shader The Shader to update.
            */
            public static UpdateShaderAsset ($shader: UnityEngine.Shader, $source: string, $compileInitialShaderVariants: boolean) : void
            /** Replaces the existing source code in the specified shader with the source code in the supplied string. The override provides a boolean that specifies whether the shader should be recompiled.
            * @param source A string that contains a shader written in code.
            * @param compileInitialShaderVariants Set to true to compile the code contained in the source string; otherwise false.
            * @param shader The Shader to update.
            */
            public static UpdateShaderAsset ($shader: UnityEngine.Shader, $source: string) : void
            /** Register a user created shader.
            */
            public static RegisterShader ($shader: UnityEngine.Shader) : void
            public static GetAllShaderInfo () : System.Array$1<UnityEditor.ShaderInfo>
            /** Adds shader compilation mode command in the CommandBuffer.
            * @param cmd Target CommandBuffer.
            * @param allow Is async Shader compilation allowed or not.
            */
            public static SetAsyncCompilation ($cmd: UnityEngine.Rendering.CommandBuffer, $allow: boolean) : void
            /** Restores the previous Shader compilation mode in this CommandBuffer scope.
            * @param cmd Target CommandBuffer.
            */
            public static RestoreAsyncCompilation ($cmd: UnityEngine.Rendering.CommandBuffer) : void
            /** Checks if the Shader variant for the given pass in the Material has already been compiled.
            * @param material The Material to check against.
            * @param pass The index of the Shader pass to check.
            */
            public static IsPassCompiled ($material: UnityEngine.Material, $pass: number) : boolean
            /** Request the Editor to compile the Shader Variant needed for the specific pass of the given Material.
            * @param material Target Material.
            * @param pass Index of the target Shader pass.
            * @param forceSync Forces the script execution to wait until the compilation has finished. Optional.
            */
            public static CompilePass ($material: UnityEngine.Material, $pass: number, $forceSync?: boolean) : void
            /** Get the number of properties in Shader s.
            * @param s The shader to check against.
            */
            public static GetPropertyCount ($s: UnityEngine.Shader) : number
            /** Get the name of the shader propery at index propertyIdx of Shader s.
            * @param s The shader to check against.
            * @param propertyIdx The property index to use.
            */
            public static GetPropertyName ($s: UnityEngine.Shader, $propertyIdx: number) : string
            /** Get the ShaderProperyType of the shader propery at index propertyIdx of Shader s.
            * @param s The shader to check against.
            * @param propertyIdx The property index to use.
            */
            public static GetPropertyType ($s: UnityEngine.Shader, $propertyIdx: number) : UnityEditor.ShaderUtil.ShaderPropertyType
            /** Get the description of the shader propery at index propertyIdx of Shader s.
            * @param s The shader to check against.
            * @param propertyIdx The property index to use.
            */
            public static GetPropertyDescription ($s: UnityEngine.Shader, $propertyIdx: number) : string
            /** Get Limits for a range property at index propertyIdx of Shader s.
            * @param defminmax Which value to get: 0 = default, 1 = min, 2 = max.
            * @param s The shader to check against.
            * @param propertyIdx The property index to use.
            */
            public static GetRangeLimits ($s: UnityEngine.Shader, $propertyIdx: number, $defminmax: number) : number
            /** Gets texture dimension of a shader property.
            * @param s The shader to get the property from.
            * @param propertyIdx The property index to use.
            * @returns Texture dimension. 
            */
            public static GetTexDim ($s: UnityEngine.Shader, $propertyIdx: number) : UnityEngine.Rendering.TextureDimension
            /** Is the shader propery at index propertyIdx of Shader s hidden?
            * @param s The shader to check against.
            * @param propertyIdx The property index to use.
            */
            public static IsShaderPropertyHidden ($s: UnityEngine.Shader, $propertyIdx: number) : boolean
            /** Is the shader propery at index propertyIdx of Shader s a NonModifiableTextureProperty?
            * @param s The shader to check against.
            * @param propertyIdx The property index to use.
            */
            public static IsShaderPropertyNonModifiableTexureProperty ($s: UnityEngine.Shader, $propertyIdx: number) : boolean
            /** Get the shader data for a specific shader.
            * @param shader The shader to get data from.
            * @returns The shader data for the provided shader. 
            */
            public static GetShaderData ($shader: UnityEngine.Shader) : UnityEditor.ShaderData
            /** Returns true if the given Shader generated any errors. Ignores warnings.
            * @param shader The Shader instance to check for errors.
            * @returns True if the Shader generated errors, false if there were no errors. 
            */
            public static ShaderHasError ($shader: UnityEngine.Shader) : boolean
            public constructor ()
        }
        /** This class describes a shader.
        */
        class ShaderData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the index of the active subshader or -1 if none is currently active.
            */
            public get ActiveSubshaderIndex(): number;
            /** The number of subshaders used by this shader.
            */
            public get SubshaderCount(): number;
            /** The shader attached to this data set.
            */
            public get SourceShader(): UnityEngine.Shader;
            /** Returns the active subshader or null if none is currently active.
            */
            public get ActiveSubshader(): UnityEditor.ShaderData.Subshader;
            /** Get a subshader.
            * @param index The index of the subshader.
            * @returns The associated subshader or null if none exists. 
            */
            public GetSubshader ($index: number) : UnityEditor.ShaderData.Subshader
        }
        /** StaticOcclusionCulling lets you perform static occlusion culling operations.
        */
        class StaticOcclusionCulling extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Used to check if asynchronous generation of static occlusion culling data is still running.
            */
            public static get isRunning(): boolean;
            public static get smallestOccluder(): number;
            public static set smallestOccluder(value: number);
            public static get smallestHole(): number;
            public static set smallestHole(value: number);
            public static get backfaceThreshold(): number;
            public static set backfaceThreshold(value: number);
            /** Does the Scene contain any occlusion portals that were added manually rather than automatically?
            */
            public static get doesSceneHaveManualPortals(): boolean;
            /** Returns the size in bytes that the PVS data is currently taking up in this Scene on disk.
            */
            public static get umbraDataSize(): number;
            public static Compute () : boolean
            public static GenerateInBackground () : boolean
            public static RemoveCacheFolder () : void
            public static Cancel () : void
            public static Clear () : void
            public static SetDefaultOcclusionBakeSettings () : void
        }
        /** Used to visualize static occlusion culling at development time in Scene view.
        */
        class StaticOcclusionCullingVisualization extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** If set to true, visualization of target volumes is enabled.
            */
            public static get showOcclusionCulling(): boolean;
            public static set showOcclusionCulling(value: boolean);
            /** If set to true, the visualization lines of the PVS volumes will show all cells rather than cells after culling.
            */
            public static get showPreVisualization(): boolean;
            public static set showPreVisualization(value: boolean);
            /** If set to true, visualization of view volumes is enabled.
            */
            public static get showViewVolumes(): boolean;
            public static set showViewVolumes(value: boolean);
            public static get showDynamicObjectBounds(): boolean;
            public static set showDynamicObjectBounds(value: boolean);
            /** If set to true, visualization of portals is enabled.
            */
            public static get showPortals(): boolean;
            public static set showPortals(value: boolean);
            /** If set to true, visualization of portals is enabled.
            */
            public static get showVisibilityLines(): boolean;
            public static set showVisibilityLines(value: boolean);
            /** If set to true, culling of geometry is enabled.
            */
            public static get showGeometryCulling(): boolean;
            public static set showGeometryCulling(value: boolean);
            public static get isPreviewOcclusionCullingCameraInPVS(): boolean;
            public static get previewOcclusionCamera(): UnityEngine.Camera;
            public static get previewOcclucionCamera(): UnityEngine.Camera;
        }
        /** Provides methods for fast type extraction from asssemblies loaded into the Unity Domain.
        */
        class TypeCache extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Retrieves a collection of types marked with the T attribute.
            * @param attrType Attribute type.
            * @returns Returns a collection of types. 
            */
            public static GetTypesWithAttribute ($attrType: System.Type) : UnityEditor.TypeCache.TypeCollection
            /** Retrieves a collection of methods marked with the T attribute.
            * @param attrType Attribute type.
            * @returns Returns a MethodInfo collection of methods marked with the T attribute. 
            */
            public static GetMethodsWithAttribute ($attrType: System.Type) : UnityEditor.TypeCache.MethodCollection
            /** Retrieves a collection of types derived from the T type.
            * @param parentType Type of a class or interface.
            * @returns Returns a collection of derived types. 
            */
            public static GetTypesDerivedFrom ($parentType: System.Type) : UnityEditor.TypeCache.TypeCollection
        }
        /** Lets you register undo operations on specific objects you are about to perform changes on.
        */
        class Undo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Callback that is triggered after an undo or redo was executed.
            */
            public static undoRedoPerformed : UnityEditor.Undo.UndoRedoCallback
            /** Invoked before the Undo system performs a flush.
            */
            public static willFlushUndoRecord : UnityEditor.Undo.WillFlushUndoRecord
            /** Callback that is triggered whenever a new set of property modifications is created.
            */
            public static postprocessModifications : UnityEditor.Undo.PostprocessModifications
            /** Stores a copy of the object states on the undo stack.
            * @param objectToUndo The object whose state changes need to be undone.
            * @param name The name of the undo operation.
            */
            public static RegisterCompleteObjectUndo ($objectToUndo: UnityEngine.Object, $name: string) : void
            /** This is equivalent to calling the first overload mutiple times, save for the fact that only one undo operation will be generated for this one.
            * @param objectsToUndo An array of objects whose state changes need to be undone.
            * @param name The name of the undo operation.
            */
            public static RegisterCompleteObjectUndo ($objectsToUndo: System.Array$1<UnityEngine.Object>, $name: string) : void
            /** Sets the parent of transform to the new parent and records an undo operation.
            * @param transform The Transform component whose parent is to be changed.
            * @param newParent The parent Transform to be assigned.
            * @param name The name of this action, to be stored in the Undo history buffer.
            */
            public static SetTransformParent ($transform: UnityEngine.Transform, $newParent: UnityEngine.Transform, $name: string) : void
            /** Move a GameObject from its current Scene to a new Scene.
            It is required that the GameObject is at the root of its current Scene.
            * @param go GameObject to move.
            * @param scene Scene to move the GameObject into.
            * @param name Name of the undo action.
            */
            public static MoveGameObjectToScene ($go: UnityEngine.GameObject, $scene: UnityEngine.SceneManagement.Scene, $name: string) : void
            /** Register an undo operations for a newly created object.
            * @param objectToUndo The object that was created.
            * @param name The name of the action to undo. Think "Undo ...." in the main menu.
            */
            public static RegisterCreatedObjectUndo ($objectToUndo: UnityEngine.Object, $name: string) : void
            /** Destroys the object and records an undo operation so that it can be recreated.
            * @param objectToUndo The object that will be destroyed.
            */
            public static DestroyObjectImmediate ($objectToUndo: UnityEngine.Object) : void
            /** Adds a component to the game object and registers an undo operation for this action.
            * @param gameObject The game object you want to add the component to.
            * @param type The type of component you want to add.
            * @returns The newly added component. 
            */
            public static AddComponent ($gameObject: UnityEngine.GameObject, $type: System.Type) : UnityEngine.Component
            /** Copy the states of a hierarchy of objects onto the undo stack.
            * @param objectToUndo The object used to determine a hierarchy of objects whose state changes need to be undone.
            * @param name The name of the undo operation.
            */
            public static RegisterFullObjectHierarchyUndo ($objectToUndo: UnityEngine.Object, $name: string) : void
            /** Records any changes done on the object after the RecordObject function.
            * @param objectToUndo The reference to the object that you will be modifying.
            * @param name The title of the action to appear in the undo history (i.e. visible in the undo menu).
            */
            public static RecordObject ($objectToUndo: UnityEngine.Object, $name: string) : void
            /** Records multiple undoable objects in a single call. This is the same as calling Undo.RecordObject multiple times.
            */
            public static RecordObjects ($objectsToUndo: System.Array$1<UnityEngine.Object>, $name: string) : void
            /** Removes all Undo operation for the identifier object registered using Undo.RegisterCompleteObjectUndo from the undo stack.
            */
            public static ClearUndo ($identifier: UnityEngine.Object) : void
            public static PerformUndo () : void
            public static PerformRedo () : void
            public static IncrementCurrentGroup () : void
            public static GetCurrentGroup () : number
            public static GetCurrentGroupName () : string
            /** Set the name of the current undo group.
            * @param name New name of the current undo group.
            */
            public static SetCurrentGroupName ($name: string) : void
            public static RevertAllInCurrentGroup () : void
            /** Performs all undo operations up to the group index without storing a redo operation in the process.
            */
            public static RevertAllDownToGroup ($group: number) : void
            /** Collapses all undo operation up to group index together into one step.
            */
            public static CollapseUndoOperations ($groupIndex: number) : void
            public static ClearAll () : void
            public static FlushUndoRecordObjects () : void
            public constructor ()
        }
        /** See Also: Undo.postprocessModifications.
        */
        class UndoPropertyModification extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The previous value of the modified property.
            See Also: PropertyModification .
            */
            public previousValue : UnityEditor.PropertyModification
            /** 
            The current value of the modified property.
            See Also: PropertyModification.
            */
            public currentValue : UnityEditor.PropertyModification
            /** Indicates whether to retain modifications when the targeted object is an instance of a Prefab.
            */
            public get keepPrefabOverride(): boolean;
            public set keepPrefabOverride(value: boolean);
        }
        class Unsupported extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get useScriptableRenderPipeline(): boolean;
            public static set useScriptableRenderPipeline(value: boolean);
            public static CaptureScreenshotImmediate ($filePath: string, $x: number, $y: number, $width: number, $height: number) : void
            public static GetSubmenusCommands ($menuPath: string) : System.Array$1<string>
            public static GetTypeFromFullName ($fullName: string) : System.Type
            public static GetSubmenus ($menuPath: string) : System.Array$1<string>
            public static GetSubmenusIncludingSeparators ($menuPath: string) : System.Array$1<string>
            public static PrepareObjectContextMenu ($c: UnityEngine.Object, $contextUserData: number) : void
            public static IsDeveloperBuild () : boolean
            public static IsDeveloperMode () : boolean
            public static IsSourceBuild () : boolean
            public static IsBleedingEdgeBuild () : boolean
            public static IsDestroyScriptableObject ($target: UnityEngine.ScriptableObject) : boolean
            public static IsNativeCodeBuiltInReleaseMode () : boolean
            public static GetBaseUnityDeveloperFolder () : string
            public static StopPlayingImmediately () : void
            public static SceneTrackerFlushDirty () : void
            public static SetAllowCursorHide ($allow: boolean) : void
            public static SetOverrideLightingSettings ($scene: UnityEngine.SceneManagement.Scene) : boolean
            public static RestoreOverrideLightingSettings () : void
            public static SetRenderSettingsUseFogNoDirty ($fog: boolean) : void
            public static SetSceneViewDebugModeExposureNoDirty ($exposure: number) : void
            public static SetQualitySettingsShadowDistanceTemporarily ($distance: number) : void
            public static DeleteGameObjectSelection () : void
            public static CopyGameObjectsToPasteboard () : void
            public static PasteGameObjectsFromPasteboard () : void
            public static GetSerializedAssetInterfaceSingleton ($className: string) : UnityEngine.Object
            public static DuplicateGameObjectsUsingPasteboard () : void
            public static CopyComponentToPasteboard ($component: UnityEngine.Component) : boolean
            public static PasteComponentFromPasteboard ($go: UnityEngine.GameObject) : boolean
            public static PasteComponentValuesFromPasteboard ($component: UnityEngine.Component) : boolean
            public static HasStateMachineTransitionDataInPasteboard () : boolean
            public static AreAllParametersInDestination ($transition: UnityEngine.Object, $controller: UnityEditor.Animations.AnimatorController, $missingParameters: System.Collections.Generic.List$1<string>) : boolean
            public static DestinationHasCompatibleParameterTypes ($transition: UnityEngine.Object, $controller: UnityEditor.Animations.AnimatorController, $mismatchedParameters: System.Collections.Generic.List$1<string>) : boolean
            public static CanPasteParametersToTransition ($transition: UnityEngine.Object, $controller: UnityEditor.Animations.AnimatorController) : boolean
            public static CopyStateMachineTransitionParametersToPasteboard ($transition: UnityEngine.Object, $controller: UnityEditor.Animations.AnimatorController) : void
            public static PasteToStateMachineTransitionParametersFromPasteboard ($transition: UnityEngine.Object, $controller: UnityEditor.Animations.AnimatorController, $conditions: boolean, $parameters: boolean) : void
            public static CopyStateMachineDataToPasteboard ($stateMachineObject: UnityEngine.Object, $controller: UnityEditor.Animations.AnimatorController, $layerIndex: number) : void
            public static PasteToStateMachineFromPasteboard ($sm: UnityEditor.Animations.AnimatorStateMachine, $controller: UnityEditor.Animations.AnimatorController, $layerIndex: number, $position: UnityEngine.Vector3) : void
            public static HasStateMachineDataInPasteboard () : boolean
            public static SmartReset ($obj: UnityEngine.Object) : void
            public static ResolveSymlinks ($path: string) : string
            public static ResolveRedirectedPath ($path: string) : string
            public static SetApplicationSettingCompressAssetsOnImport ($value: boolean) : void
            public static GetApplicationSettingCompressAssetsOnImport () : boolean
            public static GetLocalIdentifierInFileForPersistentObject ($obj: UnityEngine.Object) : bigint
            public static IsHiddenFile ($path: string) : boolean
            public static ClearSkinCache () : void
        }
        /** Unwrapping settings.
        */
        class UnwrapParam extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Maximum allowed angle distortion (0..1).
            */
            public angleError : number
            /** Maximum allowed area distortion (0..1).
            */
            public areaError : number
            /** This angle (in degrees) or greater between triangles will cause seam to be created.
            */
            public hardAngle : number
            /** How much uv-islands will be padded.
            */
            public packMargin : number
            /** Will set default values for params.
            */
            public static SetDefaults ($param: $Ref<UnityEditor.UnwrapParam>) : void
        }
        /** This class holds everything you may need in regard to uv-unwrapping.
        */
        class Unwrapping extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Will generate per-triangle uv (3 UVs for each triangle) with default settings.
            * @param src The source mesh to generate UVs for.
            * @returns The list of UVs generated. 
            */
            public static GeneratePerTriangleUV ($src: UnityEngine.Mesh) : System.Array$1<UnityEngine.Vector2>
            /** Will generate per-triangle uv (3 UVs for each triangle) with provided settings.
            * @param src The source mesh to generate UVs for.
            * @param settings Allows you to specify custom parameters to control the unwrapping.
            * @returns The list of UVs generated. 
            */
            public static GeneratePerTriangleUV ($src: UnityEngine.Mesh, $settings: UnityEditor.UnwrapParam) : System.Array$1<UnityEngine.Vector2>
            /** Will auto generate uv2 with default settings for provided mesh, and fill them in.
            */
            public static GenerateSecondaryUVSet ($src: UnityEngine.Mesh) : void
            /** Will auto generate uv2 with provided settings for provided mesh, and fill them in.
            */
            public static GenerateSecondaryUVSet ($src: UnityEngine.Mesh, $settings: UnityEditor.UnwrapParam) : void
        }
        /** Use these enum flags to specify which elements of a vertex to compress.
        */
        enum VertexChannelCompressionFlags
        { None = 0, Position = 1, Normal = 2, Tangent = 4, Color = 8, TexCoord0 = 16, TexCoord1 = 32, TexCoord2 = 64, TexCoord3 = 128, kPosition = 1, kNormal = 2, kColor = 4, kUV0 = 8, kUV1 = 16, kUV2 = 32, kUV3 = 64, kTangent = 128 }
        class AnimationClipSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public additiveReferencePoseClip : UnityEngine.AnimationClip
            public additiveReferencePoseTime : number
            public startTime : number
            public stopTime : number
            public orientationOffsetY : number
            public level : number
            public cycleOffset : number
            public hasAdditiveReferencePose : boolean
            public loopTime : boolean
            public loopBlend : boolean
            public loopBlendOrientation : boolean
            public loopBlendPositionY : boolean
            public loopBlendPositionXZ : boolean
            public keepOriginalOrientation : boolean
            public keepOriginalPositionY : boolean
            public keepOriginalPositionXZ : boolean
            public heightFromFeet : boolean
            public mirror : boolean
            public constructor ()
        }
        /** AnimationMode is used by the AnimationWindow to store properties modified
        by the AnimationClip playback.
        */
        class AnimationMode extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The color used to show that a property is currently being animated.
            */
            public static get animatedPropertyColor(): UnityEngine.Color;
            /** The color used to show that an animated property automatically records changes in the animation clip.
            */
            public static get recordedPropertyColor(): UnityEngine.Color;
            /** The color used to show that an animated property has been modified.
            */
            public static get candidatePropertyColor(): UnityEngine.Color;
            /** Is the specified property currently in animation mode and being animated?
            * @param target The object to determine if it contained the animation.
            * @param propertyPath The name of the animation to search for.
            * @returns Whether the property search is found or not. 
            */
            public static IsPropertyAnimated ($target: UnityEngine.Object, $propertyPath: string) : boolean
            public static StopAnimationMode () : void
            public static InAnimationMode () : boolean
            public static StartAnimationMode () : void
            public static BeginSampling () : void
            public static EndSampling () : void
            /** Samples an AnimationClip on the object and also records any modified
            properties in AnimationMode.
            */
            public static SampleAnimationClip ($gameObject: UnityEngine.GameObject, $clip: UnityEngine.AnimationClip, $time: number) : void
            /** Marks a property as currently being animated.
            * @param binding Description of the animation clip curve being modified.
            * @param modification Object property being modified.
            * @param keepPrefabOverride Indicates whether to retain modifications when the targeted object is an instance of a Prefab.
            */
            public static AddPropertyModification ($binding: UnityEditor.EditorCurveBinding, $modification: UnityEditor.PropertyModification, $keepPrefabOverride: boolean) : void
            /** Marks a property defined by an EditorCurveBinding as currently being animated.
            * @param gameObject The GameObject being modified.
            * @param binding The binding for the property being modified.
            */
            public static AddEditorCurveBinding ($gameObject: UnityEngine.GameObject, $binding: UnityEditor.EditorCurveBinding) : void
            public constructor ()
        }
        /** Defines how a curve is attached to an object that it controls.
        */
        class EditorCurveBinding extends System.ValueType implements System.IEquatable$1<UnityEditor.EditorCurveBinding>
        {
            protected [__keep_incompatibility]: never;
            /** The transform path of the object that is animated.
            */
            public path : string
            /** The name of the property to be animated.
            */
            public propertyName : string
            public get isPPtrCurve(): boolean;
            public get isDiscreteCurve(): boolean;
            /** The type of the property to be animated.
            */
            public get type(): System.Type;
            public set type(value: System.Type);
            public static op_Equality ($lhs: UnityEditor.EditorCurveBinding, $rhs: UnityEditor.EditorCurveBinding) : boolean
            public static op_Inequality ($lhs: UnityEditor.EditorCurveBinding, $rhs: UnityEditor.EditorCurveBinding) : boolean
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEditor.EditorCurveBinding) : boolean
            /** Creates a preconfigured binding for a float curve.
            * @param inPath The transform path to the object to animate.
            * @param inType The type of the object to animate.
            * @param inPropertyName The name of the property to animate on the object.
            */
            public static FloatCurve ($inPath: string, $inType: System.Type, $inPropertyName: string) : UnityEditor.EditorCurveBinding
            /** Creates a preconfigured binding for a curve that points to an Object.
            * @param inPath The transform path to the object to animate.
            * @param inType The type of the object to animate.
            * @param inPropertyName The name of the property to animate on the object.
            */
            public static PPtrCurve ($inPath: string, $inType: System.Type, $inPropertyName: string) : UnityEditor.EditorCurveBinding
            /** Creates a preconfigured binding for a curve where values should not be interpolated.
            * @param inPath The transform path to the object to animate.
            * @param inType The type of the object to animate.
            * @param inPropertyName The name of the property to animate on the object.
            */
            public static DiscreteCurve ($inPath: string, $inType: System.Type, $inPropertyName: string) : UnityEditor.EditorCurveBinding
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        /** Defines a single modified property.
        */
        class PropertyModification extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Object that will be modified.
            */
            public target : UnityEngine.Object
            /** Property path of the property being modified (Matches as SerializedProperty.propertyPath).
            */
            public propertyPath : string
            /** The value being applied.
            */
            public value : string
            /** The value being applied when it is a object reference (which can not be represented as a string).
            */
            public objectReference : UnityEngine.Object
            public constructor ()
        }
        class ObjectReferenceKeyframe extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public time : number
            public value : UnityEngine.Object
        }
        /** An AnimationClipCurveData object contains all the information needed to identify a specific curve in an AnimationClip. The curve animates a specific property of a component  material attached to a game object  animated bone.
        */
        class AnimationClipCurveData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The path of the game object / bone being animated.
            */
            public path : string
            /** The type of the component / material being animated.
            */
            public type : System.Type
            /** The name of the property being animated.
            */
            public propertyName : string
            /** The actual animation curve.
            */
            public curve : UnityEngine.AnimationCurve
            public constructor ()
            public constructor ($binding: UnityEditor.EditorCurveBinding)
        }
        /** Editor utility functions for modifying animation clips.
        */
        class AnimationUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Triggered when an animation curve inside an animation clip has been modified.
            */
            public static onCurveWasModified : UnityEditor.AnimationUtility.OnCurveWasModified
            /** Returns the array of Animation Clips associated with the GameObject or component.
            */
            public static GetAnimationClips ($gameObject: UnityEngine.GameObject) : System.Array$1<UnityEngine.AnimationClip>
            /** Sets the array of AnimationClips to be referenced in the Animation component.
            */
            public static SetAnimationClips ($animation: UnityEngine.Animation, $clips: System.Array$1<UnityEngine.AnimationClip>) : void
            /** Returns all the animatable bindings that a specific game object has.
            */
            public static GetAnimatableBindings ($targetObject: UnityEngine.GameObject, $root: UnityEngine.GameObject) : System.Array$1<UnityEditor.EditorCurveBinding>
            public static GetEditorCurveValueType ($root: UnityEngine.GameObject, $binding: UnityEditor.EditorCurveBinding) : System.Type
            public static GetFloatValue ($root: UnityEngine.GameObject, $binding: UnityEditor.EditorCurveBinding, $data: $Ref<number>) : boolean
            public static GetObjectReferenceValue ($root: UnityEngine.GameObject, $binding: UnityEditor.EditorCurveBinding, $data: $Ref<UnityEngine.Object>) : boolean
            /** Returns the animated object that the binding is pointing to.
            */
            public static GetAnimatedObject ($root: UnityEngine.GameObject, $binding: UnityEditor.EditorCurveBinding) : UnityEngine.Object
            public static PropertyModificationToEditorCurveBinding ($modification: UnityEditor.PropertyModification, $gameObject: UnityEngine.GameObject, $binding: $Ref<UnityEditor.EditorCurveBinding>) : System.Type
            /** Returns all the float curve bindings currently stored in the clip.
            */
            public static GetCurveBindings ($clip: UnityEngine.AnimationClip) : System.Array$1<UnityEditor.EditorCurveBinding>
            /** Returns all the object reference curve bindings currently stored in the clip.
            */
            public static GetObjectReferenceCurveBindings ($clip: UnityEngine.AnimationClip) : System.Array$1<UnityEditor.EditorCurveBinding>
            /** Return the object reference curve that the binding is pointing to.
            */
            public static GetObjectReferenceCurve ($clip: UnityEngine.AnimationClip, $binding: UnityEditor.EditorCurveBinding) : System.Array$1<UnityEditor.ObjectReferenceKeyframe>
            /** Adds, modifies or removes an object reference curve in a given clip.
            * @param keyframes Setting this to null will remove the curve.
            */
            public static SetObjectReferenceCurve ($clip: UnityEngine.AnimationClip, $binding: UnityEditor.EditorCurveBinding, $keyframes: System.Array$1<UnityEditor.ObjectReferenceKeyframe>) : void
            /** Return the float curve that the binding is pointing to.
            */
            public static GetEditorCurve ($clip: UnityEngine.AnimationClip, $binding: UnityEditor.EditorCurveBinding) : UnityEngine.AnimationCurve
            /** Adds, modifies or removes an editor float curve in a given clip.
            * @param clip The animation clip to which the curve will be added.
            * @param binding The bindings which defines the path and the property of the curve.
            * @param curve The curve to add. Setting this to null will remove the curve.
            */
            public static SetEditorCurve ($clip: UnityEngine.AnimationClip, $binding: UnityEditor.EditorCurveBinding, $curve: UnityEngine.AnimationCurve) : void
            /** Retrieve the left tangent mode of the keyframe at specified index.
            * @param curve Curve to query.
            * @param index Keyframe index.
            * @returns Tangent mode at specified index. 
            */
            public static GetKeyLeftTangentMode ($curve: UnityEngine.AnimationCurve, $index: number) : UnityEditor.AnimationUtility.TangentMode
            /** Retrieve the right tangent mode of the keyframe at specified index.
            * @param curve Curve to query.
            * @param index Keyframe index.
            * @returns Tangent mode at specified index. 
            */
            public static GetKeyRightTangentMode ($curve: UnityEngine.AnimationCurve, $index: number) : UnityEditor.AnimationUtility.TangentMode
            /** Retrieve the specified keyframe broken tangent flag.
            * @param curve Curve to query.
            * @param index Keyframe index.
            * @returns Broken flag at specified index. 
            */
            public static GetKeyBroken ($curve: UnityEngine.AnimationCurve, $index: number) : boolean
            public static SetKeyLeftTangentMode ($curve: UnityEngine.AnimationCurve, $index: number, $tangentMode: UnityEditor.AnimationUtility.TangentMode) : void
            public static SetKeyRightTangentMode ($curve: UnityEngine.AnimationCurve, $index: number, $tangentMode: UnityEditor.AnimationUtility.TangentMode) : void
            /** Change the specified keyframe broken tangent flag.
            * @param curve The curve to modify.
            * @param index Keyframe index.
            * @param broken Broken flag.
            */
            public static SetKeyBroken ($curve: UnityEngine.AnimationCurve, $index: number, $broken: boolean) : void
            /** Retrieves all animation events associated with the animation clip.
            */
            public static GetAnimationEvents ($clip: UnityEngine.AnimationClip) : System.Array$1<UnityEngine.AnimationEvent>
            /** Replaces all animation events in the animation clip.
            */
            public static SetAnimationEvents ($clip: UnityEngine.AnimationClip, $events: System.Array$1<UnityEngine.AnimationEvent>) : void
            /** Calculates path from root transform to target transform.
            */
            public static CalculateTransformPath ($targetTransform: UnityEngine.Transform, $root: UnityEngine.Transform) : string
            public static GetAnimationClipSettings ($clip: UnityEngine.AnimationClip) : UnityEditor.AnimationClipSettings
            public static SetAnimationClipSettings ($clip: UnityEngine.AnimationClip, $srcClipInfo: UnityEditor.AnimationClipSettings) : void
            /** Set the additive reference pose from referenceClip at time for animation clip clip.
            * @param clip The animation clip to be used.
            * @param referenceClip The animation clip containing the reference pose.
            * @param time Time that defines the reference pose in referenceClip.
            */
            public static SetAdditiveReferencePose ($clip: UnityEngine.AnimationClip, $referenceClip: UnityEngine.AnimationClip, $time: number) : void
            public static ConstrainToPolynomialCurve ($curve: UnityEngine.AnimationCurve) : void
            public constructor ()
        }
        /** Animation mode for ModelImporter.
        */
        enum ModelImporterAnimationType
        { None = 0, Legacy = 1, Generic = 2, Human = 3 }
        /** An Interface for accessing assets and performing operations on assets.
        */
        class AssetDatabase extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_importPackageStarted ($value: UnityEditor.AssetDatabase.ImportPackageCallback) : void
            public static remove_importPackageStarted ($value: UnityEditor.AssetDatabase.ImportPackageCallback) : void
            public static add_importPackageCompleted ($value: UnityEditor.AssetDatabase.ImportPackageCallback) : void
            public static remove_importPackageCompleted ($value: UnityEditor.AssetDatabase.ImportPackageCallback) : void
            public static add_importPackageCancelled ($value: UnityEditor.AssetDatabase.ImportPackageCallback) : void
            public static remove_importPackageCancelled ($value: UnityEditor.AssetDatabase.ImportPackageCallback) : void
            public static add_importPackageFailed ($value: UnityEditor.AssetDatabase.ImportPackageFailedCallback) : void
            public static remove_importPackageFailed ($value: UnityEditor.AssetDatabase.ImportPackageFailedCallback) : void
            public static IsOpenForEdit ($assetOrMetaFilePaths: System.Array$1<string>, $outNotEditablePaths: System.Collections.Generic.List$1<string>, $statusQueryOptions?: UnityEditor.StatusQueryOptions) : void
            /** Makes a file open for editing in version control.
            * @param path Specifies the path to a file relative to the project root.
            * @returns true if Unity successfully made the file editable in the version control system. Otherwise, returns false. 
            */
            public static MakeEditable ($path: string) : boolean
            public static MakeEditable ($paths: System.Array$1<string>, $prompt?: string, $outNotEditablePaths?: System.Collections.Generic.List$1<string>) : boolean
            /** Search the asset database using the search filter string.
            * @param filter The filter string can contain search data.  See below for details about this string.
            * @param searchInFolders The folders where the search will start.
            * @returns Array of matching asset. Note that GUIDs will be returned. 
            */
            public static FindAssets ($filter: string) : System.Array$1<string>
            /** Search the asset database using the search filter string.
            * @param filter The filter string can contain search data.  See below for details about this string.
            * @param searchInFolders The folders where the search will start.
            * @returns Array of matching asset. Note that GUIDs will be returned. 
            */
            public static FindAssets ($filter: string, $searchInFolders: System.Array$1<string>) : System.Array$1<string>
            /** Is object an asset?
            */
            public static Contains ($obj: UnityEngine.Object) : boolean
            /** Is object an asset?
            */
            public static Contains ($instanceID: number) : boolean
            /** Create a new folder.
            * @param parentFolder The name of the parent folder.
            * @param newFolderName The name of the new folder.
            * @returns The GUID of the newly created folder. 
            */
            public static CreateFolder ($parentFolder: string, $newFolderName: string) : string
            /** Is asset a main asset in the project window?
            */
            public static IsMainAsset ($obj: UnityEngine.Object) : boolean
            /** Is asset a main asset in the project window?
            */
            public static IsMainAsset ($instanceID: number) : boolean
            /** Does the asset form part of another asset?
            * @param obj The asset Object to query.
            * @param instanceID Instance ID of the asset Object to query.
            */
            public static IsSubAsset ($obj: UnityEngine.Object) : boolean
            /** Does the asset form part of another asset?
            * @param obj The asset Object to query.
            * @param instanceID Instance ID of the asset Object to query.
            */
            public static IsSubAsset ($instanceID: number) : boolean
            /** Determines whether the Asset is a foreign Asset.
            */
            public static IsForeignAsset ($obj: UnityEngine.Object) : boolean
            /** Determines whether the Asset is a foreign Asset.
            */
            public static IsForeignAsset ($instanceID: number) : boolean
            /** Determines whether the Asset is a native Asset.
            */
            public static IsNativeAsset ($obj: UnityEngine.Object) : boolean
            /** Determines whether the Asset is a native Asset.
            */
            public static IsNativeAsset ($instanceID: number) : boolean
            public static GetCurrentCacheServerIp () : string
            /** Creates a new unique path for an asset.
            */
            public static GenerateUniqueAssetPath ($path: string) : string
            public static StartAssetEditing () : void
            public static StopAssetEditing () : void
            public static ReleaseCachedFileHandles () : void
            /** Checks if an asset file can be moved from one folder to another. (Without actually moving the file).
            * @param oldPath The path where the asset currently resides.
            * @param newPath The path which the asset should be moved to.
            * @returns An empty string if the asset can be moved, otherwise an error message. 
            */
            public static ValidateMoveAsset ($oldPath: string, $newPath: string) : string
            /** Move an asset file (or folder) from one folder to another.
            * @param oldPath The path where the asset currently resides.
            * @param newPath The path which the asset should be moved to.
            * @returns An empty string if the asset has been successfully moved, otherwise an error message. 
            */
            public static MoveAsset ($oldPath: string, $newPath: string) : string
            /** Creates an external Asset from an object (such as a Material) by extracting it from within an imported asset (such as an FBX file).
            * @param asset The sub-asset to extract.
            * @param newPath The file path of the new Asset.
            * @returns An empty string if Unity has successfully extracted the Asset, or an error message if not. 
            */
            public static ExtractAsset ($asset: UnityEngine.Object, $newPath: string) : string
            /** Rename an asset file.
            * @param pathName The path where the asset currently resides.
            * @param newName The new name which should be given to the asset.
            * @returns An empty string, if the asset has been successfully renamed, otherwise an error message. 
            */
            public static RenameAsset ($pathName: string, $newName: string) : string
            /** Moves the asset at path to the trash.
            */
            public static MoveAssetToTrash ($path: string) : boolean
            /** Deletes the asset file at path.
            * @param path Filesystem path of the asset to be deleted.
            */
            public static DeleteAsset ($path: string) : boolean
            /** Import asset at path.
            */
            public static ImportAsset ($path: string) : void
            /** Import asset at path.
            */
            public static ImportAsset ($path: string, $options: UnityEditor.ImportAssetOptions) : void
            /** Duplicates the asset at path and stores it at newPath.
            * @param path Filesystem path of the source asset.
            * @param newPath Filesystem path of the new asset to create.
            */
            public static CopyAsset ($path: string, $newPath: string) : boolean
            /** Writes the import settings to disk.
            */
            public static WriteImportSettingsIfDirty ($path: string) : boolean
            /** Given a path to a directory in the Assets folder, relative to the project folder, this method will return an array of all its subdirectories.
            */
            public static GetSubFolders ($path: string) : System.Array$1<string>
            /** Given a path to a folder, returns true if it exists, false otherwise.
            * @param path The path to the folder.
            * @returns Returns true if the folder exists. 
            */
            public static IsValidFolder ($path: string) : boolean
            /** Creates a new asset at path.
            * @param asset Object to use in creating the asset.
            * @param path Filesystem path for the new asset.
            */
            public static CreateAsset ($asset: UnityEngine.Object, $path: string) : void
            /** Adds objectToAdd to an existing asset at path.
            * @param objectToAdd Object to add to the existing asset.
            * @param path Filesystem path to the asset.
            */
            public static AddObjectToAsset ($objectToAdd: UnityEngine.Object, $path: string) : void
            /** Adds objectToAdd to an existing asset identified by assetObject.
            */
            public static AddObjectToAsset ($objectToAdd: UnityEngine.Object, $assetObject: UnityEngine.Object) : void
            /** Specifies which object in the asset file should become the main object after the next import.
            * @param mainObject The object to become the main object.
            * @param assetPath Path to the asset file.
            */
            public static SetMainObject ($mainObject: UnityEngine.Object, $assetPath: string) : void
            /** Returns the path name relative to the project folder where the asset is stored.
            * @param instanceID The instance ID of the asset.
            * @param assetObject A reference to the asset.
            * @returns The asset path name, or null, or an empty string if the asset does not exist. 
            */
            public static GetAssetPath ($assetObject: UnityEngine.Object) : string
            /** Returns the path name relative to the project folder where the asset is stored.
            * @param instanceID The instance ID of the asset.
            * @param assetObject A reference to the asset.
            * @returns The asset path name, or null, or an empty string if the asset does not exist. 
            */
            public static GetAssetPath ($instanceID: number) : string
            /** Returns the path name relative to the project folder where the asset is stored.
            */
            public static GetAssetOrScenePath ($assetObject: UnityEngine.Object) : string
            /** Gets the path to the text .meta file associated with an asset.
            * @param path The path to the asset.
            * @returns The path to the .meta text file or empty string if the file does not exist. 
            */
            public static GetTextMetaFilePathFromAssetPath ($path: string) : string
            /** Gets the path to the asset file associated with a text .meta file.
            */
            public static GetAssetPathFromTextMetaFilePath ($path: string) : string
            /** Returns the first asset object of type type at given path assetPath.
            * @param assetPath Path of the asset to load.
            * @param type Data type of the asset.
            * @returns The asset matching the parameters. 
            */
            public static LoadAssetAtPath ($assetPath: string, $type: System.Type) : UnityEngine.Object
            /** Returns the main asset object at assetPath.
            * @param assetPath Filesystem path of the asset to load.
            */
            public static LoadMainAssetAtPath ($assetPath: string) : UnityEngine.Object
            /** Returns the type of the main asset object at assetPath.
            * @param assetPath Filesystem path of the asset to load.
            */
            public static GetMainAssetTypeAtPath ($assetPath: string) : System.Type
            /** Returns true if the main asset object at assetPath is loaded in memory.
            * @param assetPath Filesystem path of the asset to load.
            */
            public static IsMainAssetAtPathLoaded ($assetPath: string) : boolean
            /** Returns all sub Assets at assetPath.
            */
            public static LoadAllAssetRepresentationsAtPath ($assetPath: string) : System.Array$1<UnityEngine.Object>
            /** Returns an array of all Assets at assetPath.
            * @param assetPath Filesystem path to the asset.
            */
            public static LoadAllAssetsAtPath ($assetPath: string) : System.Array$1<UnityEngine.Object>
            public static GetAllAssetPaths () : System.Array$1<string>
            /** Import any changed assets.
            */
            public static Refresh () : void
            /** Import any changed assets.
            */
            public static Refresh ($options: UnityEditor.ImportAssetOptions) : void
            /** Opens the asset with associated application.
            */
            public static OpenAsset ($instanceID: number) : boolean
            /** Opens the asset with associated application.
            */
            public static OpenAsset ($instanceID: number, $lineNumber: number) : boolean
            /** Opens the asset with associated application.
            */
            public static OpenAsset ($instanceID: number, $lineNumber: number, $columnNumber: number) : boolean
            /** Opens the asset with associated application.
            */
            public static OpenAsset ($target: UnityEngine.Object) : boolean
            /** Opens the asset with associated application.
            */
            public static OpenAsset ($target: UnityEngine.Object, $lineNumber: number) : boolean
            /** Opens the asset with associated application.
            */
            public static OpenAsset ($target: UnityEngine.Object, $lineNumber: number, $columnNumber: number) : boolean
            /** Opens the asset(s) with associated application(s).
            */
            public static OpenAsset ($objects: System.Array$1<UnityEngine.Object>) : boolean
            /** Get the GUID for the asset at path.
            * @param path Filesystem path for the asset.
            * @returns GUID. 
            */
            public static AssetPathToGUID ($path: string) : string
            /** Gets the corresponding asset path for the supplied guid, or an empty string if the GUID can't be found.
            */
            public static GUIDToAssetPath ($guid: string) : string
            /** Returns the hash of all the dependencies of an asset.
            * @param path Path to the asset.
            * @returns Aggregate hash. 
            */
            public static GetAssetDependencyHash ($path: string) : UnityEngine.Hash128
            public static SaveAssets () : void
            /** Retrieves an icon for the asset at the given asset path.
            */
            public static GetCachedIcon ($path: string) : UnityEngine.Texture
            /** Replaces that list of labels on an asset.
            */
            public static SetLabels ($obj: UnityEngine.Object, $labels: System.Array$1<string>) : void
            /** Returns all labels attached to a given asset.
            */
            public static GetLabels ($obj: UnityEngine.Object) : System.Array$1<string>
            /** Removes all labels attached to an asset.
            */
            public static ClearLabels ($obj: UnityEngine.Object) : void
            public static GetAllAssetBundleNames () : System.Array$1<string>
            public static GetUnusedAssetBundleNames () : System.Array$1<string>
            /** Remove the assetBundle name from the asset database. The forceRemove flag is used to indicate if you want to remove it even it's in use.
            * @param assetBundleName The assetBundle name you want to remove.
            * @param forceRemove Flag to indicate if you want to remove the assetBundle name even it's in use.
            */
            public static RemoveAssetBundleName ($assetBundleName: string, $forceRemove: boolean) : boolean
            public static RemoveUnusedAssetBundleNames () : void
            /** Returns an array containing the paths of all assets marked with the specified Asset Bundle name.
            */
            public static GetAssetPathsFromAssetBundle ($assetBundleName: string) : System.Array$1<string>
            /** Get the Asset paths for all Assets tagged with assetBundleName and
            named assetName.
            */
            public static GetAssetPathsFromAssetBundleAndAssetName ($assetBundleName: string, $assetName: string) : System.Array$1<string>
            /** Returns the name of the AssetBundle that a given asset belongs to.
            * @param assetPath The asset's path.
            * @returns Returns the name of the AssetBundle that a given asset belongs to. See the method description for more details. 
            */
            public static GetImplicitAssetBundleName ($assetPath: string) : string
            /** Returns the name of the AssetBundle Variant that a given asset belongs to.
            * @param assetPath The asset's path.
            * @returns Returns the name of the AssetBundle Variant that a given asset belongs to. See the method description for more details. 
            */
            public static GetImplicitAssetBundleVariantName ($assetPath: string) : string
            /** Given an assetBundleName, returns the list of AssetBundles that it depends on.
            * @param assetBundleName The name of the AssetBundle for which dependencies are required.
            * @param recursive If false, returns only AssetBundles which are direct dependencies of the input; if true, includes all indirect dependencies of the input.
            * @returns The names of all AssetBundles that the input depends on. 
            */
            public static GetAssetBundleDependencies ($assetBundleName: string, $recursive: boolean) : System.Array$1<string>
            /** Returns an array of all the assets that are dependencies of the asset at the specified pathName.
            Note: GetDependencies() gets the Assets that are referenced by other Assets. For example, a Scene could contain many GameObjects with a Material attached to them. In this case,  GetDependencies() will return the path to the Material Assets, but not the GameObjects as those are not Assets on your disk.
            * @param pathName The path to the asset for which dependencies are required.
            * @param recursive Controls whether this method recursively checks and returns all dependencies including indirect dependencies (when set to true), or whether it only returns direct dependencies (when set to false).
            * @returns The paths of all assets that the input depends on. 
            */
            public static GetDependencies ($pathName: string) : System.Array$1<string>
            /** Returns an array of all the assets that are dependencies of the asset at the specified pathName.
            Note: GetDependencies() gets the Assets that are referenced by other Assets. For example, a Scene could contain many GameObjects with a Material attached to them. In this case,  GetDependencies() will return the path to the Material Assets, but not the GameObjects as those are not Assets on your disk.
            * @param pathName The path to the asset for which dependencies are required.
            * @param recursive Controls whether this method recursively checks and returns all dependencies including indirect dependencies (when set to true), or whether it only returns direct dependencies (when set to false).
            * @returns The paths of all assets that the input depends on. 
            */
            public static GetDependencies ($pathName: string, $recursive: boolean) : System.Array$1<string>
            /** Returns an array of the paths of assets that are dependencies of all the assets in the list of pathNames that you provide.
            Note: GetDependencies() gets the Assets that are referenced by other Assets. For example, a Scene could contain many GameObjects with a Material attached to them. In this case,  GetDependencies() will return the path to the Material Assets, but not the GameObjects as those are not Assets on your disk.
            * @param pathNames The path to the assets for which dependencies are required.
            * @param recursive Controls whether this method recursively checks and returns all dependencies including indirect dependencies (when set to true), or whether it only returns direct dependencies (when set to false).
            * @returns The paths of all assets that the input depends on. 
            */
            public static GetDependencies ($pathNames: System.Array$1<string>) : System.Array$1<string>
            /** Returns an array of the paths of assets that are dependencies of all the assets in the list of pathNames that you provide.
            Note: GetDependencies() gets the Assets that are referenced by other Assets. For example, a Scene could contain many GameObjects with a Material attached to them. In this case,  GetDependencies() will return the path to the Material Assets, but not the GameObjects as those are not Assets on your disk.
            * @param pathNames The path to the assets for which dependencies are required.
            * @param recursive Controls whether this method recursively checks and returns all dependencies including indirect dependencies (when set to true), or whether it only returns direct dependencies (when set to false).
            * @returns The paths of all assets that the input depends on. 
            */
            public static GetDependencies ($pathNames: System.Array$1<string>, $recursive: boolean) : System.Array$1<string>
            /** Exports the assets identified by assetPathNames to a unitypackage file in fileName.
            */
            public static ExportPackage ($assetPathName: string, $fileName: string) : void
            /** Exports the assets identified by assetPathNames to a unitypackage file in fileName.
            */
            public static ExportPackage ($assetPathName: string, $fileName: string, $flags: UnityEditor.ExportPackageOptions) : void
            /** Exports the assets identified by assetPathNames to a unitypackage file in fileName.
            */
            public static ExportPackage ($assetPathNames: System.Array$1<string>, $fileName: string) : void
            /** Exports the assets identified by assetPathNames to a unitypackage file in fileName.
            */
            public static ExportPackage ($assetPathNames: System.Array$1<string>, $fileName: string, $flags: UnityEditor.ExportPackageOptions) : void
            /** Query whether an Asset file is open for editing in version control.
            * @param assetObject Object representing the asset whose status you wish to query.
            * @param assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param message Returns a reason for the asset not being open for edit.
            * @param statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetObject: UnityEngine.Object) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param assetObject Object representing the asset whose status you wish to query.
            * @param assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param message Returns a reason for the asset not being open for edit.
            * @param statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetObject: UnityEngine.Object, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param assetObject Object representing the asset whose status you wish to query.
            * @param assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param message Returns a reason for the asset not being open for edit.
            * @param statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetOrMetaFilePath: string) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param assetObject Object representing the asset whose status you wish to query.
            * @param assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param message Returns a reason for the asset not being open for edit.
            * @param statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetOrMetaFilePath: string, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param assetObject Object representing the asset whose status you wish to query.
            * @param assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param message Returns a reason for the asset not being open for edit.
            * @param statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetObject: UnityEngine.Object, $message: $Ref<string>) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param assetObject Object representing the asset whose status you wish to query.
            * @param assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param message Returns a reason for the asset not being open for edit.
            * @param statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetObject: UnityEngine.Object, $message: $Ref<string>, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param assetObject Object representing the asset whose status you wish to query.
            * @param assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param message Returns a reason for the asset not being open for edit.
            * @param statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetOrMetaFilePath: string, $message: $Ref<string>) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param assetObject Object representing the asset whose status you wish to query.
            * @param assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param message Returns a reason for the asset not being open for edit.
            * @param statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetOrMetaFilePath: string, $message: $Ref<string>, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an asset's metadata (.meta) file is open for edit in version control.
            * @param assetObject Object representing the asset whose metadata status you wish to query.
            * @param message Returns a reason for the asset metadata not being open for edit.
            * @param statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset's metadata is considered open for edit by the selected version control system. 
            */
            public static IsMetaFileOpenForEdit ($assetObject: UnityEngine.Object) : boolean
            /** Query whether an asset's metadata (.meta) file is open for edit in version control.
            * @param assetObject Object representing the asset whose metadata status you wish to query.
            * @param message Returns a reason for the asset metadata not being open for edit.
            * @param statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset's metadata is considered open for edit by the selected version control system. 
            */
            public static IsMetaFileOpenForEdit ($assetObject: UnityEngine.Object, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an asset's metadata (.meta) file is open for edit in version control.
            * @param assetObject Object representing the asset whose metadata status you wish to query.
            * @param message Returns a reason for the asset metadata not being open for edit.
            * @param statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset's metadata is considered open for edit by the selected version control system. 
            */
            public static IsMetaFileOpenForEdit ($assetObject: UnityEngine.Object, $message: $Ref<string>) : boolean
            /** Query whether an asset's metadata (.meta) file is open for edit in version control.
            * @param assetObject Object representing the asset whose metadata status you wish to query.
            * @param message Returns a reason for the asset metadata not being open for edit.
            * @param statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset's metadata is considered open for edit by the selected version control system. 
            */
            public static IsMetaFileOpenForEdit ($assetObject: UnityEngine.Object, $message: $Ref<string>, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            public static GetBuiltinExtraResource ($type: System.Type, $path: string) : UnityEngine.Object
            public static ForceReserializeAssets ($assetPaths: System.Collections.Generic.IEnumerable$1<string>, $options?: UnityEditor.ForceReserializeAssetsOptions) : void
            /** Warning Use the overload with a long localId parameter. Using the overload with an integer localId parameter can cause an integer overflow in localId. This can happen when the object passed to the API is part of a Prefab.
            Get the GUID and local file id from an object instance id.
            * @param instanceID InstanceID of the object to retrieve information for.
            * @param obj The object to retrieve GUID and File Id for.
            * @param assetRef The asset reference to retrieve GUID and File Id for.
            * @param guid The GUID of the asset.
            * @param localId The local file identifier of this asset.
            * @returns True if the guid and file id were successfully found, false if not. 
            */
            public static TryGetGUIDAndLocalFileIdentifier ($obj: UnityEngine.Object, $guid: $Ref<string>, $localId: $Ref<bigint>) : boolean
            /** Warning Use the overload with a long localId parameter. Using the overload with an integer localId parameter can cause an integer overflow in localId. This can happen when the object passed to the API is part of a Prefab.
            Get the GUID and local file id from an object instance id.
            * @param instanceID InstanceID of the object to retrieve information for.
            * @param obj The object to retrieve GUID and File Id for.
            * @param assetRef The asset reference to retrieve GUID and File Id for.
            * @param guid The GUID of the asset.
            * @param localId The local file identifier of this asset.
            * @returns True if the guid and file id were successfully found, false if not. 
            */
            public static TryGetGUIDAndLocalFileIdentifier ($instanceID: number, $guid: $Ref<string>, $localId: $Ref<bigint>) : boolean
            public static TryGetGUIDAndLocalFileIdentifier ($assetRef: UnityEngine.LazyLoadReference$1<UnityEngine.Object>, $guid: $Ref<string>, $localId: $Ref<bigint>) : boolean
            public static ForceReserializeAssets () : void
            /** Removes object from its asset (See Also: AssetDatabase.AddObjectToAsset).
            */
            public static RemoveObjectFromAsset ($objectToRemove: UnityEngine.Object) : void
            /** Imports package at packagePath into the current project.
            */
            public static ImportPackage ($packagePath: string, $interactive: boolean) : void
            public static DisallowAutoRefresh () : void
            public static AllowAutoRefresh () : void
            public constructor ()
        }
        /** Options for querying the version control system status of a file.
        */
        enum StatusQueryOptions
        { ForceUpdate = 0, UseCachedIfPossible = 1, UseCachedAsync = 2 }
        /** Asset importing options.
        */
        enum ImportAssetOptions
        { Default = 0, ForceUpdate = 1, ForceSynchronousImport = 8, ImportRecursive = 256, DontDownloadFromCacheServer = 8192, ForceUncompressedImport = 16384 }
        /** Options for AssetDatabase.ForceReserializeAssets.
        */
        enum ForceReserializeAssetsOptions
        { ReserializeAssets = 1, ReserializeMetadata = 2, ReserializeAssetsAndMetadata = 3 }
        enum AssetStatus
        { Calculating = -1, ClientOnly = 0, ServerOnly = 1, Unchanged = 2, Conflict = 3, Same = 4, NewVersionAvailable = 5, NewLocalVersion = 6, RestoredFromTrash = 7, Ignored = 8, BadState = 9 }
        class AssetsItem extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public guid : string
            public pathName : string
            public message : string
            public exportedAssetPath : string
            public guidFolder : string
            public enabled : number
            public assetIsDir : number
            public changeFlags : number
            public previewPath : string
            public exists : number
            public constructor ()
        }
        /** Utility for fetching asset previews by instance ID of assets, See AssetPreview.GetAssetPreview. Since previews are loaded asynchronously methods are provided for requesting if all previews have been fully loaded, see AssetPreview.IsLoadingAssetPreviews. Loaded previews are stored in a cache, the size of the cache can be controlled by calling [AssetPreview.SetPreviewTextureCacheSize].
        */
        class AssetPreview extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns a preview texture for an asset.
            */
            public static GetAssetPreview ($asset: UnityEngine.Object) : UnityEngine.Texture2D
            /** Loading previews is asynchronous so it is useful to know if a specific asset preview is in the process of being loaded so client code e.g can repaint while waiting for the loading to finish.
            * @param instanceID InstanceID of the assset that a preview has been requested for by: AssetPreview.GetAssetPreview().
            */
            public static IsLoadingAssetPreview ($instanceID: number) : boolean
            public static IsLoadingAssetPreviews () : boolean
            /** Set the asset preview cache to a size that can hold all visible previews on the screen at once.
            * @param size The number of previews that can be loaded into the cache before the least used previews are being unloaded.
            */
            public static SetPreviewTextureCacheSize ($size: number) : void
            /** Returns the thumbnail for an object (like the ones you see in the project view).
            */
            public static GetMiniThumbnail ($obj: UnityEngine.Object) : UnityEngine.Texture2D
            /** Returns the thumbnail for the type.
            */
            public static GetMiniTypeThumbnail ($type: System.Type) : UnityEngine.Texture2D
            public constructor ()
        }
        /** Extension methods for the Material asset type in the editor.
        */
        class MaterialEditorExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Iterates over all the Material properties with the MaterialProperty.PropFlags.Normal flag and checks that the textures referenced by these properties are imported as TextureImporterType.NormalMap.
            * @param material The target material.
            */
            public static PerformBumpMapCheck ($material: UnityEngine.Material) : void
        }
        /** Texture importer lets you modify Texture2D import settings for DDS textures from editor scripts.
        */
        class DDSImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Is texture data readable from scripts.
            */
            public get isReadable(): boolean;
            public set isReadable(value: boolean);
            public constructor ()
        }
        /** Use IHVImageFormatImporter to modify Texture2D import settings for Textures in IHV (Independent Hardware Vendor) formats such as .DDS and .PVR from Editor scripts.
        */
        class IHVImageFormatImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Is texture data readable from scripts.
            */
            public get isReadable(): boolean;
            public set isReadable(value: boolean);
            /** Filtering mode of the texture.
            */
            public get filterMode(): UnityEngine.FilterMode;
            public set filterMode(value: UnityEngine.FilterMode);
            /** Texture coordinate wrapping mode.
            */
            public get wrapMode(): UnityEngine.TextureWrapMode;
            public set wrapMode(value: UnityEngine.TextureWrapMode);
            /** Texture U coordinate wrapping mode.
            */
            public get wrapModeU(): UnityEngine.TextureWrapMode;
            public set wrapModeU(value: UnityEngine.TextureWrapMode);
            /** Texture V coordinate wrapping mode.
            */
            public get wrapModeV(): UnityEngine.TextureWrapMode;
            public set wrapModeV(value: UnityEngine.TextureWrapMode);
            /** Texture W coordinate wrapping mode for Texture3D.
            */
            public get wrapModeW(): UnityEngine.TextureWrapMode;
            public set wrapModeW(value: UnityEngine.TextureWrapMode);
            /** Enable mipmap streaming for this texture.
            */
            public get streamingMipmaps(): boolean;
            public set streamingMipmaps(value: boolean);
            /** Relative priority for this texture when reducing memory size in order to hit the memory budget.
            */
            public get streamingMipmapsPriority(): number;
            public set streamingMipmapsPriority(value: number);
            public constructor ()
        }
        /** Shader importer lets you modify shader import settings from Editor scripts.
        */
        class ShaderImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            public GetShader () : UnityEngine.Shader
            /** Sets the default textures for each texture material property.
            */
            public SetDefaultTextures ($name: System.Array$1<string>, $textures: System.Array$1<UnityEngine.Texture>) : void
            /** Gets the default texture assigned to the shader importer for the shader property with given name.
            */
            public GetDefaultTexture ($name: string) : UnityEngine.Texture
            /** Sets the non-modifiable textures for each texture material property.
            */
            public SetNonModifiableTextures ($name: System.Array$1<string>, $textures: System.Array$1<UnityEngine.Texture>) : void
            /** Gets the non-modifiable texture assigned to the shader importer for the shader property with given name.
            */
            public GetNonModifiableTexture ($name: string) : UnityEngine.Texture
            public constructor ()
        }
        /** AssetImportor for importing SpeedTree model assets.
        */
        class SpeedTreeImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Gets an array of name strings for wind quality value.
            */
            public static windQualityNames : System.Array$1<string>
            /** Tells if the SPM file has been previously imported.
            */
            public get hasImported(): boolean;
            /** Returns the folder path where generated materials will be placed in.
            */
            public get materialFolderPath(): string;
            /** Material import location options.
            */
            public get materialLocation(): UnityEditor.SpeedTreeImporter.MaterialLocation;
            public set materialLocation(value: UnityEditor.SpeedTreeImporter.MaterialLocation);
            /** Returns true if the asset is a SpeedTree v8 asset.
            */
            public get isV8(): boolean;
            /** Returns the default SpeedTree shader for the active render pipeline (either v7 or v8 according to the asset version).
            */
            public get defaultShader(): UnityEngine.Shader;
            /** Returns the default SpeedTree billboard shader for the active render pipeline, or null if the asset is a SpeedTree v8 asset.
            */
            public get defaultBillboardShader(): UnityEngine.Shader;
            /** How much to scale the tree model compared to what is in the .spm file.
            */
            public get scaleFactor(): number;
            public set scaleFactor(value: number);
            /** Gets and sets a default main color.
            */
            public get mainColor(): UnityEngine.Color;
            public set mainColor(value: UnityEngine.Color);
            /** Gets and sets a default Hue variation color and amount (in alpha).
            */
            public get hueVariation(): UnityEngine.Color;
            public set hueVariation(value: UnityEngine.Color);
            /** Gets and sets a default alpha test reference values.
            */
            public get alphaTestRef(): number;
            public set alphaTestRef(value: number);
            /** Tells if there is a billboard LOD.
            */
            public get hasBillboard(): boolean;
            /** Enables smooth LOD transitions.
            */
            public get enableSmoothLODTransition(): boolean;
            public set enableSmoothLODTransition(value: boolean);
            /** Indicates if the cross-fade LOD transition, applied to the last mesh LOD and the billboard, should be animated.
            */
            public get animateCrossFading(): boolean;
            public set animateCrossFading(value: boolean);
            /** Proportion of the last 3D mesh LOD region width which is used for cross-fading to billboard tree.
            */
            public get billboardTransitionCrossFadeWidth(): number;
            public set billboardTransitionCrossFadeWidth(value: number);
            /** Proportion of the billboard LOD region width which is used for fading out the billboard.
            */
            public get fadeOutWidth(): number;
            public set fadeOutWidth(value: number);
            /** Gets and sets an array of floats of each LOD's screen height value.
            */
            public get LODHeights(): System.Array$1<number>;
            public set LODHeights(value: System.Array$1<number>);
            /** Gets and sets an array of booleans to enable shadow casting for each LOD.
            */
            public get castShadows(): System.Array$1<boolean>;
            public set castShadows(value: System.Array$1<boolean>);
            /** Gets and sets an array of booleans to enable shadow receiving for each LOD.
            */
            public get receiveShadows(): System.Array$1<boolean>;
            public set receiveShadows(value: System.Array$1<boolean>);
            /** Gets and sets an array of booleans to enable Light Probe lighting for each LOD.
            */
            public get useLightProbes(): System.Array$1<boolean>;
            public set useLightProbes(value: System.Array$1<boolean>);
            public get reflectionProbeUsages(): System.Array$1<UnityEngine.Rendering.ReflectionProbeUsage>;
            public set reflectionProbeUsages(value: System.Array$1<UnityEngine.Rendering.ReflectionProbeUsage>);
            /** Gets and sets an array of booleans to enable normal mapping for each LOD.
            */
            public get enableBump(): System.Array$1<boolean>;
            public set enableBump(value: System.Array$1<boolean>);
            /** Gets and sets an array of booleans to enable Hue variation effect for each LOD.
            */
            public get enableHue(): System.Array$1<boolean>;
            public set enableHue(value: System.Array$1<boolean>);
            /** Gets and sets an array of booleans to enable Subsurface effect for each LOD (affects only SpeedTree v8 assets).
            */
            public get enableSubsurface(): System.Array$1<boolean>;
            public set enableSubsurface(value: System.Array$1<boolean>);
            /** Returns the best-possible wind quality on this asset (configured in SpeedTree modeler).
            */
            public get bestWindQuality(): number;
            /** Gets and sets an array of integers of the wind qualities on each LOD. Values will be clampped by bestWindQuality internally.
            */
            public get windQualities(): System.Array$1<number>;
            public set windQualities(value: System.Array$1<number>);
            public GenerateMaterials () : void
            /** Search the project for matching materials and use them instead of the internal materials.
            * @param materialFolderPath The path to search for matching materials.
            * @returns Returns true if any materials have been remapped, otherwise false. 
            */
            public SearchAndRemapMaterials ($materialFolderPath: string) : boolean
            public constructor ()
        }
        /** Texture importer lets you modify Texture2D import settings from editor scripts.
        */
        class TextureImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Maximum texture size.
            */
            public get maxTextureSize(): number;
            public set maxTextureSize(value: number);
            /** Quality of Texture Compression in the range [0..100].
            */
            public get compressionQuality(): number;
            public set compressionQuality(value: number);
            /** Use crunched compression when available.
            */
            public get crunchedCompression(): boolean;
            public set crunchedCompression(value: boolean);
            /** Allows alpha splitting on relevant platforms for this texture.
            */
            public get allowAlphaSplitting(): boolean;
            public set allowAlphaSplitting(value: boolean);
            /** ETC2 texture decompression fallback override on Android devices that don't support ETC2.
            */
            public get androidETC2FallbackOverride(): UnityEditor.AndroidETC2FallbackOverride;
            public set androidETC2FallbackOverride(value: UnityEditor.AndroidETC2FallbackOverride);
            /** Compression of imported texture.
            */
            public get textureCompression(): UnityEditor.TextureImporterCompression;
            public set textureCompression(value: UnityEditor.TextureImporterCompression);
            /** Select how the alpha of the imported texture is generated.
            */
            public get alphaSource(): UnityEditor.TextureImporterAlphaSource;
            public set alphaSource(value: UnityEditor.TextureImporterAlphaSource);
            /** Cubemap generation mode.
            */
            public get generateCubemap(): UnityEditor.TextureImporterGenerateCubemap;
            public set generateCubemap(value: UnityEditor.TextureImporterGenerateCubemap);
            /** Scaling mode for non power of two textures.
            */
            public get npotScale(): UnityEditor.TextureImporterNPOTScale;
            public set npotScale(value: UnityEditor.TextureImporterNPOTScale);
            /** Set this to true if you want texture data to be readable from scripts. Set it to false to prevent scripts from reading texture data.
            */
            public get isReadable(): boolean;
            public set isReadable(value: boolean);
            /** Enable mipmap streaming for this texture.
            */
            public get streamingMipmaps(): boolean;
            public set streamingMipmaps(value: boolean);
            /** Relative priority for this texture when reducing memory size in order to hit the memory budget.
            */
            public get streamingMipmapsPriority(): number;
            public set streamingMipmapsPriority(value: number);
            /** Generate Mip Maps.
            */
            public get mipmapEnabled(): boolean;
            public set mipmapEnabled(value: boolean);
            /** Keep texture borders the same when generating mipmaps?
            */
            public get borderMipmap(): boolean;
            public set borderMipmap(value: boolean);
            /** Is texture storing color data?
            */
            public get sRGBTexture(): boolean;
            public set sRGBTexture(value: boolean);
            /** Enables or disables coverage-preserving alpha MIP mapping.
            */
            public get mipMapsPreserveCoverage(): boolean;
            public set mipMapsPreserveCoverage(value: boolean);
            /** Returns or assigns the alpha test reference value.
            */
            public get alphaTestReferenceValue(): number;
            public set alphaTestReferenceValue(value: number);
            /** Mipmap filtering mode.
            */
            public get mipmapFilter(): UnityEditor.TextureImporterMipFilter;
            public set mipmapFilter(value: UnityEditor.TextureImporterMipFilter);
            /** Fade out mip levels to gray color?
            */
            public get fadeout(): boolean;
            public set fadeout(value: boolean);
            /** Mip level where texture begins to fade out.
            */
            public get mipmapFadeDistanceStart(): number;
            public set mipmapFadeDistanceStart(value: number);
            /** Mip level where texture is faded out completely.
            */
            public get mipmapFadeDistanceEnd(): number;
            public set mipmapFadeDistanceEnd(value: number);
            /** Convert heightmap to normal map?
            */
            public get convertToNormalmap(): boolean;
            public set convertToNormalmap(value: boolean);
            /** Normal map filtering mode.
            */
            public get normalmapFilter(): UnityEditor.TextureImporterNormalFilter;
            public set normalmapFilter(value: UnityEditor.TextureImporterNormalFilter);
            /** Amount of bumpyness in the heightmap.
            */
            public get heightmapScale(): number;
            public set heightmapScale(value: number);
            /** Anisotropic filtering level of the texture.
            */
            public get anisoLevel(): number;
            public set anisoLevel(value: number);
            /** Filtering mode of the texture.
            */
            public get filterMode(): UnityEngine.FilterMode;
            public set filterMode(value: UnityEngine.FilterMode);
            /** Texture coordinate wrapping mode.
            */
            public get wrapMode(): UnityEngine.TextureWrapMode;
            public set wrapMode(value: UnityEngine.TextureWrapMode);
            /** Texture U coordinate wrapping mode.
            */
            public get wrapModeU(): UnityEngine.TextureWrapMode;
            public set wrapModeU(value: UnityEngine.TextureWrapMode);
            /** Texture V coordinate wrapping mode.
            */
            public get wrapModeV(): UnityEngine.TextureWrapMode;
            public set wrapModeV(value: UnityEngine.TextureWrapMode);
            /** Texture W coordinate wrapping mode for Texture3D.
            */
            public get wrapModeW(): UnityEngine.TextureWrapMode;
            public set wrapModeW(value: UnityEngine.TextureWrapMode);
            /** Mip map bias of the texture.
            */
            public get mipMapBias(): number;
            public set mipMapBias(value: number);
            /** If the provided alpha channel is transparency, enable this to prefilter the color to avoid filtering artifacts.
            */
            public get alphaIsTransparency(): boolean;
            public set alphaIsTransparency(value: boolean);
            /** Returns true if this TextureImporter is setup for Sprite packing.
            */
            public get qualifiesForSpritePacking(): boolean;
            /** Selects Single or Manual import mode for Sprite textures.
            */
            public get spriteImportMode(): UnityEditor.SpriteImportMode;
            public set spriteImportMode(value: UnityEditor.SpriteImportMode);
            /** Array representing the sections of the atlas corresponding to individual sprite graphics.
            */
            public get spritesheet(): System.Array$1<UnityEditor.SpriteMetaData>;
            public set spritesheet(value: System.Array$1<UnityEditor.SpriteMetaData>);
            /** Secondary textures for the imported Sprites.
            */
            public get secondarySpriteTextures(): System.Array$1<UnityEngine.SecondarySpriteTexture>;
            public set secondarySpriteTextures(value: System.Array$1<UnityEngine.SecondarySpriteTexture>);
            /** Selects the Sprite packing tag.
            */
            public get spritePackingTag(): string;
            public set spritePackingTag(value: string);
            /** The number of pixels in the sprite that correspond to one unit in world space.
            */
            public get spritePixelsPerUnit(): number;
            public set spritePixelsPerUnit(value: number);
            /** The point in the Sprite object's coordinate space where the graphic is located.
            */
            public get spritePivot(): UnityEngine.Vector2;
            public set spritePivot(value: UnityEngine.Vector2);
            /** Border sizes of the generated sprites.
            */
            public get spriteBorder(): UnityEngine.Vector4;
            public set spriteBorder(value: UnityEngine.Vector4);
            /** Which type of texture are we dealing with here.
            */
            public get textureType(): UnityEditor.TextureImporterType;
            public set textureType(value: UnityEditor.TextureImporterType);
            /** Shape of imported texture.
            */
            public get textureShape(): UnityEditor.TextureImporterShape;
            public set textureShape(value: UnityEditor.TextureImporterShape);
            /** Get platform specific texture settings.
            * @param platform The platform for which settings are required (see options below).
            * @param maxTextureSize Maximum texture width/height in pixels.
            * @param textureFormat Format of the texture for the given platform.
            * @param compressionQuality Value from 0..100, equivalent to the standard JPEG quality setting.
            * @param etc1AlphaSplitEnabled Status of the ETC1 and alpha split flag.
            * @returns True if the platform override was found, false if no override was found. 
            */
            public GetPlatformTextureSettings ($platform: string, $maxTextureSize: $Ref<number>, $textureFormat: $Ref<UnityEditor.TextureImporterFormat>, $compressionQuality: $Ref<number>, $etc1AlphaSplitEnabled: $Ref<boolean>) : boolean
            /** Get platform specific texture settings.
            * @param platform The platform whose settings are required (see below).
            * @param maxTextureSize Maximum texture width/height in pixels.
            * @param textureFormat Format of the texture.
            * @param compressionQuality Value from 0..100, equivalent to the standard JPEG quality setting.
            * @returns True if the platform override was found, false if no override was found. 
            */
            public GetPlatformTextureSettings ($platform: string, $maxTextureSize: $Ref<number>, $textureFormat: $Ref<UnityEditor.TextureImporterFormat>, $compressionQuality: $Ref<number>) : boolean
            /** Get platform specific texture settings.
            * @param platform The platform whose settings are required (see below).
            * @param maxTextureSize Maximum texture width/height in pixels.
            * @param textureFormat Format of the texture.
            * @returns True if the platform override was found, false if no override was found. 
            */
            public GetPlatformTextureSettings ($platform: string, $maxTextureSize: $Ref<number>, $textureFormat: $Ref<UnityEditor.TextureImporterFormat>) : boolean
            /** Get platform specific texture settings.
            * @param platform The platform whose settings are required (see below).
            * @returns A TextureImporterPlatformSettings structure containing the platform parameters. 
            */
            public GetPlatformTextureSettings ($platform: string) : UnityEditor.TextureImporterPlatformSettings
            public GetDefaultPlatformTextureSettings () : UnityEditor.TextureImporterPlatformSettings
            /** Returns the TextureImporterFormat that would be automatically chosen for this platform.
            * @returns Format chosen by the system for the provided platform, TextureImporterFormat.Automatic if the platform does not exist. 
            */
            public GetAutomaticFormat ($platform: string) : UnityEditor.TextureImporterFormat
            /** Set specific target platform settings.
            * @param platformSettings Structure containing the platform settings.
            */
            public SetPlatformTextureSettings ($platformSettings: UnityEditor.TextureImporterPlatformSettings) : void
            /** Clear specific target platform settings.
            * @param platform The platform whose settings are to be cleared (see below).
            */
            public ClearPlatformTextureSettings ($platform: string) : void
            /** Validates ref::TextureImporterFormat:: based on a specified import type (ref::TextureImporterType::) and a specified build target (ref::BuildTarget::.).
            * @param textureType The TextureImporterType that the importer uses.
            * @param target The platform that the setting targets, referred to as the ref::BuilTarget::.
            * @param currentFormat The TextureImporterFormat to validate.
            * @returns Returns true if ref::TextureImporterFormat:: is valid and can be set. Returns false otherwise. 
            */
            public static IsPlatformTextureFormatValid ($textureType: UnityEditor.TextureImporterType, $target: UnityEditor.BuildTarget, $currentFormat: UnityEditor.TextureImporterFormat) : boolean
            /** Validates ref::TextureImporterFormat:: based on the type of the current format (ref::TextureImporterType::) and the default platform.
            * @param currentFormat The TextureImporterType that the importer uses.
            * @param textureType The TextureImporterFormat to validate.
            * @returns Returns true if ref::TextureImporterFormat:: is valid and can be set. Returns false otherwise. 
            */
            public static IsDefaultPlatformTextureFormatValid ($textureType: UnityEditor.TextureImporterType, $currentFormat: UnityEditor.TextureImporterFormat) : boolean
            public DoesSourceTextureHaveAlpha () : boolean
            /** Read texture settings into TextureImporterSettings class.
            */
            public ReadTextureSettings ($dest: UnityEditor.TextureImporterSettings) : void
            /** Set texture importers settings from TextureImporterSettings class.
            */
            public SetTextureSettings ($src: UnityEditor.TextureImporterSettings) : void
            public ReadTextureImportInstructions ($target: UnityEditor.BuildTarget, $desiredFormat: $Ref<UnityEngine.TextureFormat>, $colorSpace: $Ref<UnityEngine.ColorSpace>, $compressionQuality: $Ref<number>) : void
            public constructor ()
        }
        /** Imported texture format for TextureImporter.
        */
        enum TextureImporterFormat
        { Automatic = -1, AutomaticCompressed = -1, Automatic16bit = -2, AutomaticTruecolor = -3, AutomaticCrunched = -5, AutomaticHDR = -6, AutomaticCompressedHDR = -7, DXT1 = 10, DXT5 = 12, RGB16 = 7, RGB24 = 3, Alpha8 = 1, R16 = 9, R8 = 63, RG16 = 62, ARGB16 = 2, RGBA32 = 4, ARGB32 = 5, RGBA16 = 13, RHalf = 15, RGHalf = 16, RGBAHalf = 17, RFloat = 18, RGFloat = 19, RGBAFloat = 20, RGB9E5 = 22, BC4 = 26, BC5 = 27, BC6H = 24, BC7 = 25, DXT1Crunched = 28, DXT5Crunched = 29, PVRTC_RGB2 = 30, PVRTC_RGBA2 = 31, PVRTC_RGB4 = 32, PVRTC_RGBA4 = 33, ETC_RGB4 = 34, ATC_RGB4 = 35, ATC_RGBA8 = 36, EAC_R = 41, EAC_R_SIGNED = 42, EAC_RG = 43, EAC_RG_SIGNED = 44, ETC2_RGB4 = 45, ETC2_RGB4_PUNCHTHROUGH_ALPHA = 46, ETC2_RGBA8 = 47, ASTC_4x4 = 48, ASTC_5x5 = 49, ASTC_6x6 = 50, ASTC_8x8 = 51, ASTC_10x10 = 52, ASTC_12x12 = 53, ASTC_RGB_4x4 = 48, ASTC_RGB_5x5 = 49, ASTC_RGB_6x6 = 50, ASTC_RGB_8x8 = 51, ASTC_RGB_10x10 = 52, ASTC_RGB_12x12 = 53, ASTC_RGBA_4x4 = 54, ASTC_RGBA_5x5 = 55, ASTC_RGBA_6x6 = 56, ASTC_RGBA_8x8 = 57, ASTC_RGBA_10x10 = 58, ASTC_RGBA_12x12 = 59, ETC_RGB4_3DS = 60, ETC_RGBA8_3DS = 61, ETC_RGB4Crunched = 64, ETC2_RGBA8Crunched = 65, ASTC_HDR_4x4 = 66, ASTC_HDR_5x5 = 67, ASTC_HDR_6x6 = 68, ASTC_HDR_8x8 = 69, ASTC_HDR_10x10 = 70, ASTC_HDR_12x12 = 71 }
        /** This enumeration has values for different qualities to decompress an ETC2 texture on Android devices that don't support the ETC2 texture format.
        */
        enum AndroidETC2FallbackOverride
        { UseBuildSettings = 0, Quality32Bit = 1, Quality16Bit = 2, Quality32BitDownscaled = 3 }
        /** Select the kind of compression you want for your texture.
        */
        enum TextureImporterCompression
        { Uncompressed = 0, Compressed = 1, CompressedHQ = 2, CompressedLQ = 3 }
        /** Select how the alpha of the imported texture is generated.
        */
        enum TextureImporterAlphaSource
        { None = 0, FromInput = 1, FromGrayScale = 2 }
        /** Stores platform specifics settings of a TextureImporter.
        */
        class TextureImporterPlatformSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Name of the build target.
            */
            public get name(): string;
            public set name(value: string);
            /** Set to true in order to override the Default platform parameters by those provided in the TextureImporterPlatformSettings structure.
            */
            public get overridden(): boolean;
            public set overridden(value: boolean);
            /** Maximum texture size.
            */
            public get maxTextureSize(): number;
            public set maxTextureSize(value: number);
            /** For Texture to be scaled down choose resize algorithm. ( Applyed only when Texture dimension is bigger than Max Size ).
            */
            public get resizeAlgorithm(): UnityEditor.TextureResizeAlgorithm;
            public set resizeAlgorithm(value: UnityEditor.TextureResizeAlgorithm);
            /** Format of imported texture.
            */
            public get format(): UnityEditor.TextureImporterFormat;
            public set format(value: UnityEditor.TextureImporterFormat);
            /** Compression of imported texture.
            */
            public get textureCompression(): UnityEditor.TextureImporterCompression;
            public set textureCompression(value: UnityEditor.TextureImporterCompression);
            /** Quality of texture compression in the range [0..100].
            */
            public get compressionQuality(): number;
            public set compressionQuality(value: number);
            /** Use crunch compression when available.
            */
            public get crunchedCompression(): boolean;
            public set crunchedCompression(value: boolean);
            /** Allows Alpha splitting on the imported texture when needed (for example ETC1 compression for textures with transparency).
            */
            public get allowsAlphaSplitting(): boolean;
            public set allowsAlphaSplitting(value: boolean);
            /** Override for ETC2 decompression fallback on Android devices that don't support ETC2.
            */
            public get androidETC2FallbackOverride(): UnityEditor.AndroidETC2FallbackOverride;
            public set androidETC2FallbackOverride(value: UnityEditor.AndroidETC2FallbackOverride);
            /** Copy parameters into another TextureImporterPlatformSettings object.
            * @param target TextureImporterPlatformSettings object to copy settings to.
            */
            public CopyTo ($target: UnityEditor.TextureImporterPlatformSettings) : void
            public constructor ()
        }
        /** Select this to set basic parameters depending on the purpose of your texture.
        */
        enum TextureImporterType
        { Default = 0, Image = 0, NormalMap = 1, Bump = 1, GUI = 2, Sprite = 8, Cursor = 7, Cubemap = 3, Reflection = 3, Cookie = 4, Lightmap = 6, HDRI = 9, Advanced = 5, SingleChannel = 10 }
        /** Cubemap generation mode for TextureImporter.
        */
        enum TextureImporterGenerateCubemap
        { None = 0, Spheremap = 1, Cylindrical = 2, SimpleSpheremap = 3, NiceSpheremap = 4, FullCubemap = 5, AutoCubemap = 6 }
        /** Scaling mode for non power of two textures in TextureImporter.
        */
        enum TextureImporterNPOTScale
        { None = 0, ToNearest = 1, ToLarger = 2, ToSmaller = 3 }
        /** Mip map filter for TextureImporter.
        */
        enum TextureImporterMipFilter
        { BoxFilter = 0, KaiserFilter = 1 }
        /** Normal map filtering mode for TextureImporter.
        */
        enum TextureImporterNormalFilter
        { Standard = 0, Sobel = 1 }
        /** Texture importer modes for Sprite import.
        */
        enum SpriteImportMode
        { None = 0, Single = 1, Multiple = 2, Polygon = 3 }
        /** Editor data used in producing a Sprite.
        */
        class SpriteMetaData extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Name of the Sprite.
            */
            public name : string
            /** Bounding rectangle of the sprite's graphic within the atlas image.
            */
            public rect : UnityEngine.Rect
            /** Edge-relative alignment of the sprite graphic.
            */
            public alignment : number
            /** The pivot point of the Sprite, relative to its bounding rectangle.
            */
            public pivot : UnityEngine.Vector2
            /** Edge border size for a sprite (in pixels).
            */
            public border : UnityEngine.Vector4
        }
        /** Select the kind of shape of your texture.
        */
        enum TextureImporterShape
        { Texture2D = 1, TextureCube = 2 }
        /** Stores settings of a TextureImporter.
        */
        class TextureImporterSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Which type of texture are we dealing with here.
            */
            public get textureType(): UnityEditor.TextureImporterType;
            public set textureType(value: UnityEditor.TextureImporterType);
            /** Shape of imported texture.
            */
            public get textureShape(): UnityEditor.TextureImporterShape;
            public set textureShape(value: UnityEditor.TextureImporterShape);
            /** Mipmap filtering mode.
            */
            public get mipmapFilter(): UnityEditor.TextureImporterMipFilter;
            public set mipmapFilter(value: UnityEditor.TextureImporterMipFilter);
            /** Generate mip maps for the texture?
            */
            public get mipmapEnabled(): boolean;
            public set mipmapEnabled(value: boolean);
            /** Is texture storing color data?
            */
            public get sRGBTexture(): boolean;
            public set sRGBTexture(value: boolean);
            /** Fade out mip levels to gray color?
            */
            public get fadeOut(): boolean;
            public set fadeOut(value: boolean);
            /** Enable this to avoid colors seeping out to the edge of the lower Mip levels. Used for light cookies.
            */
            public get borderMipmap(): boolean;
            public set borderMipmap(value: boolean);
            /** Enables or disables coverage-preserving alpha MIP mapping.
            */
            public get mipMapsPreserveCoverage(): boolean;
            public set mipMapsPreserveCoverage(value: boolean);
            /** Returns or assigns the alpha test reference value.
            */
            public get alphaTestReferenceValue(): number;
            public set alphaTestReferenceValue(value: number);
            /** Mip level where texture begins to fade out to gray.
            */
            public get mipmapFadeDistanceStart(): number;
            public set mipmapFadeDistanceStart(value: number);
            /** Mip level where texture is faded out to gray completely.
            */
            public get mipmapFadeDistanceEnd(): number;
            public set mipmapFadeDistanceEnd(value: number);
            /** Convert heightmap to normal map?
            */
            public get convertToNormalMap(): boolean;
            public set convertToNormalMap(value: boolean);
            /** Amount of bumpyness in the heightmap.
            */
            public get heightmapScale(): number;
            public set heightmapScale(value: number);
            /** Normal map filtering mode.
            */
            public get normalMapFilter(): UnityEditor.TextureImporterNormalFilter;
            public set normalMapFilter(value: UnityEditor.TextureImporterNormalFilter);
            /** Select how the alpha of the imported texture is generated.
            */
            public get alphaSource(): UnityEditor.TextureImporterAlphaSource;
            public set alphaSource(value: UnityEditor.TextureImporterAlphaSource);
            /** Color or Alpha component TextureImporterType|Single Channel Textures uses.
            */
            public get singleChannelComponent(): UnityEditor.TextureImporterSingleChannelComponent;
            public set singleChannelComponent(value: UnityEditor.TextureImporterSingleChannelComponent);
            /** Is texture data readable from scripts.
            */
            public get readable(): boolean;
            public set readable(value: boolean);
            /** Enable mipmap streaming for this texture.
            */
            public get streamingMipmaps(): boolean;
            public set streamingMipmaps(value: boolean);
            /** Relative priority for this texture when reducing memory size in order to hit the memory budget.
            */
            public get streamingMipmapsPriority(): number;
            public set streamingMipmapsPriority(value: number);
            /** Scaling mode for non power of two textures.
            */
            public get npotScale(): UnityEditor.TextureImporterNPOTScale;
            public set npotScale(value: UnityEditor.TextureImporterNPOTScale);
            /** Cubemap generation mode.
            */
            public get generateCubemap(): UnityEditor.TextureImporterGenerateCubemap;
            public set generateCubemap(value: UnityEditor.TextureImporterGenerateCubemap);
            /** Convolution mode.
            */
            public get cubemapConvolution(): UnityEditor.TextureImporterCubemapConvolution;
            public set cubemapConvolution(value: UnityEditor.TextureImporterCubemapConvolution);
            public get seamlessCubemap(): boolean;
            public set seamlessCubemap(value: boolean);
            /** Filtering mode of the texture.
            */
            public get filterMode(): UnityEngine.FilterMode;
            public set filterMode(value: UnityEngine.FilterMode);
            /** Anisotropic filtering level of the texture.
            */
            public get aniso(): number;
            public set aniso(value: number);
            /** Mip map bias of the texture.
            */
            public get mipmapBias(): number;
            public set mipmapBias(value: number);
            /** Texture coordinate wrapping mode.
            */
            public get wrapMode(): UnityEngine.TextureWrapMode;
            public set wrapMode(value: UnityEngine.TextureWrapMode);
            /** Texture U coordinate wrapping mode.
            */
            public get wrapModeU(): UnityEngine.TextureWrapMode;
            public set wrapModeU(value: UnityEngine.TextureWrapMode);
            /** Texture V coordinate wrapping mode.
            */
            public get wrapModeV(): UnityEngine.TextureWrapMode;
            public set wrapModeV(value: UnityEngine.TextureWrapMode);
            /** Texture W coordinate wrapping mode for Texture3D.
            */
            public get wrapModeW(): UnityEngine.TextureWrapMode;
            public set wrapModeW(value: UnityEngine.TextureWrapMode);
            /** If the provided alpha channel is transparency, enable this to dilate the color to avoid filtering artifacts on the edges.
            */
            public get alphaIsTransparency(): boolean;
            public set alphaIsTransparency(value: boolean);
            /** Sprite texture import mode.
            */
            public get spriteMode(): number;
            public set spriteMode(value: number);
            /** The number of pixels in the sprite that correspond to one unit in world space.
            */
            public get spritePixelsPerUnit(): number;
            public set spritePixelsPerUnit(value: number);
            /** The tessellation detail to be used for generating the mesh for the associated sprite if the SpriteMode is set to Single. For Multiple sprites, use the SpriteEditor to specify the value per sprite.
            Valid values are in the range [0-1], with higher values generating a tighter mesh. A default of -1 will allow Unity to determine the value automatically.
            */
            public get spriteTessellationDetail(): number;
            public set spriteTessellationDetail(value: number);
            /** The number of blank pixels to leave between the edge of the graphic and the mesh.
            */
            public get spriteExtrude(): number;
            public set spriteExtrude(value: number);
            /** SpriteMeshType defines the type of Mesh that TextureImporter generates for a Sprite.
            */
            public get spriteMeshType(): UnityEngine.SpriteMeshType;
            public set spriteMeshType(value: UnityEngine.SpriteMeshType);
            /** Edge-relative alignment of the sprite graphic.
            */
            public get spriteAlignment(): number;
            public set spriteAlignment(value: number);
            /** Pivot point of the Sprite relative to its graphic's rectangle.
            */
            public get spritePivot(): UnityEngine.Vector2;
            public set spritePivot(value: UnityEngine.Vector2);
            /** Border sizes of the generated sprites.
            */
            public get spriteBorder(): UnityEngine.Vector4;
            public set spriteBorder(value: UnityEngine.Vector4);
            /** Generates a default physics shape for a Sprite if a physics shape has not been set by the user.
            */
            public get spriteGenerateFallbackPhysicsShape(): boolean;
            public set spriteGenerateFallbackPhysicsShape(value: boolean);
            /** Test texture importer settings for equality.
            */
            public static Equal ($a: UnityEditor.TextureImporterSettings, $b: UnityEditor.TextureImporterSettings) : boolean
            /** Copy parameters into another TextureImporterSettings object.
            * @param target TextureImporterSettings object to copy settings to.
            */
            public CopyTo ($target: UnityEditor.TextureImporterSettings) : void
            public ApplyTextureType ($type: UnityEditor.TextureImporterType) : void
            public constructor ()
        }
        /** Selects which Color/Alpha channel TextureImporterType|Single Channel Textures uses.
        */
        enum TextureImporterSingleChannelComponent
        { Alpha = 0, Red = 1 }
        /** For Texture to be scaled down choose resize algorithm. ( Applyed only when Texture dimension is bigger than Max Size ).
        */
        enum TextureResizeAlgorithm
        { Mitchell = 0, Bilinear = 1 }
        /** Defines Cubemap convolution mode.
        */
        enum TextureImporterCubemapConvolution
        { None = 0, Specular = 1, Diffuse = 2 }
        /** RGBM encoding mode for HDR textures in TextureImporter.
        */
        enum TextureImporterRGBMMode
        { Auto = 0, On = 1, Off = 2, Encoded = 3 }
        class AssetStoreAsset extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public id : number
            public name : string
            public displayName : string
            public staticPreviewURL : string
            public dynamicPreviewURL : string
            public className : string
            public price : string
            public packageID : number
            public previewImage : UnityEngine.Texture2D
            public get Preview(): UnityEngine.Object;
            public get HasLivePreview(): boolean;
            public Dispose () : void
            public constructor ()
        }
        /** Antialiased curve rendering functionality used by audio tools in the editor.
        */
        class AudioCurveRendering extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static kAudioOrange : UnityEngine.Color
            public static BeginCurveFrame ($r: UnityEngine.Rect) : UnityEngine.Rect
            public static EndCurveFrame () : void
            public static DrawCurveFrame ($r: UnityEngine.Rect) : UnityEngine.Rect
            public static DrawCurveBackground ($r: UnityEngine.Rect) : void
            public static DrawFilledCurve ($r: UnityEngine.Rect, $eval: UnityEditor.AudioCurveRendering.AudioCurveEvaluator, $curveColor: UnityEngine.Color) : void
            public static DrawFilledCurve ($r: UnityEngine.Rect, $eval: UnityEditor.AudioCurveRendering.AudioCurveAndColorEvaluator) : void
            public static DrawMinMaxFilledCurve ($r: UnityEngine.Rect, $eval: UnityEditor.AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator) : void
            public static DrawSymmetricFilledCurve ($r: UnityEngine.Rect, $eval: UnityEditor.AudioCurveRendering.AudioCurveAndColorEvaluator) : void
            public static DrawCurve ($r: UnityEngine.Rect, $eval: UnityEditor.AudioCurveRendering.AudioCurveEvaluator, $curveColor: UnityEngine.Color) : void
            public static DrawGradientRect ($r: UnityEngine.Rect, $c1: UnityEngine.Color, $c2: UnityEngine.Color, $blend: number, $horizontal: boolean) : void
            public constructor ()
        }
        class IAudioEffectPlugin extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public SetFloatParameter ($name: string, $value: number) : boolean
            public GetFloatParameter ($name: string, $value: $Ref<number>) : boolean
            public GetFloatParameterInfo ($name: string, $minRange: $Ref<number>, $maxRange: $Ref<number>, $defaultValue: $Ref<number>) : boolean
            public GetFloatBuffer ($name: string, $data: $Ref<System.Array$1<number>>, $numsamples: number) : boolean
            public GetSampleRate () : number
            public IsPluginEditableAndEnabled () : boolean
        }
        class IAudioEffectPluginGUI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Name(): string;
            public get Description(): string;
            public get Vendor(): string;
            public OnGUI ($plugin: UnityEditor.IAudioEffectPlugin) : boolean
        }
        interface CommandHandler
        { 
        (context: UnityEditor.CommandExecuteContext) : void; 
        Invoke?: (context: UnityEditor.CommandExecuteContext) => void;
        }
        var CommandHandler: { new (func: (context: UnityEditor.CommandExecuteContext) => void): CommandHandler; }
        class CommandExecuteContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public args : System.Array$1<any>
            public result : any
            public hint : UnityEditor.CommandHint
            public get data(): any;
            public constructor ()
        }
        class CommandHandlerAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get id(): string;
            public get label(): string;
            public get hint(): UnityEditor.CommandHint;
            public constructor ($id: string, $label: string, $hint: UnityEditor.CommandHint)
            public constructor ($id: string)
            public constructor ($id: string, $hint: UnityEditor.CommandHint)
            public constructor ($id: string, $label: string)
            public constructor ()
        }
        enum CommandHint
        { Undefined = -1, None = 0, Event = 1, Menu = 2, Shortcut = 4, Shelf = 8, UI = 1048576, OnGUI = 3145728, UIElements = 5242880, Validate = 1073741824, UserDefined = -2147483648, Any = -1 }
        class CommandService extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetCommandLabel ($commandId: string) : string
            public static RegisterCommand ($id: string, $label: string, $handler: UnityEditor.CommandHandler, $hint?: UnityEditor.CommandHint) : void
            public static RegisterCommand ($id: string, $handler: UnityEditor.CommandHandler, $hint?: UnityEditor.CommandHint) : void
            public static UnregisterCommand ($id: string) : boolean
            public static Exists ($id: string) : boolean
            public static Execute ($id: string) : any
            public static Execute ($id: string, $hint: UnityEditor.CommandHint) : any
            public static Execute ($id: string, $hint: UnityEditor.CommandHint, ...args: any[]) : any
        }
        class ModeService extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get modeNames(): System.Array$1<string>;
            public static get modeCount(): number;
            public static get currentId(): string;
            public static get currentIndex(): number;
            public static add_modeChanged ($value: System.Action$1<UnityEditor.ModeService.ModeChangedArgs>) : void
            public static remove_modeChanged ($value: System.Action$1<UnityEditor.ModeService.ModeChangedArgs>) : void
            public static ChangeModeById ($modeId: string) : void
            public static Update () : void
        }
        /** The lighting data asset used by the active Scene.
        */
        class LightingDataAsset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Various settings for the bake.
        */
        class LightmapEditorSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Determines which backend to use for baking lightmaps.
            */
            public static get lightmapper(): UnityEditor.LightmapEditorSettings.Lightmapper;
            public static set lightmapper(value: UnityEditor.LightmapEditorSettings.Lightmapper);
            /** NonDirectional or CombinedDirectional lightmaps rendering mode.
            */
            public static get lightmapsMode(): UnityEngine.LightmapsMode;
            public static set lightmapsMode(value: UnityEngine.LightmapsMode);
            /** Indicates the Mixed mode that is used to bake the LightmapBakeType.Mixed lights, irrelevant for realtime and baked lights.
            */
            public static get mixedBakeMode(): UnityEngine.MixedLightingMode;
            public static set mixedBakeMode(value: UnityEngine.MixedLightingMode);
            /** Determines which sampling strategy to use for baking lightmaps with the Progressive Lightmapper.
            */
            public static get sampling(): UnityEditor.LightmapEditorSettings.Sampling;
            public static set sampling(value: UnityEditor.LightmapEditorSettings.Sampling);
            /** Specifies the number of samples the Progressive Lightmapper uses for direct lighting calculations. The default value is 32. The range is 1 to 131072.
            */
            public static get directSampleCount(): number;
            public static set directSampleCount(value: number);
            /** Specifies the number of samples the Progressive Lightmapper uses for indirect lighting calculations. The default value is 512. The range is 8 to 131072.
            */
            public static get indirectSampleCount(): number;
            public static set indirectSampleCount(value: number);
            /** Specifies the maximum number of bounces the Progressive Lightmapper computes for indirect light. The default value is 2. The range is 0 to 4.
            */
            public static get bounces(): number;
            public static set bounces(value: number);
            /** Specifies whether the Progressive Lightmapper should prioritize baking texels within the Scene view. The default value is true.
            */
            public static get prioritizeView(): boolean;
            public static set prioritizeView(value: boolean);
            /** Specifies the method used by the Progressive Lightmapper to reduce noise in baked lightmaps.
            */
            public static get filteringMode(): UnityEditor.LightmapEditorSettings.FilterMode;
            public static set filteringMode(value: UnityEditor.LightmapEditorSettings.FilterMode);
            /** The type of denoising applied to the direct light for the lightmap.
            */
            public static get denoiserTypeDirect(): UnityEditor.LightmapEditorSettings.DenoiserType;
            public static set denoiserTypeDirect(value: UnityEditor.LightmapEditorSettings.DenoiserType);
            /** The type of denoising applied to the indirect light for the lightmap.
            */
            public static get denoiserTypeIndirect(): UnityEditor.LightmapEditorSettings.DenoiserType;
            public static set denoiserTypeIndirect(value: UnityEditor.LightmapEditorSettings.DenoiserType);
            /** The type of denoising applied to the ambient occlusion for the lightmap.
            */
            public static get denoiserTypeAO(): UnityEditor.LightmapEditorSettings.DenoiserType;
            public static set denoiserTypeAO(value: UnityEditor.LightmapEditorSettings.DenoiserType);
            /** Configure a filter kernel for the direct light target.
            */
            public static get filterTypeDirect(): UnityEditor.LightmapEditorSettings.FilterType;
            public static set filterTypeDirect(value: UnityEditor.LightmapEditorSettings.FilterType);
            /** Configure a filter kernel for the indirect light target.
            */
            public static get filterTypeIndirect(): UnityEditor.LightmapEditorSettings.FilterType;
            public static set filterTypeIndirect(value: UnityEditor.LightmapEditorSettings.FilterType);
            /** Configure a filter kernel for the ambient occlusion target.
            */
            public static get filterTypeAO(): UnityEditor.LightmapEditorSettings.FilterType;
            public static set filterTypeAO(value: UnityEditor.LightmapEditorSettings.FilterType);
            /** Specifies the radius the Progressive Lightmapper uses to filter for direct light stored in the lightmap when using Gaussian filter. The default value is one. The value range is 0 to 5.
            */
            public static get filteringGaussRadiusDirect(): number;
            public static set filteringGaussRadiusDirect(value: number);
            /** Specifies the radius the Progressive Lightmapper used to filter for indirect light stored in the lightmap when using Gaussian filter. The default value is 5. The value range is 0 to 5.
            */
            public static get filteringGaussRadiusIndirect(): number;
            public static set filteringGaussRadiusIndirect(value: number);
            /** Specifies the radius the Progressive Lightmapper uses to filter for ambient occlusion in the lightmap when using Gaussian filter. The default value is 2. The value range is 0 to 5.
            */
            public static get filteringGaussRadiusAO(): number;
            public static set filteringGaussRadiusAO(value: number);
            /** Specifies the threshold the Progressive Lightmapper uses to filter direct light stored in the lightmap when using A-Trous filter. The default value is 0.5. The value range is 0 to 2.
            */
            public static get filteringAtrousPositionSigmaDirect(): number;
            public static set filteringAtrousPositionSigmaDirect(value: number);
            /** Specifies the threshold the Progressive Lightmapper uses to filter indirect light stored in the lightmap when using A-Trous filter. The default value is 2. The value range is 0 to 2.
            */
            public static get filteringAtrousPositionSigmaIndirect(): number;
            public static set filteringAtrousPositionSigmaIndirect(value: number);
            /** Specifies the threshold the Progressive Lightmapper uses to filter ambient occlusion stored in the lightmap when using A-Trous filter. The default value is 1. The value range is 0 to 2.
            */
            public static get filteringAtrousPositionSigmaAO(): number;
            public static set filteringAtrousPositionSigmaAO(value: number);
            /** Specifies the number of samples the Progressive Lightmapper uses for direct environment lighting calculations. The default value is 256. The range is 8 to 131072.
            */
            public static get environmentSampleCount(): number;
            public static set environmentSampleCount(value: number);
            /** Specifies the number of samples to use for Light Probes relative to lightmap texels. The default value is 4.
            */
            public static get lightProbeSampleCountMultiplier(): number;
            public static set lightProbeSampleCountMultiplier(value: number);
            /** The maximum size of an individual lightmap texture.
            */
            public static get maxAtlasSize(): number;
            public static set maxAtlasSize(value: number);
            /** Lightmap resolution in texels per world unit. Defines the resolution of Realtime GI if enabled. If Baked GI is enabled, this defines the resolution used for indirect lighting. Higher resolution may take a long time to bake.
            */
            public static get realtimeResolution(): number;
            public static set realtimeResolution(value: number);
            /** Specifies the resolution of the Baked lightmap in texels per world unit. Specifying higher resolutions can significantly increase the time it takes to bake the lightmap. The default value is one texel per world unit. The minimum value is 0.0001.
            */
            public static get bakeResolution(): number;
            public static set bakeResolution(value: number);
            /** Whether to use texture compression on the generated lightmaps.
            */
            public static get textureCompression(): boolean;
            public static set textureCompression(value: boolean);
            /** Determines how Unity will compress baked reflection cubemap.
            */
            public static get reflectionCubemapCompression(): UnityEngine.Rendering.ReflectionCubemapCompression;
            public static set reflectionCubemapCompression(value: UnityEngine.Rendering.ReflectionCubemapCompression);
            /** Enable baked ambient occlusion (AO).
            */
            public static get enableAmbientOcclusion(): boolean;
            public static set enableAmbientOcclusion(value: boolean);
            /** Beyond this distance a ray is considered to be unoccluded.
            */
            public static get aoMaxDistance(): number;
            public static set aoMaxDistance(value: number);
            /** Ambient occlusion (AO) for indirect lighting.
            */
            public static get aoExponentIndirect(): number;
            public static set aoExponentIndirect(value: number);
            /** Ambient occlusion (AO) for direct lighting.
            */
            public static get aoExponentDirect(): number;
            public static set aoExponentDirect(value: number);
            /** Texel separation between shapes.
            */
            public static get padding(): number;
            public static set padding(value: number);
            /** Exports training data in the project folder for the current bake. Only works with Progressive CPU.
            */
            public static get exportTrainingData(): boolean;
            public static set exportTrainingData(value: boolean);
            /** Controls the name of the destination folder for the exported textures. For example, "mySetup/30samples" would be located in the project folder.
            */
            public static get trainingDataDestination(): string;
            public static set trainingDataDestination(value: string);
        }
        /** Bake quality setting for LightmapEditorSettings.
        */
        enum LightmapBakeQuality
        { High = 0, Low = 1 }
        /** A collection of parameters that impact lightmap and realtime GI computations.
        */
        class LightmapParameters extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The texel resolution per meter used for realtime lightmaps. This value is multiplied by LightmapEditorSettings.resolution.
            */
            public get resolution(): number;
            public set resolution(value: number);
            /** Controls the resolution at which Enlighten stores and can transfer input light.
            */
            public get clusterResolution(): number;
            public set clusterResolution(value: number);
            /** The amount of data used for realtime GI texels. Specifies how detailed view of the Scene a texel has. Small values mean more averaged out lighting.
            */
            public get irradianceBudget(): number;
            public set irradianceBudget(value: number);
            /** The number of rays to cast for computing irradiance form factors.
            */
            public get irradianceQuality(): number;
            public set irradianceQuality(value: number);
            /** The percentage of rays shot from a ray origin that must hit front faces to be considered usable.
            */
            public get backFaceTolerance(): number;
            public set backFaceTolerance(value: number);
            /** Maximum size of gaps that can be ignored for GI (multiplier on pixel size).
            */
            public get modellingTolerance(): number;
            public set modellingTolerance(value: number);
            /** Whether pairs of edges should be stitched together.
            */
            public get stitchEdges(): boolean;
            public set stitchEdges(value: boolean);
            /** System tag is an integer identifier. It lets you force an object into a different Enlighten system even though all the other parameters are the same.
            */
            public get systemTag(): number;
            public set systemTag(value: number);
            /** If enabled, the object appears transparent during GlobalIllumination lighting calculations.
            */
            public get isTransparent(): boolean;
            public set isTransparent(value: boolean);
            /** The number of rays to cast for computing ambient occlusion.
            */
            public get AOQuality(): number;
            public set AOQuality(value: number);
            /** The maximum number of times to supersample a texel to reduce aliasing in AO.
            */
            public get AOAntiAliasingSamples(): number;
            public set AOAntiAliasingSamples(value: number);
            /** The radius (in texels) of the post-processing filter that blurs baked direct lighting.
            */
            public get blurRadius(): number;
            public set blurRadius(value: number);
            /** The number of rays used for lights with an area. Allows for accurate soft shadowing.
            */
            public get directLightQuality(): number;
            public set directLightQuality(value: number);
            /** The maximum number of times to supersample a texel to reduce aliasing.
            */
            public get antiAliasingSamples(): number;
            public set antiAliasingSamples(value: number);
            /** BakedLightmapTag is an integer that affects the assignment to baked lightmaps. Objects with different values for bakedLightmapTag are guaranteed to not be assigned to the same lightmap even if the other baking parameters are the same.
            */
            public get bakedLightmapTag(): number;
            public set bakedLightmapTag(value: number);
            /** If enabled, objects sharing the same lightmap parameters will be packed into LightmapParameters.maxLightmapCount lightmaps.
            */
            public get limitLightmapCount(): boolean;
            public set limitLightmapCount(value: boolean);
            /** The maximum number of lightmaps that will be created for objects sharing the same lightmap parameters. This property is ignored if LightmapParameters.limitLightmapCount is false.
            */
            public get maxLightmapCount(): number;
            public set maxLightmapCount(value: number);
            public constructor ()
        }
        class LightmapSnapshot extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Allows to control the lightmapping job.
        */
        class Lightmapping extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The lightmap baking workflow mode used. Iterative mode is default, but you can switch to on demand mode which bakes only when the user presses the bake button.
            */
            public static get giWorkflowMode(): UnityEditor.Lightmapping.GIWorkflowMode;
            public static set giWorkflowMode(value: UnityEditor.Lightmapping.GIWorkflowMode);
            /** Is realtime GI enabled?
            */
            public static get realtimeGI(): boolean;
            public static set realtimeGI(value: boolean);
            /** Is baked GI enabled?
            */
            public static get bakedGI(): boolean;
            public static set bakedGI(value: boolean);
            /** Scale for indirect lighting.
            */
            public static get indirectOutputScale(): number;
            public static set indirectOutputScale(value: number);
            /** Boost the albedo.
            */
            public static get bounceBoost(): number;
            public static set bounceBoost(value: number);
            /** Returns true when the bake job is running, false otherwise (Read Only).
            */
            public static get isRunning(): boolean;
            /** Returns the current lightmapping build progress or 0 if Lightmapping.isRunning is false.
            */
            public static get buildProgress(): number;
            /** The lighting data asset used by the active Scene.
            */
            public static get lightingDataAsset(): UnityEditor.LightingDataAsset;
            public static set lightingDataAsset(value: UnityEditor.LightingDataAsset);
            public static ClearDiskCache () : void
            public static BakeAsync () : boolean
            public static Bake () : boolean
            public static Cancel () : void
            public static ForceStop () : void
            public static add_started ($value: UnityEditor.Lightmapping.OnStartedFunction) : void
            public static remove_started ($value: UnityEditor.Lightmapping.OnStartedFunction) : void
            public static add_bakeStarted ($value: System.Action) : void
            public static remove_bakeStarted ($value: System.Action) : void
            public static add_lightingDataUpdated ($value: System.Action) : void
            public static remove_lightingDataUpdated ($value: System.Action) : void
            public static add_bakeCompleted ($value: System.Action) : void
            public static remove_bakeCompleted ($value: System.Action) : void
            public static Clear () : void
            public static ClearLightingDataAsset () : void
            /** Calculates a Delaunay Tetrahedralization of the 'positions' point set - the same way the lightmapper.
            */
            public static Tetrahedralize ($positions: System.Array$1<UnityEngine.Vector3>, $outIndices: $Ref<System.Array$1<number>>, $outPositions: $Ref<System.Array$1<UnityEngine.Vector3>>) : void
            /** Starts a synchronous bake job for the probe.
            * @param probe Target probe.
            * @param path The location where cubemap will be saved.
            * @returns Returns true if baking was succesful. 
            */
            public static BakeReflectionProbe ($probe: UnityEngine.ReflectionProbe, $path: string) : boolean
            /** Get how many chunks the terrain is divided into for GI baking.
            * @param terrain The terrain.
            * @param numChunksX Number of chunks in terrain width.
            * @param numChunksY Number of chunks in terrain length.
            */
            public static GetTerrainGIChunks ($terrain: UnityEngine.Terrain, $numChunksX: $Ref<number>, $numChunksY: $Ref<number>) : void
            /** Bakes an array of Scenes.
            * @param paths The path of the Scenes that should be baked.
            */
            public static BakeMultipleScenes ($paths: System.Array$1<string>) : void
        }
        /** Common GUIStyles used for EditorGUI controls.
        */
        class EditorStyles extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Style used for the labelled on all EditorGUI overloads that take a prefix label.
            */
            public static get label(): UnityEngine.GUIStyle;
            /** Style for label with small font.
            */
            public static get miniLabel(): UnityEngine.GUIStyle;
            /** Style for label with large font.
            */
            public static get largeLabel(): UnityEngine.GUIStyle;
            /** Style for bold label.
            */
            public static get boldLabel(): UnityEngine.GUIStyle;
            /** Style for mini bold label.
            */
            public static get miniBoldLabel(): UnityEngine.GUIStyle;
            /** Style for label with small font which is centered and grey.
            */
            public static get centeredGreyMiniLabel(): UnityEngine.GUIStyle;
            /** Style for word wrapped mini label.
            */
            public static get wordWrappedMiniLabel(): UnityEngine.GUIStyle;
            /** Style for word wrapped label.
            */
            public static get wordWrappedLabel(): UnityEngine.GUIStyle;
            /** Style used for links.
            */
            public static get linkLabel(): UnityEngine.GUIStyle;
            /** Style for white label.
            */
            public static get whiteLabel(): UnityEngine.GUIStyle;
            /** Style for white mini label.
            */
            public static get whiteMiniLabel(): UnityEngine.GUIStyle;
            /** Style for white large label.
            */
            public static get whiteLargeLabel(): UnityEngine.GUIStyle;
            /** Style for white bold label.
            */
            public static get whiteBoldLabel(): UnityEngine.GUIStyle;
            /** Style used for a radio button.
            */
            public static get radioButton(): UnityEngine.GUIStyle;
            /** Style used for a standalone small button.
            */
            public static get miniButton(): UnityEngine.GUIStyle;
            /** Style used for the leftmost button in a horizontal button group.
            */
            public static get miniButtonLeft(): UnityEngine.GUIStyle;
            /** Style used for the middle buttons in a horizontal group.
            */
            public static get miniButtonMid(): UnityEngine.GUIStyle;
            /** Style used for the rightmost button in a horizontal group.
            */
            public static get miniButtonRight(): UnityEngine.GUIStyle;
            /** Style used for the drop-down controls.
            */
            public static get miniPullDown(): UnityEngine.GUIStyle;
            /** Style used for EditorGUI.TextField.
            */
            public static get textField(): UnityEngine.GUIStyle;
            /** Style used for EditorGUI.TextArea.
            */
            public static get textArea(): UnityEngine.GUIStyle;
            /** Smaller text field.
            */
            public static get miniTextField(): UnityEngine.GUIStyle;
            /** Style used for field editors for numbers.
            */
            public static get numberField(): UnityEngine.GUIStyle;
            /** Style used for EditorGUI.Popup, EditorGUI.EnumPopup,.
            */
            public static get popup(): UnityEngine.GUIStyle;
            /** Style used for headings for object fields.
            */
            public static get objectField(): UnityEngine.GUIStyle;
            /** Style used for headings for the Select button in object fields.
            */
            public static get objectFieldThumb(): UnityEngine.GUIStyle;
            /** Style used for object fields that have a thumbnail (e.g Textures). 
            */
            public static get objectFieldMiniThumb(): UnityEngine.GUIStyle;
            /** Style used for headings for Color fields.
            */
            public static get colorField(): UnityEngine.GUIStyle;
            /** Style used for headings for Layer masks.
            */
            public static get layerMaskField(): UnityEngine.GUIStyle;
            /** Style used for headings for EditorGUI.Toggle.
            */
            public static get toggle(): UnityEngine.GUIStyle;
            /** Style used for headings for EditorGUI.Foldout.
            */
            public static get foldout(): UnityEngine.GUIStyle;
            /** Style used for headings for EditorGUI.Foldout.
            */
            public static get foldoutPreDrop(): UnityEngine.GUIStyle;
            /** Style used for headings for EditorGUILayout.BeginFoldoutHeaderGroup.
            */
            public static get foldoutHeader(): UnityEngine.GUIStyle;
            /** Style used for icon for EditorGUILayout.BeginFoldoutHeaderGroup.
            */
            public static get foldoutHeaderIcon(): UnityEngine.GUIStyle;
            /** Style used for headings for EditorGUILayout.BeginToggleGroup.
            */
            public static get toggleGroup(): UnityEngine.GUIStyle;
            /** Standard font.
            */
            public static get standardFont(): UnityEngine.Font;
            /** Bold font.
            */
            public static get boldFont(): UnityEngine.Font;
            /** Mini font.
            */
            public static get miniFont(): UnityEngine.Font;
            /** Mini Bold font.
            */
            public static get miniBoldFont(): UnityEngine.Font;
            /** Toolbar background from top of windows.
            */
            public static get toolbar(): UnityEngine.GUIStyle;
            /** Style for Button and Toggles in toolbars.
            */
            public static get toolbarButton(): UnityEngine.GUIStyle;
            /** Toolbar Popup.
            */
            public static get toolbarPopup(): UnityEngine.GUIStyle;
            /** Toolbar Dropdown.
            */
            public static get toolbarDropDown(): UnityEngine.GUIStyle;
            /** Toolbar text field.
            */
            public static get toolbarTextField(): UnityEngine.GUIStyle;
            /** Wrap content in a vertical group with this style to get the default margins used in the Inspector.
            */
            public static get inspectorDefaultMargins(): UnityEngine.GUIStyle;
            /** Wrap content in a vertical group with this style to get full width margins in the Inspector.
            */
            public static get inspectorFullWidthMargins(): UnityEngine.GUIStyle;
            /** Style used for background box for EditorGUI.HelpBox.
            */
            public static get helpBox(): UnityEngine.GUIStyle;
            /** Toolbar search field.
            */
            public static get toolbarSearchField(): UnityEngine.GUIStyle;
            public constructor ()
        }
        /** Class used to implement content for a popup window.
        */
        class PopupWindowContent extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The EditorWindow that contains the popup content.
            */
            public get editorWindow(): UnityEditor.EditorWindow;
            /** Callback for drawing GUI controls for the popup window.
            * @param rect The rectangle to draw the GUI inside.
            */
            public OnGUI ($rect: UnityEngine.Rect) : void
            public GetWindowSize () : UnityEngine.Vector2
            public OnOpen () : void
            public OnClose () : void
        }
        /** Class used to display popup windows that inherit from PopupWindowContent.
        */
        class PopupWindow extends UnityEditor.EditorWindow
        {
            protected [__keep_incompatibility]: never;
            /** Show a popup with the given PopupWindowContent.
            * @param activatorRect The rect of the button that opens the popup.
            * @param windowContent The content to show in the popup window.
            */
            public static Show ($activatorRect: UnityEngine.Rect, $windowContent: UnityEditor.PopupWindowContent) : void
            public Show () : void
            /** Show the EditorWindow window.
            * @param immediateDisplay Immediately display Show.
            */
            public Show ($immediateDisplay: boolean) : void
        }
        /** Enum for Tools.viewTool.
        */
        enum ViewTool
        { None = -1, Orbit = 0, Pan = 1, Zoom = 2, FPS = 3 }
        /** Where is the tool handle placed.
        */
        enum PivotMode
        { Center = 0, Pivot = 1 }
        /** How is the tool handle oriented.
        */
        enum PivotRotation
        { Local = 0, Global = 1 }
        /** Which tool is active in the editor.
        */
        enum Tool
        { View = 0, Move = 1, Rotate = 2, Scale = 3, Rect = 4, Transform = 5, Custom = 6, None = -1 }
        /** Class used to manipulate the tools used in Unity's Scene View.
        */
        class Tools extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** The tool that is currently selected for the Scene View.
            */
            public static get current(): UnityEditor.Tool;
            public static set current(value: UnityEditor.Tool);
            /** The option that is currently active for the View tool in the Scene view.
            */
            public static get viewTool(): UnityEditor.ViewTool;
            public static set viewTool(value: UnityEditor.ViewTool);
            /** The position of the tool handle in world space.
            */
            public static get handlePosition(): UnityEngine.Vector3;
            /** The rectangle used for the rect tool.
            */
            public static get handleRect(): UnityEngine.Rect;
            /** The rotation of the rect tool handle in world space.
            */
            public static get handleRectRotation(): UnityEngine.Quaternion;
            /** Are we in Center or Pivot mode.
            */
            public static get pivotMode(): UnityEditor.PivotMode;
            public static set pivotMode(value: UnityEditor.PivotMode);
            /** Is the rect handle in blueprint mode?
            */
            public static get rectBlueprintMode(): boolean;
            public static set rectBlueprintMode(value: boolean);
            /** The rotation of the tool handle in world space.
            */
            public static get handleRotation(): UnityEngine.Quaternion;
            public static set handleRotation(value: UnityEngine.Quaternion);
            /** What's the rotation of the tool handle.
            */
            public static get pivotRotation(): UnityEditor.PivotRotation;
            public static set pivotRotation(value: UnityEditor.PivotRotation);
            /** Hides the Tools(Move, Rotate, Resize) on the Scene view.
            */
            public static get hidden(): boolean;
            public static set hidden(value: boolean);
            /** Which layers are visible in the Scene view.
            */
            public static get visibleLayers(): number;
            public static set visibleLayers(value: number);
            public static get lockedLayers(): number;
            public static set lockedLayers(value: number);
            public constructor ()
        }
        enum GameViewSizeGroupType
        { Standalone = 0, WebPlayer = 1, iOS = 2, Android = 3, PS3 = 4, WiiU = 5, Tizen = 6, WP8 = 7, N3DS = 8, HMD = 9 }
        class EditorMaterialUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static ResetDefaultTextures ($material: UnityEngine.Material, $overrideSetTextures: boolean) : void
            public static IsBackgroundMaterial ($material: UnityEngine.Material) : boolean
            public static SetShaderDefaults ($shader: UnityEngine.Shader, $name: System.Array$1<string>, $textures: System.Array$1<UnityEngine.Texture>) : void
            public static SetShaderNonModifiableDefaults ($shader: UnityEngine.Shader, $name: System.Array$1<string>, $textures: System.Array$1<UnityEngine.Texture>) : void
            public constructor ()
        }
        /** Control the behavior of handle snapping in the editor.
        */
        class EditorSnapSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Gets or sets whether grid snapping is enabled.
            */
            public static get gridSnapEnabled(): boolean;
            public static set gridSnapEnabled(value: boolean);
            /** Gets or sets the increment that translation handles snap to.
            */
            public static get move(): UnityEngine.Vector3;
            public static set move(value: UnityEngine.Vector3);
            /** Gets or sets the increment that rotation handles snap to.
            */
            public static get rotate(): number;
            public static set rotate(value: number);
            /** Gets or sets the increment that scale handles snap to.
            */
            public static get scale(): number;
            public static set scale(value: number);
            public static ResetSnapSettings () : void
        }
        /** Unity Camera Editor.
        */
        class CameraEditor extends UnityEditor.Editor implements UnityEditor.IPreviewable, UnityEditor.IToolModeOwner
        {
            protected [__keep_incompatibility]: never;
            public OnEnable () : void
            public OnDestroy () : void
            public OnOverlayGUI ($target: UnityEngine.Object, $sceneView: UnityEditor.SceneView) : void
            public OnSceneGUI () : void
            public constructor ()
        }
        interface IPreviewable
        {
        }
        interface IToolModeOwner
        {
        }
        class SearchableEditorWindow extends UnityEditor.EditorWindow
        {
            protected [__keep_incompatibility]: never;
            public OnEnable () : void
            public OnDisable () : void
            public constructor ()
        }
        /** Use this class to manage SceneView settings, change the SceneView camera properties, subscribe to events, call SceneView methods, and render open scenes.
        */
        class SceneView extends UnityEditor.SearchableEditorWindow implements UnityEditor.IHasCustomMenu
        {
            protected [__keep_incompatibility]: never;
            /** The SceneView that was most recently in focus.
            */
            public static get lastActiveSceneView(): UnityEditor.SceneView;
            /** The SceneView that is being drawn.
            */
            public static get currentDrawingSceneView(): UnityEditor.SceneView;
            /** Gets the Color of selected outline.
            */
            public static get selectedOutlineColor(): UnityEngine.Color;
            /** Sets the visibility of all Gizmos in the Scene view.
            */
            public get drawGizmos(): boolean;
            public set drawGizmos(value: boolean);
            /** Whether lighting is enabled or disabled in the Scene view.
            */
            public get sceneLighting(): boolean;
            public set sceneLighting(value: boolean);
            /** Whether the SceneView is in 2D mode.
            */
            public get in2DMode(): boolean;
            public set in2DMode(value: boolean);
            /** Whether the Scene view camera can be rotated.
            */
            public get isRotationLocked(): boolean;
            public set isRotationLocked(value: boolean);
            /** Enables or disables Scene view audio effects.
            */
            public get audioPlay(): boolean;
            public set audioPlay(value: boolean);
            /** The current DrawCameraMode for the Scene view camera.
            */
            public get cameraMode(): UnityEditor.SceneView.CameraMode;
            public set cameraMode(value: UnityEditor.SceneView.CameraMode);
            /** Whether the albedo is black for materials with an average specular color above 0.45.
            */
            public get validateTrueMetals(): boolean;
            public set validateTrueMetals(value: boolean);
            /** Use SceneViewState to set the debug options for the Scene view.
            */
            public get sceneViewState(): UnityEditor.SceneView.SceneViewState;
            public set sceneViewState(value: UnityEditor.SceneView.SceneViewState);
            /** Gets or sets whether to enable the grid for an instance of the SceneView.
            */
            public get showGrid(): boolean;
            public set showGrid(value: boolean);
            /** Use CameraSettings to set the properties for the SceneView Camera.
            */
            public get cameraSettings(): UnityEditor.SceneView.CameraSettings;
            public set cameraSettings(value: UnityEditor.SceneView.CameraSettings);
            /** When the Scene view is in 2D mode, this property contains the last camera rotation.
            */
            public get lastSceneViewRotation(): UnityEngine.Quaternion;
            public set lastSceneViewRotation(value: UnityEngine.Quaternion);
            /** The distance from camera to pivot.
            */
            public get cameraDistance(): number;
            /** The list of all open Scene view windows.
            */
            public static get sceneViews(): System.Collections.ArrayList;
            /** The Camera that is rendering this SceneView.
            */
            public get camera(): UnityEngine.Camera;
            /** The center point, or pivot, of the Scene view.
            */
            public get pivot(): UnityEngine.Vector3;
            public set pivot(value: UnityEngine.Vector3);
            /** The direction of the camera to the pivot of the SceneView.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** The size of the Scene view measured diagonally.
            */
            public get size(): number;
            public set size(value: number);
            /** Whether the Scene view camera is set to orthographic mode.
            */
            public get orthographic(): boolean;
            public set orthographic(value: boolean);
            public add_onValidateCameraMode ($value: System.Func$2<UnityEditor.SceneView.CameraMode, boolean>) : void
            public remove_onValidateCameraMode ($value: System.Func$2<UnityEditor.SceneView.CameraMode, boolean>) : void
            public add_onCameraModeChanged ($value: System.Action$1<UnityEditor.SceneView.CameraMode>) : void
            public remove_onCameraModeChanged ($value: System.Action$1<UnityEditor.SceneView.CameraMode>) : void
            public add_gridVisibilityChanged ($value: System.Action$1<boolean>) : void
            public remove_gridVisibilityChanged ($value: System.Action$1<boolean>) : void
            public static add_beforeSceneGui ($value: System.Action$1<UnityEditor.SceneView>) : void
            public static remove_beforeSceneGui ($value: System.Action$1<UnityEditor.SceneView>) : void
            public static add_duringSceneGui ($value: System.Action$1<UnityEditor.SceneView>) : void
            public static remove_duringSceneGui ($value: System.Action$1<UnityEditor.SceneView>) : void
            public ResetCameraSettings () : void
            /** Sets a replacement shader for rendering this Scene view.
            * @param shader The replacement shader.
            * @param replaceString The replacement shader tag.
            */
            public SetSceneViewShaderReplace ($shader: UnityEngine.Shader, $replaceString: string) : void
            public static FrameLastActiveSceneView () : boolean
            public static FrameLastActiveSceneViewWithLock () : boolean
            public static GetAllSceneCameras () : System.Array$1<UnityEngine.Camera>
            public static RepaintAll () : void
            public OnDestroy () : void
            public AddItemsToMenu ($menu: UnityEditor.GenericMenu) : void
            public IsCameraDrawModeEnabled ($mode: UnityEditor.SceneView.CameraMode) : boolean
            public FixNegativeSize () : void
            /** Moves the Scene view to focus on a target.
            * @param point The position in world space to frame.
            * @param direction The direction that the Scene view should view the target point from.
            * @param newSize The amount of camera zoom. Sets size.
            * @param ortho Whether the camera focus is in orthographic mode (true) or perspective mode (false).
            * @param instant Apply the movement immediately (true) or animate the transition (false).
            */
            public LookAt ($point: UnityEngine.Vector3) : void
            /** Moves the Scene view to focus on a target.
            * @param point The position in world space to frame.
            * @param direction The direction that the Scene view should view the target point from.
            * @param newSize The amount of camera zoom. Sets size.
            * @param ortho Whether the camera focus is in orthographic mode (true) or perspective mode (false).
            * @param instant Apply the movement immediately (true) or animate the transition (false).
            */
            public LookAt ($point: UnityEngine.Vector3, $direction: UnityEngine.Quaternion) : void
            /** .LookAt without animating the scene movement.
            * @param point The position in world space to frame.
            * @param direction The direction from which the Scene view should view the point.
            * @param newSize The amount of camera zoom. Sets size.
            */
            public LookAtDirect ($point: UnityEngine.Vector3, $direction: UnityEngine.Quaternion) : void
            /** Moves the Scene view to focus on a target.
            * @param point The position in world space to frame.
            * @param direction The direction that the Scene view should view the target point from.
            * @param newSize The amount of camera zoom. Sets size.
            * @param ortho Whether the camera focus is in orthographic mode (true) or perspective mode (false).
            * @param instant Apply the movement immediately (true) or animate the transition (false).
            */
            public LookAt ($point: UnityEngine.Vector3, $direction: UnityEngine.Quaternion, $newSize: number) : void
            /** .LookAt without animating the scene movement.
            * @param point The position in world space to frame.
            * @param direction The direction from which the Scene view should view the point.
            * @param newSize The amount of camera zoom. Sets size.
            */
            public LookAtDirect ($point: UnityEngine.Vector3, $direction: UnityEngine.Quaternion, $newSize: number) : void
            /** Moves the Scene view to focus on a target.
            * @param point The position in world space to frame.
            * @param direction The direction that the Scene view should view the target point from.
            * @param newSize The amount of camera zoom. Sets size.
            * @param ortho Whether the camera focus is in orthographic mode (true) or perspective mode (false).
            * @param instant Apply the movement immediately (true) or animate the transition (false).
            */
            public LookAt ($point: UnityEngine.Vector3, $direction: UnityEngine.Quaternion, $newSize: number, $ortho: boolean) : void
            /** Moves the Scene view to focus on a target.
            * @param point The position in world space to frame.
            * @param direction The direction that the Scene view should view the target point from.
            * @param newSize The amount of camera zoom. Sets size.
            * @param ortho Whether the camera focus is in orthographic mode (true) or perspective mode (false).
            * @param instant Apply the movement immediately (true) or animate the transition (false).
            */
            public LookAt ($point: UnityEngine.Vector3, $direction: UnityEngine.Quaternion, $newSize: number, $ortho: boolean, $instant: boolean) : void
            /** Moves the Scene view to frame a transform.
            * @param t The transform to frame in the Scene view.
            */
            public AlignViewToObject ($t: UnityEngine.Transform) : void
            public AlignWithView () : void
            public MoveToView () : void
            /** Transforms all selected object to the scene pivot.
            * @param target A transform to place at the scene pivot.
            */
            public MoveToView ($target: UnityEngine.Transform) : void
            public FrameSelected () : boolean
            /** Frame the object selection in the Scene view.
            * @param lockView Whether the view should be locked to the selection.
            * @returns Returns true if the current selection fits in the Scene view. Returns false otherwise. 
            */
            public FrameSelected ($lockView: boolean) : boolean
            public FrameSelected ($lockView: boolean, $instant: boolean) : boolean
            public Frame ($bounds: UnityEngine.Bounds, $instant?: boolean) : boolean
            /** Add a custom camera mode to the Scene view camera mode list.
            * @param name The name for the new mode.
            * @param section The section in which the new mode will be added. This can be an existing or new section.
            * @returns A CameraMode with the provided name and section. 
            */
            public static AddCameraMode ($name: string, $section: string) : UnityEditor.SceneView.CameraMode
            public static ClearUserDefinedCameraModes () : void
            /** Gets the built-in CameraMode that matches the specified DrawCameraMode.
            * @param mode The DrawCameraMode to match.
            * @returns Returns a built-in CameraMode. 
            */
            public static GetBuiltinCameraMode ($mode: UnityEditor.DrawCameraMode) : UnityEditor.SceneView.CameraMode
            public constructor ()
        }
        /** Utilities for cameras.
        */
        class CameraEditorUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The aspect ratio of the game view.
            */
            public static get GameViewAspectRatio(): number;
            public static HandleFrustum ($c: UnityEngine.Camera, $cameraEditorTargetIndex: number) : void
            /** Draw the frustrum gizmo of a camera.
            * @param camera The camera to use.
            */
            public static DrawFrustumGizmo ($camera: UnityEngine.Camera) : void
            /** Calculate the frustrum corners from the sensor physical properties, without taking gate fitting into account.
            To get the actual frustum with gate fit adjustment, use CameraEditorUtils.TryGetFrustum.
            This method is equivalent to CameraEditorUtils.TryGetFrustum for non-physical cameras.
            Corners are calculated in this order: left bottom, left top, right top, right bottom.
            * @param camera Camera to use.
            * @param near The corners of the near plane. (A minimum size of 4 elements is required.)
            * @param far The corners of the far plane. (A minimum size of 4 elements is required.)
            * @param frustumAspect The aspect ratio of the frustrum.
            * @returns Whether the frustrum was calculated. 
            */
            public static TryGetSensorGateFrustum ($camera: UnityEngine.Camera, $near: System.Array$1<UnityEngine.Vector3>, $far: System.Array$1<UnityEngine.Vector3>, $frustumAspect: $Ref<number>) : boolean
            /** Calculate the frustrum corners.
            Corners are calculated in this order: left bottom, left top, right top, right bottom.
            * @param camera Camera to use.
            * @param near The corners of the near plane. (A minimum size of 4 elements is required.)
            * @param far The corners of the far plane. (A minimum size of 4 elements is required.)
            * @param frustumAspect The aspect ratio of the frustrum.
            * @returns Whether the frustrum was calculated. 
            */
            public static TryGetFrustum ($camera: UnityEngine.Camera, $near: System.Array$1<UnityEngine.Vector3>, $far: System.Array$1<UnityEngine.Vector3>, $frustumAspect: $Ref<number>) : boolean
            /** Check whether a viewport is valid.
            * @param normalizedViewPortRect Viewport to check.
            * @returns Whether the viewport is valid. 
            */
            public static IsViewportRectValidToRender ($normalizedViewPortRect: UnityEngine.Rect) : boolean
            /** Calculate the frustrum aspect ratio of a camera.
            * @param camera Camera to use.
            * @returns The frustrum aspect ratio of the provided camera. 
            */
            public static GetFrustumAspectRatio ($camera: UnityEngine.Camera) : number
            /** Calculate the world space position of a point in clip space.
            The z component will be used to get the point at the distance z from the viewer.
            * @param clipToWorld Clip to world matrix to use.
            * @param viewPositionWS The viewer's position in world space.
            * @param positionCS The position in clip space.
            * @returns The corresponding world space position. 
            */
            public static PerspectiveClipToWorld ($clipToWorld: UnityEngine.Matrix4x4, $viewPositionWS: UnityEngine.Vector3, $positionCS: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Calculate the points of the frustrum plane facing the viewer at a specific distance.
            The points array will be filled with the calculated points in the following order: left bottom, left top, right top and right bottom.
            * @param clipToWorld Clip space to world space matrix.
            * @param viewPosition View position in world space.
            * @param distance Distance from the view position of the plane.
            * @param points Calculated points.  (A minimum size of 4 elements is required).
            */
            public static GetFrustumPlaneAt ($clipToWorld: UnityEngine.Matrix4x4, $viewPosition: UnityEngine.Vector3, $distance: number, $points: System.Array$1<UnityEngine.Vector3>) : void
        }
        /** Tells an Editor class which run-time type it's an editor for.
        */
        class CustomEditor extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** If true, match this editor only if all non-fallback editors do not match. Defaults to false.
            */
            public get isFallback(): boolean;
            public set isFallback(value: boolean);
            public constructor ($inspectedType: System.Type)
            public constructor ($inspectedType: System.Type, $editorForChildClasses: boolean)
            public constructor ()
        }
        /** Adds an extra preview in the Inspector for the specified type.
        */
        class CustomPreviewAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($type: System.Type)
            public constructor ()
        }
        /** Base Class to derive from when creating Custom Previews.
        */
        class ObjectPreview extends System.Object implements UnityEditor.IPreviewable
        {
            protected [__keep_incompatibility]: never;
            /** The object currently being previewed.
            */
            public get target(): UnityEngine.Object;
            /** Called when the Preview gets created with the objects being previewed.
            * @param targets The objects being previewed.
            */
            public Initialize ($targets: System.Array$1<UnityEngine.Object>) : void
            public MoveNextTarget () : boolean
            public ResetTarget () : void
            public HasPreviewGUI () : boolean
            public GetPreviewTitle () : UnityEngine.GUIContent
            /** Implement to create your own custom preview for the preview area of the inspector, primary editor headers and the object selector.
            * @param r Rectangle in which to draw the preview.
            * @param background Background image.
            */
            public OnPreviewGUI ($r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            /** Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.
            * @param r Rectangle in which to draw the preview.
            * @param background Background image.
            */
            public OnInteractivePreviewGUI ($r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            public OnPreviewSettings () : void
            public GetInfoString () : string
            /** This is the first entry point for Preview Drawing.
            * @param previewArea The available area to draw the preview.
            */
            public DrawPreview ($previewArea: UnityEngine.Rect) : void
            public ReloadPreviewInstances () : void
            public constructor ()
        }
        /** Tells an Editor class which run-time type it's an editor for when the given RenderPipeline is activated.
        */
        class CustomEditorForRenderPipelineAttribute extends UnityEditor.CustomEditor implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($inspectedType: System.Type, $renderPipeline: System.Type)
            public constructor ($inspectedType: System.Type, $renderPipeline: System.Type, $editorForChildClasses: boolean)
            public constructor ($inspectedType: System.Type)
            public constructor ($inspectedType: System.Type, $editorForChildClasses: boolean)
            public constructor ()
        }
        /** Attribute used to make a custom editor support multi-object editing.
        */
        class CanEditMultipleObjects extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** The class used to render the Light Editor when a Light is selected in the Unity Editor.
        */
        class LightEditor extends UnityEditor.Editor implements UnityEditor.IPreviewable, UnityEditor.IToolModeOwner
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** The Unity Material Editor.
        */
        class MaterialEditor extends UnityEditor.Editor implements UnityEditor.IPreviewable, UnityEditor.IToolModeOwner
        {
            protected [__keep_incompatibility]: never;
            /** Useful for indenting shader properties that need the same indent as mini texture field.
            */
            public static kMiniTextureFieldLabelIndentLevel : number
            /** Is the current material expanded.
            */
            public get isVisible(): boolean;
            /** Returns the custom ShaderGUI implemented by the shader.
            */
            public get customShaderGUI(): UnityEditor.ShaderGUI;
            /** Set the shader of the material.
            * @param shader Shader to set.
            * @param registerUndo Should undo be registered.
            */
            public SetShader ($shader: UnityEngine.Shader) : void
            /** Set the shader of the material.
            * @param shader Shader to set.
            * @param registerUndo Should undo be registered.
            */
            public SetShader ($newShader: UnityEngine.Shader, $registerUndo: boolean) : void
            public Awake () : void
            public PropertiesChanged () : void
            /** Draw a range slider for a range shader property.
            * @param label Label for the property.
            * @param prop The property to edit.
            * @param position Position and size of the range slider control.
            */
            public RangeProperty ($prop: UnityEditor.MaterialProperty, $label: string) : number
            /** Draw a range slider for a range shader property.
            * @param label Label for the property.
            * @param prop The property to edit.
            * @param position Position and size of the range slider control.
            */
            public RangeProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : number
            /** Draw a property field for a float shader property.
            * @param label Label for the property.
            */
            public FloatProperty ($prop: UnityEditor.MaterialProperty, $label: string) : number
            /** Draw a property field for a float shader property.
            * @param label Label for the property.
            */
            public FloatProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : number
            /** Draw a property field for a color shader property.
            * @param label Label for the property.
            */
            public ColorProperty ($prop: UnityEditor.MaterialProperty, $label: string) : UnityEngine.Color
            /** Draw a property field for a color shader property.
            * @param label Label for the property.
            */
            public ColorProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : UnityEngine.Color
            /** Draw a property field for a vector shader property.
            * @param label Label for the field.
            */
            public VectorProperty ($prop: UnityEditor.MaterialProperty, $label: string) : UnityEngine.Vector4
            /** Draw a property field for a vector shader property.
            * @param label Label for the field.
            */
            public VectorProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : UnityEngine.Vector4
            public TextureScaleOffsetProperty ($property: UnityEditor.MaterialProperty) : void
            /** Draws tiling and offset properties for a texture.
            * @param position Rect to draw this control in.
            * @param property Property to draw.
            * @param partOfTexturePropertyControl If this control should be rendered under large texture property control use 'true'. If this control should be shown seperately use 'false'.
            */
            public TextureScaleOffsetProperty ($position: UnityEngine.Rect, $property: UnityEditor.MaterialProperty) : number
            /** Draws tiling and offset properties for a texture.
            * @param position Rect to draw this control in.
            * @param property Property to draw.
            * @param partOfTexturePropertyControl If this control should be rendered under large texture property control use 'true'. If this control should be shown seperately use 'false'.
            */
            public TextureScaleOffsetProperty ($position: UnityEngine.Rect, $property: UnityEditor.MaterialProperty, $partOfTexturePropertyControl: boolean) : number
            /** Draw a property field for a texture shader property.
            * @param label Label for the field.
            * @param scaleOffset Draw scale / offset.
            */
            public TextureProperty ($prop: UnityEditor.MaterialProperty, $label: string) : UnityEngine.Texture
            /** Draw a property field for a texture shader property.
            * @param label Label for the field.
            * @param scaleOffset Draw scale / offset.
            */
            public TextureProperty ($prop: UnityEditor.MaterialProperty, $label: string, $scaleOffset: boolean) : UnityEngine.Texture
            /** Make a help box with a message and button. Returns true, if button was pressed.
            * @param messageContent The message text.
            * @param buttonContent The button text.
            * @returns Returns true, if button was pressed. 
            */
            public HelpBoxWithButton ($messageContent: UnityEngine.GUIContent, $buttonContent: UnityEngine.GUIContent) : boolean
            /** Checks if particular property has incorrect type of texture specified by the material, displays appropriate warning and suggests the user to automatically fix the problem.
            * @param prop The texture property to check and display warning for, if necessary.
            */
            public TextureCompatibilityWarning ($prop: UnityEditor.MaterialProperty) : void
            /** Draw a property field for a texture shader property that only takes up a single line height.
            * @param position Rect that this control should be rendered in.
            * @param label Label for the field.
            * @returns Returns total height used by this control. 
            */
            public TexturePropertyMiniThumbnail ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string, $tooltip: string) : UnityEngine.Texture
            /** Returns the free rect below the label and before the large thumb object field. Is used for e.g. tiling and offset properties.
            * @param position The total rect of the texture property.
            */
            public GetTexturePropertyCustomArea ($position: UnityEngine.Rect) : UnityEngine.Rect
            /** Draw a property field for a texture shader property.
            * @param label Label for the field.
            * @param scaleOffset Draw scale / offset.
            */
            public TextureProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : UnityEngine.Texture
            /** Draw a property field for a texture shader property.
            * @param label Label for the field.
            * @param scaleOffset Draw scale / offset.
            */
            public TextureProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string, $scaleOffset: boolean) : UnityEngine.Texture
            /** Draw a property field for a texture shader property.
            * @param label Label for the field.
            * @param scaleOffset Draw scale / offset.
            */
            public TextureProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string, $tooltip: string, $scaleOffset: boolean) : UnityEngine.Texture
            /** TODO.
            */
            public static TextureScaleOffsetProperty ($position: UnityEngine.Rect, $scaleOffset: UnityEngine.Vector4) : UnityEngine.Vector4
            /** TODO.
            */
            public static TextureScaleOffsetProperty ($position: UnityEngine.Rect, $scaleOffset: UnityEngine.Vector4, $partOfTexturePropertyControl: boolean) : UnityEngine.Vector4
            /** Calculate height needed for the property.
            */
            public GetPropertyHeight ($prop: UnityEditor.MaterialProperty) : number
            /** Calculate height needed for the property.
            */
            public GetPropertyHeight ($prop: UnityEditor.MaterialProperty, $label: string) : number
            /** Calculate height needed for the property, ignoring custom drawers.
            */
            public static GetDefaultPropertyHeight ($prop: UnityEditor.MaterialProperty) : number
            /** Creates a Property wrapper, useful for making regular GUI controls work with MaterialProperty.
            * @param totalPosition Rectangle on the screen to use for the control, including label if applicable.
            * @param prop The MaterialProperty to use for the control.
            */
            public BeginAnimatedCheck ($totalPosition: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty) : void
            /** Creates a Property wrapper, useful for making regular GUI controls work with MaterialProperty.
            * @param totalPosition Rectangle on the screen to use for the control, including label if applicable.
            * @param prop The MaterialProperty to use for the control.
            */
            public BeginAnimatedCheck ($prop: UnityEditor.MaterialProperty) : void
            public EndAnimatedCheck () : void
            /** Handes UI for one shader property.
            */
            public ShaderProperty ($prop: UnityEditor.MaterialProperty, $label: string) : void
            public ShaderProperty ($prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent) : void
            public ShaderProperty ($prop: UnityEditor.MaterialProperty, $label: string, $labelIndent: number) : void
            public ShaderProperty ($prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent, $labelIndent: number) : void
            /** Handes UI for one shader property.
            */
            public ShaderProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : void
            public ShaderProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent) : void
            public ShaderProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string, $labelIndent: number) : void
            public ShaderProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent, $labelIndent: number) : void
            public LightmapEmissionProperty () : void
            public LightmapEmissionProperty ($labelIndent: number) : void
            public LightmapEmissionProperty ($position: UnityEngine.Rect, $labelIndent: number) : void
            public EmissionEnabledProperty () : boolean
            /** Properly sets up the globalIllumination flag on the given Material depending on the current flag's state and the material's emission property.
            * @param mat The material to be fixed up.
            */
            public static FixupEmissiveFlag ($mat: UnityEngine.Material) : void
            /** Returns a properly set global illlumination flag based on the passed in flag and the given color.
            * @param col Emission color.
            * @param flags Current global illumination flag.
            * @returns The fixed up flag. 
            */
            public static FixupEmissiveFlag ($col: UnityEngine.Color, $flags: UnityEngine.MaterialGlobalIlluminationFlags) : UnityEngine.MaterialGlobalIlluminationFlags
            /** Draws the UI for setting the global illumination flag of a material.
            * @param indent Level of indentation for the property.
            * @param enabled True if emission is enabled for the material, false otherwise.
            * @param ignoreEmissionColor True if property should always be displayed.
            */
            public LightmapEmissionFlagsProperty ($indent: number, $enabled: boolean) : void
            /** Draws the UI for setting the global illumination flag of a material.
            * @param indent Level of indentation for the property.
            * @param enabled True if emission is enabled for the material, false otherwise.
            * @param ignoreEmissionColor True if property should always be displayed.
            */
            public LightmapEmissionFlagsProperty ($indent: number, $enabled: boolean, $ignoreEmissionColor: boolean) : void
            /** Handles UI for one shader property ignoring any custom drawers.
            */
            public DefaultShaderProperty ($prop: UnityEditor.MaterialProperty, $label: string) : void
            /** Handles UI for one shader property ignoring any custom drawers.
            */
            public DefaultShaderProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : void
            /** Get shader property information of the passed materials.
            */
            public static GetMaterialProperties ($mats: System.Array$1<UnityEngine.Object>) : System.Array$1<UnityEditor.MaterialProperty>
            /** Get information about a single shader property.
            * @param mats Selected materials.
            * @param name Property name.
            * @param propertyIndex Property index.
            */
            public static GetMaterialProperty ($mats: System.Array$1<UnityEngine.Object>, $name: string) : UnityEditor.MaterialProperty
            /** Get information about a single shader property.
            * @param mats Selected materials.
            * @param name Property name.
            * @param propertyIndex Property index.
            */
            public static GetMaterialProperty ($mats: System.Array$1<UnityEngine.Object>, $propertyIndex: number) : UnityEditor.MaterialProperty
            public static PrepareMaterialPropertiesForAnimationMode ($properties: System.Array$1<UnityEditor.MaterialProperty>, $isMaterialEditable: boolean) : UnityEngine.Renderer
            public SetDefaultGUIWidths () : void
            public PropertiesGUI () : boolean
            /** Default rendering of shader properties.
            * @param props Array of material properties.
            */
            public PropertiesDefaultGUI ($props: System.Array$1<UnityEditor.MaterialProperty>) : void
            /** Apply initial MaterialPropertyDrawer values.
            */
            public static ApplyMaterialPropertyDrawers ($material: UnityEngine.Material) : void
            /** Apply initial MaterialPropertyDrawer values.
            */
            public static ApplyMaterialPropertyDrawers ($targets: System.Array$1<UnityEngine.Object>) : void
            /** Call this when you change a material property. It will add an undo for the action.
            * @param label Undo Label.
            */
            public RegisterPropertyChangeUndo ($label: string) : void
            public DefaultPreviewSettingsGUI () : void
            /** Default handling of preview area for materials.
            */
            public DefaultPreviewGUI ($r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            public OnEnable () : void
            public UndoRedoPerformed () : void
            public OnDisable () : void
            public RenderQueueField () : void
            /** Display UI for editing material's render queue setting.
            */
            public RenderQueueField ($r: UnityEngine.Rect) : void
            public EnableInstancingField () : boolean
            /** Display UI for editing material's render queue setting within the specified rect.
            */
            public EnableInstancingField ($r: UnityEngine.Rect) : void
            public IsInstancingEnabled () : boolean
            public DoubleSidedGIField () : boolean
            /** Method for showing a texture property control with additional inlined properites.
            * @param label The label used for the texture property.
            * @param textureProp The texture property.
            * @param extraProperty1 First optional property inlined after the texture property.
            * @param extraProperty2 Second optional property inlined after the extraProperty1.
            * @returns Returns the Rect used. 
            */
            public TexturePropertySingleLine ($label: UnityEngine.GUIContent, $textureProp: UnityEditor.MaterialProperty) : UnityEngine.Rect
            /** Method for showing a texture property control with additional inlined properites.
            * @param label The label used for the texture property.
            * @param textureProp The texture property.
            * @param extraProperty1 First optional property inlined after the texture property.
            * @param extraProperty2 Second optional property inlined after the extraProperty1.
            * @returns Returns the Rect used. 
            */
            public TexturePropertySingleLine ($label: UnityEngine.GUIContent, $textureProp: UnityEditor.MaterialProperty, $extraProperty1: UnityEditor.MaterialProperty) : UnityEngine.Rect
            /** Method for showing a texture property control with additional inlined properites.
            * @param label The label used for the texture property.
            * @param textureProp The texture property.
            * @param extraProperty1 First optional property inlined after the texture property.
            * @param extraProperty2 Second optional property inlined after the extraProperty1.
            * @returns Returns the Rect used. 
            */
            public TexturePropertySingleLine ($label: UnityEngine.GUIContent, $textureProp: UnityEditor.MaterialProperty, $extraProperty1: UnityEditor.MaterialProperty, $extraProperty2: UnityEditor.MaterialProperty) : UnityEngine.Rect
            /** Method for showing a texture property control with a HDR color field and its color brightness float field.
            * @param label The label used for the texture property.
            * @param textureProp The texture property.
            * @param colorProperty The color property (will be treated as a HDR color).
            * @param showAlpha If false then the alpha channel information will be hidden in the GUI.
            * @returns Return the Rect used. 
            */
            public TexturePropertyWithHDRColor ($label: UnityEngine.GUIContent, $textureProp: UnityEditor.MaterialProperty, $colorProperty: UnityEditor.MaterialProperty, $showAlpha: boolean) : UnityEngine.Rect
            /** Method for showing a compact layout of properties.
            * @param label The label used for the texture property.
            * @param textureProp The texture property.
            * @param extraProperty1 First extra property inlined after the texture property.
            * @param label2 Label for the second extra property (on a new line and indented).
            * @param extraProperty2 Second property on a new line below the texture.
            * @returns Returns the Rect used. 
            */
            public TexturePropertyTwoLines ($label: UnityEngine.GUIContent, $textureProp: UnityEditor.MaterialProperty, $extraProperty1: UnityEditor.MaterialProperty, $label2: UnityEngine.GUIContent, $extraProperty2: UnityEditor.MaterialProperty) : UnityEngine.Rect
            /** Utility method for GUI layouting ShaderGUI.
            * @param r Field Rect.
            * @returns A sub rect of the input Rect. 
            */
            public static GetRightAlignedFieldRect ($r: UnityEngine.Rect) : UnityEngine.Rect
            /** Utility method for GUI layouting ShaderGUI.
            * @param r Field Rect.
            * @returns A sub rect of the input Rect. 
            */
            public static GetLeftAlignedFieldRect ($r: UnityEngine.Rect) : UnityEngine.Rect
            /** Utility method for GUI layouting ShaderGUI.
            * @param r Field Rect.
            * @returns A sub rect of the input Rect. 
            */
            public static GetFlexibleRectBetweenLabelAndField ($r: UnityEngine.Rect) : UnityEngine.Rect
            /** Utility method for GUI layouting ShaderGUI. Used e.g for the rect after a left aligned Color field.
            * @param r Field Rect.
            * @returns A sub rect of the input Rect. 
            */
            public static GetFlexibleRectBetweenFieldAndRightEdge ($r: UnityEngine.Rect) : UnityEngine.Rect
            /** Utility method for GUI layouting ShaderGUI. This is the rect after the label which can be used for multiple properties. The input rect can be fetched by calling: EditorGUILayout.GetControlRect.
            * @param r Line Rect.
            * @returns A sub rect of the input Rect. 
            */
            public static GetRectAfterLabelWidth ($r: UnityEngine.Rect) : UnityEngine.Rect
            public constructor ()
        }
        /** Abstract class to derive from for defining custom GUI for shader properties and for extending the material preview.
        */
        class ShaderGUI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** To define a custom shader GUI use the methods of materialEditor to render controls for the properties array.
            * @param materialEditor The MaterialEditor that are calling this OnGUI (the 'owner').
            * @param properties Material properties of the current selected shader.
            */
            public OnGUI ($materialEditor: UnityEditor.MaterialEditor, $properties: System.Array$1<UnityEditor.MaterialProperty>) : void
            /** Override for extending the rendering of the Preview area or completly replace the preview (by not calling base.OnMaterialPreviewGUI).
            * @param materialEditor The MaterialEditor that are calling this method (the 'owner').
            * @param r Preview rect.
            * @param background Style for the background.
            */
            public OnMaterialPreviewGUI ($materialEditor: UnityEditor.MaterialEditor, $r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            public OnMaterialInteractivePreviewGUI ($materialEditor: UnityEditor.MaterialEditor, $r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            /** Override for extending the functionality of the toolbar of the preview area or completly replace the toolbar by not calling base.OnMaterialPreviewSettingsGUI.
            * @param materialEditor The MaterialEditor that are calling this method (the 'owner').
            */
            public OnMaterialPreviewSettingsGUI ($materialEditor: UnityEditor.MaterialEditor) : void
            /** This method is called when the ShaderGUI is being closed.
            */
            public OnClosed ($material: UnityEngine.Material) : void
            /** This method is called when a new shader has been selected for a Material.
            * @param material The material the newShader should be assigned to.
            * @param oldShader Previous shader.
            * @param newShader New shader to assign to the material.
            */
            public AssignNewShaderToMaterial ($material: UnityEngine.Material, $oldShader: UnityEngine.Shader, $newShader: UnityEngine.Shader) : void
        }
        /** Base class to derive custom material property drawers from.
        */
        class MaterialPropertyDrawer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public OnGUI ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent, $editor: UnityEditor.MaterialEditor) : void
            /** Override this method to make your own GUI for the property.
            * @param position Rectangle on the screen to use for the property GUI.
            * @param prop The MaterialProperty to make the custom GUI for.
            * @param label The label of this property.
            * @param editor Current material editor.
            */
            public OnGUI ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string, $editor: UnityEditor.MaterialEditor) : void
            /** Override this method to specify how tall the GUI for this property is in pixels.
            * @param prop The MaterialProperty to make the custom GUI for.
            * @param label The label of this property.
            * @param editor Current material editor.
            */
            public GetPropertyHeight ($prop: UnityEditor.MaterialProperty, $label: string, $editor: UnityEditor.MaterialEditor) : number
            /** Apply extra initial values to the material.
            * @param prop The MaterialProperty to apply values for.
            */
            public Apply ($prop: UnityEditor.MaterialProperty) : void
        }
        class PreviewRenderUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get camera(): UnityEngine.Camera;
            public get cameraFieldOfView(): number;
            public set cameraFieldOfView(value: number);
            public get ambientColor(): UnityEngine.Color;
            public set ambientColor(value: UnityEngine.Color);
            public get lights(): System.Array$1<UnityEngine.Light>;
            public Cleanup () : void
            public BeginPreview ($r: UnityEngine.Rect, $previewBackground: UnityEngine.GUIStyle) : void
            public BeginStaticPreview ($r: UnityEngine.Rect) : void
            public GetScaleFactor ($width: number, $height: number) : number
            public EndPreview () : UnityEngine.Texture
            public EndAndDrawPreview ($r: UnityEngine.Rect) : void
            public EndStaticPreview () : UnityEngine.Texture2D
            public AddSingleGO ($go: UnityEngine.GameObject) : void
            public InstantiatePrefabInScene ($prefab: UnityEngine.GameObject) : UnityEngine.GameObject
            public DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $mat: UnityEngine.Material, $subMeshIndex: number) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $mat: UnityEngine.Material, $subMeshIndex: number, $customProperties: UnityEngine.MaterialPropertyBlock) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $m: UnityEngine.Matrix4x4, $mat: UnityEngine.Material, $subMeshIndex: number, $customProperties: UnityEngine.MaterialPropertyBlock, $probeAnchor: UnityEngine.Transform, $useLightProbe: boolean) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $pos: UnityEngine.Vector3, $rot: UnityEngine.Quaternion, $mat: UnityEngine.Material, $subMeshIndex: number) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $pos: UnityEngine.Vector3, $rot: UnityEngine.Quaternion, $mat: UnityEngine.Material, $subMeshIndex: number, $customProperties: UnityEngine.MaterialPropertyBlock) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $pos: UnityEngine.Vector3, $rot: UnityEngine.Quaternion, $mat: UnityEngine.Material, $subMeshIndex: number, $customProperties: UnityEngine.MaterialPropertyBlock, $probeAnchor: UnityEngine.Transform) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $pos: UnityEngine.Vector3, $rot: UnityEngine.Quaternion, $mat: UnityEngine.Material, $subMeshIndex: number, $customProperties: UnityEngine.MaterialPropertyBlock, $probeAnchor: UnityEngine.Transform, $useLightProbe: boolean) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $pos: UnityEngine.Vector3, $scale: UnityEngine.Vector3, $rot: UnityEngine.Quaternion, $mat: UnityEngine.Material, $subMeshIndex: number, $customProperties: UnityEngine.MaterialPropertyBlock, $probeAnchor: UnityEngine.Transform, $useLightProbe: boolean) : void
            public Render ($allowScriptableRenderPipeline?: boolean, $updatefov?: boolean) : void
            public constructor ($renderFullScene: boolean)
            public constructor ($renderFullScene: boolean, $pixelPerfect: boolean)
            public constructor ()
        }
        class RootEditorAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public supportsAddComponent : boolean
            public constructor ($supportsAddComponent?: boolean)
            public constructor ()
        }
        /** This attribute is no longer supported.
        */
        class ShaderIncludePathAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Editor Transform Utility Class.
        */
        class TransformUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the rotation of a transform as it is shown in the Transform Inspector window.
            * @param t Transform to get the rotation from.
            * @returns Rotation as it is shown in the Transform Inspector window. 
            */
            public static GetInspectorRotation ($t: UnityEngine.Transform) : UnityEngine.Vector3
            /** Sets the rotation of a transform as it would be set by the Transform Inspector window.
            * @param t Transform to set the rotation on.
            * @param r Rotation as it would be set by the Transform Inspector window.
            */
            public static SetInspectorRotation ($t: UnityEngine.Transform, $r: UnityEngine.Vector3) : void
        }
        enum BodyPart
        { None = -1, Avatar = 0, Body = 1, Head = 2, LeftArm = 3, LeftFingers = 4, RightArm = 5, RightFingers = 6, LeftLeg = 7, RightLeg = 8, Last = 9 }
        enum BoneState
        { None = 0, NotFound = 1, Duplicate = 2, InvalidHierarchy = 3, BoneLenghtIsZero = 4, Valid = 5 }
        /** Utility class for any Prefab related operations.
        */
        class PrefabUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Called after Prefab instances in the Scene have been updated.
            */
            public static prefabInstanceUpdated : UnityEditor.PrefabUtility.PrefabInstanceUpdated
            /** This function will give you the PrefabInstance object for the outermost Prefab instance the provided object is part of.
            * @param instanceComponentOrGameObject An object from the Prefab instance.
            * @returns The Prefab instance handle. 
            */
            public static GetPrefabInstanceHandle ($instanceComponentOrGameObject: UnityEngine.Object) : UnityEngine.Object
            /** Extract all modifications that are applied to the Prefab instance compared to the parent Prefab.
            */
            public static GetPropertyModifications ($targetPrefab: UnityEngine.Object) : System.Array$1<UnityEditor.PropertyModification>
            /** Assigns all modifications that are applied to the Prefab instance compared to the parent Prefab.
            */
            public static SetPropertyModifications ($targetPrefab: UnityEngine.Object, $modifications: System.Array$1<UnityEditor.PropertyModification>) : void
            /** Returns true if the given Prefab instance has any overrides.
            * @param instanceRoot The root GameObject of the Prefab instance to check.
            * @param includeDefaultOverrides Set to true to consider default overrides as overrides too.
            * @returns Returns true if there are any overrides. 
            */
            public static HasPrefabInstanceAnyOverrides ($instanceRoot: UnityEngine.GameObject, $includeDefaultOverrides: boolean) : boolean
            /** Instantiate an asset that is referenced by a Prefab and use it on the Prefab instance.
            */
            public static InstantiateAttachedAsset ($targetObject: UnityEngine.Object) : UnityEngine.Object
            /** Causes modifications made to the Prefab instance to be recorded.
            * @param targetObject Object to process.
            */
            public static RecordPrefabInstancePropertyModifications ($targetObject: UnityEngine.Object) : void
            /** This function will unpack the given Prefab instance using the behaviour specified by unpackMode.
            * @param instanceRoot Root GameObject of the Prefab instance.
            * @param unpackMode The unpack mode to use.
            * @returns Array of GameObjects representing roots of unpacked Prefab instances. 
            */
            public static UnpackPrefabInstanceAndReturnNewOutermostRoots ($instanceRoot: UnityEngine.GameObject, $unpackMode: UnityEditor.PrefabUnpackMode) : System.Array$1<UnityEngine.GameObject>
            /** Loads a Prefab Asset at a given path into a given preview Scene and returns the root GameObject of the Prefab.
            * @param scene The Scene to load the contents into.
            * @param prefabPath The path of the Prefab Asset to load the contents of.
            */
            public static LoadPrefabContentsIntoPreviewScene ($prefabPath: string, $scene: UnityEngine.SceneManagement.Scene) : void
            /** Is this component added to a Prefab instance as an override?
            * @param component The component to check.
            * @returns True if the component is an added component. 
            */
            public static IsAddedComponentOverride ($component: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of any kind of Prefab.
            * @param componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the object s part of a Prefab. 
            */
            public static IsPartOfAnyPrefab ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a Prefab Asset.
            * @param componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True is the object is part of a Prefab Asset. 
            */
            public static IsPartOfPrefabAsset ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a Prefab instance.
            * @param componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the object is part of a Prefab instance. 
            */
            public static IsPartOfPrefabInstance ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a Prefab instance and not part of an asset.
            * @param componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the object is part of a Prefab instance that's not inside a Prefab Asset. 
            */
            public static IsPartOfNonAssetPrefabInstance ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a regular Prefab instance or Prefab Asset.
            * @param componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the given object is part of a regular Prefab instance or Prefab Asset. 
            */
            public static IsPartOfRegularPrefab ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a Model Prefab Asset or Model Prefab instance.
            * @param componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the given object is part of a Model Prefab. 
            */
            public static IsPartOfModelPrefab ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a Prefab Variant Asset or Prefab Variant instance.
            * @param componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the given object is part of a Prefab Variant. 
            */
            public static IsPartOfVariantPrefab ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Is this object part of a Prefab that cannot be edited?
            * @param gameObjectOrComponent The object to check. Must be a component or GameObject.
            * @returns True if the object is part of a Prefab that cannot be edited. 
            */
            public static IsPartOfImmutablePrefab ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of an instance where the PrefabInstance object is missing but the given object has a valid corresponding object.
            * @param componentOrGameObject The object to check. Must be a GameObject or component.
            * @returns True if the instance is disconnected. 
            */
            public static IsDisconnectedFromPrefabAsset ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a Prefab instance but the source asset is missing.
            * @param instanceComponentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the given object is part of a Prefab instance but the source asset is missing. 
            */
            public static IsPrefabAssetMissing ($instanceComponentOrGameObject: UnityEngine.Object) : boolean
            /** Returns the GameObject that is the root of the outermost Prefab instance the object is part of.
            * @param componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns The outermost Prefab instance root. 
            */
            public static GetOutermostPrefabInstanceRoot ($componentOrGameObject: UnityEngine.Object) : UnityEngine.GameObject
            /** Return the GameObject that is the root of the nearest Prefab instance the object is part of.
            * @param componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns The nearest Prefab instance root. 
            */
            public static GetNearestPrefabInstanceRoot ($componentOrGameObject: UnityEngine.Object) : UnityEngine.GameObject
            /** Returns true if the given modification is considered a PrefabUtility.IsDefaultOverride|default override.
            * @param modification The modification for the property in question.
            * @returns True if the property is a default override. 
            */
            public static IsDefaultOverride ($modification: UnityEditor.PropertyModification) : boolean
            /** Reverts all overrides on a Prefab instance.
            * @param instanceRoot The root of the Prefab instance.
            * @param action The interaction mode for this action.
            */
            public static RevertPrefabInstance ($instanceRoot: UnityEngine.GameObject, $action: UnityEditor.InteractionMode) : void
            /** Applies all overrides on a Prefab instance to its Prefab Asset.
            * @param instanceRoot The root of the given Prefab instance.
            * @param action The interaction mode for this action.
            */
            public static ApplyPrefabInstance ($instanceRoot: UnityEngine.GameObject, $action: UnityEditor.InteractionMode) : void
            /** Applies a single overridden property on a Prefab instance to the Prefab Asset at the given asset path.
            * @param instanceProperty The SerializedProperty representing the property to apply.
            * @param assetPath The path of the Prefab Asset to apply to.
            * @param action The interaction mode for this action.
            */
            public static ApplyPropertyOverride ($instanceProperty: UnityEditor.SerializedProperty, $assetPath: string, $action: UnityEditor.InteractionMode) : void
            /** Revert a single property override on a Prefab instance.
            * @param action The interaction mode for this action.
            * @param instanceProperty The SerializedProperty representing the property to revert.
            */
            public static RevertPropertyOverride ($instanceProperty: UnityEditor.SerializedProperty, $action: UnityEditor.InteractionMode) : void
            /** Applies all overridden properties on a Prefab instance component or GameObject to the Prefab Asset at the given asset path.
            * @param instanceComponentOrGameObject The object on the Prefab instance to apply.
            * @param assetPath The path of the Prefab Asset to apply to.
            * @param action The interaction mode for this action.
            */
            public static ApplyObjectOverride ($instanceComponentOrGameObject: UnityEngine.Object, $assetPath: string, $action: UnityEditor.InteractionMode) : void
            /** Reverts all overridden properties on a Prefab instance component or GameObject.
            * @param action The interaction mode for this action.
            * @param instanceComponentOrGameObject The object on the Prefab instance to revert.
            */
            public static RevertObjectOverride ($instanceComponentOrGameObject: UnityEngine.Object, $action: UnityEditor.InteractionMode) : void
            /** Applies the added component to the Prefab Asset at the given asset path.
            * @param action The interaction mode for this action.
            * @param assetPath The path of the Prefab Asset to apply to.
            * @param component The added component on the Prefab instance to apply.
            */
            public static ApplyAddedComponent ($component: UnityEngine.Component, $assetPath: string, $action: UnityEditor.InteractionMode) : void
            /** Removes this added component on a Prefab instance.
            * @param component The added component on the Prefab instance to revert.
            * @param action The interaction mode for this action.
            */
            public static RevertAddedComponent ($component: UnityEngine.Component, $action: UnityEditor.InteractionMode) : void
            /** Removes the component from the Prefab Asset which has the component on it.
            * @param instanceGameObject The GameObject on the Prefab instance which the component has been removed from.
            * @param assetComponent The component on the Prefab Asset corresponding to the removed component on the instance.
            * @param action The interaction mode for this action.
            */
            public static ApplyRemovedComponent ($instanceGameObject: UnityEngine.GameObject, $assetComponent: UnityEngine.Component, $action: UnityEditor.InteractionMode) : void
            /** Adds this removed component back on the Prefab instance.
            * @param assetComponent The removed component on the Prefab instance to revert.
            * @param action The interaction mode for this action.
            * @param instanceGameObject The GameObject on the Prefab instance which the component has been removed from.
            */
            public static RevertRemovedComponent ($instanceGameObject: UnityEngine.GameObject, $assetComponent: UnityEngine.Component, $action: UnityEditor.InteractionMode) : void
            /** Applies the added GameObject to the Prefab Asset at the given asset path.
            * @param gameObject The added GameObject on the Prefab instance to apply.
            * @param assetPath The path of the Prefab Asset to apply to.
            * @param action The interaction mode for this action.
            */
            public static ApplyAddedGameObject ($gameObject: UnityEngine.GameObject, $assetPath: string, $action: UnityEditor.InteractionMode) : void
            /** Removes this added GameObject from a Prefab instance.
            * @param action The interaction mode for this action.
            * @param gameObject The added GameObject on the Prefab instance to revert.
            */
            public static RevertAddedGameObject ($gameObject: UnityEngine.GameObject, $action: UnityEditor.InteractionMode) : void
            /** Returns a list of objects with information about object overrides on the Prefab instance.
            * @param prefabInstance The Prefab instance to get information about.
            * @param includeDefaultOverrides If true, components will also be included even if they only contain overrides that are PrefabUtility.IsDefaultOverride|default overrides. False by default.
            * @returns List of objects with information about object overrides. 
            */
            public static GetObjectOverrides ($prefabInstance: UnityEngine.GameObject, $includeDefaultOverrides?: boolean) : System.Collections.Generic.List$1<UnityEditor.SceneManagement.ObjectOverride>
            /** Returns a list of PrefabUtility.AddedComponent objects which contain information about added component overrides on the Prefab instance.
            * @param prefabInstance The Prefab instance to get information about.
            * @returns List of objects with information about added components. 
            */
            public static GetAddedComponents ($prefabInstance: UnityEngine.GameObject) : System.Collections.Generic.List$1<UnityEditor.SceneManagement.AddedComponent>
            /** Returns a list of objects with information about removed component overrides on the Prefab instance.
            * @param prefabInstance The Prefab instance to get information about.
            * @returns List of objects with information about removed components. 
            */
            public static GetRemovedComponents ($prefabInstance: UnityEngine.GameObject) : System.Collections.Generic.List$1<UnityEditor.SceneManagement.RemovedComponent>
            /** Returns a list of PrefabUtility.AddedGameObject objects which contain information about added GameObjects on the Prefab instance.
            * @param prefabInstance The Prefab instance to get information about.
            * @returns List of objects with information about added GameObjects. 
            */
            public static GetAddedGameObjects ($prefabInstance: UnityEngine.GameObject) : System.Collections.Generic.List$1<UnityEditor.SceneManagement.AddedGameObject>
            /** Is the GameObject the root of any Prefab instance?
            * @param gameObject The GameObject to check.
            * @returns True if the GameObject is the root GameObject of any Prefab instance. 
            */
            public static IsAnyPrefabInstanceRoot ($gameObject: UnityEngine.GameObject) : boolean
            /** Is the GameObject the root of a Prefab instance, excluding nested Prefabs?
            * @param gameObject The GameObject to check.
            * @returns True if the GameObject is an outermost Prefab instance root. 
            */
            public static IsOutermostPrefabInstanceRoot ($gameObject: UnityEngine.GameObject) : boolean
            /** Returns the asset path of the nearest Prefab instance root the specified object is part of.
            * @param instanceComponentOrGameObject An object in the Prefab instance to get the asset path of.
            * @returns The asset path. 
            */
            public static GetPrefabAssetPathOfNearestInstanceRoot ($instanceComponentOrGameObject: UnityEngine.Object) : string
            /** Returns the icon for the given GameObject.
            * @param gameObject The GameObject to get an icon for.
            * @returns The icon for the GameObject. 
            */
            public static GetIconForGameObject ($gameObject: UnityEngine.GameObject) : UnityEngine.Texture2D
            /** Use this function to save the version of an existing Prefab Asset that exists in memory back to disk.
            * @param asset Any GameObject that is part of the Prefab Asset to save.
            * @param savedSuccessfully The result of the save action, either successful or unsuccessful. Use this together with the console log to get more insight into the save process.
            * @returns The root GameObject of the saved Prefab Asset. 
            */
            public static SavePrefabAsset ($asset: UnityEngine.GameObject) : UnityEngine.GameObject
            /** Use this function to save the version of an existing Prefab Asset that exists in memory back to disk.
            * @param asset Any GameObject that is part of the Prefab Asset to save.
            * @param savedSuccessfully The result of the save action, either successful or unsuccessful. Use this together with the console log to get more insight into the save process.
            * @returns The root GameObject of the saved Prefab Asset. 
            */
            public static SavePrefabAsset ($asset: UnityEngine.GameObject, $savedSuccessfully: $Ref<boolean>) : UnityEngine.GameObject
            /** Use this function to create a Prefab Asset at the given path from the given GameObject, including any childen in the Scene without modifying the input objects.
            * @param instanceRoot The GameObject to save as a Prefab Asset.
            * @param assetPath The path to save the Prefab at.
            * @param success The result of the save action, either successful or unsuccessful. Use this together with the console log to get more insight into the save process.
            * @returns The root GameObject of the saved Prefab Asset, if available. 
            */
            public static SaveAsPrefabAsset ($instanceRoot: UnityEngine.GameObject, $assetPath: string, $success: $Ref<boolean>) : UnityEngine.GameObject
            /** Use this function to create a Prefab Asset at the given path from the given GameObject, including any childen in the Scene without modifying the input objects.
            * @param instanceRoot The GameObject to save as a Prefab Asset.
            * @param assetPath The path to save the Prefab at.
            * @param success The result of the save action, either successful or unsuccessful. Use this together with the console log to get more insight into the save process.
            * @returns The root GameObject of the saved Prefab Asset, if available. 
            */
            public static SaveAsPrefabAsset ($instanceRoot: UnityEngine.GameObject, $assetPath: string) : UnityEngine.GameObject
            /** Use this function to create a Prefab Asset at the given path from the given GameObject including any children in the Scene and at the same time make the given GameObject into an instance of the new Prefab.
            * @param instanceRoot The GameObject to save as a Prefab and make into a Prefab instance.
            * @param assetPath The path to save the Prefab at.
            * @param action The interaction mode to use for this action.
            * @param success The result of the save action, either successful or unsuccessful. Use this together with the console log to get more insight into the save process.
            * @returns The root GameObject of the saved Prefab Asset, if available. 
            */
            public static SaveAsPrefabAssetAndConnect ($instanceRoot: UnityEngine.GameObject, $assetPath: string, $action: UnityEditor.InteractionMode) : UnityEngine.GameObject
            /** Use this function to create a Prefab Asset at the given path from the given GameObject including any children in the Scene and at the same time make the given GameObject into an instance of the new Prefab.
            * @param instanceRoot The GameObject to save as a Prefab and make into a Prefab instance.
            * @param assetPath The path to save the Prefab at.
            * @param action The interaction mode to use for this action.
            * @param success The result of the save action, either successful or unsuccessful. Use this together with the console log to get more insight into the save process.
            * @returns The root GameObject of the saved Prefab Asset, if available. 
            */
            public static SaveAsPrefabAssetAndConnect ($instanceRoot: UnityEngine.GameObject, $assetPath: string, $action: UnityEditor.InteractionMode, $success: $Ref<boolean>) : UnityEngine.GameObject
            /** Instantiates the given Prefab in a given Scene.
            * @param target Prefab Asset to instantiate.
            * @param destinationScene Scene to instantiate the Prefab in.
            * @returns The GameObject at the root of the Prefab. 
            */
            public static InstantiatePrefab ($assetComponentOrGameObject: UnityEngine.Object) : UnityEngine.Object
            /** Instantiates the given Prefab in a given Scene.
            * @param target Prefab Asset to instantiate.
            * @param destinationScene Scene to instantiate the Prefab in.
            * @returns The GameObject at the root of the Prefab. 
            */
            public static InstantiatePrefab ($assetComponentOrGameObject: UnityEngine.Object, $destinationScene: UnityEngine.SceneManagement.Scene) : UnityEngine.Object
            public static InstantiatePrefab ($assetComponentOrGameObject: UnityEngine.Object, $parent: UnityEngine.Transform) : UnityEngine.Object
            public static GetCorrespondingObjectFromSource ($componentOrGameObject: UnityEngine.Object) : UnityEngine.Object
            public static GetCorrespondingObjectFromOriginalSource ($componentOrGameObject: UnityEngine.Object) : UnityEngine.Object
            public static GetCorrespondingObjectFromSourceAtPath ($componentOrGameObject: UnityEngine.Object, $assetPath: string) : UnityEngine.Object
            /** Is this GameObject added as a child to a Prefab instance as an override?
            * @param gameObject The GameObject to check.
            * @returns True if the GameObject is an added GameObject. 
            */
            public static IsAddedGameObjectOverride ($gameObject: UnityEngine.GameObject) : boolean
            /** Unpacks a given Prefab instance so that it is replaced with the contents of the Prefab Asset while retaining all override values.
            * @param instanceRoot The root of the Prefab instance to unpack.
            * @param unpackMode Whether to unpack the outermost root or unpack completely.
            * @param action The interaction mode to use for this action.
            */
            public static UnpackPrefabInstance ($instanceRoot: UnityEngine.GameObject, $unpackMode: UnityEditor.PrefabUnpackMode, $action: UnityEditor.InteractionMode) : void
            /** Is this object part of a Prefab that cannot be applied to?
            * @param gameObjectOrComponent The object to check. Must be a component or GameObject.
            * @returns True if the object is part of a Prefab that cannot be applied to. 
            */
            public static IsPartOfPrefabThatCanBeAppliedTo ($gameObjectOrComponent: UnityEngine.Object) : boolean
            /** Enum value with status about whether a Prefab instance is properly connected to its asset.
            * @param componentOrGameObject An object that is part of a Prefab instance.
            * @returns The status of the Prefab instance. 
            */
            public static GetPrefabInstanceStatus ($componentOrGameObject: UnityEngine.Object) : UnityEditor.PrefabInstanceStatus
            /** Enum value indicating the type of Prefab Asset, such as Regular Prefab, Model Prefab and Prefab Variant.
            * @param componentOrGameObject An object that is part of a Prefab Asset or Prefab instance.
            * @returns The type of Prefab. 
            */
            public static GetPrefabAssetType ($componentOrGameObject: UnityEngine.Object) : UnityEditor.PrefabAssetType
            /** Loads a Prefab Asset at a given path into an isolated Scene and returns the root GameObject of the Prefab.
            * @param assetPath The path of the Prefab Asset to load the contents of.
            * @returns The root of the loaded contents. 
            */
            public static LoadPrefabContents ($assetPath: string) : UnityEngine.GameObject
            /** Releases the content from a Prefab previously loaded with LoadPrefabContents from memory.
            * @param contentsRoot The root of the loaded Prefab contents.
            */
            public static UnloadPrefabContents ($contentsRoot: UnityEngine.GameObject) : void
            public constructor ()
        }
        /** Enum used to determine how a Prefab should be unpacked.
        */
        enum PrefabUnpackMode
        { OutermostRoot = 0, Completely = 1 }
        /** Enum with status about whether a Prefab instance is properly connected to its asset.
        */
        enum PrefabInstanceStatus
        { NotAPrefab = 0, Connected = 1, Disconnected = 2, MissingAsset = 3 }
        /** Enum indicating the type of Prefab Asset, such as Regular, Model and Variant.
        */
        enum PrefabAssetType
        { NotAPrefab = 0, Regular = 1, Model = 2, Variant = 3, MissingAsset = 4 }
        /** (Obsolete: use the SettingsProvider class instead) The PreferenceItem attribute allows you to add preferences sections to the Preferences window.
        */
        class PreferenceItem extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public name : string
            public constructor ($name: string)
            public constructor ()
        }
        enum SaveType
        { Binary = 0, Text = 1 }
        class ProjectWindowUtil extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static CreateNewGUISkin () : void
            public static CreateAsset ($asset: UnityEngine.Object, $pathName: string) : void
            public static CreateFolder () : void
            public static CreateScene () : void
            public static CreateAssetWithContent ($filename: string, $content: string, $icon?: UnityEngine.Texture2D) : void
            public static CreateScriptAssetFromTemplateFile ($templatePath: string, $defaultNewFileName: string) : void
            public static ShowCreatedAsset ($o: UnityEngine.Object) : void
            public static StartNameEditingIfProjectWindowExists ($instanceID: number, $endAction: UnityEditor.ProjectWindowCallback.EndNameEditAction, $pathName: string, $icon: UnityEngine.Texture2D, $resourceFile: string) : void
            public static GetAncestors ($instanceID: number) : System.Array$1<number>
            public static IsFolder ($instanceID: number) : boolean
            public static GetContainingFolder ($path: string) : string
            public static GetBaseFolders ($folders: System.Array$1<string>) : System.Array$1<string>
            public constructor ()
        }
        /** Default definition for the Lighting Explorer. Can be overridden completely or partially.
        */
        class DefaultLightingExplorerExtension extends System.Object implements UnityEditor.ILightingExplorerExtension
        {
            protected [__keep_incompatibility]: never;
            public GetContentTabs () : System.Array$1<UnityEditor.LightingExplorerTab>
            public OnEnable () : void
            public OnDisable () : void
            public constructor ()
        }
        interface ILightingExplorerExtension
        {
            GetContentTabs () : System.Array$1<UnityEditor.LightingExplorerTab>
            OnEnable () : void
            OnDisable () : void
        }
        /** Create custom tabs for the Lighting Explorer.
        */
        class LightingExplorerTab extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ($title: string, $objects: System.Func$1<System.Array$1<UnityEngine.Object>>, $columns: System.Func$1<System.Array$1<UnityEditor.LightingExplorerTableColumn>>)
            public constructor ()
        }
        /** This is used when defining how a column should look and behave in the Lighting Explorer.
        */
        class LightingExplorerTableColumn extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ($type: UnityEditor.LightingExplorerTableColumn.DataType, $headerContent: UnityEngine.GUIContent, $propertyName?: string, $width?: number, $onGUIDelegate?: UnityEditor.LightingExplorerTableColumn.OnGUIDelegate, $compareDelegate?: UnityEditor.LightingExplorerTableColumn.ComparePropertiesDelegate, $copyDelegate?: UnityEditor.LightingExplorerTableColumn.CopyPropertiesDelegate, $dependencyIndices?: System.Array$1<number>)
            public constructor ()
        }
        /** An attribute to mark an extension class for the Lighting Explorer. Supports one extension per render pipeline.
        */
        class LightingExplorerExtensionAttribute extends UnityEditor.Rendering.ScriptableRenderPipelineExtensionAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($renderPipeline: System.Type)
            public constructor ()
        }
        /** Base class for the Inspector that overrides the Environment section of the Lighting window.
        */
        class LightingWindowEnvironmentSection extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public OnEnable () : void
            public OnDisable () : void
            public OnInspectorGUI () : void
        }
        /** Displays the Physics Debug Visualization options.
        The Physics Debug Visualization is only displayed if this window is visible.
        See Also: PhysicsVisualizationSettings.
        */
        class PhysicsDebugWindow extends UnityEditor.EditorWindow
        {
            protected [__keep_incompatibility]: never;
            public static ShowWindow () : UnityEditor.PhysicsDebugWindow
            public OnEnable () : void
            public constructor ()
        }
        class SceneModeUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static SearchForType ($type: System.Type) : void
            public static SearchBar (...types: System.Type[]) : System.Type
            public static StaticFlagField ($label: string, $property: UnityEditor.SerializedProperty, $flag: number) : boolean
            public static SetStaticFlags ($targetObjects: System.Array$1<UnityEngine.Object>, $changedFlags: number, $flagValue: boolean) : boolean
            public static GetObjects ($gameObjects: System.Array$1<UnityEngine.Object>, $includeChildren: boolean) : System.Array$1<UnityEngine.GameObject>
        }
        /** Tells a custom PropertyDrawer or DecoratorDrawer which run-time Serializable class or PropertyAttribute it's a drawer for.
        */
        class CustomPropertyDrawer extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($type: System.Type)
            public constructor ($type: System.Type, $useForChildren: boolean)
            public constructor ()
        }
        /** Base class for PropertyDrawer and DecoratorDrawer.
        */
        class GUIDrawer extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Base class to derive custom decorator drawers from.
        */
        class DecoratorDrawer extends UnityEditor.GUIDrawer
        {
            protected [__keep_incompatibility]: never;
            /** The PropertyAttribute for the decorator. (Read Only)
            */
            public get attribute(): UnityEngine.PropertyAttribute;
            /** Override this method to make your own GUI for the decorator.
            See DecoratorDrawer for an example of how to use this.
            * @param position Rectangle on the screen to use for the decorator GUI.
            */
            public OnGUI ($position: UnityEngine.Rect) : void
            public GetHeight () : number
            public CanCacheInspectorGUI () : boolean
        }
        /** Base class to derive custom property drawers from. Use this to create custom drawers for your own Serializable classes or for script variables with custom PropertyAttributes.
        */
        class PropertyDrawer extends UnityEditor.GUIDrawer
        {
            protected [__keep_incompatibility]: never;
            /** The PropertyAttribute for the property. Not applicable for custom class drawers. (Read Only)
            */
            public get attribute(): UnityEngine.PropertyAttribute;
            /** The reflection FieldInfo for the member this property represents. (Read Only)
            */
            public get fieldInfo(): System.Reflection.FieldInfo;
            /** Override this method to make your own IMGUI based GUI for the property.
            * @param position Rectangle on the screen to use for the property GUI.
            * @param property The SerializedProperty to make the custom GUI for.
            * @param label The label of this property.
            */
            public OnGUI ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            /** Override this method to make your own UIElements based GUI for the property.
            * @param property The SerializedProperty to make the custom GUI for.
            * @returns The element containing the custom GUI. 
            */
            public CreatePropertyGUI ($property: UnityEditor.SerializedProperty) : UnityEngine.UIElements.VisualElement
            /** Override this method to specify how tall the GUI for this field is in pixels.
            * @param property The SerializedProperty to make the custom GUI for.
            * @param label The label of this property.
            * @returns The height in pixels. 
            */
            public GetPropertyHeight ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : number
            /** Override this method to determine whether the inspector GUI for your property can be cached.
            * @param property The SerializedProperty to make the custom GUI for.
            * @returns Whether the drawer's UI can be cached. 
            */
            public CanCacheInspectorGUI ($property: UnityEditor.SerializedProperty) : boolean
        }
        /** Sets the scope of a SettingsProvider. The Scope determines where it appears in the UI. For example, whether it appears with the Project settings in the Settings window, or in the Preferences window, or in both windows.
        */
        enum SettingsScope
        { User = 0, Project = 1 }
        /** SettingsProvider is the configuration class that specifies how a Project setting or a preference should appear in the Settings or Preferences window.
        */
        class SettingsProvider extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Gets or sets the display name of the SettingsProvider as it appears in the Settings window. If not set, the Settings window uses last token of SettingsProvider.settingsPath instead.
            */
            public get label(): string;
            public set label(value: string);
            /** Gets Path used to place the SettingsProvider in the tree view of the Settings window. The path should be unique among all other settings paths and should use "/" as its separator.
            */
            public get settingsPath(): string;
            /** Gets the Scope of the SettingsProvider. The Scope determines whether the SettingsProvider appears in the Preferences window (SettingsScope.User) or the Settings window (SettingsScope.Project).
            */
            public get scope(): UnityEditor.SettingsScope;
            /** Gets or sets the list of keywords to compare against what the user is searching for. When the user enters values in the search box on the Settings window, SettingsProvider.HasSearchInterest tries to match those keywords to this list.
            */
            public get keywords(): System.Collections.Generic.IEnumerable$1<string>;
            public set keywords(value: System.Collections.Generic.IEnumerable$1<string>);
            /** Overrides SettingsProvider.OnGUI.
            */
            public get guiHandler(): System.Action$1<string>;
            public set guiHandler(value: System.Action$1<string>);
            /** Overrides SettingsProvider.OnTitleBarGUI.
            */
            public get titleBarGuiHandler(): System.Action;
            public set titleBarGuiHandler(value: System.Action);
            /** Overrides SettingsProvider.OnFooterBarGUI.
            */
            public get footerBarGuiHandler(): System.Action;
            public set footerBarGuiHandler(value: System.Action);
            /** Overrides SettingsProvider.OnActivate.
            */
            public get activateHandler(): System.Action$2<string, UnityEngine.UIElements.VisualElement>;
            public set activateHandler(value: System.Action$2<string, UnityEngine.UIElements.VisualElement>);
            /** Overrides SettingsProvider.OnDeactivate.
            */
            public get deactivateHandler(): System.Action;
            public set deactivateHandler(value: System.Action);
            /** Overrides SettingsProvider.HasSearchInterest.
            */
            public get hasSearchInterestHandler(): System.Func$2<string, boolean>;
            public set hasSearchInterestHandler(value: System.Func$2<string, boolean>);
            /** Overrides SettingsProvider.OnInspectorUpdate.
            */
            public get inspectorUpdateHandler(): System.Action;
            public set inspectorUpdateHandler(value: System.Action);
            /** Use this function to implement a handler for when the user clicks on the Settings in the Settings window. You can fetch a settings Asset or set up UIElements UI from this function.
            * @param searchContext Search context in the search box on the Settings window.
            * @param rootElement Root of the UIElements tree. If you add to this root, the SettingsProvider uses UIElements instead of calling SettingsProvider.OnGUI to build the UI. If you do not add to this VisualElement, then you must use the IMGUI to build the UI.
            */
            public OnActivate ($searchContext: string, $rootElement: UnityEngine.UIElements.VisualElement) : void
            public OnDeactivate () : void
            /** Checks whether the SettingsProvider should appear when the user types something in the Settings window search box. SettingsProvider tries to match the search terms (even partially) to any of the SettingsProvider.keywords. The search is case insensitive.
            * @param searchContext Search terms that the user entered in the search box on the Settings window.
            * @returns True if the SettingsProvider matched the search term and if it should appear. 
            */
            public HasSearchInterest ($searchContext: string) : boolean
            /** Use this function to draw the UI based on IMGUI. This assumes you haven't added any children to the rootElement passed to the OnActivate function.
            * @param searchContext Search context for the Settings window. Used to show or hide relevant properties.
            */
            public OnGUI ($searchContext: string) : void
            public OnTitleBarGUI () : void
            public OnFooterBarGUI () : void
            public OnInspectorUpdate () : void
            public Repaint () : void
            /** Extract search keywords from from the serialized properties of a SerializedObject.
            * @param serializedObject Object to extract properties from.
            * @returns Returns the list of keywords. 
            */
            public static GetSearchKeywordsFromSerializedObject ($serializedObject: UnityEditor.SerializedObject) : System.Collections.Generic.IEnumerable$1<string>
            /** Extract search keywords from the serialized properties of an Asset at a specific path.
            * @param path Path of the Asset on disk.
            * @returns Returns the list of keywords. 
            */
            public static GetSearchKeywordsFromPath ($path: string) : System.Collections.Generic.IEnumerable$1<string>
            public constructor ($path: string, $scopes: UnityEditor.SettingsScope, $keywords?: System.Collections.Generic.IEnumerable$1<string>)
            public constructor ()
        }
        /** Attribute used to register a new SettingsProvider. Use this attribute to decorate a function that returns an instance of a SettingsProvider. If the function returns null, no SettingsProvider appears in the Settings window.
        */
        class SettingsProviderAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Attribute used to register multiple SettingsProvider items. Use this attribute to decorate a function that returns an array of SettingsProvider instances. If the function returns null, no SettingsProvider appears in the Settings window.
        */
        class SettingsProviderGroupAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** This class provides global APIs to interact with the Settings window.
        */
        class SettingsService extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Open the Project Settings window with the specified settings item already selected.
            * @param settingsPath Settings paths of the item to select (for example, 'ProjectPlayer' or 'ProjectQuality').
            * @returns Returns an instance to the Settings window. 
            */
            public static OpenProjectSettings ($settingsPath?: string) : UnityEditor.EditorWindow
            /** Open the Preferences window with the specified settings item already selected.
            * @param settingsPath Settings path of the item to select (for example, 'PreferencesKeys' or 'Preferences2D').
            * @returns Returns an instance to the Settings window. 
            */
            public static OpenUserPreferences ($settingsPath?: string) : UnityEditor.EditorWindow
            public static NotifySettingsProviderChanged () : void
        }
        /** AssetSettingsProvider is a specialization of the SettingsProvider class that converts legacy settings to Unified Settings. Legacy settings include any settings that used the Inspector to modify themselves, such as the *.asset files under the ProjectSettings folder. Under the hood, AssetSettingsProvider creates an Editor for specific Assets and builds the UI for the Settings window by wrapping the Editor.OnInspectorGUI function.
        Internally we use this class to wrap our existing settings.
        */
        class AssetSettingsProvider extends UnityEditor.SettingsProvider
        {
            protected [__keep_incompatibility]: never;
            /** Editor providing UI to modify the settings.
            */
            public get settingsEditor(): UnityEditor.Editor;
            public static CreateProviderFromAssetPath ($settingsWindowPath: string, $assetPath: string, $keywords?: System.Collections.Generic.IEnumerable$1<string>) : UnityEditor.AssetSettingsProvider
            public static CreateProviderFromObject ($settingsWindowPath: string, $settingsObj: UnityEngine.Object, $keywords?: System.Collections.Generic.IEnumerable$1<string>) : UnityEditor.AssetSettingsProvider
            public static CreateProviderFromResourcePath ($settingsWindowPath: string, $resourcePath: string, $keywords?: System.Collections.Generic.IEnumerable$1<string>) : UnityEditor.AssetSettingsProvider
            public constructor ($settingsWindowPath: string, $editorCreator: System.Func$1<UnityEditor.Editor>, $keywords?: System.Collections.Generic.IEnumerable$1<string>)
            public constructor ($settingsWindowPath: string, $settingsGetter: System.Func$1<UnityEngine.Object>)
            public constructor ($path: string, $scopes: UnityEditor.SettingsScope, $keywords?: System.Collections.Generic.IEnumerable$1<string>)
            public constructor ()
        }
        /** Use this class to highlight elements in the editor for use in in-editor tutorials and similar.
        */
        class Highlighter extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The text of the current active highlight.
            */
            public static get activeText(): string;
            /** The rect in screenspace of the current active highlight.
            */
            public static get activeRect(): UnityEngine.Rect;
            /** Is the current active highlight visible yet?
            */
            public static get activeVisible(): boolean;
            /** Is there currently an active highlight?
            */
            public static get active(): boolean;
            public static Stop () : void
            /** Highlights an element in the editor.
            * @param windowTitle The title of the window the element is inside.
            * @param text The text to identify the element with.
            * @param mode Optional mode to specify how to search for the element.
            * @returns true if the requested element was found; otherwise false. 
            */
            public static Highlight ($windowTitle: string, $text: string) : boolean
            /** Highlights an element in the editor.
            * @param windowTitle The title of the window the element is inside.
            * @param text The text to identify the element with.
            * @param mode Optional mode to specify how to search for the element.
            * @returns true if the requested element was found; otherwise false. 
            */
            public static Highlight ($windowTitle: string, $text: string, $mode: UnityEditor.HighlightSearchMode) : boolean
            /** Call this method to create an identifiable rect that the Highlighter can find.
            * @param position The position to make highlightable.
            * @param identifier The identifier text of the rect.
            */
            public static HighlightIdentifier ($position: UnityEngine.Rect, $identifier: string) : void
            public constructor ()
        }
        /** Used to specify how to find a given element in the editor to highlight.
        */
        enum HighlightSearchMode
        { None = 0, Auto = 1, Identifier = 2, PrefixLabel = 3, Content = 4 }
        class UndoSnapshot extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public Restore () : void
            public Dispose () : void
            public constructor ($objectsToUndo: System.Array$1<UnityEngine.Object>)
            public constructor ()
        }
        /** Use this class to retrieve information about the currently selected project and the current Unity ID that is logged in.
        */
        class CloudProjectSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The user ID of the currently logged-in Unity ID account (Read Only).
            */
            public static get userId(): string;
            /** The user name of the currently logged in Unity ID account (Read Only).
            */
            public static get userName(): string;
            public static get accessToken(): string;
            /** A unique cloud project identifier. It is unique for every project (Read Only).
            */
            public static get projectId(): string;
            /** The name of the project entry in the dashboard associated with this project (Read Only).
            */
            public static get projectName(): string;
            /** The ID of the organization that this project belongs to. (Read Only)
            */
            public static get organizationId(): string;
            /** The name of the organization that this project belongs to. (Read Only)
            */
            public static get organizationName(): string;
            public static RefreshAccessToken ($refresh: System.Action$1<boolean>) : void
            public constructor ()
        }
        /** Evaluates simple math expressions; supports int  float and operators: + - *  % ^ ( ).
        */
        class ExpressionEvaluator extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class MathUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetQuatLength ($q: UnityEngine.Quaternion) : number
            public static GetQuatConjugate ($q: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public static OrthogonalizeMatrix ($m: UnityEngine.Matrix4x4) : UnityEngine.Matrix4x4
            public static QuaternionNormalize ($q: $Ref<UnityEngine.Quaternion>) : void
            public static QuaternionFromMatrix ($m: UnityEngine.Matrix4x4) : UnityEngine.Quaternion
            public static GetQuatLog ($q: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public static GetQuatExp ($q: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public static GetQuatSquad ($t: number, $q0: UnityEngine.Quaternion, $q1: UnityEngine.Quaternion, $a0: UnityEngine.Quaternion, $a1: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public static GetSquadIntermediate ($q0: UnityEngine.Quaternion, $q1: UnityEngine.Quaternion, $q2: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public static Ease ($t: number, $k1: number, $k2: number) : number
            public static Slerp ($p: UnityEngine.Quaternion, $q: UnityEngine.Quaternion, $t: number) : UnityEngine.Quaternion
            public static IntersectRayTriangle ($ray: UnityEngine.Ray, $v0: UnityEngine.Vector3, $v1: UnityEngine.Vector3, $v2: UnityEngine.Vector3, $bidirectional: boolean) : any
            public static ClosestPtSegmentRay ($p1: UnityEngine.Vector3, $q1: UnityEngine.Vector3, $ray: UnityEngine.Ray, $squaredDist: $Ref<number>, $s: $Ref<number>, $closestRay: $Ref<UnityEngine.Vector3>) : UnityEngine.Vector3
            public static IntersectRaySphere ($ray: UnityEngine.Ray, $sphereOrigin: UnityEngine.Vector3, $sphereRadius: number, $t: $Ref<number>, $q: $Ref<UnityEngine.Vector3>) : boolean
            public static ClosestPtRaySphere ($ray: UnityEngine.Ray, $sphereOrigin: UnityEngine.Vector3, $sphereRadius: number, $t: $Ref<number>, $q: $Ref<UnityEngine.Vector3>) : boolean
            public constructor ()
        }
        /** Options for removing assets
        */
        enum RemoveAssetOptions
        { MoveAssetToTrash = 0, DeleteAssets = 2 }
        enum AudioImporterFormat
        { Native = -1, Compressed = 0 }
        enum AudioImporterLoadType
        { DecompressOnLoad = -1, CompressedInMemory = -1, StreamFromDisc = -1 }
        enum AudioImporterChannels
        { Automatic = 0, Mono = 1, Stereo = 2 }
        /** The sample rate setting used within the AudioImporter. This defines the sample rate conversion of audio on import.
        */
        enum AudioSampleRateSetting
        { PreserveSampleRate = 0, OptimizeSampleRate = 1, OverrideSampleRate = 2 }
        /** This structure contains a collection of settings used to define how an AudioClip should be imported.
        This  structure is used with the AudioImporter to define how the AudioClip should be imported and treated during loading within the Scene.
        */
        class AudioImporterSampleSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** LoadType defines how the imported AudioClip data should be loaded.
            */
            public loadType : UnityEngine.AudioClipLoadType
            /** Defines how the sample rate is modified (if at all) of the importer audio file.
            */
            public sampleRateSetting : UnityEditor.AudioSampleRateSetting
            /** Target sample rate to convert to when samplerateSetting is set to OverrideSampleRate.
            */
            public sampleRateOverride : number
            /** CompressionFormat defines the compression type that the audio file is encoded to. Different compression types have different performance and audio artifact characteristics.
            */
            public compressionFormat : UnityEngine.AudioCompressionFormat
            /** Audio compression quality (0-1)
            Amount of compression. The value roughly corresponds to the ratio between the resulting and the source file sizes.
            */
            public quality : number
            public conversionMode : number
        }
        /** Audio importer lets you modify AudioClip import settings from editor scripts.
        */
        class AudioImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** The default sample settings for the AudioClip importer.
            */
            public get defaultSampleSettings(): UnityEditor.AudioImporterSampleSettings;
            public set defaultSampleSettings(value: UnityEditor.AudioImporterSampleSettings);
            /** Force audioclips to mono?
            */
            public get forceToMono(): boolean;
            public set forceToMono(value: boolean);
            /** When this flag is set, the audio clip will be treated as being ambisonic.
            */
            public get ambisonic(): boolean;
            public set ambisonic(value: boolean);
            /** Corresponding to the "Load In Background" flag in the AudioClip inspector, when this flag is set, the loading of the clip will happen delayed without blocking the main thread.
            */
            public get loadInBackground(): boolean;
            public set loadInBackground(value: boolean);
            /** Preloads audio data of the clip when the clip asset is loaded. When this flag is off, scripts have to call AudioClip.LoadAudioData() to load the data before the clip can be played. Properties like length, channels and format are available before the audio data has been loaded.
            */
            public get preloadAudioData(): boolean;
            public set preloadAudioData(value: boolean);
            /** Returns whether a given build target has its sample settings currently overridden.
            * @param platform The platform to query if this AudioImporter has an override for.
            * @returns Returns true if the platform is currently overriden in this AudioImporter. 
            */
            public ContainsSampleSettingsOverride ($platform: string) : boolean
            /** Return the current override settings for the given platform.
            * @param platform The platform to get the override settings for.
            * @returns The override sample settings for the given platform. 
            */
            public GetOverrideSampleSettings ($platform: string) : UnityEditor.AudioImporterSampleSettings
            /** Sets the override sample settings for the given platform.
            * @param platform The platform which will have the sample settings overridden.
            * @param settings The override settings for the given platform.
            * @returns Returns true if the settings were successfully overriden. Some setting overrides are not possible for the given platform, in which case false is returned and the settings are not registered. 
            */
            public SetOverrideSampleSettings ($platform: string, $settings: UnityEditor.AudioImporterSampleSettings) : boolean
            /** Clears the sample settings override for the given platform.
            * @param platform The platform to clear the overrides for.
            * @returns Returns true if any overrides were actually cleared. 
            */
            public ClearSampleSettingOverride ($platform: string) : boolean
            public constructor ()
        }
        class MonoImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            public SetDefaultReferences ($name: System.Array$1<string>, $target: System.Array$1<UnityEngine.Object>) : void
            public static GetAllRuntimeMonoScripts () : System.Array$1<UnityEditor.MonoScript>
            public static SetExecutionOrder ($script: UnityEditor.MonoScript, $order: number) : void
            public static GetExecutionOrder ($script: UnityEditor.MonoScript) : number
            public GetScript () : UnityEditor.MonoScript
            public GetDefaultReference ($name: string) : UnityEngine.Object
            public constructor ()
        }
        class MovieImporter extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get quality(): number;
            public set quality(value: number);
            public get linearTexture(): boolean;
            public set linearTexture(value: boolean);
            public get duration(): number;
            public constructor ()
        }
        /** Represents plugin importer.
        */
        class PluginImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Allows you to specify a list of #define directives which controls whether your plug-in should be included.
            */
            public get DefineConstraints(): System.Array$1<string>;
            public set DefineConstraints(value: System.Array$1<string>);
            /** Is a native plugin loaded during startup or on demand?
            */
            public get isPreloaded(): boolean;
            public set isPreloaded(value: boolean);
            /** Is plugin native or managed? Note: C++ libraries with CLR support are treated as native plugins, because Unity cannot load such libraries. You can still access them via P/Invoke.
            */
            public get isNativePlugin(): boolean;
            /** Returns all plugin importers for specfied platform.
            * @param platform Target platform.
            * @param platformName Name of the target platform.
            */
            public static GetImporters ($platformName: string) : System.Array$1<UnityEditor.PluginImporter>
            /** Returns all plugin importers for specfied platform.
            * @param platform Target platform.
            * @param platformName Name of the target platform.
            */
            public static GetImporters ($platform: UnityEditor.BuildTarget) : System.Array$1<UnityEditor.PluginImporter>
            public static GetImporters ($buildTargetGroup: string, $buildTarget: string) : System.Array$1<UnityEditor.PluginImporter>
            public static GetImporters ($buildTargetGroup: UnityEditor.BuildTargetGroup, $buildTarget: UnityEditor.BuildTarget) : System.Array$1<UnityEditor.PluginImporter>
            public ClearSettings () : void
            /** Sets compatibility with Any Platform.
            * @param enable Determines whether the plugin is compatible with Any Platform.
            */
            public SetCompatibleWithAnyPlatform ($enable: boolean) : void
            public GetCompatibleWithAnyPlatform () : boolean
            /** Exclude platform from compatible platforms when Any Platform is set to true.
            * @param platformName Target platform.
            */
            public SetExcludeFromAnyPlatform ($platformName: string, $excludedFromAny: boolean) : void
            /** Is platform excluded when Any Platform set to true.
            * @param platform Target platform.
            */
            public GetExcludeFromAnyPlatform ($platformName: string) : boolean
            public SetIncludeInBuildDelegate ($includeInBuildDelegate: UnityEditor.PluginImporter.IncludeInBuildDelegate) : void
            /** Exclude platform from compatible platforms when Any Platform is set to true.
            * @param platformName Target platform.
            */
            public SetExcludeFromAnyPlatform ($platform: UnityEditor.BuildTarget, $excludedFromAny: boolean) : void
            /** Is platform excluded when Any Platform set to true.
            * @param platform Target platform.
            */
            public GetExcludeFromAnyPlatform ($platform: UnityEditor.BuildTarget) : boolean
            /** Exclude Editor from compatible platforms when Any Platform is set to true.
            */
            public SetExcludeEditorFromAnyPlatform ($excludedFromAny: boolean) : void
            public GetExcludeEditorFromAnyPlatform () : boolean
            /** Sets compatibility with any editor.
            * @param enable Is plugin compatible with editor.
            */
            public SetCompatibleWithEditor ($enable: boolean) : void
            public GetCompatibleWithEditor () : boolean
            public GetCompatibleWithEditor ($buildTargetGroup: string, $buildTarget: string) : boolean
            public GetIsOverridable () : boolean
            public ShouldIncludeInBuild () : boolean
            /** Sets compatibility with the specified platform.
            * @param platform Target platform.
            * @param enable Is plugin compatible with specified platform.
            * @param platformName Target platform.
            */
            public SetCompatibleWithPlatform ($platform: UnityEditor.BuildTarget, $enable: boolean) : void
            /** Is plugin compatible with specified platform.
            * @param platform Target platform.
            */
            public GetCompatibleWithPlatform ($platform: UnityEditor.BuildTarget) : boolean
            /** Sets compatibility with the specified platform.
            * @param platform Target platform.
            * @param enable Is plugin compatible with specified platform.
            * @param platformName Target platform.
            */
            public SetCompatibleWithPlatform ($platformName: string, $enable: boolean) : void
            /** Is plugin compatible with specified platform.
            * @param platform Target platform.
            */
            public GetCompatibleWithPlatform ($platformName: string) : boolean
            /** Sets platform specific data.
            * @param platform Target platform.
            * @param key Key value for data.
            * @param value Data.
            */
            public SetPlatformData ($platform: UnityEditor.BuildTarget, $key: string, $value: string) : void
            /** Get platform specific data.
            * @param platform Target platform.
            * @param key Key value for data.
            */
            public GetPlatformData ($platform: UnityEditor.BuildTarget, $key: string) : string
            /** Sets platform specific data.
            * @param platform Target platform.
            * @param key Key value for data.
            * @param value Data.
            */
            public SetPlatformData ($platformName: string, $key: string, $value: string) : void
            /** Get platform specific data.
            * @param platform Target platform.
            * @param key Key value for data.
            */
            public GetPlatformData ($platformName: string, $key: string) : string
            /** Sets editor specific data.
            * @param key Key value for data.
            * @param value Data.
            */
            public SetEditorData ($key: string, $value: string) : void
            /** Returns editor specific data for specified key.
            * @param key Key value for data.
            */
            public GetEditorData ($key: string) : string
            public static GetAllImporters () : System.Array$1<UnityEditor.PluginImporter>
            public constructor ()
        }
        /** Video codec to use when importing video clips.
        */
        enum VideoCodec
        { Auto = 0, H264 = 1, H265 = 3, VP8 = 2 }
        /** Bit rate after the clip is transcoded.
        */
        enum VideoBitrateMode
        { Low = 0, Medium = 1, High = 2 }
        /** Describes how the fields in the image, if any, should be interpreted.
        */
        enum VideoDeinterlaceMode
        { Off = 0, Even = 1, Odd = 2 }
        /** How the video clip's images will be resized during transcoding.
        */
        enum VideoResizeMode
        { OriginalSize = 0, ThreeQuarterRes = 1, HalfRes = 2, QuarterRes = 3, Square1024 = 4, Square512 = 5, Square256 = 6, CustomSize = 7 }
        /** Controls the imported clip's internal resize to save space at the cost of blurrier images.
        */
        enum VideoSpatialQuality
        { LowSpatialQuality = 0, MediumSpatialQuality = 1, HighSpatialQuality = 2 }
        /** Methods to compensate for aspect ratio discrepancies between the source resolution and the wanted encoding size.
        */
        enum VideoEncodeAspectRatio
        { NoScaling = 0, Stretch = 5 }
        /** Importer settings that can have platform-specific values.
        */
        class VideoImporterTargetSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Controls whether the movie file will be transcoded during import. When transcoding is not enabled, the file will be imported in its original format.
            */
            public enableTranscoding : boolean
            /** Codec that the resulting VideoClip will use.
            */
            public codec : UnityEditor.VideoCodec
            /** How to resize the images when going into the imported clip.
            */
            public resizeMode : UnityEditor.VideoResizeMode
            /** How the aspect ratio discrepancies, if any, will be handled if the chosen import resolution has a different ratio than the source.
            */
            public aspectRatio : UnityEditor.VideoEncodeAspectRatio
            /** Width of the transcoded clip when the resizeMode is set to custom.
            */
            public customWidth : number
            /** Height of the transcoded clip when the resizeMode is set to custom.
            */
            public customHeight : number
            /** Bit rate type for the transcoded clip.
            */
            public bitrateMode : UnityEditor.VideoBitrateMode
            /** Controls an internal image resize, resulting in blurrier images but smaller image dimensions and file size.
            */
            public spatialQuality : UnityEditor.VideoSpatialQuality
            public constructor ()
        }
        /** VideoClipImporter lets you modify Video.VideoClip import settings from Editor scripts.
        */
        class VideoClipImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Size in bytes of the file before importing.
            */
            public get sourceFileSize(): bigint;
            /** Size in bytes of the file once imported.
            */
            public get outputFileSize(): bigint;
            /** Number of frames in the clip.
            */
            public get frameCount(): number;
            /** Frame rate of the clip.
            */
            public get frameRate(): number;
            /** Whether to keep the alpha from the source into the transcoded clip.
            */
            public get keepAlpha(): boolean;
            public set keepAlpha(value: boolean);
            /** True if the source file has a channel for per-pixel transparency.
            */
            public get sourceHasAlpha(): boolean;
            /** Images are deinterlaced during transcode.  This tells the importer how to interpret fields in the source, if any.
            */
            public get deinterlaceMode(): UnityEditor.VideoDeinterlaceMode;
            public set deinterlaceMode(value: UnityEditor.VideoDeinterlaceMode);
            /** Apply a vertical flip during import.
            */
            public get flipVertical(): boolean;
            public set flipVertical(value: boolean);
            /** Apply a horizontal flip during import.
            */
            public get flipHorizontal(): boolean;
            public set flipHorizontal(value: boolean);
            /** Import audio tracks from source file.
            */
            public get importAudio(): boolean;
            public set importAudio(value: boolean);
            /** Whether the imported clip contains sRGB color data.
            */
            public get sRGBClip(): boolean;
            public set sRGBClip(value: boolean);
            /** Default values for the platform-specific import settings.
            */
            public get defaultTargetSettings(): UnityEditor.VideoImporterTargetSettings;
            public set defaultTargetSettings(value: UnityEditor.VideoImporterTargetSettings);
            /** Whether the preview is currently playing.
            */
            public get isPlayingPreview(): boolean;
            /** Number of audio tracks in the source file.
            */
            public get sourceAudioTrackCount(): number;
            /** Numerator of the pixel aspect ratio (num:den).
            */
            public get pixelAspectRatioNumerator(): number;
            /** Denominator of the pixel aspect ratio (num:den).
            */
            public get pixelAspectRatioDenominator(): number;
            /** Returns true if transcoding was skipped during import, false otherwise. (Read Only)
            When VideoImporterTargetSettings.enableTranscoding is set to true, the resulting transcoding operation done at import time may be quite long, up to many hours depending on source resolution and content duration. An option to skip this process is offered in the asset import progress bar. When skipped, the transcoding instead provides a non-transcoded verision of the asset. However, the importer settings stay intact so this property can be inspected to detect the incoherence with the generated artifact.
            Re-importing without stopping the transcode process, or with transcode turned off, causes this property to become false.
            */
            public get transcodeSkipped(): boolean;
            /** Returns the platform-specific import settings for the specified platform.
            * @param platform Platform name.
            * @returns The platform-specific import settings. Throws an exception if the platform is unknown. 
            */
            public GetTargetSettings ($platform: string) : UnityEditor.VideoImporterTargetSettings
            /** Sets the platform-specific import settings for the specified platform.
            * @param platform Platform name.
            * @param settings The new platform-specific import settings. Throws an exception if the platform is unknown.
            */
            public SetTargetSettings ($platform: string, $settings: UnityEditor.VideoImporterTargetSettings) : void
            /** Clear the platform-specific import settings for the specified platform, causing them to go back to the default settings.
            * @param platform Platform name.
            */
            public ClearTargetSettings ($platform: string) : void
            public PlayPreview () : void
            public StopPreview () : void
            public GetPreviewTexture () : UnityEngine.Texture
            /** Get the full name of the resize operation for the specified resize mode.
            * @param mode Mode for which the width is queried.
            * @returns Name for the specified resize mode. 
            */
            public GetResizeModeName ($mode: UnityEditor.VideoResizeMode) : string
            /** Get the resulting width of the resize operation for the specified resize mode.
            * @param mode Mode for which the width is queried.
            * @returns Width for the specified resize mode. 
            */
            public GetResizeWidth ($mode: UnityEditor.VideoResizeMode) : number
            /** Get the resulting height of the resize operation for the specified resize mode.
            * @param mode Mode for which the height is queried.
            * @returns Height for the specified resize mode. 
            */
            public GetResizeHeight ($mode: UnityEditor.VideoResizeMode) : number
            /** Number of audio channels in the specified source track.
            * @param audioTrackIdx Index of the audio track to query.
            * @returns Number of channels. 
            */
            public GetSourceAudioChannelCount ($audioTrackIdx: number) : number
            /** Sample rate of the specified audio track.
            * @param audioTrackIdx Index of the audio track to query.
            * @returns Sample rate in Hertz. 
            */
            public GetSourceAudioSampleRate ($audioTrackIdx: number) : number
            /** Performs a value comparison with another VideoClipImporter.
            * @param rhs The importer to compare with.
            * @returns Returns true if the settings for both VideoClipImporters match. Returns false otherwise. 
            */
            public Equals ($rhs: UnityEditor.VideoClipImporter) : boolean
            public constructor ()
            public Equals ($obj: any) : boolean
            public static Equals ($objA: any, $objB: any) : boolean
        }
        /** Options to control the optimization of mesh data during asset import.
        */
        enum MeshOptimizationFlags
        { PolygonOrder = 1, VertexOrder = 2, Everything = -1 }
        /** AnimationClip mask options for ModelImporterClipAnimation.
        */
        enum ClipAnimationMaskType
        { CreateFromThisModel = 0, CopyFromOther = 1, None = 3 }
        /** Stores a curve and its name that will be used to create additionnal curves during the import process.
        */
        class ClipAnimationInfoCurve extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The name of the animation curve.
            */
            public name : string
            /** The animation curve.
            */
            public curve : UnityEngine.AnimationCurve
        }
        /** Animation clips to split animation into.
        */
        class ModelImporterClipAnimation extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Take name.
            */
            public get takeName(): string;
            public set takeName(value: string);
            /** Clip name.
            */
            public get name(): string;
            public set name(value: string);
            /** First frame of the clip.
            */
            public get firstFrame(): number;
            public set firstFrame(value: number);
            /** Last frame of the clip.
            */
            public get lastFrame(): number;
            public set lastFrame(value: number);
            /** The wrap mode of the animation.
            */
            public get wrapMode(): UnityEngine.WrapMode;
            public set wrapMode(value: UnityEngine.WrapMode);
            /** Is the clip a looping animation?
            */
            public get loop(): boolean;
            public set loop(value: boolean);
            /** Offset in degrees to the root rotation.
            */
            public get rotationOffset(): number;
            public set rotationOffset(value: number);
            /** Offset to the vertical root position.
            */
            public get heightOffset(): number;
            public set heightOffset(value: number);
            /** Offset to the cycle of a looping animation, if a different time in it is desired to be the start.
            */
            public get cycleOffset(): number;
            public set cycleOffset(value: number);
            /** Enable to make the clip loop.
            */
            public get loopTime(): boolean;
            public set loopTime(value: boolean);
            /** Enable to make the motion loop seamlessly.
            */
            public get loopPose(): boolean;
            public set loopPose(value: boolean);
            /** Enable to make root rotation be baked into the movement of the bones. Disable to make root rotation be stored as root motion.
            */
            public get lockRootRotation(): boolean;
            public set lockRootRotation(value: boolean);
            /** Enable to make vertical root motion be baked into the movement of the bones. Disable to make vertical root motion be stored as root motion.
            */
            public get lockRootHeightY(): boolean;
            public set lockRootHeightY(value: boolean);
            /** Enable to make horizontal root motion be baked into the movement of the bones. Disable to make horizontal root motion be stored as root motion.
            */
            public get lockRootPositionXZ(): boolean;
            public set lockRootPositionXZ(value: boolean);
            /** Keeps the vertical position as it is authored in the source file.
            */
            public get keepOriginalOrientation(): boolean;
            public set keepOriginalOrientation(value: boolean);
            /** Keeps the vertical position as it is authored in the source file.
            */
            public get keepOriginalPositionY(): boolean;
            public set keepOriginalPositionY(value: boolean);
            /** Keeps the vertical position as it is authored in the source file.
            */
            public get keepOriginalPositionXZ(): boolean;
            public set keepOriginalPositionXZ(value: boolean);
            /** Keeps the feet aligned with the root transform position.
            */
            public get heightFromFeet(): boolean;
            public set heightFromFeet(value: boolean);
            /** Mirror left and right in this clip.
            */
            public get mirror(): boolean;
            public set mirror(value: boolean);
            /** Define mask type.
            */
            public get maskType(): UnityEditor.ClipAnimationMaskType;
            public set maskType(value: UnityEditor.ClipAnimationMaskType);
            /** The AvatarMask used to mask transforms during the import process.
            */
            public get maskSource(): UnityEngine.AvatarMask;
            public set maskSource(value: UnityEngine.AvatarMask);
            /** AnimationEvents that will be added during the import process.
            */
            public get events(): System.Array$1<UnityEngine.AnimationEvent>;
            public set events(value: System.Array$1<UnityEngine.AnimationEvent>);
            /** Additionnal curves that will be that will be added during the import process.
            */
            public get curves(): System.Array$1<UnityEditor.ClipAnimationInfoCurve>;
            public set curves(value: System.Array$1<UnityEditor.ClipAnimationInfoCurve>);
            /** Returns true when the source AvatarMask has changed. This only happens when  ModelImporterClipAnimation.maskType is set to ClipAnimationMaskType.CopyFromOther
            To force a reload of the mask, simply set  ModelImporterClipAnimation.maskSource to the desired AvatarMask.
            */
            public get maskNeedsUpdating(): boolean;
            /** The additive reference pose frame.
            */
            public get additiveReferencePoseFrame(): number;
            public set additiveReferencePoseFrame(value: number);
            /** Enable to defines an additive reference pose.
            */
            public get hasAdditiveReferencePose(): boolean;
            public set hasAdditiveReferencePose(value: boolean);
            /** Copy the current masking settings from the clip to an AvatarMask.
            * @param mask AvatarMask to which the masking values will be saved.
            */
            public ConfigureMaskFromClip ($mask: $Ref<UnityEngine.AvatarMask>) : void
            /** Copy the mask settings from an AvatarMask to the clip configuration.
            * @param mask AvatarMask from which the mask settings will be imported.
            */
            public ConfigureClipFromMask ($mask: UnityEngine.AvatarMask) : void
            public constructor ()
        }
        /** Material generation options for ModelImporter.
        */
        enum ModelImporterGenerateMaterials
        { None = 0, PerTexture = 1, PerSourceMaterial = 2 }
        /** Material naming options for ModelImporter.
        */
        enum ModelImporterMaterialName
        { BasedOnTextureName = 0, BasedOnMaterialName = 1, BasedOnModelNameAndMaterialName = 2, BasedOnTextureName_Or_ModelNameAndMaterialName = 3 }
        /** Material search options for ModelImporter.
        */
        enum ModelImporterMaterialSearch
        { Local = 0, RecursiveUp = 1, Everywhere = 2 }
        /** Material import options for ModelImporter.
        */
        enum ModelImporterMaterialLocation
        { External = 0, InPrefab = 1 }
        /** Material import options for ModelImporter.
        */
        enum ModelImporterMaterialImportMode
        { None = 0, ImportStandard = 1, ImportViaMaterialDescription = 2, LegacyImport = 1, Import = 2 }
        /** Tangent space generation options for ModelImporter.
        */
        enum ModelImporterTangentSpaceMode
        { Import = 0, Calculate = 1, None = 2 }
        /** Normal generation options for ModelImporter.
        */
        enum ModelImporterNormals
        { Import = 0, Calculate = 1, None = 2 }
        /** Normal generation options for ModelImporter.
        */
        enum ModelImporterNormalCalculationMode
        { Unweighted_Legacy = 0, Unweighted = 1, AreaWeighted = 2, AngleWeighted = 3, AreaAndAngleWeighted = 4 }
        /** Source of smoothing information for calculation of normals in ModelImporter.
        */
        enum ModelImporterNormalSmoothingSource
        { PreferSmoothingGroups = 0, FromSmoothingGroups = 1, FromAngle = 2, None = 3 }
        /** Vertex tangent generation options for ModelImporter.
        */
        enum ModelImporterTangents
        { Import = 0, CalculateLegacy = 1, CalculateLegacyWithSplitTangents = 4, CalculateMikk = 3, None = 2 }
        /** Format of the imported mesh index buffer data.
        */
        enum ModelImporterIndexFormat
        { Auto = 0, UInt16 = 1, UInt32 = 2 }
        /** Animation compression options for ModelImporter.
        */
        enum ModelImporterAnimationCompression
        { Off = 0, KeyframeReduction = 1, KeyframeReductionAndCompression = 2, Optimal = 3 }
        /** Animation generation options for ModelImporter. These options relate to the legacy Animation system, they should only be used when ModelImporter.animationType==ModelImporterAnimationType.Legacy.
        */
        enum ModelImporterGenerateAnimations
        { None = 0, GenerateAnimations = 4, InRoot = 3, InOriginalRoots = 1, InNodes = 2 }
        /** Humanoid Oversampling available multipliers.
        */
        enum ModelImporterHumanoidOversampling
        { X1 = 1, X2 = 2, X4 = 4, X8 = 8 }
        /** Set the Avatar generation mode for ModelImporter.
        */
        enum ModelImporterAvatarSetup
        { NoAvatar = 0, CreateFromThisModel = 1, CopyFromOther = 2 }
        /** Skin weights options for ModelImporter.
        */
        enum ModelImporterSkinWeights
        { Standard = 0, Custom = 1 }
        class HumanTemplate extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            public Insert ($name: string, $templateName: string) : void
            public Find ($name: string) : string
            public ClearTemplate () : void
            public constructor ()
        }
        /** A Takeinfo object contains all the information needed to describe a take.
        */
        class TakeInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Take name as define from imported file.
            */
            public name : string
            /** This is the default clip name for the clip generated for this take.
            */
            public defaultClipName : string
            /** Start time in second.
            */
            public startTime : number
            /** Stop time in second.
            */
            public stopTime : number
            /** Start time in second.
            */
            public bakeStartTime : number
            /** Stop time in second.
            */
            public bakeStopTime : number
            /** Sample rate of the take.
            */
            public sampleRate : number
        }
        /** Model importer lets you modify import settings from editor scripts.
        */
        class ModelImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Material naming setting.
            */
            public get materialName(): UnityEditor.ModelImporterMaterialName;
            public set materialName(value: UnityEditor.ModelImporterMaterialName);
            /** Existing material search setting.
            */
            public get materialSearch(): UnityEditor.ModelImporterMaterialSearch;
            public set materialSearch(value: UnityEditor.ModelImporterMaterialSearch);
            /** Material import location options.
            */
            public get materialLocation(): UnityEditor.ModelImporterMaterialLocation;
            public set materialLocation(value: UnityEditor.ModelImporterMaterialLocation);
            /** Global scale factor for importing.
            */
            public get globalScale(): number;
            public set globalScale(value: number);
            /** Is useFileUnits supported for this asset.
            */
            public get isUseFileUnitsSupported(): boolean;
            /** Use visibility properties to enable or disable MeshRenderer components.
            */
            public get importVisibility(): boolean;
            public set importVisibility(value: boolean);
            /** Detect file units and import as 1FileUnit=1UnityUnit, otherwise it will import as 1cm=1UnityUnit.
            */
            public get useFileUnits(): boolean;
            public set useFileUnits(value: boolean);
            /** Scaling factor used when useFileScale is set to true (Read-only).
            */
            public get fileScale(): number;
            /** Use FileScale when importing.
            */
            public get useFileScale(): boolean;
            public set useFileScale(value: boolean);
            /** Controls import of BlendShapes.
            */
            public get importBlendShapes(): boolean;
            public set importBlendShapes(value: boolean);
            /** Controls import of cameras. Basic properties like field of view, near plane distance and far plane distance can be animated.
            */
            public get importCameras(): boolean;
            public set importCameras(value: boolean);
            /** Controls import of lights. Note that because light are defined differently in DCC tools, some light types or properties may not be exported. Basic properties like color and intensity can be animated.
            */
            public get importLights(): boolean;
            public set importLights(value: boolean);
            /** Add to imported meshes.
            */
            public get addCollider(): boolean;
            public set addCollider(value: boolean);
            /** Smoothing angle (in degrees) for calculating normals.
            */
            public get normalSmoothingAngle(): number;
            public set normalSmoothingAngle(value: number);
            /** Swap primary and secondary UV channels when importing.
            */
            public get swapUVChannels(): boolean;
            public set swapUVChannels(value: boolean);
            /** Combine vertices that share the same position in space.
            */
            public get weldVertices(): boolean;
            public set weldVertices(value: boolean);
            /** If this is true, any quad faces that exist in the mesh data before it is imported are kept as quads instead of being split into two triangles, for the purposes of tessellation. Set this to false to disable this behavior.
            */
            public get keepQuads(): boolean;
            public set keepQuads(value: boolean);
            /** Format of the imported mesh index buffer data.
            */
            public get indexFormat(): UnityEditor.ModelImporterIndexFormat;
            public set indexFormat(value: UnityEditor.ModelImporterIndexFormat);
            /** If true, always create an explicit Prefab root. Otherwise, if the model has a single root, it is reused as the Prefab root.
            */
            public get preserveHierarchy(): boolean;
            public set preserveHierarchy(value: boolean);
            /** Generate secondary UV set for lightmapping.
            */
            public get generateSecondaryUV(): boolean;
            public set generateSecondaryUV(value: boolean);
            /** Threshold for angle distortion (in degrees) when generating secondary UV.
            */
            public get secondaryUVAngleDistortion(): number;
            public set secondaryUVAngleDistortion(value: number);
            /** Threshold for area distortion when generating secondary UV.
            */
            public get secondaryUVAreaDistortion(): number;
            public set secondaryUVAreaDistortion(value: number);
            /** Hard angle (in degrees) for generating secondary UV.
            */
            public get secondaryUVHardAngle(): number;
            public set secondaryUVHardAngle(value: number);
            /** Margin to be left between charts when packing secondary UV.
            */
            public get secondaryUVPackMargin(): number;
            public set secondaryUVPackMargin(value: number);
            /** Animation generation options.
            */
            public get generateAnimations(): UnityEditor.ModelImporterGenerateAnimations;
            public set generateAnimations(value: UnityEditor.ModelImporterGenerateAnimations);
            /** Generates the list of all imported take.
            */
            public get importedTakeInfos(): System.Array$1<UnityEditor.TakeInfo>;
            /** Generates the list of all imported Transforms.
            */
            public get transformPaths(): System.Array$1<string>;
            /** Generates the list of all imported Animations.
            */
            public get referencedClips(): System.Array$1<string>;
            /** Are mesh vertices and indices accessible from script?
            */
            public get isReadable(): boolean;
            public set isReadable(value: boolean);
            /** Options to control the optimization of mesh data during asset import.
            */
            public get meshOptimizationFlags(): UnityEditor.MeshOptimizationFlags;
            public set meshOptimizationFlags(value: UnityEditor.MeshOptimizationFlags);
            /** Optimize the order of polygons in the mesh to make better use of the GPUs internal caches to improve rendering performance.
            */
            public get optimizeMeshPolygons(): boolean;
            public set optimizeMeshPolygons(value: boolean);
            /** Optimize the order of vertices in the mesh to make better use of the GPUs internal caches to improve rendering performance.
            */
            public get optimizeMeshVertices(): boolean;
            public set optimizeMeshVertices(value: boolean);
            /** Skin weights import options.
            */
            public get skinWeights(): UnityEditor.ModelImporterSkinWeights;
            public set skinWeights(value: UnityEditor.ModelImporterSkinWeights);
            /** Maximum bones per vertex.
            */
            public get maxBonesPerVertex(): number;
            public set maxBonesPerVertex(value: number);
            /** Minimum bone weight to keep.
            */
            public get minBoneWeight(): number;
            public set minBoneWeight(value: number);
            /** Vertex normal import options.
            */
            public get importNormals(): UnityEditor.ModelImporterNormals;
            public set importNormals(value: UnityEditor.ModelImporterNormals);
            /** Source of smoothing information for calculation of normals.
            */
            public get normalSmoothingSource(): UnityEditor.ModelImporterNormalSmoothingSource;
            public set normalSmoothingSource(value: UnityEditor.ModelImporterNormalSmoothingSource);
            /** Blend shape normal import options.
            */
            public get importBlendShapeNormals(): UnityEditor.ModelImporterNormals;
            public set importBlendShapeNormals(value: UnityEditor.ModelImporterNormals);
            /** Normal generation options for ModelImporter.
            */
            public get normalCalculationMode(): UnityEditor.ModelImporterNormalCalculationMode;
            public set normalCalculationMode(value: UnityEditor.ModelImporterNormalCalculationMode);
            /** Vertex tangent import options.
            */
            public get importTangents(): UnityEditor.ModelImporterTangents;
            public set importTangents(value: UnityEditor.ModelImporterTangents);
            /** Bake Inverse Kinematics (IK) when importing.
            */
            public get bakeIK(): boolean;
            public set bakeIK(value: boolean);
            /** Is Bake Inverse Kinematics (IK) supported by this importer.
            */
            public get isBakeIKSupported(): boolean;
            /** If set to false, the importer will not resample curves when possible.
            Read more about.
            Notes:
            - Some unsupported FBX features (such as PreRotation or PostRotation on transforms) will override this setting. In these situations, animation curves will still be resampled even if the setting is disabled. For best results, avoid using PreRotation, PostRotation and GetRotationPivot.
            - This option was introduced in Version 5.3. Prior to this version, Unity's import behaviour was as if this option was always enabled. Therefore enabling the option gives the same behaviour as pre-5.3 animation import.
            */
            public get resampleCurves(): boolean;
            public set resampleCurves(value: boolean);
            /** Is import of tangents supported by this importer.
            */
            public get isTangentImportSupported(): boolean;
            /** Mesh compression setting.
            */
            public get meshCompression(): UnityEditor.ModelImporterMeshCompression;
            public set meshCompression(value: UnityEditor.ModelImporterMeshCompression);
            /** Import animation from file.
            */
            public get importAnimation(): boolean;
            public set importAnimation(value: boolean);
            /** Animation optimization setting.
            */
            public get optimizeGameObjects(): boolean;
            public set optimizeGameObjects(value: boolean);
            /** Animation optimization setting.
            */
            public get extraExposedTransformPaths(): System.Array$1<string>;
            public set extraExposedTransformPaths(value: System.Array$1<string>);
            /** Additional properties to treat as user properties.
            */
            public get extraUserProperties(): System.Array$1<string>;
            public set extraUserProperties(value: System.Array$1<string>);
            /** Animation compression setting.
            */
            public get animationCompression(): UnityEditor.ModelImporterAnimationCompression;
            public set animationCompression(value: UnityEditor.ModelImporterAnimationCompression);
            /** Import animated custom properties from file.
            */
            public get importAnimatedCustomProperties(): boolean;
            public set importAnimatedCustomProperties(value: boolean);
            /** Import animation constraints.
            */
            public get importConstraints(): boolean;
            public set importConstraints(value: boolean);
            /** Allowed error of animation rotation compression.
            */
            public get animationRotationError(): number;
            public set animationRotationError(value: number);
            /** Allowed error of animation position compression.
            */
            public get animationPositionError(): number;
            public set animationPositionError(value: number);
            /** Allowed error of animation scale compression.
            */
            public get animationScaleError(): number;
            public set animationScaleError(value: number);
            /** The default wrap mode for the generated animation clips.
            */
            public get animationWrapMode(): UnityEngine.WrapMode;
            public set animationWrapMode(value: UnityEngine.WrapMode);
            /** Animator generation mode.
            */
            public get animationType(): UnityEditor.ModelImporterAnimationType;
            public set animationType(value: UnityEditor.ModelImporterAnimationType);
            /** Controls how much oversampling is used when importing humanoid animations for retargeting.
            */
            public get humanoidOversampling(): UnityEditor.ModelImporterHumanoidOversampling;
            public set humanoidOversampling(value: UnityEditor.ModelImporterHumanoidOversampling);
            /** The path of the transform used to generation the motion of the animation.
            */
            public get motionNodeName(): string;
            public set motionNodeName(value: string);
            /** The Avatar generation of the imported model.
            */
            public get avatarSetup(): UnityEditor.ModelImporterAvatarSetup;
            public set avatarSetup(value: UnityEditor.ModelImporterAvatarSetup);
            /** Imports the HumanDescription from the given Avatar.
            */
            public get sourceAvatar(): UnityEngine.Avatar;
            public set sourceAvatar(value: UnityEngine.Avatar);
            /** The human description that is used to generate an Avatar during the import process.
            */
            public get humanDescription(): UnityEngine.HumanDescription;
            public set humanDescription(value: UnityEngine.HumanDescription);
            /** Animation clips to split animation into. See Also: ModelImporterClipAnimation.
            */
            public get clipAnimations(): System.Array$1<UnityEditor.ModelImporterClipAnimation>;
            public set clipAnimations(value: System.Array$1<UnityEditor.ModelImporterClipAnimation>);
            /** Generate a list of all default animation clip based on TakeInfo.
            */
            public get defaultClipAnimations(): System.Array$1<UnityEditor.ModelImporterClipAnimation>;
            /** When disabled, imported material albedo colors are converted to gamma space. This property should be disabled when using linear color space in Player rendering settings.
            The default value is true.
            */
            public get useSRGBMaterialColor(): boolean;
            public set useSRGBMaterialColor(value: boolean);
            /** Sorts the gameObject hierarchy by name.
            */
            public get sortHierarchyByName(): boolean;
            public set sortHierarchyByName(value: boolean);
            /** Material creation options.
            */
            public get materialImportMode(): UnityEditor.ModelImporterMaterialImportMode;
            public set materialImportMode(value: UnityEditor.ModelImporterMaterialImportMode);
            /** Generate auto mapping if no avatarSetup is provided when importing humanoid animation.
            */
            public get autoGenerateAvatarMappingIfUnspecified(): boolean;
            public set autoGenerateAvatarMappingIfUnspecified(value: boolean);
            /** Creates a mask that matches the model hierarchy, and applies it to the provided ModelImporterClipAnimation.
            * @param clip Clip to which the mask will be applied.
            */
            public CreateDefaultMaskForClip ($clip: UnityEditor.ModelImporterClipAnimation) : void
            /** Extracts the embedded textures from a model file (such as FBX or SketchUp).
            * @param folderPath The directory where the textures will be extracted.
            * @returns Returns true if the textures are extracted successfully, otherwise false. 
            */
            public ExtractTextures ($folderPath: string) : boolean
            /** Search the project for matching materials and use them instead of the internal materials.
            * @param nameOption The name matching option.
            * @param searchOption The search type option.
            * @returns Returns true if the materials have been successfly remapped, otherwise false. 
            */
            public SearchAndRemapMaterials ($nameOption: UnityEditor.ModelImporterMaterialName, $searchOption: UnityEditor.ModelImporterMaterialSearch) : boolean
            public constructor ()
        }
        /** Utility functions for working with JSON data and engine objects.
        */
        class EditorJsonUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Generate a JSON representation of an object.
            * @param obj The object to convert to JSON form.
            * @param prettyPrint If true, format the output for readability. If false, format the output for minimum size. Default is false.
            * @returns The object's data in JSON format. 
            */
            public static ToJson ($obj: any) : string
            /** Generate a JSON representation of an object.
            * @param obj The object to convert to JSON form.
            * @param prettyPrint If true, format the output for readability. If false, format the output for minimum size. Default is false.
            * @returns The object's data in JSON format. 
            */
            public static ToJson ($obj: any, $prettyPrint: boolean) : string
            /** Overwrite data in an object by reading from its JSON representation.
            * @param json The JSON representation of the object.
            * @param objectToOverwrite The object to overwrite.
            */
            public static FromJsonOverwrite ($json: string, $objectToOverwrite: any) : void
        }
        class L10n extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Tr ($str: string) : string
            public static Tr ($str_list: System.Array$1<string>) : System.Array$1<string>
            public static Tr ($str: string, $groupName: string) : string
            public static TrPath ($path: string) : string
        }
        /** This class contains the settings controlling the Physics Debug Visualization.
        */
        class PhysicsVisualizationSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Shows extra options used to develop and debug the physics visualization.
            */
            public static get devOptions(): boolean;
            public static set devOptions(value: boolean);
            /** Dirty marker used for refreshing the GUI.
            */
            public static get dirtyCount(): number;
            /** Should the PhysicsDebugWindow display the collision geometry.
            */
            public static get showCollisionGeometry(): boolean;
            public static set showCollisionGeometry(value: boolean);
            /** Enables the mouse-over highlighting and mouse selection modes.
            */
            public static get enableMouseSelect(): boolean;
            public static set enableMouseSelect(value: boolean);
            /** Controls whether the SceneView or the GameView camera is used. Not shown in the UI.
            */
            public static get useSceneCam(): boolean;
            public static set useSceneCam(value: boolean);
            /** Colliders within this distance will be displayed.
            */
            public static get viewDistance(): number;
            public static set viewDistance(value: number);
            /** Maximum number of mesh tiles available to draw all Terrain Colliders.
            */
            public static get terrainTilesMax(): number;
            public static set terrainTilesMax(value: number);
            /** Forcing the drawing of Colliders on top of any other geometry, regardless of depth.
            */
            public static get forceOverdraw(): boolean;
            public static set forceOverdraw(value: boolean);
            /** Color for Colliders that do not have a Rigidbody component.
            */
            public static get staticColor(): UnityEngine.Color;
            public static set staticColor(value: UnityEngine.Color);
            /** Color for Rigidbodies, primarily active ones.
            */
            public static get rigidbodyColor(): UnityEngine.Color;
            public static set rigidbodyColor(value: UnityEngine.Color);
            /** Color for kinematic Rigidbodies.
            */
            public static get kinematicColor(): UnityEngine.Color;
            public static set kinematicColor(value: UnityEngine.Color);
            /** Color for Colliders that are Triggers.
            */
            public static get triggerColor(): UnityEngine.Color;
            public static set triggerColor(value: UnityEngine.Color);
            /** Color for Rigidbodies that are controlled by the physics simulator, but are not currently being simulated.
            */
            public static get sleepingBodyColor(): UnityEngine.Color;
            public static set sleepingBodyColor(value: UnityEngine.Color);
            /** Alpha amount used for transparency blending.
            */
            public static get baseAlpha(): number;
            public static set baseAlpha(value: number);
            /** Used to disinguish neighboring Colliders.
            */
            public static get colorVariance(): number;
            public static set colorVariance(value: number);
            public static get dotAlpha(): number;
            public static set dotAlpha(value: number);
            public static get forceDot(): boolean;
            public static set forceDot(value: boolean);
            public static Reset () : void
            public static GetShowStaticColliders () : boolean
            /** Should the Colliders without a Rigidbody component be considered by the display filter.
            */
            public static SetShowStaticColliders ($show: boolean) : void
            public static GetShowTriggers () : boolean
            /** Should the triggers be considered by the display filter.
            */
            public static SetShowTriggers ($show: boolean) : void
            public static GetShowRigidbodies () : boolean
            /** Should any Rigidbodies be considered by the display filter.
            */
            public static SetShowRigidbodies ($show: boolean) : void
            public static GetShowKinematicBodies () : boolean
            /** Should the kinematic Rigidbodies be considered by the display filter.
            */
            public static SetShowKinematicBodies ($show: boolean) : void
            public static GetShowSleepingBodies () : boolean
            /** Should the sleeping Rigidbodies be considered by the display filter.
            */
            public static SetShowSleepingBodies ($show: boolean) : void
            /** Should the given layer be considered by the display filter.
            */
            public static GetShowCollisionLayer ($layer: number) : boolean
            /** Should the given layer be considered by the display filter.
            */
            public static SetShowCollisionLayer ($layer: number, $show: boolean) : void
            public static GetShowCollisionLayerMask () : number
            /** Should the mask representing the layers be considered by the display filter.
            */
            public static SetShowCollisionLayerMask ($mask: number) : void
            public static GetShowBoxColliders () : boolean
            /** Should BoxColliders be shown.
            */
            public static SetShowBoxColliders ($show: boolean) : void
            public static GetShowSphereColliders () : boolean
            /** Should SphereColliders be shown.
            */
            public static SetShowSphereColliders ($show: boolean) : void
            public static GetShowCapsuleColliders () : boolean
            /** Should CapsuleColliders be shown.
            */
            public static SetShowCapsuleColliders ($show: boolean) : void
            public static GetShowMeshColliders ($colliderType: UnityEditor.PhysicsVisualizationSettings.MeshColliderType) : boolean
            public static SetShowMeshColliders ($colliderType: UnityEditor.PhysicsVisualizationSettings.MeshColliderType, $show: boolean) : void
            public static GetShowTerrainColliders () : boolean
            /** Should TerrainColliders be shown.
            */
            public static SetShowTerrainColliders ($show: boolean) : void
            public static GetShowPhysicsSceneMask () : number
            /** Should the scene mask be considered by the display filter.
            */
            public static SetShowPhysicsSceneMask ($mask: number) : void
            public static InitDebugDraw () : void
            public static DeinitDebugDraw () : void
            public static ClearMouseHighlight () : void
            public static HasMouseHighlight () : boolean
            /** Updates the mouse-over highlight at the given mouse position in screen space.
            */
            public static UpdateMouseHighlight ($screenPos: UnityEngine.Vector2) : void
            public static PickClosestGameObject ($cam: UnityEngine.Camera, $layers: number, $position: UnityEngine.Vector2, $ignore: System.Array$1<UnityEngine.GameObject>, $filter: System.Array$1<UnityEngine.GameObject>, $materialIndex: $Ref<number>) : UnityEngine.GameObject
            /** Enables or disables all filtering items.
            */
            public static SetShowForAllFilters ($selected: boolean) : void
        }
        class NetworkDetailStats extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static NewProfilerTick ($newTime: number) : void
            public static SetStat ($direction: UnityEditor.NetworkDetailStats.NetworkDirection, $msgId: number, $entryName: string, $amount: number) : void
            public static IncrementStat ($direction: UnityEditor.NetworkDetailStats.NetworkDirection, $msgId: number, $entryName: string, $amount: number) : void
            public static ResetAll () : void
            public constructor ()
        }
        /** The default Inspector class for Terrain Layer.
        */
        class TerrainLayerInspector extends UnityEditor.Editor implements UnityEditor.IPreviewable, UnityEditor.IToolModeOwner
        {
            protected [__keep_incompatibility]: never;
            /** Applies the custom UI for the Terrain Layer object.
            * @param customUI The custom UI object.
            * @param terrain The Terrain object.
            */
            public ApplyCustomUI ($customUI: UnityEditor.ITerrainLayerCustomUI, $terrain: UnityEngine.Terrain) : void
            public constructor ()
        }
        interface ITerrainLayerCustomUI
        {
            /** Draws the custom GUI for the terrain layer.
            * @param terrainLayer The TerrainLayer object.
            * @param terrain The Terrain object on which the TerrainLayer object, specified by the terrainLayer parameter, is selected.
            * @returns Return false to have Unity draw the default TerrainLayer inspector. Otherwise draw the custom GUI and return true. 
            */
            OnTerrainLayerGUI ($terrainLayer: UnityEngine.TerrainLayer, $terrain: UnityEngine.Terrain) : boolean
        }
        /** A set of helper functions for using terrain layers.
        */
        class TerrainLayerUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Helper function to show the layer selection window for selecting terrain layers in inspector.
            * @param terrain Terrain tile.
            * @param activeTerrainLayer Currently selected terrain layer index.
            * @returns Newly selected terrain layer index. 
            */
            public static ShowTerrainLayersSelectionHelper ($terrain: UnityEngine.Terrain, $activeTerrainLayer: number) : number
            /** This helper function shows the Terrain Layer Inspector GUI nested inside the current Inspector GUI.
            * @param terrain The Terrain from which the Terrain Layer originates.
            * @param terrainLayer The Terrain Layer object to show the Inspector for.
            * @param terrainLayerEditor Reference to a variable of type Editor in which Unity caches the Terrain Layer Inspector object.
            * @param customGUI The custom Terrain Layer GUI object.
            */
            public static ShowTerrainLayerGUI ($terrain: UnityEngine.Terrain, $terrainLayer: UnityEngine.TerrainLayer, $terrainLayerEditor: $Ref<UnityEditor.Editor>, $customGUI: UnityEditor.ITerrainLayerCustomUI) : void
            /** Checks whether the texture is a valid TerrainLayer diffuse texture. If it detects that the texture is not valid, it displays a warning message that identifies the issue.
            * @param texture The texture to validate.
            */
            public static ValidateDiffuseTextureUI ($texture: UnityEngine.Texture2D) : void
            /** Checks whether the texture is correctly imported as a normal map texture.
            * @param texture The texture to check.
            * @returns True if texture is correctly imported, otherwise false. 
            */
            public static CheckNormalMapTextureType ($texture: UnityEngine.Texture2D) : boolean
            /** Checks whether the texture is a valid TerrainLayer normal map texture. If it detects that the texture is not valid, it displays a warning message that identifies the issue.
            * @param texture The texture to validate.
            * @param normalMapTextureType The return value from the CheckNormalMapTextureType method indicating whether the texture is imported as a normal map.
            */
            public static ValidateNormalMapTextureUI ($texture: UnityEngine.Texture2D, $normalMapTextureType: boolean) : void
            /** Checks whether the texture is a valid TerrainLayer mask map texture. If it detects that the texture is not valid, it displays a warning message that identifies the issue.
            * @param texture The texture to validate.
            */
            public static ValidateMaskMapTextureUI ($texture: UnityEngine.Texture2D) : void
            /** Displays the tiling settings UI.
            * @param terrainLayer The terrain layer that contains the tiling settings to display.
            * @param tileSize The tile size property to display.
            * @param tileOffset The tile offset property to display.
            */
            public static TilingSettingsUI ($terrainLayer: UnityEngine.TerrainLayer) : void
            /** Displays the tiling settings UI.
            * @param terrainLayer The terrain layer that contains the tiling settings to display.
            * @param tileSize The tile size property to display.
            * @param tileOffset The tile offset property to display.
            */
            public static TilingSettingsUI ($tileSize: UnityEditor.SerializedProperty, $tileOffset: UnityEditor.SerializedProperty) : void
        }
        /** Texture case constants for TrueTypeFontImporter.
        */
        enum FontTextureCase
        { Dynamic = -2, Unicode = -1, ASCII = 0, ASCIIUpperCase = 1, ASCIILowerCase = 2, CustomSet = 3 }
        /** Font rendering mode constants for TrueTypeFontImporter.
        */
        enum FontRenderingMode
        { Smooth = 0, HintedSmooth = 1, HintedRaster = 2, OSDefault = 3 }
        /** Method used for calculating a font's ascent.
        */
        enum AscentCalculationMode
        { Legacy2x = 0, FaceAscender = 1, FaceBoundingBox = 2 }
        /** AssetImporter for importing Fonts.
        */
        class TrueTypeFontImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Font size to use for importing the characters.
            */
            public get fontSize(): number;
            public set fontSize(value: number);
            /** If this is enabled, the actual font will be embedded into the asset for Dynamic fonts.
            */
            public get includeFontData(): boolean;
            public set includeFontData(value: boolean);
            /** Calculation mode for determining font's ascent.
            */
            public get ascentCalculationMode(): UnityEditor.AscentCalculationMode;
            public set ascentCalculationMode(value: UnityEditor.AscentCalculationMode);
            /** A custom set of characters to be included in the Font Texture.
            */
            public get customCharacters(): string;
            public set customCharacters(value: string);
            /** Spacing between character images in the generated texture in pixels. This is useful if you want to render text using a shader which samples pixels outside of the character area (like an outline shader).
            */
            public get characterSpacing(): number;
            public set characterSpacing(value: number);
            /** Border pixels added to character images for padding. This is useful if you want to render text using a shader which needs to render outside of the character area (like an outline shader).
            */
            public get characterPadding(): number;
            public set characterPadding(value: number);
            /** Font rendering mode to use for this font.
            */
            public get fontRenderingMode(): UnityEditor.FontRenderingMode;
            public set fontRenderingMode(value: UnityEditor.FontRenderingMode);
            /** Set this property to true if you want to round the internal advance width of the font to the nearest integer.
            */
            public get shouldRoundAdvanceValue(): boolean;
            public set shouldRoundAdvanceValue(value: boolean);
            /** The internal font name of the TTF file.
            */
            public get fontTTFName(): string;
            /** Use this to adjust which characters should be imported.
            */
            public get fontTextureCase(): UnityEditor.FontTextureCase;
            public set fontTextureCase(value: UnityEditor.FontTextureCase);
            /** References to other fonts to be used looking for fallbacks.
            */
            public get fontReferences(): System.Array$1<UnityEngine.Font>;
            public set fontReferences(value: System.Array$1<UnityEngine.Font>);
            /** An array of font names, to be used when includeFontData is set to false.
            */
            public get fontNames(): System.Array$1<string>;
            public set fontNames(value: System.Array$1<string>);
            /** Create an editable copy of the font asset at path.
            */
            public GenerateEditableFont ($path: string) : UnityEngine.Font
            public constructor ()
        }
        /** GridPalette stores settings for Palette assets when shown in the Palette window.
        */
        class GridPalette extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** Determines the sizing of cells for a Palette.
            */
            public cellSizing : UnityEditor.GridPalette.CellSizing
            public constructor ()
        }
        /** Editor API for the EditorAnalytics feature.
        */
        class EditorAnalytics extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns true when EditorAnalytics is enabled.
            */
            public static get enabled(): boolean;
            /** This API is used for registering an Editor Analytics event. Note: This API is for internal use only and is likely change in the future. Do not use in user code.
            * @param eventName Name of the event.
            * @param ver Event version number.
            * @param maxEventPerHour Hourly limit for this event name.
            * @param maxItems Maximum number of items in this event.
            * @param vendorKey Vendor key name.
            */
            public static RegisterEventWithLimit ($eventName: string, $maxEventPerHour: number, $maxItems: number, $vendorKey: string) : UnityEngine.Analytics.AnalyticsResult
            /** This API is used for registering an Editor Analytics event. Note: This API is for internal use only and is likely change in the future. Do not use in user code.
            * @param eventName Name of the event.
            * @param ver Event version number.
            * @param maxEventPerHour Hourly limit for this event name.
            * @param maxItems Maximum number of items in this event.
            * @param vendorKey Vendor key name.
            */
            public static RegisterEventWithLimit ($eventName: string, $maxEventPerHour: number, $maxItems: number, $vendorKey: string, $ver: number) : UnityEngine.Analytics.AnalyticsResult
            /** This API is used to send an Editor Analytics event. Note: This API is for internal use only and is likely change in the future. Do not use in user code.
            * @param eventName Name of the event.
            * @param parameters Additional event data.
            * @param ver Event version number.
            */
            public static SendEventWithLimit ($eventName: string, $parameters: any) : UnityEngine.Analytics.AnalyticsResult
            /** This API is used to send an Editor Analytics event. Note: This API is for internal use only and is likely change in the future. Do not use in user code.
            * @param eventName Name of the event.
            * @param parameters Additional event data.
            * @param ver Event version number.
            */
            public static SendEventWithLimit ($eventName: string, $parameters: any, $ver: number) : UnityEngine.Analytics.AnalyticsResult
            /** Use this API to set the event end point URL. Note: This API is for internal use only and is likely change in the future. Do not use in user code.
            * @param eventName Name of the event.
            * @param ver Event version number.
            * @param endPoint Event end point URL.
            */
            public static SetEventWithLimitEndPoint ($eventName: string, $endPoint: string, $ver: number) : UnityEngine.Analytics.AnalyticsResult
            /** Use the API to set the event property. Note: This API is for internal use only and is likely change in the future. Do not use in user code.
            * @param eventName Name of the event.
            * @param ver Event version number.
            * @param eventPriority Event priority.
            */
            public static SetEventWithLimitPriority ($eventName: string, $eventPriority: UnityEngine.Analytics.AnalyticsEventPriority, $ver: number) : UnityEngine.Analytics.AnalyticsResult
        }
        /** Provides access to Editor Analytics session information.
        */
        class EditorAnalyticsSessionInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A random, unique GUID identifying the current Editor session.
            */
            public static get id(): bigint;
            /** The number of Editor sessions that have occurred since the current instance of the Unity Editor was installed.
            */
            public static get sessionCount(): bigint;
            /** The length of the current session, in milliseconds.
            */
            public static get elapsedTime(): bigint;
            /** The total time, in milliseconds, that the Editor has been in focus during the current session.
            */
            public static get focusedElapsedTime(): bigint;
            /** The total time, in milliseconds, that the Editor has been in playmode during the current session.
            */
            public static get playbackElapsedTime(): bigint;
            /** The total time, in milliseconds, that the user interacted with the Editor since the beginning of the current session.
            */
            public static get activeElapsedTime(): bigint;
            /** A random GUID uniquely identifying an Editor installation.
            */
            public static get userId(): string;
        }
        enum HierarchyType
        { Assets = 1, GameObjects = 2 }
        enum IconDrawStyle
        { NonTexture = 0, Texture = 1 }
        class HierarchyProperty extends System.Object implements UnityEditor.IHierarchyProperty
        {
            protected [__keep_incompatibility]: never;
            public get instanceID(): number;
            public get pptrValue(): UnityEngine.Object;
            public get name(): string;
            public get hasChildren(): boolean;
            public get depth(): number;
            public get ancestors(): System.Array$1<number>;
            public get row(): number;
            public get colorCode(): number;
            public get guid(): string;
            public get alphaSorted(): boolean;
            public set alphaSorted(value: boolean);
            public get showSceneHeaders(): boolean;
            public set showSceneHeaders(value: boolean);
            public get isValid(): boolean;
            public get isMainRepresentation(): boolean;
            public get hasFullPreviewImage(): boolean;
            public get iconDrawStyle(): UnityEditor.IconDrawStyle;
            public get isFolder(): boolean;
            public get dynamicDependencies(): System.Array$1<UnityEditor.GUID>;
            public get icon(): UnityEngine.Texture2D;
            public SetCustomScenes ($sceneHandles: System.Array$1<number>) : void
            public SetSubScenes ($subScenes: System.Array$1<UnityEditor.SceneManagement.SceneHierarchyHooks.SubSceneInfo>) : void
            public Reset () : void
            public GetScene () : UnityEngine.SceneManagement.Scene
            public IsExpanded ($expanded: System.Array$1<number>) : boolean
            public Next ($expanded: System.Array$1<number>) : boolean
            public NextWithDepthCheck ($expanded: System.Array$1<number>, $minDepth: number) : boolean
            public Previous ($expanded: System.Array$1<number>) : boolean
            public Parent () : boolean
            public Find ($instanceID: number, $expanded: System.Array$1<number>) : boolean
            public Skip ($count: number, $expanded: System.Array$1<number>) : boolean
            public CountRemaining ($expanded: System.Array$1<number>) : number
            public GetInstanceIDIfImported () : number
            public SetSearchFilter ($searchString: string, $mode: number) : void
            public FindAllAncestors ($instanceIDs: System.Array$1<number>) : System.Array$1<number>
            public static ClearSceneObjectsFilter () : void
            public static FilterSingleSceneObject ($instanceID: number, $otherVisibilityState: boolean) : void
            public constructor ($hierarchyType: UnityEditor.HierarchyType)
            public constructor ($hierarchyType: UnityEditor.HierarchyType, $forceImport: boolean)
            public constructor ($rootPath: string)
            public constructor ($rootPath: string, $forceImport: boolean)
            public constructor ($hierarchyType: UnityEditor.HierarchyType, $rootPath: string, $forceImport: boolean)
            public constructor ()
        }
        interface IHierarchyProperty
        {
        }
        /** LOD Utility Helpers.
        */
        class LODUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Recalculate the bounding region for the given LODGroup.
            */
            public static CalculateLODGroupBoundingBox ($group: UnityEngine.LODGroup) : void
            public constructor ()
        }
        class UnityStats extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get batches(): number;
            public static get drawCalls(): number;
            public static get dynamicBatchedDrawCalls(): number;
            public static get staticBatchedDrawCalls(): number;
            public static get instancedBatchedDrawCalls(): number;
            public static get dynamicBatches(): number;
            public static get staticBatches(): number;
            public static get instancedBatches(): number;
            public static get setPassCalls(): number;
            public static get triangles(): number;
            public static get vertices(): number;
            public static get shadowCasters(): number;
            public static get renderTextureChanges(): number;
            public static get frameTime(): number;
            public static get renderTime(): number;
            public static get audioLevel(): number;
            public static get audioClippingAmount(): number;
            public static get audioDSPLoad(): number;
            public static get audioStreamLoad(): number;
            public static get renderTextureCount(): number;
            public static get renderTextureBytes(): number;
            public static get usedTextureMemorySize(): number;
            public static get usedTextureCount(): number;
            public static get screenRes(): string;
            public static get screenBytes(): number;
            public static get vboTotal(): number;
            public static get vboTotalBytes(): number;
            public static get vboUploads(): number;
            public static get vboUploadBytes(): number;
            public static get ibUploads(): number;
            public static get ibUploadBytes(): number;
            public static get visibleSkinnedMeshes(): number;
            public static get visibleAnimations(): number;
            public constructor ()
        }
    }
    namespace UnityEditor.AssemblyReloadEvents {
        interface AssemblyReloadCallback
        { 
        () : void; 
        Invoke?: () => void;
        }
        var AssemblyReloadCallback: { new (func: () => void): AssemblyReloadCallback; }
    }
    namespace UnityEditor.Experimental.AssetImporters {
        /** Defines the import context for scripted importers during an import event.
        */
        class AssetImportContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.Build.Reporting {
        /** The BuildReport API gives you information about the Unity build process.
        */
        class BuildReport extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.EditorApplication {
        interface ProjectWindowItemCallback
        { 
        (guid: string, selectionRect: UnityEngine.Rect) : void; 
        Invoke?: (guid: string, selectionRect: UnityEngine.Rect) => void;
        }
        var ProjectWindowItemCallback: { new (func: (guid: string, selectionRect: UnityEngine.Rect) => void): ProjectWindowItemCallback; }
        interface HierarchyWindowItemCallback
        { 
        (instanceID: number, selectionRect: UnityEngine.Rect) : void; 
        Invoke?: (instanceID: number, selectionRect: UnityEngine.Rect) => void;
        }
        var HierarchyWindowItemCallback: { new (func: (instanceID: number, selectionRect: UnityEngine.Rect) => void): HierarchyWindowItemCallback; }
        interface CallbackFunction
        { 
        () : void; 
        Invoke?: () => void;
        }
        var CallbackFunction: { new (func: () => void): CallbackFunction; }
        interface SerializedPropertyCallbackFunction
        { 
        (menu: UnityEditor.GenericMenu, property: UnityEditor.SerializedProperty) : void; 
        Invoke?: (menu: UnityEditor.GenericMenu, property: UnityEditor.SerializedProperty) => void;
        }
        var SerializedPropertyCallbackFunction: { new (func: (menu: UnityEditor.GenericMenu, property: UnityEditor.SerializedProperty) => void): SerializedPropertyCallbackFunction; }
    }
    namespace UnityEditor.EditorTools {
        /** Use this class to implement custom editor tools. This is the base class from which all editor tools are inherited.
        */
        class EditorTool extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.EditorUtility {
        interface SelectMenuItemFunction
        { 
        (userData: any, options: System.Array$1<string>, selected: number) : void; 
        Invoke?: (userData: any, options: System.Array$1<string>, selected: number) => void;
        }
        var SelectMenuItemFunction: { new (func: (userData: any, options: System.Array$1<string>, selected: number) => void): SelectMenuItemFunction; }
    }
    namespace UnityEngine.UIElements {
        /** Interface for classes capable of having callbacks to handle events.
        */
        class CallbackEventHandler extends System.Object implements UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
        }
        interface IEventHandler
        {
        }
        /** Base class for objects that can get the focus.
        */
        class Focusable extends UnityEngine.UIElements.CallbackEventHandler implements UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
        }
        /** Base class for objects that are part of the UIElements visual tree.
        */
        class VisualElement extends UnityEngine.UIElements.Focusable implements UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle
        {
            protected [__keep_incompatibility]: never;
        }
        interface IExperimentalFeatures
        {
        }
        interface IVisualElementScheduler
        {
        }
        interface ITransform
        {
        }
        interface IResolvedStyle
        {
        }
    }
    namespace UnityEngine.UIElements.Experimental {
        interface ITransitionAnimations
        {
        }
    }
    namespace UnityEditor.Handles {
        interface CapFunction
        { 
        (controlID: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, size: number, eventType: UnityEngine.EventType) : void; 
        Invoke?: (controlID: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, size: number, eventType: UnityEngine.EventType) => void;
        }
        var CapFunction: { new (func: (controlID: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, size: number, eventType: UnityEngine.EventType) => void): CapFunction; }
        interface DrawCapFunction
        { 
        (controlID: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, size: number) : void; 
        Invoke?: (controlID: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, size: number) => void;
        }
        var DrawCapFunction: { new (func: (controlID: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, size: number) => void): DrawCapFunction; }
    }
    namespace UnityEditor.MaterialProperty {
        enum PropType
        { Color = 0, Vector = 1, Float = 2, Range = 3, Texture = 4 }
        enum PropFlags
        { None = 0, HideInInspector = 1, PerRendererData = 2, NoScaleOffset = 4, Normal = 8, HDR = 16, Gamma = 32, NonModifiableTextureData = 64 }
        interface ApplyPropertyCallback
        { 
        (prop: UnityEditor.MaterialProperty, changeMask: number, previousValue: any) : boolean; 
        Invoke?: (prop: UnityEditor.MaterialProperty, changeMask: number, previousValue: any) => boolean;
        }
        var ApplyPropertyCallback: { new (func: (prop: UnityEditor.MaterialProperty, changeMask: number, previousValue: any) => boolean): ApplyPropertyCallback; }
    }
    namespace UnityEditor.Rendering {
        /** Shader compiler used to generate player data shader variants.
        */
        enum ShaderCompilerPlatform
        { None = 0, D3D = 4, GLES20 = 5, GLES3x = 9, PS4 = 11, XboxOneD3D11 = 12, Metal = 14, OpenGLCore = 15, Vulkan = 18, Switch = 19, XboxOneD3D12 = 20 }
        /** Indicates the severity of a message returned by the Unity Shader Compiler.
        */
        enum ShaderCompilerMessageSeverity
        { Error = 0, Warning = 1 }
        /** Use this attribute to apply a condition to a filter that finds the class based on which ScriptableRenderPipeline you are currently using.
        */
        class ScriptableRenderPipelineExtensionAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.ShaderUtil {
        enum ShaderPropertyType
        { Color = 0, Vector = 1, Float = 2, Range = 3, TexEnv = 4 }
        enum ShaderPropertyTexDim
        { TexDimNone = 0, TexDim2D = 2, TexDim3D = 3, TexDimCUBE = 4, TexDimAny = 6 }
    }
    namespace UnityEditor.ShaderData {
        class Subshader extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.TypeCache {
        class TypeCollection extends System.ValueType implements System.Collections.IEnumerable, System.Collections.Generic.IList$1<System.Type>, System.Collections.IList, System.Collections.Generic.ICollection$1<System.Type>, System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<System.Type>
        {
            protected [__keep_incompatibility]: never;
        }
        class MethodCollection extends System.ValueType implements System.Collections.IEnumerable, System.Collections.Generic.IList$1<System.Reflection.MethodInfo>, System.Collections.IList, System.Collections.Generic.ICollection$1<System.Reflection.MethodInfo>, System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<System.Reflection.MethodInfo>
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.Undo {
        interface UndoRedoCallback
        { 
        () : void; 
        Invoke?: () => void;
        }
        var UndoRedoCallback: { new (func: () => void): UndoRedoCallback; }
        interface WillFlushUndoRecord
        { 
        () : void; 
        Invoke?: () => void;
        }
        var WillFlushUndoRecord: { new (func: () => void): WillFlushUndoRecord; }
        interface PostprocessModifications
        { 
        (modifications: System.Array$1<UnityEditor.UndoPropertyModification>) : System.Array$1<UnityEditor.UndoPropertyModification>; 
        Invoke?: (modifications: System.Array$1<UnityEditor.UndoPropertyModification>) => System.Array$1<UnityEditor.UndoPropertyModification>;
        }
        var PostprocessModifications: { new (func: (modifications: System.Array$1<UnityEditor.UndoPropertyModification>) => System.Array$1<UnityEditor.UndoPropertyModification>): PostprocessModifications; }
    }
    namespace UnityEditor.Animations {
        /** The Animator Controller controls animation through layers with state machines, controlled by parameters.
        */
        class AnimatorController extends UnityEngine.RuntimeAnimatorController
        {
            protected [__keep_incompatibility]: never;
        }
        /** A graph controlling the interaction of states. Each state references a motion.
        */
        class AnimatorStateMachine extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.AnimationUtility {
        interface OnCurveWasModified
        { 
        (clip: UnityEngine.AnimationClip, binding: UnityEditor.EditorCurveBinding, type: UnityEditor.AnimationUtility.CurveModifiedType) : void; 
        Invoke?: (clip: UnityEngine.AnimationClip, binding: UnityEditor.EditorCurveBinding, type: UnityEditor.AnimationUtility.CurveModifiedType) => void;
        }
        var OnCurveWasModified: { new (func: (clip: UnityEngine.AnimationClip, binding: UnityEditor.EditorCurveBinding, type: UnityEditor.AnimationUtility.CurveModifiedType) => void): OnCurveWasModified; }
        enum CurveModifiedType
        { CurveDeleted = 0, CurveModified = 1, ClipModified = 2 }
        enum TangentMode
        { Free = 0, Auto = 1, Linear = 2, Constant = 3, ClampedAuto = 4 }
    }
    namespace UnityEditor.AssetDatabase {
        interface ImportPackageCallback
        { 
        (packageName: string) : void; 
        Invoke?: (packageName: string) => void;
        }
        var ImportPackageCallback: { new (func: (packageName: string) => void): ImportPackageCallback; }
        interface ImportPackageFailedCallback
        { 
        (packageName: string, errorMessage: string) : void; 
        Invoke?: (packageName: string, errorMessage: string) => void;
        }
        var ImportPackageFailedCallback: { new (func: (packageName: string, errorMessage: string) => void): ImportPackageFailedCallback; }
    }
    namespace UnityEditor.AssetImporter {
        class SourceAssetIdentifier extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.SpeedTreeImporter {
        enum MaterialLocation
        { External = 0, InPrefab = 1 }
    }
    namespace UnityEditor.AudioCurveRendering {
        interface AudioCurveEvaluator
        { 
        (x: number) : number; 
        Invoke?: (x: number) => number;
        }
        var AudioCurveEvaluator: { new (func: (x: number) => number): AudioCurveEvaluator; }
        interface AudioCurveAndColorEvaluator
        { 
        (x: number, col: $Ref<UnityEngine.Color>) : number; 
        Invoke?: (x: number, col: $Ref<UnityEngine.Color>) => number;
        }
        var AudioCurveAndColorEvaluator: { new (func: (x: number, col: $Ref<UnityEngine.Color>) => number): AudioCurveAndColorEvaluator; }
        interface AudioMinMaxCurveAndColorEvaluator
        { 
        (x: number, col: $Ref<UnityEngine.Color>, minValue: $Ref<number>, maxValue: $Ref<number>) : void; 
        Invoke?: (x: number, col: $Ref<UnityEngine.Color>, minValue: $Ref<number>, maxValue: $Ref<number>) => void;
        }
        var AudioMinMaxCurveAndColorEvaluator: { new (func: (x: number, col: $Ref<UnityEngine.Color>, minValue: $Ref<number>, maxValue: $Ref<number>) => void): AudioMinMaxCurveAndColorEvaluator; }
    }
    namespace UnityEditor.ModeService {
        class ModeChangedArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.LightmapEditorSettings {
        enum Lightmapper
        { Radiosity = 0, Enlighten = 0, PathTracer = 1, ProgressiveCPU = 1, ProgressiveGPU = 2 }
        enum Sampling
        { Auto = 0, Fixed = 1 }
        enum FilterMode
        { None = 0, Auto = 1, Advanced = 2 }
        enum DenoiserType
        { None = 0, Optix = 1, OpenImage = 2, RadeonPro = 3 }
        enum FilterType
        { Gaussian = 0, ATrous = 1, None = 2 }
        enum GIBakeBackend
        { Radiosity = 0, PathTracer = 1 }
        enum PathTracerSampling
        { Auto = 0, Fixed = 1 }
        enum PathTracerFilter
        { Gaussian = 0, ATrous = 1 }
    }
    namespace UnityEditor.Lightmapping {
        interface OnCompletedFunction
        { 
        () : void; 
        Invoke?: () => void;
        }
        var OnCompletedFunction: { new (func: () => void): OnCompletedFunction; }
        enum GIWorkflowMode
        { Iterative = 0, OnDemand = 1, Legacy = 2 }
        interface OnStartedFunction
        { 
        () : void; 
        Invoke?: () => void;
        }
        var OnStartedFunction: { new (func: () => void): OnStartedFunction; }
    }
    namespace UnityEditor.GenericMenu {
        interface MenuFunction
        { 
        () : void; 
        Invoke?: () => void;
        }
        var MenuFunction: { new (func: () => void): MenuFunction; }
        interface MenuFunction2
        { 
        (userData: any) : void; 
        Invoke?: (userData: any) => void;
        }
        var MenuFunction2: { new (func: (userData: any) => void): MenuFunction2; }
    }
    namespace UnityEditor.PrefabUtility {
        interface PrefabInstanceUpdated
        { 
        (instance: UnityEngine.GameObject) : void; 
        Invoke?: (instance: UnityEngine.GameObject) => void;
        }
        var PrefabInstanceUpdated: { new (func: (instance: UnityEngine.GameObject) => void): PrefabInstanceUpdated; }
    }
    namespace UnityEditor.SceneManagement {
        /** Class with information about a given override on a Prefab instance.
        */
        class PrefabOverride extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Class with information about an object on a Prefab instance with overridden properties.
        */
        class ObjectOverride extends UnityEditor.SceneManagement.PrefabOverride
        {
            protected [__keep_incompatibility]: never;
        }
        /** Class with information about a component that has been added to a Prefab instance.
        */
        class AddedComponent extends UnityEditor.SceneManagement.PrefabOverride
        {
            protected [__keep_incompatibility]: never;
        }
        /** Class with information about a component that has been removed from a Prefab instance.
        */
        class RemovedComponent extends UnityEditor.SceneManagement.PrefabOverride
        {
            protected [__keep_incompatibility]: never;
        }
        /** Class with information about a GameObject that has been added as a child under a Prefab instance.
        */
        class AddedGameObject extends UnityEditor.SceneManagement.PrefabOverride
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.ProjectWindowCallback {
        class EndNameEditAction extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.LightingExplorerTableColumn {
        enum DataType
        { Name = 0, Checkbox = 1, Enum = 2, Int = 3, Float = 4, Color = 5, Custom = 20 }
        interface OnGUIDelegate
        { 
        (r: UnityEngine.Rect, prop: UnityEditor.SerializedProperty, dependencies: System.Array$1<UnityEditor.SerializedProperty>) : void; 
        Invoke?: (r: UnityEngine.Rect, prop: UnityEditor.SerializedProperty, dependencies: System.Array$1<UnityEditor.SerializedProperty>) => void;
        }
        var OnGUIDelegate: { new (func: (r: UnityEngine.Rect, prop: UnityEditor.SerializedProperty, dependencies: System.Array$1<UnityEditor.SerializedProperty>) => void): OnGUIDelegate; }
        interface ComparePropertiesDelegate
        { 
        (lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) : number; 
        Invoke?: (lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) => number;
        }
        var ComparePropertiesDelegate: { new (func: (lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) => number): ComparePropertiesDelegate; }
        interface CopyPropertiesDelegate
        { 
        (target: UnityEditor.SerializedProperty, source: UnityEditor.SerializedProperty) : void; 
        Invoke?: (target: UnityEditor.SerializedProperty, source: UnityEditor.SerializedProperty) => void;
        }
        var CopyPropertiesDelegate: { new (func: (target: UnityEditor.SerializedProperty, source: UnityEditor.SerializedProperty) => void): CopyPropertiesDelegate; }
    }
    namespace UnityEditor.SceneView {
        interface OnSceneFunc
        { 
        (sceneView: UnityEditor.SceneView) : void; 
        Invoke?: (sceneView: UnityEditor.SceneView) => void;
        }
        var OnSceneFunc: { new (func: (sceneView: UnityEditor.SceneView) => void): OnSceneFunc; }
        class CameraMode extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class SceneViewState extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class CameraSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.PluginImporter {
        interface IncludeInBuildDelegate
        { 
        (path: string) : boolean; 
        Invoke?: (path: string) => boolean;
        }
        var IncludeInBuildDelegate: { new (func: (path: string) => boolean): IncludeInBuildDelegate; }
    }
    namespace UnityEditor.PhysicsVisualizationSettings {
        enum FilterWorkflow
        { HideSelectedItems = 0, ShowSelectedItems = 1 }
        enum MeshColliderType
        { Convex = 0, NonConvex = 1 }
    }
    namespace UnityEditor.NetworkDetailStats {
        enum NetworkDirection
        { Incoming = 0, Outgoing = 1 }
    }
    namespace UnityEditor.GridPalette {
        enum CellSizing
        { Automatic = 0, Manual = 100 }
    }
    namespace UnityEngine.Analytics {
        /** Analytics API result.
        */
        enum AnalyticsResult
        { Ok = 0, NotInitialized = 1, AnalyticsDisabled = 2, TooManyItems = 3, SizeLimitReached = 4, TooManyRequests = 5, InvalidData = 6, UnsupportedPlatform = 7 }
        /** Analytics event priority.
        */
        enum AnalyticsEventPriority
        { FlushQueueFlag = 1, CacheImmediatelyFlag = 2, AllowInStopModeFlag = 4, SendImmediateFlag = 8, NormalPriorityEvent = 0, NormalPriorityEvent_WithCaching = 2, HighPriorityEvent = 1, HighPriorityEvent_InStopMode = 5, HighestPriorityEvent = 9 }
    }
    namespace UnityEditor.SceneManagement.SceneHierarchyHooks {
        class SubSceneInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.ComponentModel {
        class TypeConverter extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        interface ITypeDescriptorContext extends System.IServiceProvider
        {
            GetService ($serviceType: System.Type) : any
        }
        class Component extends System.MarshalByRefObject implements System.ComponentModel.IComponent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
        }
        interface IComponent extends System.IDisposable
        {
            Dispose () : void
        }
        interface ISupportInitialize
        {
        }
        interface ISite extends System.IServiceProvider
        {
            GetService ($serviceType: System.Type) : any
        }
        interface ISynchronizeInvoke
        {
        }
        class DescriptionAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
        class Win32Exception extends System.Runtime.InteropServices.ExternalException implements System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
        }
        class AsyncCompletedEventArgs extends System.EventArgs
        {
            protected [__keep_incompatibility]: never;
        }
        interface AsyncCompletedEventHandler
        { 
        (sender: any, e: System.ComponentModel.AsyncCompletedEventArgs) : void; 
        Invoke?: (sender: any, e: System.ComponentModel.AsyncCompletedEventArgs) => void;
        }
        var AsyncCompletedEventHandler: { new (func: (sender: any, e: System.ComponentModel.AsyncCompletedEventArgs) => void): AsyncCompletedEventHandler; }
        class ProgressChangedEventArgs extends System.EventArgs
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Net.Sockets {
        enum AddressFamily
        { Unknown = -1, Unspecified = 0, Unix = 1, InterNetwork = 2, ImpLink = 3, Pup = 4, Chaos = 5, NS = 6, Ipx = 6, Iso = 7, Osi = 7, Ecma = 8, DataKit = 9, Ccitt = 10, Sna = 11, DecNet = 12, DataLink = 13, Lat = 14, HyperChannel = 15, AppleTalk = 16, NetBios = 17, VoiceView = 18, FireFox = 19, Banyan = 21, Atm = 22, InterNetworkV6 = 23, Cluster = 24, Ieee12844 = 25, Irda = 26, NetworkDesigners = 28, Max = 29 }
    }
    namespace System.Collections.Specialized {
        class NameObjectCollectionBase extends System.Object implements System.Collections.IEnumerable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
        }
        class NameValueCollection extends System.Collections.Specialized.NameObjectCollectionBase implements System.Collections.IEnumerable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
        }
        class StringDictionary extends System.Object implements System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Security.Authentication.ExtendedProtection {
        class ChannelBinding extends Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        enum ChannelBindingKind
        { Unknown = 0, Unique = 25, Endpoint = 26 }
        class TokenBinding extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class ExtendedProtectionPolicy extends System.Object implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
        }
        class ServiceNameCollection extends System.Collections.ReadOnlyCollectionBase implements System.Collections.IEnumerable, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Collections.Specialized.NameObjectCollectionBase {
        class KeysCollection extends System.Object implements System.Collections.IEnumerable, System.Collections.ICollection
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Security.Permissions {
        class SecurityAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
        class CodeAccessSecurityAttribute extends System.Security.Permissions.SecurityAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
        enum SecurityAction
        { Demand = 2, Assert = 3, Deny = 4, PermitOnly = 5, LinkDemand = 6, InheritanceDemand = 7, RequestMinimum = 8, RequestOptional = 9, RequestRefuse = 10 }
        interface IUnrestrictedPermission
        {
        }
        enum PermissionState
        { Unrestricted = 1, None = 0 }
    }
    namespace System.Text.RegularExpressions {
        class Regex extends System.Object implements System.Runtime.Serialization.ISerializable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Net.Cache {
        class RequestCachePolicy extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Net.Security {
        enum AuthenticationLevel
        { None = 0, MutualAuthRequested = 1, MutualAuthRequired = 2 }
        interface RemoteCertificateValidationCallback
        { 
        (sender: any, certificate: System.Security.Cryptography.X509Certificates.X509Certificate, chain: System.Security.Cryptography.X509Certificates.X509Chain, sslPolicyErrors: System.Net.Security.SslPolicyErrors) : boolean; 
        Invoke?: (sender: any, certificate: System.Security.Cryptography.X509Certificates.X509Certificate, chain: System.Security.Cryptography.X509Certificates.X509Chain, sslPolicyErrors: System.Net.Security.SslPolicyErrors) => boolean;
        }
        var RemoteCertificateValidationCallback: { new (func: (sender: any, certificate: System.Security.Cryptography.X509Certificates.X509Certificate, chain: System.Security.Cryptography.X509Certificates.X509Chain, sslPolicyErrors: System.Net.Security.SslPolicyErrors) => boolean): RemoteCertificateValidationCallback; }
        enum SslPolicyErrors
        { None = 0, RemoteCertificateNotAvailable = 1, RemoteCertificateNameMismatch = 2, RemoteCertificateChainErrors = 4 }
        enum EncryptionPolicy
        { RequireEncryption = 0, AllowNoEncryption = 1, NoEncryption = 2 }
    }
    namespace System.Net.HttpListener {
        interface ExtendedProtectionSelector
        { 
        (request: System.Net.HttpListenerRequest) : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy; 
        Invoke?: (request: System.Net.HttpListenerRequest) => System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy;
        }
        var ExtendedProtectionSelector: { new (func: (request: System.Net.HttpListenerRequest) => System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy): ExtendedProtectionSelector; }
    }
    namespace System.Security.Claims {
        class ClaimsIdentity extends System.Object implements System.Security.Principal.IIdentity
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Net.WebSockets {
        class WebSocketContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class HttpListenerWebSocketContext extends System.Net.WebSockets.WebSocketContext
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace tiny {
        class JavaScriptLauncher extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            public WaitForDebugger : boolean
            public DebuggerPort : number
            public DebuggerRoot : string
            public vm : Puerts.JsEnv
            public JS_update : System.Action$1<number>
            public JS_fixedUpdate : System.Action$1<number>
            public JS_lateUpdate : System.Action$1<number>
            public JS_finalize : System.Action
            public get loader(): tiny.JavaScriptLoader;
            public static get inst(): tiny.JavaScriptLauncher;
            public constructor ()
        }
        class main extends tiny.JavaScriptLauncher
        {
            protected [__keep_incompatibility]: never;
            public splash : UnityEngine.Transform
            public static Restart () : void
            public constructor ()
        }
        class JavaScriptLoader extends System.Object implements Puerts.ILoader
        {
            protected [__keep_incompatibility]: never;
            public scriptPatchDirectory : string
            public get debugRoot(): string;
            public get loaders(): System.Collections.Generic.List$1<tiny.IScriptLoader>;
            public FileExists ($filepath: string) : boolean
            public GetScriptDebugPath ($filepath: string) : string
            public ReadFile ($filepath: string, $debugpath: $Ref<string>) : string
            public Close () : void
            public constructor ($debugRoot: string)
            public constructor ()
        }
        class ScriptVersion extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static VERSION_FILE_NAME : string
            public time : bigint
            public hash : string
            public constructor ()
        }
        interface IScriptLoader
        {
            version : tiny.ScriptVersion
            FileExists ($filepath: string) : boolean
            ReadFile ($filepath: string) : string
            Close () : void
        }
        class PuertsBuiltinScriptLoader extends System.Object implements tiny.IScriptLoader
        {
            protected [__keep_incompatibility]: never;
            public get version(): tiny.ScriptVersion;
            public FileExists ($filepath: string) : boolean
            public ReadFile ($filepath: string) : string
            public Close () : void
            public constructor ()
        }
        class ScriptDirectoryLoader extends System.Object implements tiny.IScriptLoader
        {
            protected [__keep_incompatibility]: never;
            public get directory(): string;
            public get version(): tiny.ScriptVersion;
            public FileExists ($filepath: string) : boolean
            public ReadFile ($filepath: string) : string
            public Close () : void
            public Reload () : void
            public constructor ($directory: string)
            public constructor ()
        }
        class PuertsUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Bytes2Buffer ($bytes: System.Array$1<number>) : ArrayBuffer
            public constructor ()
        }
    }
    namespace Puerts {
        class JsEnv extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
        }
        interface ILoader
        {
        }
        class ArrayBuffer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public Bytes : System.Array$1<number>
            public Count : number
            public constructor ($bytes: System.Array$1<number>)
            public constructor ($bytes: System.Array$1<number>, $count: number)
            public constructor ($ptr: System.IntPtr, $length: number)
            public constructor ()
        }
    }
    namespace System.Collections.Generic.List$1 {
        class Enumerator<T> extends System.ValueType implements System.Collections.Generic.IEnumerator$1<T>, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get Current(): any;
            public MoveNext () : boolean
            public Reset () : void
            public Dispose () : void
        }
    }
}
declare module 'csharp' {
export = CS;
}
