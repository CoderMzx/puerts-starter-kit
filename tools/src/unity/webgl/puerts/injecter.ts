import fs from 'fs';
const babel = require('./babel');
import { getFiles } from '../../../utils';
import path from 'path';

export async function injectPuerts2WebGL(root: string) {
	const frameworkJS = path.join(root, 'Build/webgl.framework.js');
	const HEADER = `/* Generated by ts-game-kit */\n\n`;
	let frameworkJSContent = fs.readFileSync(frameworkJS, 'utf-8');
	if (frameworkJSContent.startsWith(HEADER)) {
		return;
	}

	let injectContent = `// 定义 global 用于兼容抖音小游戏 Android-WebGL 环境
var global = (function() { return this; })(); var window = global;
`;

	const injectJSCode = (code: string, desc: string = '') => {
		injectContent += `\n(()=>{${desc ? `// ${desc}` : ''}\n${code}\n})();\n`;
	};
	const PUERTS_JS_RESOURCES_CODE = await generateJSResources();
	injectJSCode(PUERTS_JS_RESOURCES_CODE, 'PUERTS_JS_RESOURCES 定义');
	injectJSCode(fs.readFileSync('tools/src/unity/webgl/puerts/template/puerts-runtime.js', 'utf-8'), 'puerts-runtime.js');

	
	frameworkJSContent = `${HEADER}
${injectContent}
${frameworkJSContent}
`;
	fs.writeFileSync(frameworkJS, frameworkJSContent, 'utf-8');
}

async function generateJSResources() {
	const modules = getFiles([
		'Library/PackageCache/com.tencent.puerts.core@*/Runtime/Resources/puerts/*.mjs',
		'Assets/Scripts/Resources/polyfills/puerts.tiny.mjs',
		'Assets/Scripts/Resources/polyfills/source-map-support.mjs',
		'Assets/Scripts/Resources/scripts/bootstrap.mjs',
		'Assets/Scripts/Resources/scripts/bundle.mjs'
	]);
	const codes = await Promise.all(modules.map(file => buildForBrowser(file)));
	const PUERTS_JS_RESOURCES = {} as Record<string, string>;
	for (let i = 0; i < modules.length; i++) {
		const file = modules[i];
		const code = codes[i];
		const filename = path.basename(file);
		const basename = path.basename(path.dirname(file))
		PUERTS_JS_RESOURCES[`${basename}/${filename}`] = code;
	}
	
	const PUERTS_JS_RESOURCES_CODE = `\
window.PUERTS_JS_RESOURCES = {
${Object.keys(PUERTS_JS_RESOURCES).map(resourceName => `"${resourceName}": ${PUERTS_JS_RESOURCES[resourceName]}`).join(',\n')}
};
`;
	return PUERTS_JS_RESOURCES_CODE;
}

async function buildForBrowser(file: string) {
	const src = fs.readFileSync(file, 'utf-8');
	const ret = await babel.transform(src, {
		presets: [["@babel/preset-env", { targets: { chrome: "84", esmodules: false } }]]
	});
	return `(function(exports, require, module, __filename, __dirname) {${ret.code}})`
};

